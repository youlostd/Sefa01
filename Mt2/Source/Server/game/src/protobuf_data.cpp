// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "protobuf_data.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR SyncPositionElement::SyncPositionElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncPositionElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncPositionElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncPositionElementDefaultTypeInternal() {}
  union {
    SyncPositionElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncPositionElementDefaultTypeInternal _SyncPositionElement_default_instance_;
PROTOBUF_CONSTEXPR TGuildMemberInfo::TGuildMemberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_.is_general_)*/false
  , /*decltype(_impl_.job_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.offer_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TGuildMemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TGuildMemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TGuildMemberInfoDefaultTypeInternal() {}
  union {
    TGuildMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TGuildMemberInfoDefaultTypeInternal _TGuildMemberInfo_default_instance_;
PROTOBUF_CONSTEXPR TOnlinePlayerInfo::TOnlinePlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TOnlinePlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOnlinePlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOnlinePlayerInfoDefaultTypeInternal() {}
  union {
    TOnlinePlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOnlinePlayerInfoDefaultTypeInternal _TOnlinePlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR TTargetMonsterDropInfoTable::TTargetMonsterDropInfoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_limit_)*/0u
  , /*decltype(_impl_.item_vnum_)*/0u
  , /*decltype(_impl_.item_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TTargetMonsterDropInfoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TTargetMonsterDropInfoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TTargetMonsterDropInfoTableDefaultTypeInternal() {}
  union {
    TTargetMonsterDropInfoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TTargetMonsterDropInfoTableDefaultTypeInternal _TTargetMonsterDropInfoTable_default_instance_;
PROTOBUF_CONSTEXPR TEventManagerTagTeam::TEventManagerTagTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TEventManagerTagTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TEventManagerTagTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TEventManagerTagTeamDefaultTypeInternal() {}
  union {
    TEventManagerTagTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TEventManagerTagTeamDefaultTypeInternal _TEventManagerTagTeam_default_instance_;
PROTOBUF_CONSTEXPR TCrystalProto::TCrystalProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.applies_)*/{}
  , /*decltype(_impl_.process_level_)*/0u
  , /*decltype(_impl_.clarity_type_)*/0u
  , /*decltype(_impl_.clarity_level_)*/0u
  , /*decltype(_impl_.required_fragments_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TCrystalProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TCrystalProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TCrystalProtoDefaultTypeInternal() {}
  union {
    TCrystalProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TCrystalProtoDefaultTypeInternal _TCrystalProto_default_instance_;
PROTOBUF_CONSTEXPR TMobSkillLevel::TMobSkillLevel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TMobSkillLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TMobSkillLevelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TMobSkillLevelDefaultTypeInternal() {}
  union {
    TMobSkillLevel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TMobSkillLevelDefaultTypeInternal _TMobSkillLevel_default_instance_;
PROTOBUF_CONSTEXPR TMobTable::TMobTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enchants_)*/{}
  , /*decltype(_impl_._enchants_cached_byte_size_)*/{0}
  , /*decltype(_impl_.resists_)*/{}
  , /*decltype(_impl_._resists_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.locale_name_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.folder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.battle_type_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.gold_min_)*/0u
  , /*decltype(_impl_.gold_max_)*/0u
  , /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_.max_hp_)*/0u
  , /*decltype(_impl_.regen_cycle_)*/0u
  , /*decltype(_impl_.regen_percent_)*/0u
  , /*decltype(_impl_.def_)*/0u
  , /*decltype(_impl_.ai_flag_)*/0u
  , /*decltype(_impl_.race_flag_)*/0u
  , /*decltype(_impl_.immune_flag_)*/0u
  , /*decltype(_impl_.str_)*/0u
  , /*decltype(_impl_.dex_)*/0u
  , /*decltype(_impl_.con_)*/0u
  , /*decltype(_impl_.int__)*/0u
  , /*decltype(_impl_.damage_min_)*/0u
  , /*decltype(_impl_.damage_max_)*/0u
  , /*decltype(_impl_.attack_speed_)*/0u
  , /*decltype(_impl_.moving_speed_)*/0u
  , /*decltype(_impl_.aggressive_hp_pct_)*/0u
  , /*decltype(_impl_.aggressive_sight_)*/0u
  , /*decltype(_impl_.attack_range_)*/0u
  , /*decltype(_impl_.resurrection_vnum_)*/0u
  , /*decltype(_impl_.drop_item_vnum_)*/0u
  , /*decltype(_impl_.mount_capacity_)*/0u
  , /*decltype(_impl_.on_click_type_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.dam_multiply_)*/0
  , /*decltype(_impl_.summon_vnum_)*/0u
  , /*decltype(_impl_.drain_sp_)*/0u
  , /*decltype(_impl_.mob_color_)*/0u
  , /*decltype(_impl_.polymorph_item_vnum_)*/0u
  , /*decltype(_impl_.berserk_point_)*/0u
  , /*decltype(_impl_.stone_skin_point_)*/0u
  , /*decltype(_impl_.god_speed_point_)*/0u
  , /*decltype(_impl_.death_blow_point_)*/0u
  , /*decltype(_impl_.revive_point_)*/0u
  , /*decltype(_impl_.healer_point_)*/0u
  , /*decltype(_impl_.scaling_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TMobTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TMobTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TMobTableDefaultTypeInternal() {}
  union {
    TMobTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TMobTableDefaultTypeInternal _TMobTable_default_instance_;
PROTOBUF_CONSTEXPR TRepeatedMobTable::TRepeatedMobTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRepeatedMobTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRepeatedMobTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRepeatedMobTableDefaultTypeInternal() {}
  union {
    TRepeatedMobTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRepeatedMobTableDefaultTypeInternal _TRepeatedMobTable_default_instance_;
PROTOBUF_CONSTEXPR TItemLimit::TItemLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemLimitDefaultTypeInternal() {}
  union {
    TItemLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemLimitDefaultTypeInternal _TItemLimit_default_instance_;
PROTOBUF_CONSTEXPR TItemApply::TItemApply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemApplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemApplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemApplyDefaultTypeInternal() {}
  union {
    TItemApply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemApplyDefaultTypeInternal _TItemApply_default_instance_;
PROTOBUF_CONSTEXPR TItemTable::TItemTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.limits_)*/{}
  , /*decltype(_impl_.applies_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sockets_)*/{}
  , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
  , /*decltype(_impl_.locale_name_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.vnum_range_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.sub_type_)*/0u
  , /*decltype(_impl_.weight_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.anti_flags_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.wear_flags_)*/0u
  , /*decltype(_impl_.immune_flags_)*/0u
  , /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_.shop_buy_price_)*/int64_t{0}
  , /*decltype(_impl_.refined_vnum_)*/0u
  , /*decltype(_impl_.refine_set_)*/0u
  , /*decltype(_impl_.alter_to_magic_item_pct_)*/0u
  , /*decltype(_impl_.specular_)*/0u
  , /*decltype(_impl_.gain_socket_pct_)*/0u
  , /*decltype(_impl_.addon_type_)*/0
  , /*decltype(_impl_.limit_real_time_first_use_index_)*/0
  , /*decltype(_impl_.limit_timer_based_on_wear_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemTableDefaultTypeInternal() {}
  union {
    TItemTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemTableDefaultTypeInternal _TItemTable_default_instance_;
PROTOBUF_CONSTEXPR TRepeatedItemTable::TRepeatedItemTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRepeatedItemTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRepeatedItemTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRepeatedItemTableDefaultTypeInternal() {}
  union {
    TRepeatedItemTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRepeatedItemTableDefaultTypeInternal _TRepeatedItemTable_default_instance_;
PROTOBUF_CONSTEXPR TShopTable::TShopTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.npc_vnum_)*/0u
  , /*decltype(_impl_.item_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TShopTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TShopTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TShopTableDefaultTypeInternal() {}
  union {
    TShopTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TShopTableDefaultTypeInternal _TShopTable_default_instance_;
PROTOBUF_CONSTEXPR TDataAuctionSearch_ItemType::TDataAuctionSearch_ItemType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_types_)*/{}
  , /*decltype(_impl_._sub_types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDataAuctionSearch_ItemTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDataAuctionSearch_ItemTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDataAuctionSearch_ItemTypeDefaultTypeInternal() {}
  union {
    TDataAuctionSearch_ItemType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDataAuctionSearch_ItemTypeDefaultTypeInternal _TDataAuctionSearch_ItemType_default_instance_;
PROTOBUF_CONSTEXPR TDataAuctionSearch::TDataAuctionSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.search_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.socket0_)*/0
  , /*decltype(_impl_.value0_)*/0
  , /*decltype(_impl_.include_anti_flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDataAuctionSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDataAuctionSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDataAuctionSearchDefaultTypeInternal() {}
  union {
    TDataAuctionSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDataAuctionSearchDefaultTypeInternal _TDataAuctionSearch_default_instance_;
PROTOBUF_CONSTEXPR TExtendedDataAuctionSearch::TExtendedDataAuctionSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.basic_data_)*/nullptr
  , /*decltype(_impl_.search_type_)*/0u
  , /*decltype(_impl_.level_min_)*/0u
  , /*decltype(_impl_.price_min_)*/uint64_t{0u}
  , /*decltype(_impl_.price_max_)*/uint64_t{0u}
  , /*decltype(_impl_.level_max_)*/0u
  , /*decltype(_impl_.is_only_auction_item_)*/false
  , /*decltype(_impl_.is_only_self_item_)*/false
  , /*decltype(_impl_.is_single_price_order_)*/false
  , /*decltype(_impl_.sort_order1_reversed_)*/false
  , /*decltype(_impl_.sort_order1_)*/0u
  , /*decltype(_impl_.sort_order2_)*/0u
  , /*decltype(_impl_.sort_order3_)*/0u
  , /*decltype(_impl_.sort_order2_reversed_)*/false
  , /*decltype(_impl_.sort_order3_reversed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TExtendedDataAuctionSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TExtendedDataAuctionSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TExtendedDataAuctionSearchDefaultTypeInternal() {}
  union {
    TExtendedDataAuctionSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TExtendedDataAuctionSearchDefaultTypeInternal _TExtendedDataAuctionSearch_default_instance_;
PROTOBUF_CONSTEXPR TAuctionShopHistoryElement::TAuctionShopHistoryElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buyer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/uint64_t{0u}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.date_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TAuctionShopHistoryElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TAuctionShopHistoryElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TAuctionShopHistoryElementDefaultTypeInternal() {}
  union {
    TAuctionShopHistoryElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TAuctionShopHistoryElementDefaultTypeInternal _TAuctionShopHistoryElement_default_instance_;
PROTOBUF_CONSTEXPR TSkillTable::TSkillTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_on_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sp_cost_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_sp_cost_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cooldown_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.master_bonus_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grand_master_add_sp_cost_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_on2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_poly2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_poly2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_on3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_poly3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_poly3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.splash_around_damage_adjust_poly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.max_level_)*/0u
  , /*decltype(_impl_.splash_range_)*/0u
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.affect_flag_)*/0u
  , /*decltype(_impl_.affect_flag_legendary_)*/0u
  , /*decltype(_impl_.affect_flag2_)*/0u
  , /*decltype(_impl_.affect_flag2_legendary_)*/0u
  , /*decltype(_impl_.level_step_)*/0u
  , /*decltype(_impl_.level_limit_)*/0u
  , /*decltype(_impl_.pre_skill_vnum_)*/0u
  , /*decltype(_impl_.pre_skill_level_)*/0u
  , /*decltype(_impl_.max_hit_)*/0
  , /*decltype(_impl_.skill_attr_type_)*/0u
  , /*decltype(_impl_.target_range_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSkillTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSkillTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSkillTableDefaultTypeInternal() {}
  union {
    TSkillTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSkillTableDefaultTypeInternal _TSkillTable_default_instance_;
PROTOBUF_CONSTEXPR TRefineMaterial::TRefineMaterial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRefineMaterialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRefineMaterialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRefineMaterialDefaultTypeInternal() {}
  union {
    TRefineMaterial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRefineMaterialDefaultTypeInternal _TRefineMaterial_default_instance_;
PROTOBUF_CONSTEXPR TSwitchbotTable::TSwitchbotTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attrs_)*/{}
  , /*decltype(_impl_.premium_attrs_)*/{}
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.inv_cell_)*/0u
  , /*decltype(_impl_.switcher_used_)*/0u
  , /*decltype(_impl_.use_premium_)*/false
  , /*decltype(_impl_.finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSwitchbotTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSwitchbotTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSwitchbotTableDefaultTypeInternal() {}
  union {
    TSwitchbotTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSwitchbotTableDefaultTypeInternal _TSwitchbotTable_default_instance_;
PROTOBUF_CONSTEXPR TRefineTable::TRefineTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.material_count_)*/0u
  , /*decltype(_impl_.cost_)*/int64_t{0}
  , /*decltype(_impl_.prob_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRefineTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRefineTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRefineTableDefaultTypeInternal() {}
  union {
    TRefineTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRefineTableDefaultTypeInternal _TRefineTable_default_instance_;
PROTOBUF_CONSTEXPR TWikiRefineInfo::TWikiRefineInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_.mat_count_)*/0u
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TWikiRefineInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TWikiRefineInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TWikiRefineInfoDefaultTypeInternal() {}
  union {
    TWikiRefineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TWikiRefineInfoDefaultTypeInternal _TWikiRefineInfo_default_instance_;
PROTOBUF_CONSTEXPR TWikiChestDropInfo::TWikiChestDropInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_start_)*/0u
  , /*decltype(_impl_.vnum_end_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TWikiChestDropInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TWikiChestDropInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TWikiChestDropInfoDefaultTypeInternal() {}
  union {
    TWikiChestDropInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TWikiChestDropInfoDefaultTypeInternal _TWikiChestDropInfo_default_instance_;
PROTOBUF_CONSTEXPR TWikiItemOriginInfo::TWikiItemOriginInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.is_mob_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TWikiItemOriginInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TWikiItemOriginInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TWikiItemOriginInfoDefaultTypeInternal() {}
  union {
    TWikiItemOriginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TWikiItemOriginInfoDefaultTypeInternal _TWikiItemOriginInfo_default_instance_;
PROTOBUF_CONSTEXPR TWikiInfoTable::TWikiInfoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refine_infos_)*/{}
  , /*decltype(_impl_.chest_infos_)*/{}
  , /*decltype(_impl_.is_common_)*/false
  , /*decltype(_impl_.origin_vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TWikiInfoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TWikiInfoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TWikiInfoTableDefaultTypeInternal() {}
  union {
    TWikiInfoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TWikiInfoTableDefaultTypeInternal _TWikiInfoTable_default_instance_;
PROTOBUF_CONSTEXPR TItemAttrTable::TItemAttrTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.max_level_by_set_)*/{}
  , /*decltype(_impl_._max_level_by_set_cached_byte_size_)*/{0}
  , /*decltype(_impl_.apply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apply_index_)*/0u
  , /*decltype(_impl_.prob_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemAttrTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemAttrTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemAttrTableDefaultTypeInternal() {}
  union {
    TItemAttrTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemAttrTableDefaultTypeInternal _TItemAttrTable_default_instance_;
PROTOBUF_CONSTEXPR TGuildLadderInfo::TGuildLadderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.ladder_points_)*/0u
  , /*decltype(_impl_.min_member_)*/0u
  , /*decltype(_impl_.max_member_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TGuildLadderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TGuildLadderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TGuildLadderInfoDefaultTypeInternal() {}
  union {
    TGuildLadderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TGuildLadderInfoDefaultTypeInternal _TGuildLadderInfo_default_instance_;
PROTOBUF_CONSTEXPR TBuildingLand::TBuildingLand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.guild_level_limit_)*/0u
  , /*decltype(_impl_.price_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TBuildingLandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TBuildingLandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TBuildingLandDefaultTypeInternal() {}
  union {
    TBuildingLand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TBuildingLandDefaultTypeInternal _TBuildingLand_default_instance_;
PROTOBUF_CONSTEXPR TBuildingObjectMaterial::TBuildingObjectMaterial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TBuildingObjectMaterialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TBuildingObjectMaterialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TBuildingObjectMaterialDefaultTypeInternal() {}
  union {
    TBuildingObjectMaterial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TBuildingObjectMaterialDefaultTypeInternal _TBuildingObjectMaterial_default_instance_;
PROTOBUF_CONSTEXPR TBuildingObjectProto::TBuildingObjectProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_.region_)*/{}
  , /*decltype(_impl_._region_cached_byte_size_)*/{0}
  , /*decltype(_impl_.price_)*/int64_t{0}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.upgrade_vnum_)*/0u
  , /*decltype(_impl_.upgrade_limit_time_)*/0u
  , /*decltype(_impl_.life_)*/0
  , /*decltype(_impl_.npc_vnum_)*/0u
  , /*decltype(_impl_.npc_x_)*/0
  , /*decltype(_impl_.npc_y_)*/0
  , /*decltype(_impl_.group_vnum_)*/0u
  , /*decltype(_impl_.depend_on_group_vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TBuildingObjectProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TBuildingObjectProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TBuildingObjectProtoDefaultTypeInternal() {}
  union {
    TBuildingObjectProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TBuildingObjectProtoDefaultTypeInternal _TBuildingObjectProto_default_instance_;
PROTOBUF_CONSTEXPR TBuildingObject::TBuildingObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.land_id_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.x_rot_)*/0
  , /*decltype(_impl_.y_rot_)*/0
  , /*decltype(_impl_.z_rot_)*/0
  , /*decltype(_impl_.life_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TBuildingObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TBuildingObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TBuildingObjectDefaultTypeInternal() {}
  union {
    TBuildingObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TBuildingObjectDefaultTypeInternal _TBuildingObject_default_instance_;
PROTOBUF_CONSTEXPR TGuildSafeboxInitial::TGuildSafeboxInitial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TGuildSafeboxInitialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TGuildSafeboxInitialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TGuildSafeboxInitialDefaultTypeInternal() {}
  union {
    TGuildSafeboxInitial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TGuildSafeboxInitialDefaultTypeInternal _TGuildSafeboxInitial_default_instance_;
PROTOBUF_CONSTEXPR THorseUpgradeProto::THorseUpgradeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upgrade_type_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.level_limit_)*/0u
  , /*decltype(_impl_.refine_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct THorseUpgradeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR THorseUpgradeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~THorseUpgradeProtoDefaultTypeInternal() {}
  union {
    THorseUpgradeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 THorseUpgradeProtoDefaultTypeInternal _THorseUpgradeProto_default_instance_;
PROTOBUF_CONSTEXPR THorseBonusProto::THorseBonusProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.max_hp_)*/0u
  , /*decltype(_impl_.max_hp_item_)*/0u
  , /*decltype(_impl_.armor_pct_)*/0u
  , /*decltype(_impl_.armor_item_)*/0u
  , /*decltype(_impl_.monster_pct_)*/0u
  , /*decltype(_impl_.monster_item_)*/0u
  , /*decltype(_impl_.item_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct THorseBonusProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR THorseBonusProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~THorseBonusProtoDefaultTypeInternal() {}
  union {
    THorseBonusProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 THorseBonusProtoDefaultTypeInternal _THorseBonusProto_default_instance_;
PROTOBUF_CONSTEXPR TGayaShopData::TGayaShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.price_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TGayaShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TGayaShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TGayaShopDataDefaultTypeInternal() {}
  union {
    TGayaShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TGayaShopDataDefaultTypeInternal _TGayaShopData_default_instance_;
PROTOBUF_CONSTEXPR TAttrtreeProto::TAttrtreeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refine_level_)*/{}
  , /*decltype(_impl_._refine_level_cached_byte_size_)*/{0}
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.col_)*/0u
  , /*decltype(_impl_.apply_type_)*/0u
  , /*decltype(_impl_.max_apply_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TAttrtreeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TAttrtreeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TAttrtreeProtoDefaultTypeInternal() {}
  union {
    TAttrtreeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TAttrtreeProtoDefaultTypeInternal _TAttrtreeProto_default_instance_;
PROTOBUF_CONSTEXPR TRuneProtoTable::TRuneProtoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apply_eval_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.group_)*/0u
  , /*decltype(_impl_.sub_group_)*/0u
  , /*decltype(_impl_.apply_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRuneProtoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRuneProtoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRuneProtoTableDefaultTypeInternal() {}
  union {
    TRuneProtoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRuneProtoTableDefaultTypeInternal _TRuneProtoTable_default_instance_;
PROTOBUF_CONSTEXPR TRunePointProtoTable::TRunePointProtoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/0u
  , /*decltype(_impl_.refine_proto_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRunePointProtoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRunePointProtoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRunePointProtoTableDefaultTypeInternal() {}
  union {
    TRunePointProtoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRunePointProtoTableDefaultTypeInternal _TRunePointProtoTable_default_instance_;
PROTOBUF_CONSTEXPR TXmasRewards::TXmasRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TXmasRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TXmasRewardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TXmasRewardsDefaultTypeInternal() {}
  union {
    TXmasRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TXmasRewardsDefaultTypeInternal _TXmasRewards_default_instance_;
PROTOBUF_CONSTEXPR TSoulProtoTable::TSoulProtoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apply_values_)*/{}
  , /*decltype(_impl_._apply_values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.soul_type_)*/0u
  , /*decltype(_impl_.apply_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSoulProtoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSoulProtoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSoulProtoTableDefaultTypeInternal() {}
  union {
    TSoulProtoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSoulProtoTableDefaultTypeInternal _TSoulProtoTable_default_instance_;
PROTOBUF_CONSTEXPR TItemIDRangeTable::TItemIDRangeTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_id_)*/0u
  , /*decltype(_impl_.max_id_)*/0u
  , /*decltype(_impl_.usable_item_id_min_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemIDRangeTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemIDRangeTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemIDRangeTableDefaultTypeInternal() {}
  union {
    TItemIDRangeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemIDRangeTableDefaultTypeInternal _TItemIDRangeTable_default_instance_;
PROTOBUF_CONSTEXPR TBattlepassData::TBattlepassData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.reward_vnum_)*/0u
  , /*decltype(_impl_.reward_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TBattlepassDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TBattlepassDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TBattlepassDataDefaultTypeInternal() {}
  union {
    TBattlepassData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TBattlepassDataDefaultTypeInternal _TBattlepassData_default_instance_;
PROTOBUF_CONSTEXPR TAdminInfo::TAdminInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.authority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TAdminInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TAdminInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TAdminInfoDefaultTypeInternal() {}
  union {
    TAdminInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TAdminInfoDefaultTypeInternal _TAdminInfo_default_instance_;
PROTOBUF_CONSTEXPR TOfflineMessage::TOfflineMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_gm_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TOfflineMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOfflineMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOfflineMessageDefaultTypeInternal() {}
  union {
    TOfflineMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOfflineMessageDefaultTypeInternal _TOfflineMessage_default_instance_;
PROTOBUF_CONSTEXPR TGuildSafeboxLogTable::TGuildSafeboxLogTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TGuildSafeboxLogTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TGuildSafeboxLogTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TGuildSafeboxLogTableDefaultTypeInternal() {}
  union {
    TGuildSafeboxLogTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TGuildSafeboxLogTableDefaultTypeInternal _TGuildSafeboxLogTable_default_instance_;
PROTOBUF_CONSTEXPR TMapLocation::TMapLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_._maps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TMapLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TMapLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TMapLocationDefaultTypeInternal() {}
  union {
    TMapLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TMapLocationDefaultTypeInternal _TMapLocation_default_instance_;
PROTOBUF_CONSTEXPR TEquipmentChangerTable::TEquipmentChangerTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_._item_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.page_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.rune_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TEquipmentChangerTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TEquipmentChangerTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TEquipmentChangerTableDefaultTypeInternal() {}
  union {
    TEquipmentChangerTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TEquipmentChangerTableDefaultTypeInternal _TEquipmentChangerTable_default_instance_;
PROTOBUF_CONSTEXPR TEquipmentPageInfo::TEquipmentPageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_cells_)*/{}
  , /*decltype(_impl_._item_cells_cached_byte_size_)*/{0}
  , /*decltype(_impl_.page_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rune_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TEquipmentPageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TEquipmentPageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TEquipmentPageInfoDefaultTypeInternal() {}
  union {
    TEquipmentPageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TEquipmentPageInfoDefaultTypeInternal _TEquipmentPageInfo_default_instance_;
PROTOBUF_CONSTEXPR TCombatZoneRankingPlayer::TCombatZoneRankingPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.points_)*/0u
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TCombatZoneRankingPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TCombatZoneRankingPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TCombatZoneRankingPlayerDefaultTypeInternal() {}
  union {
    TCombatZoneRankingPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TCombatZoneRankingPlayerDefaultTypeInternal _TCombatZoneRankingPlayer_default_instance_;
PROTOBUF_CONSTEXPR TSimplePlayer::TSimplePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.job_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.play_minutes_)*/0u
  , /*decltype(_impl_.st_)*/0u
  , /*decltype(_impl_.ht_)*/0u
  , /*decltype(_impl_.dx_)*/0u
  , /*decltype(_impl_.iq_)*/0u
  , /*decltype(_impl_.main_part_)*/0u
  , /*decltype(_impl_.hair_part_)*/0u
  , /*decltype(_impl_.acce_part_)*/0u
  , /*decltype(_impl_.change_name_)*/false
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.addr_)*/0
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.skill_group_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.hair_base_part_)*/0u
  , /*decltype(_impl_.last_playtime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSimplePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSimplePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSimplePlayerDefaultTypeInternal() {}
  union {
    TSimplePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSimplePlayerDefaultTypeInternal _TSimplePlayer_default_instance_;
PROTOBUF_CONSTEXPR TAccountTable::TAccountTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hwid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.social_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hwid2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.tradeblock_)*/0u
  , /*decltype(_impl_.hwid2ban_)*/0u
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_.coins_)*/false
  , /*decltype(_impl_.temp_login_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TAccountTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TAccountTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TAccountTableDefaultTypeInternal() {}
  union {
    TAccountTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TAccountTableDefaultTypeInternal _TAccountTable_default_instance_;
PROTOBUF_CONSTEXPR TItemPriceInfo::TItemPriceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/int64_t{0}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemPriceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemPriceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemPriceInfoDefaultTypeInternal() {}
  union {
    TItemPriceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemPriceInfoDefaultTypeInternal _TItemPriceInfo_default_instance_;
PROTOBUF_CONSTEXPR TChannelStatus::TChannelStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TChannelStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TChannelStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TChannelStatusDefaultTypeInternal() {}
  union {
    TChannelStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TChannelStatusDefaultTypeInternal _TChannelStatus_default_instance_;
PROTOBUF_CONSTEXPR TPacketLoginOnSetup::TPacketLoginOnSetup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_keys_)*/{}
  , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.social_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.login_key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPacketLoginOnSetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPacketLoginOnSetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPacketLoginOnSetupDefaultTypeInternal() {}
  union {
    TPacketLoginOnSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPacketLoginOnSetupDefaultTypeInternal _TPacketLoginOnSetup_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_data_2eproto[55];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const uint32_t TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::SyncPositionElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::SyncPositionElement, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::SyncPositionElement, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::SyncPositionElement, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.grade_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.is_general_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildMemberInfo, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TOnlinePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TOnlinePlayerInfo, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::TOnlinePlayerInfo, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::TOnlinePlayerInfo, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TTargetMonsterDropInfoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TTargetMonsterDropInfoTable, _impl_.level_limit_),
  PROTOBUF_FIELD_OFFSET(::network::TTargetMonsterDropInfoTable, _impl_.item_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TTargetMonsterDropInfoTable, _impl_.item_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TEventManagerTagTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TEventManagerTagTeam, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::TEventManagerTagTeam, _impl_.name1_),
  PROTOBUF_FIELD_OFFSET(::network::TEventManagerTagTeam, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::TEventManagerTagTeam, _impl_.name2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TCrystalProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TCrystalProto, _impl_.process_level_),
  PROTOBUF_FIELD_OFFSET(::network::TCrystalProto, _impl_.clarity_type_),
  PROTOBUF_FIELD_OFFSET(::network::TCrystalProto, _impl_.clarity_level_),
  PROTOBUF_FIELD_OFFSET(::network::TCrystalProto, _impl_.applies_),
  PROTOBUF_FIELD_OFFSET(::network::TCrystalProto, _impl_.required_fragments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TMobSkillLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TMobSkillLevel, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TMobSkillLevel, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.battle_type_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.gold_min_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.gold_max_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.regen_cycle_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.regen_percent_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.def_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.ai_flag_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.race_flag_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.immune_flag_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.str_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.dex_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.con_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.int__),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.damage_min_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.damage_max_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.moving_speed_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.aggressive_hp_pct_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.aggressive_sight_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.attack_range_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.enchants_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.resists_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.resurrection_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.drop_item_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.mount_capacity_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.on_click_type_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.folder_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.dam_multiply_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.summon_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.drain_sp_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.mob_color_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.polymorph_item_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.berserk_point_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.stone_skin_point_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.god_speed_point_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.death_blow_point_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.revive_point_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.healer_point_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.scaling_size_),
  PROTOBUF_FIELD_OFFSET(::network::TMobTable, _impl_.locale_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TRepeatedMobTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TRepeatedMobTable, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemLimit, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemLimit, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemApply, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemApply, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.vnum_range_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.anti_flags_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.wear_flags_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.immune_flags_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.shop_buy_price_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.limits_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.applies_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.sockets_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.refined_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.refine_set_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.alter_to_magic_item_pct_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.specular_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.gain_socket_pct_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.addon_type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.limit_real_time_first_use_index_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.limit_timer_based_on_wear_index_),
  PROTOBUF_FIELD_OFFSET(::network::TItemTable, _impl_.locale_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TRepeatedItemTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TRepeatedItemTable, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TShopTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TShopTable, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TShopTable, _impl_.npc_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TShopTable, _impl_.item_count_),
  PROTOBUF_FIELD_OFFSET(::network::TShopTable, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch_ItemType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch_ItemType, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch_ItemType, _impl_.sub_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch, _impl_.search_text_),
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch, _impl_.types_),
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch, _impl_.socket0_),
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch, _impl_.value0_),
  PROTOBUF_FIELD_OFFSET(::network::TDataAuctionSearch, _impl_.include_anti_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.basic_data_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.search_type_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.level_min_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.level_max_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.price_min_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.price_max_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.is_only_auction_item_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.is_only_self_item_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.is_single_price_order_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.sort_order1_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.sort_order1_reversed_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.sort_order2_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.sort_order2_reversed_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.sort_order3_),
  PROTOBUF_FIELD_OFFSET(::network::TExtendedDataAuctionSearch, _impl_.sort_order3_reversed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TAuctionShopHistoryElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TAuctionShopHistoryElement, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TAuctionShopHistoryElement, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::network::TAuctionShopHistoryElement, _impl_.buyer_),
  PROTOBUF_FIELD_OFFSET(::network::TAuctionShopHistoryElement, _impl_.date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.max_level_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.splash_range_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.point_on_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.point_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.sp_cost_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.duration_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.duration_sp_cost_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.cooldown_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.master_bonus_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.grand_master_add_sp_cost_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.affect_flag_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.affect_flag_legendary_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.point_on2_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.point_poly2_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.duration_poly2_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.affect_flag2_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.affect_flag2_legendary_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.point_on3_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.point_poly3_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.duration_poly3_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.level_step_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.level_limit_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.pre_skill_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.pre_skill_level_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.max_hit_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.splash_around_damage_adjust_poly_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.skill_attr_type_),
  PROTOBUF_FIELD_OFFSET(::network::TSkillTable, _impl_.target_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TRefineMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TRefineMaterial, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TRefineMaterial, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.inv_cell_),
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.switcher_used_),
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.attrs_),
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.premium_attrs_),
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.use_premium_),
  PROTOBUF_FIELD_OFFSET(::network::TSwitchbotTable, _impl_.finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TRefineTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TRefineTable, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TRefineTable, _impl_.material_count_),
  PROTOBUF_FIELD_OFFSET(::network::TRefineTable, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::network::TRefineTable, _impl_.prob_),
  PROTOBUF_FIELD_OFFSET(::network::TRefineTable, _impl_.materials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TWikiRefineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TWikiRefineInfo, _impl_.materials_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiRefineInfo, _impl_.mat_count_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiRefineInfo, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TWikiChestDropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TWikiChestDropInfo, _impl_.vnum_start_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiChestDropInfo, _impl_.vnum_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TWikiItemOriginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TWikiItemOriginInfo, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiItemOriginInfo, _impl_.is_mob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TWikiInfoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TWikiInfoTable, _impl_.refine_infos_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiInfoTable, _impl_.chest_infos_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiInfoTable, _impl_.is_common_),
  PROTOBUF_FIELD_OFFSET(::network::TWikiInfoTable, _impl_.origin_vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemAttrTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemAttrTable, _impl_.apply_),
  PROTOBUF_FIELD_OFFSET(::network::TItemAttrTable, _impl_.apply_index_),
  PROTOBUF_FIELD_OFFSET(::network::TItemAttrTable, _impl_.prob_),
  PROTOBUF_FIELD_OFFSET(::network::TItemAttrTable, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::network::TItemAttrTable, _impl_.max_level_by_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TGuildLadderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TGuildLadderInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildLadderInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildLadderInfo, _impl_.ladder_points_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildLadderInfo, _impl_.min_member_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildLadderInfo, _impl_.max_member_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.guild_level_limit_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingLand, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectMaterial, _impl_.item_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectMaterial, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.materials_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.upgrade_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.upgrade_limit_time_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.life_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.npc_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.npc_x_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.npc_y_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.group_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObjectProto, _impl_.depend_on_group_vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.land_id_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.x_rot_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.y_rot_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.z_rot_),
  PROTOBUF_FIELD_OFFSET(::network::TBuildingObject, _impl_.life_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxInitial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxInitial, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxInitial, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxInitial, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxInitial, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::THorseUpgradeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::THorseUpgradeProto, _impl_.upgrade_type_),
  PROTOBUF_FIELD_OFFSET(::network::THorseUpgradeProto, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::THorseUpgradeProto, _impl_.level_limit_),
  PROTOBUF_FIELD_OFFSET(::network::THorseUpgradeProto, _impl_.refine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.max_hp_item_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.armor_pct_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.armor_item_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.monster_pct_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.monster_item_),
  PROTOBUF_FIELD_OFFSET(::network::THorseBonusProto, _impl_.item_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TGayaShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TGayaShopData, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::TGayaShopData, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TGayaShopData, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::network::TGayaShopData, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TAttrtreeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TAttrtreeProto, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::network::TAttrtreeProto, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::network::TAttrtreeProto, _impl_.apply_type_),
  PROTOBUF_FIELD_OFFSET(::network::TAttrtreeProto, _impl_.max_apply_value_),
  PROTOBUF_FIELD_OFFSET(::network::TAttrtreeProto, _impl_.refine_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _impl_.sub_group_),
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _impl_.apply_type_),
  PROTOBUF_FIELD_OFFSET(::network::TRuneProtoTable, _impl_.apply_eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TRunePointProtoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TRunePointProtoTable, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::network::TRunePointProtoTable, _impl_.refine_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TXmasRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TXmasRewards, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::network::TXmasRewards, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TXmasRewards, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TSoulProtoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TSoulProtoTable, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TSoulProtoTable, _impl_.soul_type_),
  PROTOBUF_FIELD_OFFSET(::network::TSoulProtoTable, _impl_.apply_type_),
  PROTOBUF_FIELD_OFFSET(::network::TSoulProtoTable, _impl_.apply_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemIDRangeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemIDRangeTable, _impl_.min_id_),
  PROTOBUF_FIELD_OFFSET(::network::TItemIDRangeTable, _impl_.max_id_),
  PROTOBUF_FIELD_OFFSET(::network::TItemIDRangeTable, _impl_.usable_item_id_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TBattlepassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TBattlepassData, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::network::TBattlepassData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TBattlepassData, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::network::TBattlepassData, _impl_.reward_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TBattlepassData, _impl_.reward_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TAdminInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TAdminInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TAdminInfo, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::network::TAdminInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TAdminInfo, _impl_.authority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TOfflineMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TOfflineMessage, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::network::TOfflineMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::TOfflineMessage, _impl_.is_gm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::TGuildSafeboxLogTable, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TMapLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TMapLocation, _impl_.maps_),
  PROTOBUF_FIELD_OFFSET(::network::TMapLocation, _impl_.host_name_),
  PROTOBUF_FIELD_OFFSET(::network::TMapLocation, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::network::TMapLocation, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentChangerTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentChangerTable, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentChangerTable, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentChangerTable, _impl_.page_name_),
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentChangerTable, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentChangerTable, _impl_.rune_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentPageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentPageInfo, _impl_.page_name_),
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentPageInfo, _impl_.item_cells_),
  PROTOBUF_FIELD_OFFSET(::network::TEquipmentPageInfo, _impl_.rune_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TCombatZoneRankingPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TCombatZoneRankingPlayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TCombatZoneRankingPlayer, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::TCombatZoneRankingPlayer, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::network::TCombatZoneRankingPlayer, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.play_minutes_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.st_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.ht_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.dx_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.iq_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.main_part_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.hair_part_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.acce_part_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.change_name_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.skill_group_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.guild_name_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.hair_base_part_),
  PROTOBUF_FIELD_OFFSET(::network::TSimplePlayer, _impl_.last_playtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.passwd_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.hwid_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.social_id_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.tradeblock_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.hwid2ban_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.hwid2_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.coins_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::TAccountTable, _impl_.temp_login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemPriceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemPriceInfo, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TItemPriceInfo, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TChannelStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TChannelStatus, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::network::TChannelStatus, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _impl_.social_id_),
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::network::TPacketLoginOnSetup, _impl_.client_keys_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::SyncPositionElement)},
  { 9, -1, -1, sizeof(::network::TGuildMemberInfo)},
  { 22, -1, -1, sizeof(::network::TOnlinePlayerInfo)},
  { 31, -1, -1, sizeof(::network::TTargetMonsterDropInfoTable)},
  { 40, -1, -1, sizeof(::network::TEventManagerTagTeam)},
  { 50, -1, -1, sizeof(::network::TCrystalProto)},
  { 61, -1, -1, sizeof(::network::TMobSkillLevel)},
  { 69, -1, -1, sizeof(::network::TMobTable)},
  { 125, -1, -1, sizeof(::network::TRepeatedMobTable)},
  { 132, -1, -1, sizeof(::network::TItemLimit)},
  { 140, -1, -1, sizeof(::network::TItemApply)},
  { 148, -1, -1, sizeof(::network::TItemTable)},
  { 180, -1, -1, sizeof(::network::TRepeatedItemTable)},
  { 187, -1, -1, sizeof(::network::TShopTable)},
  { 197, -1, -1, sizeof(::network::TDataAuctionSearch_ItemType)},
  { 205, -1, -1, sizeof(::network::TDataAuctionSearch)},
  { 216, -1, -1, sizeof(::network::TExtendedDataAuctionSearch)},
  { 237, -1, -1, sizeof(::network::TAuctionShopHistoryElement)},
  { 247, -1, -1, sizeof(::network::TSkillTable)},
  { 285, -1, -1, sizeof(::network::TRefineMaterial)},
  { 293, -1, -1, sizeof(::network::TSwitchbotTable)},
  { 306, -1, -1, sizeof(::network::TRefineTable)},
  { 317, -1, -1, sizeof(::network::TWikiRefineInfo)},
  { 326, -1, -1, sizeof(::network::TWikiChestDropInfo)},
  { 334, -1, -1, sizeof(::network::TWikiItemOriginInfo)},
  { 342, -1, -1, sizeof(::network::TWikiInfoTable)},
  { 352, -1, -1, sizeof(::network::TItemAttrTable)},
  { 363, -1, -1, sizeof(::network::TGuildLadderInfo)},
  { 374, -1, -1, sizeof(::network::TBuildingLand)},
  { 389, -1, -1, sizeof(::network::TBuildingObjectMaterial)},
  { 397, -1, -1, sizeof(::network::TBuildingObjectProto)},
  { 415, -1, -1, sizeof(::network::TBuildingObject)},
  { 431, -1, -1, sizeof(::network::TGuildSafeboxInitial)},
  { 441, -1, -1, sizeof(::network::THorseUpgradeProto)},
  { 451, -1, -1, sizeof(::network::THorseBonusProto)},
  { 465, -1, -1, sizeof(::network::TGayaShopData)},
  { 475, -1, -1, sizeof(::network::TAttrtreeProto)},
  { 486, -1, -1, sizeof(::network::TRuneProtoTable)},
  { 498, -1, -1, sizeof(::network::TRunePointProtoTable)},
  { 506, -1, -1, sizeof(::network::TXmasRewards)},
  { 515, -1, -1, sizeof(::network::TSoulProtoTable)},
  { 525, -1, -1, sizeof(::network::TItemIDRangeTable)},
  { 534, -1, -1, sizeof(::network::TBattlepassData)},
  { 545, -1, -1, sizeof(::network::TAdminInfo)},
  { 555, -1, -1, sizeof(::network::TOfflineMessage)},
  { 564, -1, -1, sizeof(::network::TGuildSafeboxLogTable)},
  { 576, -1, -1, sizeof(::network::TMapLocation)},
  { 586, -1, -1, sizeof(::network::TEquipmentChangerTable)},
  { 597, -1, -1, sizeof(::network::TEquipmentPageInfo)},
  { 606, -1, -1, sizeof(::network::TCombatZoneRankingPlayer)},
  { 616, -1, -1, sizeof(::network::TSimplePlayer)},
  { 644, -1, -1, sizeof(::network::TAccountTable)},
  { 664, -1, -1, sizeof(::network::TItemPriceInfo)},
  { 672, -1, -1, sizeof(::network::TChannelStatus)},
  { 680, -1, -1, sizeof(::network::TPacketLoginOnSetup)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_SyncPositionElement_default_instance_._instance,
  &::network::_TGuildMemberInfo_default_instance_._instance,
  &::network::_TOnlinePlayerInfo_default_instance_._instance,
  &::network::_TTargetMonsterDropInfoTable_default_instance_._instance,
  &::network::_TEventManagerTagTeam_default_instance_._instance,
  &::network::_TCrystalProto_default_instance_._instance,
  &::network::_TMobSkillLevel_default_instance_._instance,
  &::network::_TMobTable_default_instance_._instance,
  &::network::_TRepeatedMobTable_default_instance_._instance,
  &::network::_TItemLimit_default_instance_._instance,
  &::network::_TItemApply_default_instance_._instance,
  &::network::_TItemTable_default_instance_._instance,
  &::network::_TRepeatedItemTable_default_instance_._instance,
  &::network::_TShopTable_default_instance_._instance,
  &::network::_TDataAuctionSearch_ItemType_default_instance_._instance,
  &::network::_TDataAuctionSearch_default_instance_._instance,
  &::network::_TExtendedDataAuctionSearch_default_instance_._instance,
  &::network::_TAuctionShopHistoryElement_default_instance_._instance,
  &::network::_TSkillTable_default_instance_._instance,
  &::network::_TRefineMaterial_default_instance_._instance,
  &::network::_TSwitchbotTable_default_instance_._instance,
  &::network::_TRefineTable_default_instance_._instance,
  &::network::_TWikiRefineInfo_default_instance_._instance,
  &::network::_TWikiChestDropInfo_default_instance_._instance,
  &::network::_TWikiItemOriginInfo_default_instance_._instance,
  &::network::_TWikiInfoTable_default_instance_._instance,
  &::network::_TItemAttrTable_default_instance_._instance,
  &::network::_TGuildLadderInfo_default_instance_._instance,
  &::network::_TBuildingLand_default_instance_._instance,
  &::network::_TBuildingObjectMaterial_default_instance_._instance,
  &::network::_TBuildingObjectProto_default_instance_._instance,
  &::network::_TBuildingObject_default_instance_._instance,
  &::network::_TGuildSafeboxInitial_default_instance_._instance,
  &::network::_THorseUpgradeProto_default_instance_._instance,
  &::network::_THorseBonusProto_default_instance_._instance,
  &::network::_TGayaShopData_default_instance_._instance,
  &::network::_TAttrtreeProto_default_instance_._instance,
  &::network::_TRuneProtoTable_default_instance_._instance,
  &::network::_TRunePointProtoTable_default_instance_._instance,
  &::network::_TXmasRewards_default_instance_._instance,
  &::network::_TSoulProtoTable_default_instance_._instance,
  &::network::_TItemIDRangeTable_default_instance_._instance,
  &::network::_TBattlepassData_default_instance_._instance,
  &::network::_TAdminInfo_default_instance_._instance,
  &::network::_TOfflineMessage_default_instance_._instance,
  &::network::_TGuildSafeboxLogTable_default_instance_._instance,
  &::network::_TMapLocation_default_instance_._instance,
  &::network::_TEquipmentChangerTable_default_instance_._instance,
  &::network::_TEquipmentPageInfo_default_instance_._instance,
  &::network::_TCombatZoneRankingPlayer_default_instance_._instance,
  &::network::_TSimplePlayer_default_instance_._instance,
  &::network::_TAccountTable_default_instance_._instance,
  &::network::_TItemPriceInfo_default_instance_._instance,
  &::network::_TChannelStatus_default_instance_._instance,
  &::network::_TPacketLoginOnSetup_default_instance_._instance,
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\022\007network\032\017data_item.proto\"8"
  "\n\023SyncPositionElement\022\013\n\003vid\030\001 \001(\r\022\t\n\001x\030"
  "\002 \001(\r\022\t\n\001y\030\003 \001(\r\"{\n\020TGuildMemberInfo\022\013\n\003"
  "pid\030\001 \001(\r\022\r\n\005grade\030\002 \001(\r\022\022\n\nis_general\030\003"
  " \001(\010\022\013\n\003job\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005offe"
  "r\030\006 \001(\r\022\014\n\004name\030\007 \001(\014\"D\n\021TOnlinePlayerIn"
  "fo\022\013\n\003pid\030\001 \001(\r\022\021\n\tmap_index\030\002 \001(\r\022\017\n\007ch"
  "annel\030\003 \001(\r\"Y\n\033TTargetMonsterDropInfoTab"
  "le\022\023\n\013level_limit\030\001 \001(\r\022\021\n\titem_vnum\030\002 \001"
  "(\r\022\022\n\nitem_count\030\003 \001(\r\"P\n\024TEventManagerT"
  "agTeam\022\014\n\004pid1\030\001 \001(\r\022\r\n\005name1\030\002 \001(\014\022\014\n\004p"
  "id2\030\003 \001(\r\022\r\n\005name2\030\004 \001(\014\"\231\001\n\rTCrystalPro"
  "to\022\025\n\rprocess_level\030\001 \001(\r\022\024\n\014clarity_typ"
  "e\030\002 \001(\r\022\025\n\rclarity_level\030\003 \001(\r\022(\n\007applie"
  "s\030\004 \003(\0132\027.network.TItemAttribute\022\032\n\022requ"
  "ired_fragments\030\005 \001(\r\"-\n\016TMobSkillLevel\022\014"
  "\n\004vnum\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"\361\007\n\tTMobTabl"
  "e\022\014\n\004vnum\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\014\n\004type\030\003 "
  "\001(\r\022\014\n\004rank\030\004 \001(\r\022\023\n\013battle_type\030\005 \001(\r\022\r"
  "\n\005level\030\006 \001(\r\022\014\n\004size\030\007 \001(\r\022\020\n\010gold_min\030"
  "\010 \001(\r\022\020\n\010gold_max\030\t \001(\r\022\013\n\003exp\030\n \001(\r\022\016\n\006"
  "max_hp\030\013 \001(\r\022\023\n\013regen_cycle\030\014 \001(\r\022\025\n\rreg"
  "en_percent\030\r \001(\r\022\013\n\003def\030\016 \001(\r\022\017\n\007ai_flag"
  "\030\017 \001(\r\022\021\n\trace_flag\030\020 \001(\r\022\023\n\013immune_flag"
  "\030\021 \001(\r\022\013\n\003str\030\022 \001(\r\022\013\n\003dex\030\023 \001(\r\022\013\n\003con\030"
  "\024 \001(\r\022\013\n\003int\030\025 \001(\r\022\022\n\ndamage_min\030\026 \001(\r\022\022"
  "\n\ndamage_max\030\027 \001(\r\022\024\n\014attack_speed\030\030 \001(\r"
  "\022\024\n\014moving_speed\030\031 \001(\r\022\031\n\021aggressive_hp_"
  "pct\030\032 \001(\r\022\030\n\020aggressive_sight\030\033 \001(\r\022\024\n\014a"
  "ttack_range\030\034 \001(\r\022\020\n\010enchants\030\035 \003(\005\022\017\n\007r"
  "esists\030\036 \003(\005\022\031\n\021resurrection_vnum\030\037 \001(\r\022"
  "\026\n\016drop_item_vnum\030  \001(\r\022\026\n\016mount_capacit"
  "y\030! \001(\r\022\025\n\ron_click_type\030\" \001(\r\022\016\n\006empire"
  "\030# \001(\r\022\016\n\006folder\030$ \001(\014\022\024\n\014dam_multiply\030%"
  " \001(\002\022\023\n\013summon_vnum\030& \001(\r\022\020\n\010drain_sp\030\' "
  "\001(\r\022\021\n\tmob_color\030( \001(\r\022\033\n\023polymorph_item"
  "_vnum\030) \001(\r\022\'\n\006skills\030* \003(\0132\027.network.TM"
  "obSkillLevel\022\025\n\rberserk_point\030+ \001(\r\022\030\n\020s"
  "tone_skin_point\030, \001(\r\022\027\n\017god_speed_point"
  "\030- \001(\r\022\030\n\020death_blow_point\030. \001(\r\022\024\n\014revi"
  "ve_point\030/ \001(\r\022\024\n\014healer_point\0300 \001(\r\022\024\n\014"
  "scaling_size\0301 \001(\002\022\023\n\013locale_name\0302 \003(\014\""
  "5\n\021TRepeatedMobTable\022 \n\004data\030\001 \003(\0132\022.net"
  "work.TMobTable\")\n\nTItemLimit\022\014\n\004type\030\001 \001"
  "(\r\022\r\n\005value\030\002 \001(\005\")\n\nTItemApply\022\014\n\004type\030"
  "\001 \001(\r\022\r\n\005value\030\002 \001(\005\"\312\004\n\nTItemTable\022\014\n\004v"
  "num\030\001 \001(\r\022\022\n\nvnum_range\030\002 \001(\r\022\014\n\004name\030\003 "
  "\001(\014\022\014\n\004type\030\004 \001(\r\022\020\n\010sub_type\030\005 \001(\r\022\016\n\006w"
  "eight\030\006 \001(\r\022\014\n\004size\030\007 \001(\r\022\022\n\nanti_flags\030"
  "\010 \001(\r\022\r\n\005flags\030\t \001(\r\022\022\n\nwear_flags\030\n \001(\r"
  "\022\024\n\014immune_flags\030\013 \001(\r\022\014\n\004gold\030\014 \001(\003\022\026\n\016"
  "shop_buy_price\030\r \001(\003\022#\n\006limits\030\016 \003(\0132\023.n"
  "etwork.TItemLimit\022$\n\007applies\030\017 \003(\0132\023.net"
  "work.TItemApply\022\016\n\006values\030\020 \003(\005\022\017\n\007socke"
  "ts\030\021 \003(\005\022\024\n\014refined_vnum\030\022 \001(\r\022\022\n\nrefine"
  "_set\030\023 \001(\r\022\037\n\027alter_to_magic_item_pct\030\024 "
  "\001(\r\022\020\n\010specular\030\025 \001(\r\022\027\n\017gain_socket_pct"
  "\030\026 \001(\r\022\022\n\naddon_type\030\027 \001(\021\022\'\n\037limit_real"
  "_time_first_use_index\030\030 \001(\021\022\'\n\037limit_tim"
  "er_based_on_wear_index\030\031 \001(\021\022\023\n\013locale_n"
  "ame\030\032 \003(\014\"7\n\022TRepeatedItemTable\022!\n\004data\030"
  "\001 \003(\0132\023.network.TItemTable\"h\n\nTShopTable"
  "\022\014\n\004vnum\030\001 \001(\r\022\020\n\010npc_vnum\030\002 \001(\r\022\022\n\nitem"
  "_count\030\003 \001(\r\022&\n\005items\030\004 \003(\0132\027.network.TS"
  "hopItemTable\"\307\001\n\022TDataAuctionSearch\022\023\n\013s"
  "earch_text\030\001 \001(\014\0223\n\005types\030\002 \003(\0132$.networ"
  "k.TDataAuctionSearch.ItemType\022\017\n\007socket0"
  "\030\003 \001(\021\022\016\n\006value0\030\004 \001(\021\022\031\n\021include_anti_f"
  "lag\030\005 \001(\r\032+\n\010ItemType\022\014\n\004type\030\001 \001(\r\022\021\n\ts"
  "ub_types\030\002 \003(\r\"\237\003\n\032TExtendedDataAuctionS"
  "earch\022/\n\nbasic_data\030\001 \001(\0132\033.network.TDat"
  "aAuctionSearch\022\023\n\013search_type\030\002 \001(\r\022\021\n\tl"
  "evel_min\030\003 \001(\r\022\021\n\tlevel_max\030\004 \001(\r\022\021\n\tpri"
  "ce_min\030\005 \001(\004\022\021\n\tprice_max\030\006 \001(\004\022\034\n\024is_on"
  "ly_auction_item\030\007 \001(\010\022\031\n\021is_only_self_it"
  "em\030\010 \001(\010\022\035\n\025is_single_price_order\030\t \001(\010\022"
  "\023\n\013sort_order1\030\n \001(\r\022\034\n\024sort_order1_reve"
  "rsed\030\013 \001(\010\022\023\n\013sort_order2\030\014 \001(\r\022\034\n\024sort_"
  "order2_reversed\030\r \001(\010\022\023\n\013sort_order3\030\016 \001"
  "(\r\022\034\n\024sort_order3_reversed\030\017 \001(\010\"V\n\032TAuc"
  "tionShopHistoryElement\022\014\n\004vnum\030\001 \001(\r\022\r\n\005"
  "price\030\002 \001(\004\022\r\n\005buyer\030\003 \001(\014\022\014\n\004date\030\004 \001(\r"
  "\"\347\005\n\013TSkillTable\022\014\n\004vnum\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\014\022\014\n\004type\030\003 \001(\r\022\021\n\tmax_level\030\004 \001(\r\022\024\n"
  "\014splash_range\030\005 \001(\r\022\020\n\010point_on\030\006 \001(\014\022\022\n"
  "\npoint_poly\030\007 \001(\014\022\024\n\014sp_cost_poly\030\010 \001(\014\022"
  "\025\n\rduration_poly\030\t \001(\014\022\035\n\025duration_sp_co"
  "st_poly\030\n \001(\014\022\025\n\rcooldown_poly\030\013 \001(\014\022\031\n\021"
  "master_bonus_poly\030\014 \001(\014\022%\n\035grand_master_"
  "add_sp_cost_poly\030\r \001(\014\022\014\n\004flag\030\016 \001(\r\022\023\n\013"
  "affect_flag\030\017 \001(\r\022\035\n\025affect_flag_legenda"
  "ry\030\020 \001(\r\022\021\n\tpoint_on2\030\021 \001(\014\022\023\n\013point_pol"
  "y2\030\022 \001(\014\022\026\n\016duration_poly2\030\023 \001(\014\022\024\n\014affe"
  "ct_flag2\030\024 \001(\r\022\036\n\026affect_flag2_legendary"
  "\030\025 \001(\r\022\021\n\tpoint_on3\030\026 \001(\014\022\023\n\013point_poly3"
  "\030\027 \001(\014\022\026\n\016duration_poly3\030\030 \001(\014\022\022\n\nlevel_"
  "step\030\031 \001(\r\022\023\n\013level_limit\030\032 \001(\r\022\026\n\016pre_s"
  "kill_vnum\030\033 \001(\r\022\027\n\017pre_skill_level\030\034 \001(\r"
  "\022\017\n\007max_hit\030\035 \001(\005\022(\n splash_around_damag"
  "e_adjust_poly\030\036 \001(\014\022\027\n\017skill_attr_type\030\037"
  " \001(\r\022\024\n\014target_range\030  \001(\r\".\n\017TRefineMat"
  "erial\022\014\n\004vnum\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"\312\001\n\017T"
  "SwitchbotTable\022\017\n\007item_id\030\001 \001(\r\022\020\n\010inv_c"
  "ell\030\002 \001(\r\022\025\n\rswitcher_used\030\003 \001(\r\022&\n\005attr"
  "s\030\004 \003(\0132\027.network.TItemAttribute\022.\n\rprem"
  "ium_attrs\030\005 \003(\0132\027.network.TItemAttribute"
  "\022\023\n\013use_premium\030\006 \001(\010\022\020\n\010finished\030\007 \001(\010\""
  "{\n\014TRefineTable\022\n\n\002id\030\001 \001(\r\022\026\n\016material_"
  "count\030\002 \001(\r\022\014\n\004cost\030\003 \001(\003\022\014\n\004prob\030\004 \001(\r\022"
  "+\n\tmaterials\030\005 \003(\0132\030.network.TRefineMate"
  "rial\"`\n\017TWikiRefineInfo\022+\n\tmaterials\030\001 \003"
  "(\0132\030.network.TRefineMaterial\022\021\n\tmat_coun"
  "t\030\002 \001(\r\022\r\n\005price\030\003 \001(\005\":\n\022TWikiChestDrop"
  "Info\022\022\n\nvnum_start\030\001 \001(\r\022\020\n\010vnum_end\030\002 \001"
  "(\r\"3\n\023TWikiItemOriginInfo\022\014\n\004vnum\030\001 \001(\r\022"
  "\016\n\006is_mob\030\002 \001(\010\"\232\001\n\016TWikiInfoTable\022.\n\014re"
  "fine_infos\030\001 \003(\0132\030.network.TWikiRefineIn"
  "fo\0220\n\013chest_infos\030\002 \003(\0132\033.network.TWikiC"
  "hestDropInfo\022\021\n\tis_common\030\003 \001(\010\022\023\n\013origi"
  "n_vnum\030\004 \001(\r\"l\n\016TItemAttrTable\022\r\n\005apply\030"
  "\001 \001(\014\022\023\n\013apply_index\030\002 \001(\r\022\014\n\004prob\030\003 \001(\r"
  "\022\016\n\006values\030\004 \003(\005\022\030\n\020max_level_by_set\030\005 \003"
  "(\r\"n\n\020TGuildLadderInfo\022\014\n\004name\030\001 \001(\014\022\r\n\005"
  "level\030\002 \001(\r\022\025\n\rladder_points\030\003 \001(\r\022\022\n\nmi"
  "n_member\030\004 \001(\r\022\022\n\nmax_member\030\005 \001(\r\"\237\001\n\rT"
  "BuildingLand\022\n\n\002id\030\001 \001(\r\022\021\n\tmap_index\030\002 "
  "\001(\r\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\r\n\005width\030\005 \001(\r"
  "\022\016\n\006height\030\006 \001(\r\022\020\n\010guild_id\030\007 \001(\r\022\031\n\021gu"
  "ild_level_limit\030\010 \001(\r\022\r\n\005price\030\t \001(\003\";\n\027"
  "TBuildingObjectMaterial\022\021\n\titem_vnum\030\001 \001"
  "(\r\022\r\n\005count\030\002 \001(\r\"\232\002\n\024TBuildingObjectPro"
  "to\022\014\n\004vnum\030\001 \001(\r\022\r\n\005price\030\002 \001(\003\0223\n\tmater"
  "ials\030\003 \003(\0132 .network.TBuildingObjectMate"
  "rial\022\024\n\014upgrade_vnum\030\004 \001(\r\022\032\n\022upgrade_li"
  "mit_time\030\005 \001(\r\022\014\n\004life\030\006 \001(\005\022\016\n\006region\030\007"
  " \003(\005\022\020\n\010npc_vnum\030\010 \001(\r\022\r\n\005npc_x\030\t \001(\005\022\r\n"
  "\005npc_y\030\n \001(\005\022\022\n\ngroup_vnum\030\013 \001(\r\022\034\n\024depe"
  "nd_on_group_vnum\030\014 \001(\r\"\240\001\n\017TBuildingObje"
  "ct\022\n\n\002id\030\001 \001(\r\022\017\n\007land_id\030\002 \001(\r\022\014\n\004vnum\030"
  "\003 \001(\r\022\021\n\tmap_index\030\004 \001(\r\022\t\n\001x\030\005 \001(\005\022\t\n\001y"
  "\030\006 \001(\005\022\r\n\005x_rot\030\007 \001(\002\022\r\n\005y_rot\030\010 \001(\002\022\r\n\005"
  "z_rot\030\t \001(\002\022\014\n\004life\030\n \001(\005\"V\n\024TGuildSafeb"
  "oxInitial\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004size\030\002 \001("
  "\r\022\020\n\010password\030\003 \001(\014\022\014\n\004gold\030\004 \001(\004\"a\n\022THo"
  "rseUpgradeProto\022\024\n\014upgrade_type\030\001 \001(\r\022\r\n"
  "\005level\030\002 \001(\r\022\023\n\013level_limit\030\003 \001(\r\022\021\n\tref"
  "ine_id\030\004 \001(\r\"\254\001\n\020THorseBonusProto\022\r\n\005lev"
  "el\030\001 \001(\r\022\016\n\006max_hp\030\002 \001(\r\022\023\n\013max_hp_item\030"
  "\003 \001(\r\022\021\n\tarmor_pct\030\004 \001(\r\022\022\n\narmor_item\030\005"
  " \001(\r\022\023\n\013monster_pct\030\006 \001(\r\022\024\n\014monster_ite"
  "m\030\007 \001(\r\022\022\n\nitem_count\030\010 \001(\r\"H\n\rTGayaShop"
  "Data\022\013\n\003pos\030\001 \001(\r\022\014\n\004vnum\030\002 \001(\r\022\r\n\005count"
  "\030\003 \001(\r\022\r\n\005price\030\004 \001(\r\"m\n\016TAttrtreeProto\022"
  "\013\n\003row\030\001 \001(\r\022\013\n\003col\030\002 \001(\r\022\022\n\napply_type\030"
  "\003 \001(\r\022\027\n\017max_apply_value\030\004 \001(\005\022\024\n\014refine"
  "_level\030\005 \003(\r\"w\n\017TRuneProtoTable\022\014\n\004vnum\030"
  "\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005group\030\003 \001(\r\022\021\n\tsu"
  "b_group\030\004 \001(\r\022\022\n\napply_type\030\005 \001(\r\022\022\n\napp"
  "ly_eval\030\006 \001(\014\";\n\024TRunePointProtoTable\022\r\n"
  "\005point\030\001 \001(\r\022\024\n\014refine_proto\030\002 \001(\r\"8\n\014TX"
  "masRewards\022\013\n\003day\030\001 \001(\r\022\014\n\004vnum\030\002 \001(\r\022\r\n"
  "\005count\030\003 \001(\r\"\\\n\017TSoulProtoTable\022\014\n\004vnum\030"
  "\001 \001(\r\022\021\n\tsoul_type\030\002 \001(\r\022\022\n\napply_type\030\003"
  " \001(\r\022\024\n\014apply_values\030\004 \003(\005\"O\n\021TItemIDRan"
  "geTable\022\016\n\006min_id\030\001 \001(\r\022\016\n\006max_id\030\002 \001(\r\022"
  "\032\n\022usable_item_id_min\030\003 \001(\r\"j\n\017TBattlepa"
  "ssData\022\020\n\010progress\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\014"
  "\n\004task\030\003 \001(\014\022\023\n\013reward_vnum\030\004 \001(\r\022\024\n\014rew"
  "ard_count\030\005 \001(\r\"J\n\nTAdminInfo\022\n\n\002id\030\001 \001("
  "\005\022\017\n\007account\030\002 \001(\014\022\014\n\004name\030\003 \001(\014\022\021\n\tauth"
  "ority\030\004 \001(\005\"A\n\017TOfflineMessage\022\016\n\006sender"
  "\030\001 \001(\014\022\017\n\007message\030\002 \001(\014\022\r\n\005is_gm\030\003 \001(\010\"\205"
  "\001\n\025TGuildSafeboxLogTable\022\014\n\004type\030\001 \001(\r\022\013"
  "\n\003pid\030\002 \001(\r\022\023\n\013player_name\030\003 \001(\014\022 \n\004item"
  "\030\004 \001(\0132\022.network.TItemData\022\014\n\004gold\030\005 \001(\004"
  "\022\014\n\004time\030\006 \001(\r\"N\n\014TMapLocation\022\014\n\004maps\030\001"
  " \003(\r\022\021\n\thost_name\030\002 \001(\014\022\014\n\004port\030\003 \001(\r\022\017\n"
  "\007channel\030\004 \001(\r\"l\n\026TEquipmentChangerTable"
  "\022\013\n\003pid\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\021\n\tpage_nam"
  "e\030\003 \001(\014\022\020\n\010item_ids\030\004 \003(\r\022\021\n\trune_page\030\005"
  " \001(\r\"N\n\022TEquipmentPageInfo\022\021\n\tpage_name\030"
  "\001 \001(\014\022\022\n\nitem_cells\030\002 \003(\021\022\021\n\trune_page\030\003"
  " \001(\r\"V\n\030TCombatZoneRankingPlayer\022\014\n\004name"
  "\030\001 \001(\014\022\016\n\006empire\030\002 \001(\r\022\016\n\006points\030\003 \001(\r\022\014"
  "\n\004rank\030\004 \001(\r\"\365\002\n\rTSimplePlayer\022\n\n\002id\030\001 \001"
  "(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003job\030\003 \001(\r\022\r\n\005level\030\004"
  " \001(\r\022\024\n\014play_minutes\030\005 \001(\r\022\n\n\002st\030\006 \001(\r\022\n"
  "\n\002ht\030\007 \001(\r\022\n\n\002dx\030\010 \001(\r\022\n\n\002iq\030\t \001(\r\022\021\n\tma"
  "in_part\030\n \001(\r\022\021\n\thair_part\030\013 \001(\r\022\021\n\tacce"
  "_part\030\014 \001(\r\022\023\n\013change_name\030\r \001(\010\022\t\n\001x\030\016 "
  "\001(\005\022\t\n\001y\030\017 \001(\005\022\014\n\004addr\030\020 \001(\005\022\014\n\004port\030\021 \001"
  "(\r\022\023\n\013skill_group\030\022 \001(\r\022\020\n\010guild_id\030\023 \001("
  "\r\022\022\n\nguild_name\030\024 \001(\014\022\026\n\016hair_base_part\030"
  "\025 \001(\r\022\025\n\rlast_playtime\030\026 \001(\r\"\216\002\n\rTAccoun"
  "tTable\022\n\n\002id\030\001 \001(\r\022\r\n\005login\030\002 \001(\014\022\016\n\006pas"
  "swd\030\003 \001(\014\022\014\n\004hwid\030\004 \001(\014\022\021\n\tsocial_id\030\005 \001"
  "(\014\022\016\n\006status\030\006 \001(\014\022\016\n\006empire\030\007 \001(\r\022\'\n\007pl"
  "ayers\030\010 \003(\0132\026.network.TSimplePlayer\022\022\n\nt"
  "radeblock\030\t \001(\r\022\020\n\010hwid2ban\030\n \001(\r\022\r\n\005hwi"
  "d2\030\013 \001(\014\022\r\n\005coins\030\014 \001(\010\022\020\n\010language\030\r \001("
  "\r\022\022\n\ntemp_login\030\016 \001(\010\"-\n\016TItemPriceInfo\022"
  "\014\n\004vnum\030\001 \001(\r\022\r\n\005price\030\002 \001(\003\".\n\016TChannel"
  "Status\022\014\n\004port\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\"y\n\023"
  "TPacketLoginOnSetup\022\n\n\002id\030\001 \001(\r\022\r\n\005login"
  "\030\002 \001(\014\022\021\n\tsocial_id\030\003 \001(\014\022\014\n\004host\030\004 \001(\014\022"
  "\021\n\tlogin_key\030\005 \001(\r\022\023\n\013client_keys\030\006 \003(\rb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_data_2eproto_deps[1] = {
  &::descriptor_table_data_5fitem_2eproto,
};
static ::_pbi::once_flag descriptor_table_data_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_2eproto = {
    false, false, 8247, descriptor_table_protodef_data_2eproto,
    "data.proto",
    &descriptor_table_data_2eproto_once, descriptor_table_data_2eproto_deps, 1, 55,
    schemas, file_default_instances, TableStruct_data_2eproto::offsets,
    file_level_metadata_data_2eproto, file_level_enum_descriptors_data_2eproto,
    file_level_service_descriptors_data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_2eproto_getter() {
  return &descriptor_table_data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_2eproto(&descriptor_table_data_2eproto);
namespace network {

// ===================================================================

class SyncPositionElement::_Internal {
 public:
};

SyncPositionElement::SyncPositionElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.SyncPositionElement)
}
SyncPositionElement::SyncPositionElement(const SyncPositionElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncPositionElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.SyncPositionElement)
}

inline void SyncPositionElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncPositionElement::~SyncPositionElement() {
  // @@protoc_insertion_point(destructor:network.SyncPositionElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncPositionElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncPositionElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncPositionElement::Clear() {
// @@protoc_insertion_point(message_clear_start:network.SyncPositionElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPositionElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncPositionElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.SyncPositionElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.SyncPositionElement)
  return target;
}

size_t SyncPositionElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.SyncPositionElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncPositionElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncPositionElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncPositionElement::GetClassData() const { return &_class_data_; }


void SyncPositionElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncPositionElement*>(&to_msg);
  auto& from = static_cast<const SyncPositionElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.SyncPositionElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncPositionElement::CopyFrom(const SyncPositionElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.SyncPositionElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPositionElement::IsInitialized() const {
  return true;
}

void SyncPositionElement::InternalSwap(SyncPositionElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPositionElement, _impl_.y_)
      + sizeof(SyncPositionElement::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(SyncPositionElement, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPositionElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[0]);
}

// ===================================================================

class TGuildMemberInfo::_Internal {
 public:
};

TGuildMemberInfo::TGuildMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TGuildMemberInfo)
}
TGuildMemberInfo::TGuildMemberInfo(const TGuildMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TGuildMemberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.grade_){}
    , decltype(_impl_.is_general_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.offer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offer_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.offer_));
  // @@protoc_insertion_point(copy_constructor:network.TGuildMemberInfo)
}

inline void TGuildMemberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.grade_){0u}
    , decltype(_impl_.is_general_){false}
    , decltype(_impl_.job_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.offer_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TGuildMemberInfo::~TGuildMemberInfo() {
  // @@protoc_insertion_point(destructor:network.TGuildMemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TGuildMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TGuildMemberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TGuildMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TGuildMemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offer_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.offer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TGuildMemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_general = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_general_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 job = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.offer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TGuildMemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TGuildMemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grade(), target);
  }

  // bool is_general = 3;
  if (this->_internal_is_general() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_general(), target);
  }

  // uint32 job = 4;
  if (this->_internal_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_job(), target);
  }

  // uint32 level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // uint32 offer = 6;
  if (this->_internal_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offer(), target);
  }

  // bytes name = 7;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TGuildMemberInfo)
  return target;
}

size_t TGuildMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TGuildMemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 7;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  // bool is_general = 3;
  if (this->_internal_is_general() != 0) {
    total_size += 1 + 1;
  }

  // uint32 job = 4;
  if (this->_internal_job() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_job());
  }

  // uint32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 offer = 6;
  if (this->_internal_offer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TGuildMemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TGuildMemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TGuildMemberInfo::GetClassData() const { return &_class_data_; }


void TGuildMemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TGuildMemberInfo*>(&to_msg);
  auto& from = static_cast<const TGuildMemberInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TGuildMemberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_is_general() != 0) {
    _this->_internal_set_is_general(from._internal_is_general());
  }
  if (from._internal_job() != 0) {
    _this->_internal_set_job(from._internal_job());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_offer() != 0) {
    _this->_internal_set_offer(from._internal_offer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TGuildMemberInfo::CopyFrom(const TGuildMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TGuildMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildMemberInfo::IsInitialized() const {
  return true;
}

void TGuildMemberInfo::InternalSwap(TGuildMemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TGuildMemberInfo, _impl_.offer_)
      + sizeof(TGuildMemberInfo::_impl_.offer_)
      - PROTOBUF_FIELD_OFFSET(TGuildMemberInfo, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TGuildMemberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[1]);
}

// ===================================================================

class TOnlinePlayerInfo::_Internal {
 public:
};

TOnlinePlayerInfo::TOnlinePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TOnlinePlayerInfo)
}
TOnlinePlayerInfo::TOnlinePlayerInfo(const TOnlinePlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOnlinePlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:network.TOnlinePlayerInfo)
}

inline void TOnlinePlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TOnlinePlayerInfo::~TOnlinePlayerInfo() {
  // @@protoc_insertion_point(destructor:network.TOnlinePlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOnlinePlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TOnlinePlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOnlinePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TOnlinePlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOnlinePlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOnlinePlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TOnlinePlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TOnlinePlayerInfo)
  return target;
}

size_t TOnlinePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TOnlinePlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOnlinePlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOnlinePlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOnlinePlayerInfo::GetClassData() const { return &_class_data_; }


void TOnlinePlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOnlinePlayerInfo*>(&to_msg);
  auto& from = static_cast<const TOnlinePlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TOnlinePlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOnlinePlayerInfo::CopyFrom(const TOnlinePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TOnlinePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOnlinePlayerInfo::IsInitialized() const {
  return true;
}

void TOnlinePlayerInfo::InternalSwap(TOnlinePlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOnlinePlayerInfo, _impl_.channel_)
      + sizeof(TOnlinePlayerInfo::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(TOnlinePlayerInfo, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOnlinePlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[2]);
}

// ===================================================================

class TTargetMonsterDropInfoTable::_Internal {
 public:
};

TTargetMonsterDropInfoTable::TTargetMonsterDropInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TTargetMonsterDropInfoTable)
}
TTargetMonsterDropInfoTable::TTargetMonsterDropInfoTable(const TTargetMonsterDropInfoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TTargetMonsterDropInfoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_limit_){}
    , decltype(_impl_.item_vnum_){}
    , decltype(_impl_.item_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_limit_, &from._impl_.level_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_count_) -
    reinterpret_cast<char*>(&_impl_.level_limit_)) + sizeof(_impl_.item_count_));
  // @@protoc_insertion_point(copy_constructor:network.TTargetMonsterDropInfoTable)
}

inline void TTargetMonsterDropInfoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_limit_){0u}
    , decltype(_impl_.item_vnum_){0u}
    , decltype(_impl_.item_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TTargetMonsterDropInfoTable::~TTargetMonsterDropInfoTable() {
  // @@protoc_insertion_point(destructor:network.TTargetMonsterDropInfoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TTargetMonsterDropInfoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TTargetMonsterDropInfoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TTargetMonsterDropInfoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TTargetMonsterDropInfoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_count_) -
      reinterpret_cast<char*>(&_impl_.level_limit_)) + sizeof(_impl_.item_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TTargetMonsterDropInfoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 level_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TTargetMonsterDropInfoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TTargetMonsterDropInfoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_limit = 1;
  if (this->_internal_level_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level_limit(), target);
  }

  // uint32 item_vnum = 2;
  if (this->_internal_item_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_vnum(), target);
  }

  // uint32 item_count = 3;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TTargetMonsterDropInfoTable)
  return target;
}

size_t TTargetMonsterDropInfoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TTargetMonsterDropInfoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level_limit = 1;
  if (this->_internal_level_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level_limit());
  }

  // uint32 item_vnum = 2;
  if (this->_internal_item_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_vnum());
  }

  // uint32 item_count = 3;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TTargetMonsterDropInfoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TTargetMonsterDropInfoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TTargetMonsterDropInfoTable::GetClassData() const { return &_class_data_; }


void TTargetMonsterDropInfoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TTargetMonsterDropInfoTable*>(&to_msg);
  auto& from = static_cast<const TTargetMonsterDropInfoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TTargetMonsterDropInfoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level_limit() != 0) {
    _this->_internal_set_level_limit(from._internal_level_limit());
  }
  if (from._internal_item_vnum() != 0) {
    _this->_internal_set_item_vnum(from._internal_item_vnum());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TTargetMonsterDropInfoTable::CopyFrom(const TTargetMonsterDropInfoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TTargetMonsterDropInfoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTargetMonsterDropInfoTable::IsInitialized() const {
  return true;
}

void TTargetMonsterDropInfoTable::InternalSwap(TTargetMonsterDropInfoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TTargetMonsterDropInfoTable, _impl_.item_count_)
      + sizeof(TTargetMonsterDropInfoTable::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(TTargetMonsterDropInfoTable, _impl_.level_limit_)>(
          reinterpret_cast<char*>(&_impl_.level_limit_),
          reinterpret_cast<char*>(&other->_impl_.level_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TTargetMonsterDropInfoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[3]);
}

// ===================================================================

class TEventManagerTagTeam::_Internal {
 public:
};

TEventManagerTagTeam::TEventManagerTagTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TEventManagerTagTeam)
}
TEventManagerTagTeam::TEventManagerTagTeam(const TEventManagerTagTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TEventManagerTagTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name1_){}
    , decltype(_impl_.name2_){}
    , decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name1().empty()) {
    _this->_impl_.name1_.Set(from._internal_name1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name2().empty()) {
    _this->_impl_.name2_.Set(from._internal_name2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.TEventManagerTagTeam)
}

inline void TEventManagerTagTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name1_){}
    , decltype(_impl_.name2_){}
    , decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TEventManagerTagTeam::~TEventManagerTagTeam() {
  // @@protoc_insertion_point(destructor:network.TEventManagerTagTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TEventManagerTagTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name1_.Destroy();
  _impl_.name2_.Destroy();
}

void TEventManagerTagTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TEventManagerTagTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TEventManagerTagTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name1_.ClearToEmpty();
  _impl_.name2_.ClearToEmpty();
  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TEventManagerTagTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TEventManagerTagTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TEventManagerTagTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // bytes name1 = 2;
  if (!this->_internal_name1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name1(), target);
  }

  // uint32 pid2 = 3;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid2(), target);
  }

  // bytes name2 = 4;
  if (!this->_internal_name2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TEventManagerTagTeam)
  return target;
}

size_t TEventManagerTagTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TEventManagerTagTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name1 = 2;
  if (!this->_internal_name1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name1());
  }

  // bytes name2 = 4;
  if (!this->_internal_name2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name2());
  }

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 3;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TEventManagerTagTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TEventManagerTagTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TEventManagerTagTeam::GetClassData() const { return &_class_data_; }


void TEventManagerTagTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TEventManagerTagTeam*>(&to_msg);
  auto& from = static_cast<const TEventManagerTagTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TEventManagerTagTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name1().empty()) {
    _this->_internal_set_name1(from._internal_name1());
  }
  if (!from._internal_name2().empty()) {
    _this->_internal_set_name2(from._internal_name2());
  }
  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TEventManagerTagTeam::CopyFrom(const TEventManagerTagTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TEventManagerTagTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEventManagerTagTeam::IsInitialized() const {
  return true;
}

void TEventManagerTagTeam::InternalSwap(TEventManagerTagTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name1_, lhs_arena,
      &other->_impl_.name1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name2_, lhs_arena,
      &other->_impl_.name2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TEventManagerTagTeam, _impl_.pid2_)
      + sizeof(TEventManagerTagTeam::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(TEventManagerTagTeam, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TEventManagerTagTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[4]);
}

// ===================================================================

class TCrystalProto::_Internal {
 public:
};

void TCrystalProto::clear_applies() {
  _impl_.applies_.Clear();
}
TCrystalProto::TCrystalProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TCrystalProto)
}
TCrystalProto::TCrystalProto(const TCrystalProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TCrystalProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.applies_){from._impl_.applies_}
    , decltype(_impl_.process_level_){}
    , decltype(_impl_.clarity_type_){}
    , decltype(_impl_.clarity_level_){}
    , decltype(_impl_.required_fragments_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.process_level_, &from._impl_.process_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_fragments_) -
    reinterpret_cast<char*>(&_impl_.process_level_)) + sizeof(_impl_.required_fragments_));
  // @@protoc_insertion_point(copy_constructor:network.TCrystalProto)
}

inline void TCrystalProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.applies_){arena}
    , decltype(_impl_.process_level_){0u}
    , decltype(_impl_.clarity_type_){0u}
    , decltype(_impl_.clarity_level_){0u}
    , decltype(_impl_.required_fragments_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TCrystalProto::~TCrystalProto() {
  // @@protoc_insertion_point(destructor:network.TCrystalProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TCrystalProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.applies_.~RepeatedPtrField();
}

void TCrystalProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TCrystalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TCrystalProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.applies_.Clear();
  ::memset(&_impl_.process_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.required_fragments_) -
      reinterpret_cast<char*>(&_impl_.process_level_)) + sizeof(_impl_.required_fragments_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TCrystalProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 process_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.process_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clarity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clarity_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clarity_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.clarity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttribute applies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 required_fragments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.required_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TCrystalProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TCrystalProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 process_level = 1;
  if (this->_internal_process_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_process_level(), target);
  }

  // uint32 clarity_type = 2;
  if (this->_internal_clarity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_clarity_type(), target);
  }

  // uint32 clarity_level = 3;
  if (this->_internal_clarity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_clarity_level(), target);
  }

  // repeated .network.TItemAttribute applies = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_applies_size()); i < n; i++) {
    const auto& repfield = this->_internal_applies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 required_fragments = 5;
  if (this->_internal_required_fragments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_required_fragments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TCrystalProto)
  return target;
}

size_t TCrystalProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TCrystalProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemAttribute applies = 4;
  total_size += 1UL * this->_internal_applies_size();
  for (const auto& msg : this->_impl_.applies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 process_level = 1;
  if (this->_internal_process_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_process_level());
  }

  // uint32 clarity_type = 2;
  if (this->_internal_clarity_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clarity_type());
  }

  // uint32 clarity_level = 3;
  if (this->_internal_clarity_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clarity_level());
  }

  // uint32 required_fragments = 5;
  if (this->_internal_required_fragments() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_required_fragments());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TCrystalProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TCrystalProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TCrystalProto::GetClassData() const { return &_class_data_; }


void TCrystalProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TCrystalProto*>(&to_msg);
  auto& from = static_cast<const TCrystalProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TCrystalProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.applies_.MergeFrom(from._impl_.applies_);
  if (from._internal_process_level() != 0) {
    _this->_internal_set_process_level(from._internal_process_level());
  }
  if (from._internal_clarity_type() != 0) {
    _this->_internal_set_clarity_type(from._internal_clarity_type());
  }
  if (from._internal_clarity_level() != 0) {
    _this->_internal_set_clarity_level(from._internal_clarity_level());
  }
  if (from._internal_required_fragments() != 0) {
    _this->_internal_set_required_fragments(from._internal_required_fragments());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TCrystalProto::CopyFrom(const TCrystalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TCrystalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrystalProto::IsInitialized() const {
  return true;
}

void TCrystalProto::InternalSwap(TCrystalProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.applies_.InternalSwap(&other->_impl_.applies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TCrystalProto, _impl_.required_fragments_)
      + sizeof(TCrystalProto::_impl_.required_fragments_)
      - PROTOBUF_FIELD_OFFSET(TCrystalProto, _impl_.process_level_)>(
          reinterpret_cast<char*>(&_impl_.process_level_),
          reinterpret_cast<char*>(&other->_impl_.process_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TCrystalProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[5]);
}

// ===================================================================

class TMobSkillLevel::_Internal {
 public:
};

TMobSkillLevel::TMobSkillLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TMobSkillLevel)
}
TMobSkillLevel::TMobSkillLevel(const TMobSkillLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TMobSkillLevel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:network.TMobSkillLevel)
}

inline void TMobSkillLevel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TMobSkillLevel::~TMobSkillLevel() {
  // @@protoc_insertion_point(destructor:network.TMobSkillLevel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TMobSkillLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TMobSkillLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TMobSkillLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TMobSkillLevel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TMobSkillLevel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TMobSkillLevel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TMobSkillLevel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TMobSkillLevel)
  return target;
}

size_t TMobSkillLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TMobSkillLevel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TMobSkillLevel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TMobSkillLevel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TMobSkillLevel::GetClassData() const { return &_class_data_; }


void TMobSkillLevel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TMobSkillLevel*>(&to_msg);
  auto& from = static_cast<const TMobSkillLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TMobSkillLevel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TMobSkillLevel::CopyFrom(const TMobSkillLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TMobSkillLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMobSkillLevel::IsInitialized() const {
  return true;
}

void TMobSkillLevel::InternalSwap(TMobSkillLevel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TMobSkillLevel, _impl_.level_)
      + sizeof(TMobSkillLevel::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TMobSkillLevel, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TMobSkillLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[6]);
}

// ===================================================================

class TMobTable::_Internal {
 public:
};

TMobTable::TMobTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TMobTable)
}
TMobTable::TMobTable(const TMobTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TMobTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enchants_){from._impl_.enchants_}
    , /*decltype(_impl_._enchants_cached_byte_size_)*/{0}
    , decltype(_impl_.resists_){from._impl_.resists_}
    , /*decltype(_impl_._resists_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.locale_name_){from._impl_.locale_name_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.folder_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.battle_type_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.gold_min_){}
    , decltype(_impl_.gold_max_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.max_hp_){}
    , decltype(_impl_.regen_cycle_){}
    , decltype(_impl_.regen_percent_){}
    , decltype(_impl_.def_){}
    , decltype(_impl_.ai_flag_){}
    , decltype(_impl_.race_flag_){}
    , decltype(_impl_.immune_flag_){}
    , decltype(_impl_.str_){}
    , decltype(_impl_.dex_){}
    , decltype(_impl_.con_){}
    , decltype(_impl_.int__){}
    , decltype(_impl_.damage_min_){}
    , decltype(_impl_.damage_max_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.moving_speed_){}
    , decltype(_impl_.aggressive_hp_pct_){}
    , decltype(_impl_.aggressive_sight_){}
    , decltype(_impl_.attack_range_){}
    , decltype(_impl_.resurrection_vnum_){}
    , decltype(_impl_.drop_item_vnum_){}
    , decltype(_impl_.mount_capacity_){}
    , decltype(_impl_.on_click_type_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.dam_multiply_){}
    , decltype(_impl_.summon_vnum_){}
    , decltype(_impl_.drain_sp_){}
    , decltype(_impl_.mob_color_){}
    , decltype(_impl_.polymorph_item_vnum_){}
    , decltype(_impl_.berserk_point_){}
    , decltype(_impl_.stone_skin_point_){}
    , decltype(_impl_.god_speed_point_){}
    , decltype(_impl_.death_blow_point_){}
    , decltype(_impl_.revive_point_){}
    , decltype(_impl_.healer_point_){}
    , decltype(_impl_.scaling_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_folder().empty()) {
    _this->_impl_.folder_.Set(from._internal_folder(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scaling_size_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.scaling_size_));
  // @@protoc_insertion_point(copy_constructor:network.TMobTable)
}

inline void TMobTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enchants_){arena}
    , /*decltype(_impl_._enchants_cached_byte_size_)*/{0}
    , decltype(_impl_.resists_){arena}
    , /*decltype(_impl_._resists_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.locale_name_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.folder_){}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.battle_type_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.gold_min_){0u}
    , decltype(_impl_.gold_max_){0u}
    , decltype(_impl_.exp_){0u}
    , decltype(_impl_.max_hp_){0u}
    , decltype(_impl_.regen_cycle_){0u}
    , decltype(_impl_.regen_percent_){0u}
    , decltype(_impl_.def_){0u}
    , decltype(_impl_.ai_flag_){0u}
    , decltype(_impl_.race_flag_){0u}
    , decltype(_impl_.immune_flag_){0u}
    , decltype(_impl_.str_){0u}
    , decltype(_impl_.dex_){0u}
    , decltype(_impl_.con_){0u}
    , decltype(_impl_.int__){0u}
    , decltype(_impl_.damage_min_){0u}
    , decltype(_impl_.damage_max_){0u}
    , decltype(_impl_.attack_speed_){0u}
    , decltype(_impl_.moving_speed_){0u}
    , decltype(_impl_.aggressive_hp_pct_){0u}
    , decltype(_impl_.aggressive_sight_){0u}
    , decltype(_impl_.attack_range_){0u}
    , decltype(_impl_.resurrection_vnum_){0u}
    , decltype(_impl_.drop_item_vnum_){0u}
    , decltype(_impl_.mount_capacity_){0u}
    , decltype(_impl_.on_click_type_){0u}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.dam_multiply_){0}
    , decltype(_impl_.summon_vnum_){0u}
    , decltype(_impl_.drain_sp_){0u}
    , decltype(_impl_.mob_color_){0u}
    , decltype(_impl_.polymorph_item_vnum_){0u}
    , decltype(_impl_.berserk_point_){0u}
    , decltype(_impl_.stone_skin_point_){0u}
    , decltype(_impl_.god_speed_point_){0u}
    , decltype(_impl_.death_blow_point_){0u}
    , decltype(_impl_.revive_point_){0u}
    , decltype(_impl_.healer_point_){0u}
    , decltype(_impl_.scaling_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TMobTable::~TMobTable() {
  // @@protoc_insertion_point(destructor:network.TMobTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TMobTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enchants_.~RepeatedField();
  _impl_.resists_.~RepeatedField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.locale_name_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.folder_.Destroy();
}

void TMobTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TMobTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TMobTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enchants_.Clear();
  _impl_.resists_.Clear();
  _impl_.skills_.Clear();
  _impl_.locale_name_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.folder_.ClearToEmpty();
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scaling_size_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.scaling_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TMobTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 battle_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.battle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gold_min = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gold_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gold_max = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gold_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_hp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 regen_cycle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.regen_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 regen_percent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.regen_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 def = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ai_flag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.ai_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 race_flag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.race_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 immune_flag = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.immune_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 str = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 con = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.con_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 int = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage_min = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.damage_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage_max = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.damage_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack_speed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moving_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.moving_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 aggressive_hp_pct = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.aggressive_hp_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 aggressive_sight = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.aggressive_sight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack_range = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enchants = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enchants(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 232) {
          _internal_add_enchants(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 resists = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_resists(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 240) {
          _internal_add_resists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 resurrection_vnum = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.resurrection_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drop_item_vnum = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.drop_item_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mount_capacity = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mount_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 on_click_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.on_click_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes folder = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float dam_multiply = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.dam_multiply_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 summon_vnum = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.summon_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drain_sp = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.drain_sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mob_color = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mob_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 polymorph_item_vnum = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.polymorph_item_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TMobSkillLevel skills = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 berserk_point = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.berserk_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stone_skin_point = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.stone_skin_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 god_speed_point = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.god_speed_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 death_blow_point = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.death_blow_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 revive_point = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.revive_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 healer_point = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.healer_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float scaling_size = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.scaling_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes locale_name = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_locale_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TMobTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TMobTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 rank = 4;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rank(), target);
  }

  // uint32 battle_type = 5;
  if (this->_internal_battle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_battle_type(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // uint32 size = 7;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_size(), target);
  }

  // uint32 gold_min = 8;
  if (this->_internal_gold_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_gold_min(), target);
  }

  // uint32 gold_max = 9;
  if (this->_internal_gold_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gold_max(), target);
  }

  // uint32 exp = 10;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_exp(), target);
  }

  // uint32 max_hp = 11;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_hp(), target);
  }

  // uint32 regen_cycle = 12;
  if (this->_internal_regen_cycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_regen_cycle(), target);
  }

  // uint32 regen_percent = 13;
  if (this->_internal_regen_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_regen_percent(), target);
  }

  // uint32 def = 14;
  if (this->_internal_def() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_def(), target);
  }

  // uint32 ai_flag = 15;
  if (this->_internal_ai_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ai_flag(), target);
  }

  // uint32 race_flag = 16;
  if (this->_internal_race_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_race_flag(), target);
  }

  // uint32 immune_flag = 17;
  if (this->_internal_immune_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_immune_flag(), target);
  }

  // uint32 str = 18;
  if (this->_internal_str() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_str(), target);
  }

  // uint32 dex = 19;
  if (this->_internal_dex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_dex(), target);
  }

  // uint32 con = 20;
  if (this->_internal_con() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_con(), target);
  }

  // uint32 int = 21;
  if (this->_internal_int_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_int_(), target);
  }

  // uint32 damage_min = 22;
  if (this->_internal_damage_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_damage_min(), target);
  }

  // uint32 damage_max = 23;
  if (this->_internal_damage_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_damage_max(), target);
  }

  // uint32 attack_speed = 24;
  if (this->_internal_attack_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_attack_speed(), target);
  }

  // uint32 moving_speed = 25;
  if (this->_internal_moving_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_moving_speed(), target);
  }

  // uint32 aggressive_hp_pct = 26;
  if (this->_internal_aggressive_hp_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_aggressive_hp_pct(), target);
  }

  // uint32 aggressive_sight = 27;
  if (this->_internal_aggressive_sight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_aggressive_sight(), target);
  }

  // uint32 attack_range = 28;
  if (this->_internal_attack_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_attack_range(), target);
  }

  // repeated int32 enchants = 29;
  {
    int byte_size = _impl_._enchants_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          29, _internal_enchants(), byte_size, target);
    }
  }

  // repeated int32 resists = 30;
  {
    int byte_size = _impl_._resists_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          30, _internal_resists(), byte_size, target);
    }
  }

  // uint32 resurrection_vnum = 31;
  if (this->_internal_resurrection_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_resurrection_vnum(), target);
  }

  // uint32 drop_item_vnum = 32;
  if (this->_internal_drop_item_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_drop_item_vnum(), target);
  }

  // uint32 mount_capacity = 33;
  if (this->_internal_mount_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_mount_capacity(), target);
  }

  // uint32 on_click_type = 34;
  if (this->_internal_on_click_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_on_click_type(), target);
  }

  // uint32 empire = 35;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_empire(), target);
  }

  // bytes folder = 36;
  if (!this->_internal_folder().empty()) {
    target = stream->WriteBytesMaybeAliased(
        36, this->_internal_folder(), target);
  }

  // float dam_multiply = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dam_multiply = this->_internal_dam_multiply();
  uint32_t raw_dam_multiply;
  memcpy(&raw_dam_multiply, &tmp_dam_multiply, sizeof(tmp_dam_multiply));
  if (raw_dam_multiply != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_dam_multiply(), target);
  }

  // uint32 summon_vnum = 38;
  if (this->_internal_summon_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_summon_vnum(), target);
  }

  // uint32 drain_sp = 39;
  if (this->_internal_drain_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_drain_sp(), target);
  }

  // uint32 mob_color = 40;
  if (this->_internal_mob_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_mob_color(), target);
  }

  // uint32 polymorph_item_vnum = 41;
  if (this->_internal_polymorph_item_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_polymorph_item_vnum(), target);
  }

  // repeated .network.TMobSkillLevel skills = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 berserk_point = 43;
  if (this->_internal_berserk_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_berserk_point(), target);
  }

  // uint32 stone_skin_point = 44;
  if (this->_internal_stone_skin_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_stone_skin_point(), target);
  }

  // uint32 god_speed_point = 45;
  if (this->_internal_god_speed_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_god_speed_point(), target);
  }

  // uint32 death_blow_point = 46;
  if (this->_internal_death_blow_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(46, this->_internal_death_blow_point(), target);
  }

  // uint32 revive_point = 47;
  if (this->_internal_revive_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(47, this->_internal_revive_point(), target);
  }

  // uint32 healer_point = 48;
  if (this->_internal_healer_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(48, this->_internal_healer_point(), target);
  }

  // float scaling_size = 49;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scaling_size = this->_internal_scaling_size();
  uint32_t raw_scaling_size;
  memcpy(&raw_scaling_size, &tmp_scaling_size, sizeof(tmp_scaling_size));
  if (raw_scaling_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(49, this->_internal_scaling_size(), target);
  }

  // repeated bytes locale_name = 50;
  for (int i = 0, n = this->_internal_locale_name_size(); i < n; i++) {
    const auto& s = this->_internal_locale_name(i);
    target = stream->WriteBytes(50, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TMobTable)
  return target;
}

size_t TMobTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TMobTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 enchants = 29;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enchants_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._enchants_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 resists = 30;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.resists_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._resists_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.TMobSkillLevel skills = 42;
  total_size += 2UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes locale_name = 50;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.locale_name_.size());
  for (int i = 0, n = _impl_.locale_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.locale_name_.Get(i));
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes folder = 36;
  if (!this->_internal_folder().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_folder());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 rank = 4;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  // uint32 battle_type = 5;
  if (this->_internal_battle_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_battle_type());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 size = 7;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint32 gold_min = 8;
  if (this->_internal_gold_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_min());
  }

  // uint32 gold_max = 9;
  if (this->_internal_gold_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_max());
  }

  // uint32 exp = 10;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  // uint32 max_hp = 11;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_hp());
  }

  // uint32 regen_cycle = 12;
  if (this->_internal_regen_cycle() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_regen_cycle());
  }

  // uint32 regen_percent = 13;
  if (this->_internal_regen_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_regen_percent());
  }

  // uint32 def = 14;
  if (this->_internal_def() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def());
  }

  // uint32 ai_flag = 15;
  if (this->_internal_ai_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ai_flag());
  }

  // uint32 race_flag = 16;
  if (this->_internal_race_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_race_flag());
  }

  // uint32 immune_flag = 17;
  if (this->_internal_immune_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_immune_flag());
  }

  // uint32 str = 18;
  if (this->_internal_str() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_str());
  }

  // uint32 dex = 19;
  if (this->_internal_dex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_dex());
  }

  // uint32 con = 20;
  if (this->_internal_con() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_con());
  }

  // uint32 int = 21;
  if (this->_internal_int_() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_int_());
  }

  // uint32 damage_min = 22;
  if (this->_internal_damage_min() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_damage_min());
  }

  // uint32 damage_max = 23;
  if (this->_internal_damage_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_damage_max());
  }

  // uint32 attack_speed = 24;
  if (this->_internal_attack_speed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_attack_speed());
  }

  // uint32 moving_speed = 25;
  if (this->_internal_moving_speed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_moving_speed());
  }

  // uint32 aggressive_hp_pct = 26;
  if (this->_internal_aggressive_hp_pct() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_aggressive_hp_pct());
  }

  // uint32 aggressive_sight = 27;
  if (this->_internal_aggressive_sight() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_aggressive_sight());
  }

  // uint32 attack_range = 28;
  if (this->_internal_attack_range() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_attack_range());
  }

  // uint32 resurrection_vnum = 31;
  if (this->_internal_resurrection_vnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_resurrection_vnum());
  }

  // uint32 drop_item_vnum = 32;
  if (this->_internal_drop_item_vnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_drop_item_vnum());
  }

  // uint32 mount_capacity = 33;
  if (this->_internal_mount_capacity() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_mount_capacity());
  }

  // uint32 on_click_type = 34;
  if (this->_internal_on_click_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_on_click_type());
  }

  // uint32 empire = 35;
  if (this->_internal_empire() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_empire());
  }

  // float dam_multiply = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dam_multiply = this->_internal_dam_multiply();
  uint32_t raw_dam_multiply;
  memcpy(&raw_dam_multiply, &tmp_dam_multiply, sizeof(tmp_dam_multiply));
  if (raw_dam_multiply != 0) {
    total_size += 2 + 4;
  }

  // uint32 summon_vnum = 38;
  if (this->_internal_summon_vnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_summon_vnum());
  }

  // uint32 drain_sp = 39;
  if (this->_internal_drain_sp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_drain_sp());
  }

  // uint32 mob_color = 40;
  if (this->_internal_mob_color() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_mob_color());
  }

  // uint32 polymorph_item_vnum = 41;
  if (this->_internal_polymorph_item_vnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_polymorph_item_vnum());
  }

  // uint32 berserk_point = 43;
  if (this->_internal_berserk_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_berserk_point());
  }

  // uint32 stone_skin_point = 44;
  if (this->_internal_stone_skin_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_stone_skin_point());
  }

  // uint32 god_speed_point = 45;
  if (this->_internal_god_speed_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_god_speed_point());
  }

  // uint32 death_blow_point = 46;
  if (this->_internal_death_blow_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_death_blow_point());
  }

  // uint32 revive_point = 47;
  if (this->_internal_revive_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_revive_point());
  }

  // uint32 healer_point = 48;
  if (this->_internal_healer_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_healer_point());
  }

  // float scaling_size = 49;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scaling_size = this->_internal_scaling_size();
  uint32_t raw_scaling_size;
  memcpy(&raw_scaling_size, &tmp_scaling_size, sizeof(tmp_scaling_size));
  if (raw_scaling_size != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TMobTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TMobTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TMobTable::GetClassData() const { return &_class_data_; }


void TMobTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TMobTable*>(&to_msg);
  auto& from = static_cast<const TMobTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TMobTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enchants_.MergeFrom(from._impl_.enchants_);
  _this->_impl_.resists_.MergeFrom(from._impl_.resists_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  _this->_impl_.locale_name_.MergeFrom(from._impl_.locale_name_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_folder().empty()) {
    _this->_internal_set_folder(from._internal_folder());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_battle_type() != 0) {
    _this->_internal_set_battle_type(from._internal_battle_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_gold_min() != 0) {
    _this->_internal_set_gold_min(from._internal_gold_min());
  }
  if (from._internal_gold_max() != 0) {
    _this->_internal_set_gold_max(from._internal_gold_max());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_regen_cycle() != 0) {
    _this->_internal_set_regen_cycle(from._internal_regen_cycle());
  }
  if (from._internal_regen_percent() != 0) {
    _this->_internal_set_regen_percent(from._internal_regen_percent());
  }
  if (from._internal_def() != 0) {
    _this->_internal_set_def(from._internal_def());
  }
  if (from._internal_ai_flag() != 0) {
    _this->_internal_set_ai_flag(from._internal_ai_flag());
  }
  if (from._internal_race_flag() != 0) {
    _this->_internal_set_race_flag(from._internal_race_flag());
  }
  if (from._internal_immune_flag() != 0) {
    _this->_internal_set_immune_flag(from._internal_immune_flag());
  }
  if (from._internal_str() != 0) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_dex() != 0) {
    _this->_internal_set_dex(from._internal_dex());
  }
  if (from._internal_con() != 0) {
    _this->_internal_set_con(from._internal_con());
  }
  if (from._internal_int_() != 0) {
    _this->_internal_set_int_(from._internal_int_());
  }
  if (from._internal_damage_min() != 0) {
    _this->_internal_set_damage_min(from._internal_damage_min());
  }
  if (from._internal_damage_max() != 0) {
    _this->_internal_set_damage_max(from._internal_damage_max());
  }
  if (from._internal_attack_speed() != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  if (from._internal_moving_speed() != 0) {
    _this->_internal_set_moving_speed(from._internal_moving_speed());
  }
  if (from._internal_aggressive_hp_pct() != 0) {
    _this->_internal_set_aggressive_hp_pct(from._internal_aggressive_hp_pct());
  }
  if (from._internal_aggressive_sight() != 0) {
    _this->_internal_set_aggressive_sight(from._internal_aggressive_sight());
  }
  if (from._internal_attack_range() != 0) {
    _this->_internal_set_attack_range(from._internal_attack_range());
  }
  if (from._internal_resurrection_vnum() != 0) {
    _this->_internal_set_resurrection_vnum(from._internal_resurrection_vnum());
  }
  if (from._internal_drop_item_vnum() != 0) {
    _this->_internal_set_drop_item_vnum(from._internal_drop_item_vnum());
  }
  if (from._internal_mount_capacity() != 0) {
    _this->_internal_set_mount_capacity(from._internal_mount_capacity());
  }
  if (from._internal_on_click_type() != 0) {
    _this->_internal_set_on_click_type(from._internal_on_click_type());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dam_multiply = from._internal_dam_multiply();
  uint32_t raw_dam_multiply;
  memcpy(&raw_dam_multiply, &tmp_dam_multiply, sizeof(tmp_dam_multiply));
  if (raw_dam_multiply != 0) {
    _this->_internal_set_dam_multiply(from._internal_dam_multiply());
  }
  if (from._internal_summon_vnum() != 0) {
    _this->_internal_set_summon_vnum(from._internal_summon_vnum());
  }
  if (from._internal_drain_sp() != 0) {
    _this->_internal_set_drain_sp(from._internal_drain_sp());
  }
  if (from._internal_mob_color() != 0) {
    _this->_internal_set_mob_color(from._internal_mob_color());
  }
  if (from._internal_polymorph_item_vnum() != 0) {
    _this->_internal_set_polymorph_item_vnum(from._internal_polymorph_item_vnum());
  }
  if (from._internal_berserk_point() != 0) {
    _this->_internal_set_berserk_point(from._internal_berserk_point());
  }
  if (from._internal_stone_skin_point() != 0) {
    _this->_internal_set_stone_skin_point(from._internal_stone_skin_point());
  }
  if (from._internal_god_speed_point() != 0) {
    _this->_internal_set_god_speed_point(from._internal_god_speed_point());
  }
  if (from._internal_death_blow_point() != 0) {
    _this->_internal_set_death_blow_point(from._internal_death_blow_point());
  }
  if (from._internal_revive_point() != 0) {
    _this->_internal_set_revive_point(from._internal_revive_point());
  }
  if (from._internal_healer_point() != 0) {
    _this->_internal_set_healer_point(from._internal_healer_point());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scaling_size = from._internal_scaling_size();
  uint32_t raw_scaling_size;
  memcpy(&raw_scaling_size, &tmp_scaling_size, sizeof(tmp_scaling_size));
  if (raw_scaling_size != 0) {
    _this->_internal_set_scaling_size(from._internal_scaling_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TMobTable::CopyFrom(const TMobTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TMobTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMobTable::IsInitialized() const {
  return true;
}

void TMobTable::InternalSwap(TMobTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enchants_.InternalSwap(&other->_impl_.enchants_);
  _impl_.resists_.InternalSwap(&other->_impl_.resists_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  _impl_.locale_name_.InternalSwap(&other->_impl_.locale_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.folder_, lhs_arena,
      &other->_impl_.folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TMobTable, _impl_.scaling_size_)
      + sizeof(TMobTable::_impl_.scaling_size_)
      - PROTOBUF_FIELD_OFFSET(TMobTable, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TMobTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[7]);
}

// ===================================================================

class TRepeatedMobTable::_Internal {
 public:
};

TRepeatedMobTable::TRepeatedMobTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TRepeatedMobTable)
}
TRepeatedMobTable::TRepeatedMobTable(const TRepeatedMobTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRepeatedMobTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.TRepeatedMobTable)
}

inline void TRepeatedMobTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TRepeatedMobTable::~TRepeatedMobTable() {
  // @@protoc_insertion_point(destructor:network.TRepeatedMobTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRepeatedMobTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void TRepeatedMobTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRepeatedMobTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TRepeatedMobTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRepeatedMobTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TMobTable data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRepeatedMobTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TRepeatedMobTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TMobTable data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TRepeatedMobTable)
  return target;
}

size_t TRepeatedMobTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TRepeatedMobTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TMobTable data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRepeatedMobTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRepeatedMobTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRepeatedMobTable::GetClassData() const { return &_class_data_; }


void TRepeatedMobTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRepeatedMobTable*>(&to_msg);
  auto& from = static_cast<const TRepeatedMobTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TRepeatedMobTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRepeatedMobTable::CopyFrom(const TRepeatedMobTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TRepeatedMobTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRepeatedMobTable::IsInitialized() const {
  return true;
}

void TRepeatedMobTable::InternalSwap(TRepeatedMobTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TRepeatedMobTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[8]);
}

// ===================================================================

class TItemLimit::_Internal {
 public:
};

TItemLimit::TItemLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemLimit)
}
TItemLimit::TItemLimit(const TItemLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:network.TItemLimit)
}

inline void TItemLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemLimit::~TItemLimit() {
  // @@protoc_insertion_point(destructor:network.TItemLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemLimit)
  return target;
}

size_t TItemLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemLimit::GetClassData() const { return &_class_data_; }


void TItemLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemLimit*>(&to_msg);
  auto& from = static_cast<const TItemLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemLimit::CopyFrom(const TItemLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemLimit::IsInitialized() const {
  return true;
}

void TItemLimit::InternalSwap(TItemLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemLimit, _impl_.value_)
      + sizeof(TItemLimit::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TItemLimit, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[9]);
}

// ===================================================================

class TItemApply::_Internal {
 public:
};

TItemApply::TItemApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemApply)
}
TItemApply::TItemApply(const TItemApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemApply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:network.TItemApply)
}

inline void TItemApply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemApply::~TItemApply() {
  // @@protoc_insertion_point(destructor:network.TItemApply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemApply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemApply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemApply::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemApply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemApply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemApply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemApply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemApply)
  return target;
}

size_t TItemApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemApply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemApply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemApply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemApply::GetClassData() const { return &_class_data_; }


void TItemApply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemApply*>(&to_msg);
  auto& from = static_cast<const TItemApply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemApply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemApply::CopyFrom(const TItemApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemApply::IsInitialized() const {
  return true;
}

void TItemApply::InternalSwap(TItemApply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemApply, _impl_.value_)
      + sizeof(TItemApply::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TItemApply, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemApply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[10]);
}

// ===================================================================

class TItemTable::_Internal {
 public:
};

TItemTable::TItemTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemTable)
}
TItemTable::TItemTable(const TItemTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.limits_){from._impl_.limits_}
    , decltype(_impl_.applies_){from._impl_.applies_}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.sockets_){from._impl_.sockets_}
    , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
    , decltype(_impl_.locale_name_){from._impl_.locale_name_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.vnum_range_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.sub_type_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.anti_flags_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.wear_flags_){}
    , decltype(_impl_.immune_flags_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.shop_buy_price_){}
    , decltype(_impl_.refined_vnum_){}
    , decltype(_impl_.refine_set_){}
    , decltype(_impl_.alter_to_magic_item_pct_){}
    , decltype(_impl_.specular_){}
    , decltype(_impl_.gain_socket_pct_){}
    , decltype(_impl_.addon_type_){}
    , decltype(_impl_.limit_real_time_first_use_index_){}
    , decltype(_impl_.limit_timer_based_on_wear_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_timer_based_on_wear_index_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.limit_timer_based_on_wear_index_));
  // @@protoc_insertion_point(copy_constructor:network.TItemTable)
}

inline void TItemTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.limits_){arena}
    , decltype(_impl_.applies_){arena}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.sockets_){arena}
    , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
    , decltype(_impl_.locale_name_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.vnum_range_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.sub_type_){0u}
    , decltype(_impl_.weight_){0u}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.anti_flags_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.wear_flags_){0u}
    , decltype(_impl_.immune_flags_){0u}
    , decltype(_impl_.gold_){int64_t{0}}
    , decltype(_impl_.shop_buy_price_){int64_t{0}}
    , decltype(_impl_.refined_vnum_){0u}
    , decltype(_impl_.refine_set_){0u}
    , decltype(_impl_.alter_to_magic_item_pct_){0u}
    , decltype(_impl_.specular_){0u}
    , decltype(_impl_.gain_socket_pct_){0u}
    , decltype(_impl_.addon_type_){0}
    , decltype(_impl_.limit_real_time_first_use_index_){0}
    , decltype(_impl_.limit_timer_based_on_wear_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TItemTable::~TItemTable() {
  // @@protoc_insertion_point(destructor:network.TItemTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.limits_.~RepeatedPtrField();
  _impl_.applies_.~RepeatedPtrField();
  _impl_.values_.~RepeatedField();
  _impl_.sockets_.~RepeatedField();
  _impl_.locale_name_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void TItemTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.limits_.Clear();
  _impl_.applies_.Clear();
  _impl_.values_.Clear();
  _impl_.sockets_.Clear();
  _impl_.locale_name_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_timer_based_on_wear_index_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.limit_timer_based_on_wear_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 anti_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.anti_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wear_flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.wear_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 immune_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.immune_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shop_buy_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.shop_buy_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemLimit limits = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemApply applies = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 values = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 sockets = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sockets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_sockets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 refined_vnum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.refined_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 refine_set = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.refine_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 alter_to_magic_item_pct = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.alter_to_magic_item_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 specular = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.specular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gain_socket_pct = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.gain_socket_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 addon_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.addon_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 limit_real_time_first_use_index = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.limit_real_time_first_use_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 limit_timer_based_on_wear_index = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.limit_timer_based_on_wear_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes locale_name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_locale_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 vnum_range = 2;
  if (this->_internal_vnum_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum_range(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // uint32 sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sub_type(), target);
  }

  // uint32 weight = 6;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_weight(), target);
  }

  // uint32 size = 7;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_size(), target);
  }

  // uint32 anti_flags = 8;
  if (this->_internal_anti_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_anti_flags(), target);
  }

  // uint32 flags = 9;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  // uint32 wear_flags = 10;
  if (this->_internal_wear_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_wear_flags(), target);
  }

  // uint32 immune_flags = 11;
  if (this->_internal_immune_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_immune_flags(), target);
  }

  // int64 gold = 12;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_gold(), target);
  }

  // int64 shop_buy_price = 13;
  if (this->_internal_shop_buy_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_shop_buy_price(), target);
  }

  // repeated .network.TItemLimit limits = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_limits_size()); i < n; i++) {
    const auto& repfield = this->_internal_limits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemApply applies = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_applies_size()); i < n; i++) {
    const auto& repfield = this->_internal_applies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 values = 16;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_values(), byte_size, target);
    }
  }

  // repeated int32 sockets = 17;
  {
    int byte_size = _impl_._sockets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_sockets(), byte_size, target);
    }
  }

  // uint32 refined_vnum = 18;
  if (this->_internal_refined_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_refined_vnum(), target);
  }

  // uint32 refine_set = 19;
  if (this->_internal_refine_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_refine_set(), target);
  }

  // uint32 alter_to_magic_item_pct = 20;
  if (this->_internal_alter_to_magic_item_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_alter_to_magic_item_pct(), target);
  }

  // uint32 specular = 21;
  if (this->_internal_specular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_specular(), target);
  }

  // uint32 gain_socket_pct = 22;
  if (this->_internal_gain_socket_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_gain_socket_pct(), target);
  }

  // sint32 addon_type = 23;
  if (this->_internal_addon_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(23, this->_internal_addon_type(), target);
  }

  // sint32 limit_real_time_first_use_index = 24;
  if (this->_internal_limit_real_time_first_use_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(24, this->_internal_limit_real_time_first_use_index(), target);
  }

  // sint32 limit_timer_based_on_wear_index = 25;
  if (this->_internal_limit_timer_based_on_wear_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(25, this->_internal_limit_timer_based_on_wear_index(), target);
  }

  // repeated bytes locale_name = 26;
  for (int i = 0, n = this->_internal_locale_name_size(); i < n; i++) {
    const auto& s = this->_internal_locale_name(i);
    target = stream->WriteBytes(26, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemTable)
  return target;
}

size_t TItemTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemLimit limits = 14;
  total_size += 1UL * this->_internal_limits_size();
  for (const auto& msg : this->_impl_.limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemApply applies = 15;
  total_size += 1UL * this->_internal_applies_size();
  for (const auto& msg : this->_impl_.applies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 values = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 sockets = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.sockets_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sockets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes locale_name = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.locale_name_.size());
  for (int i = 0, n = _impl_.locale_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.locale_name_.Get(i));
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 vnum_range = 2;
  if (this->_internal_vnum_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum_range());
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 sub_type = 5;
  if (this->_internal_sub_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_type());
  }

  // uint32 weight = 6;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  // uint32 size = 7;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint32 anti_flags = 8;
  if (this->_internal_anti_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_anti_flags());
  }

  // uint32 flags = 9;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  // uint32 wear_flags = 10;
  if (this->_internal_wear_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wear_flags());
  }

  // uint32 immune_flags = 11;
  if (this->_internal_immune_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_immune_flags());
  }

  // int64 gold = 12;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  // int64 shop_buy_price = 13;
  if (this->_internal_shop_buy_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shop_buy_price());
  }

  // uint32 refined_vnum = 18;
  if (this->_internal_refined_vnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_refined_vnum());
  }

  // uint32 refine_set = 19;
  if (this->_internal_refine_set() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_refine_set());
  }

  // uint32 alter_to_magic_item_pct = 20;
  if (this->_internal_alter_to_magic_item_pct() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_alter_to_magic_item_pct());
  }

  // uint32 specular = 21;
  if (this->_internal_specular() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_specular());
  }

  // uint32 gain_socket_pct = 22;
  if (this->_internal_gain_socket_pct() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_gain_socket_pct());
  }

  // sint32 addon_type = 23;
  if (this->_internal_addon_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_addon_type());
  }

  // sint32 limit_real_time_first_use_index = 24;
  if (this->_internal_limit_real_time_first_use_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_limit_real_time_first_use_index());
  }

  // sint32 limit_timer_based_on_wear_index = 25;
  if (this->_internal_limit_timer_based_on_wear_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_limit_timer_based_on_wear_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemTable::GetClassData() const { return &_class_data_; }


void TItemTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemTable*>(&to_msg);
  auto& from = static_cast<const TItemTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.limits_.MergeFrom(from._impl_.limits_);
  _this->_impl_.applies_.MergeFrom(from._impl_.applies_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_impl_.sockets_.MergeFrom(from._impl_.sockets_);
  _this->_impl_.locale_name_.MergeFrom(from._impl_.locale_name_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_vnum_range() != 0) {
    _this->_internal_set_vnum_range(from._internal_vnum_range());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_anti_flags() != 0) {
    _this->_internal_set_anti_flags(from._internal_anti_flags());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_wear_flags() != 0) {
    _this->_internal_set_wear_flags(from._internal_wear_flags());
  }
  if (from._internal_immune_flags() != 0) {
    _this->_internal_set_immune_flags(from._internal_immune_flags());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_shop_buy_price() != 0) {
    _this->_internal_set_shop_buy_price(from._internal_shop_buy_price());
  }
  if (from._internal_refined_vnum() != 0) {
    _this->_internal_set_refined_vnum(from._internal_refined_vnum());
  }
  if (from._internal_refine_set() != 0) {
    _this->_internal_set_refine_set(from._internal_refine_set());
  }
  if (from._internal_alter_to_magic_item_pct() != 0) {
    _this->_internal_set_alter_to_magic_item_pct(from._internal_alter_to_magic_item_pct());
  }
  if (from._internal_specular() != 0) {
    _this->_internal_set_specular(from._internal_specular());
  }
  if (from._internal_gain_socket_pct() != 0) {
    _this->_internal_set_gain_socket_pct(from._internal_gain_socket_pct());
  }
  if (from._internal_addon_type() != 0) {
    _this->_internal_set_addon_type(from._internal_addon_type());
  }
  if (from._internal_limit_real_time_first_use_index() != 0) {
    _this->_internal_set_limit_real_time_first_use_index(from._internal_limit_real_time_first_use_index());
  }
  if (from._internal_limit_timer_based_on_wear_index() != 0) {
    _this->_internal_set_limit_timer_based_on_wear_index(from._internal_limit_timer_based_on_wear_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemTable::CopyFrom(const TItemTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemTable::IsInitialized() const {
  return true;
}

void TItemTable::InternalSwap(TItemTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.limits_.InternalSwap(&other->_impl_.limits_);
  _impl_.applies_.InternalSwap(&other->_impl_.applies_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.sockets_.InternalSwap(&other->_impl_.sockets_);
  _impl_.locale_name_.InternalSwap(&other->_impl_.locale_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemTable, _impl_.limit_timer_based_on_wear_index_)
      + sizeof(TItemTable::_impl_.limit_timer_based_on_wear_index_)
      - PROTOBUF_FIELD_OFFSET(TItemTable, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[11]);
}

// ===================================================================

class TRepeatedItemTable::_Internal {
 public:
};

TRepeatedItemTable::TRepeatedItemTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TRepeatedItemTable)
}
TRepeatedItemTable::TRepeatedItemTable(const TRepeatedItemTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRepeatedItemTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.TRepeatedItemTable)
}

inline void TRepeatedItemTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TRepeatedItemTable::~TRepeatedItemTable() {
  // @@protoc_insertion_point(destructor:network.TRepeatedItemTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRepeatedItemTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void TRepeatedItemTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRepeatedItemTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TRepeatedItemTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRepeatedItemTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TItemTable data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRepeatedItemTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TRepeatedItemTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TItemTable data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TRepeatedItemTable)
  return target;
}

size_t TRepeatedItemTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TRepeatedItemTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemTable data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRepeatedItemTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRepeatedItemTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRepeatedItemTable::GetClassData() const { return &_class_data_; }


void TRepeatedItemTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRepeatedItemTable*>(&to_msg);
  auto& from = static_cast<const TRepeatedItemTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TRepeatedItemTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRepeatedItemTable::CopyFrom(const TRepeatedItemTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TRepeatedItemTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRepeatedItemTable::IsInitialized() const {
  return true;
}

void TRepeatedItemTable::InternalSwap(TRepeatedItemTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TRepeatedItemTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[12]);
}

// ===================================================================

class TShopTable::_Internal {
 public:
};

void TShopTable::clear_items() {
  _impl_.items_.Clear();
}
TShopTable::TShopTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TShopTable)
}
TShopTable::TShopTable(const TShopTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TShopTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.npc_vnum_){}
    , decltype(_impl_.item_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_count_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.item_count_));
  // @@protoc_insertion_point(copy_constructor:network.TShopTable)
}

inline void TShopTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.npc_vnum_){0u}
    , decltype(_impl_.item_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TShopTable::~TShopTable() {
  // @@protoc_insertion_point(destructor:network.TShopTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TShopTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void TShopTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TShopTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TShopTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_count_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.item_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TShopTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 npc_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.npc_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopItemTable items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TShopTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TShopTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 npc_vnum = 2;
  if (this->_internal_npc_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_npc_vnum(), target);
  }

  // uint32 item_count = 3;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_count(), target);
  }

  // repeated .network.TShopItemTable items = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TShopTable)
  return target;
}

size_t TShopTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TShopTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopItemTable items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 npc_vnum = 2;
  if (this->_internal_npc_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_npc_vnum());
  }

  // uint32 item_count = 3;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TShopTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TShopTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TShopTable::GetClassData() const { return &_class_data_; }


void TShopTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TShopTable*>(&to_msg);
  auto& from = static_cast<const TShopTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TShopTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_npc_vnum() != 0) {
    _this->_internal_set_npc_vnum(from._internal_npc_vnum());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TShopTable::CopyFrom(const TShopTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TShopTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TShopTable::IsInitialized() const {
  return true;
}

void TShopTable::InternalSwap(TShopTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TShopTable, _impl_.item_count_)
      + sizeof(TShopTable::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(TShopTable, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TShopTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[13]);
}

// ===================================================================

class TDataAuctionSearch_ItemType::_Internal {
 public:
};

TDataAuctionSearch_ItemType::TDataAuctionSearch_ItemType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TDataAuctionSearch.ItemType)
}
TDataAuctionSearch_ItemType::TDataAuctionSearch_ItemType(const TDataAuctionSearch_ItemType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDataAuctionSearch_ItemType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_types_){from._impl_.sub_types_}
    , /*decltype(_impl_._sub_types_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:network.TDataAuctionSearch.ItemType)
}

inline void TDataAuctionSearch_ItemType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_types_){arena}
    , /*decltype(_impl_._sub_types_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDataAuctionSearch_ItemType::~TDataAuctionSearch_ItemType() {
  // @@protoc_insertion_point(destructor:network.TDataAuctionSearch.ItemType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDataAuctionSearch_ItemType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_types_.~RepeatedField();
}

void TDataAuctionSearch_ItemType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDataAuctionSearch_ItemType::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TDataAuctionSearch.ItemType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_types_.Clear();
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDataAuctionSearch_ItemType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 sub_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sub_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_sub_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDataAuctionSearch_ItemType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TDataAuctionSearch.ItemType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 sub_types = 2;
  {
    int byte_size = _impl_._sub_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_sub_types(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TDataAuctionSearch.ItemType)
  return target;
}

size_t TDataAuctionSearch_ItemType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TDataAuctionSearch.ItemType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sub_types = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.sub_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sub_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDataAuctionSearch_ItemType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDataAuctionSearch_ItemType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDataAuctionSearch_ItemType::GetClassData() const { return &_class_data_; }


void TDataAuctionSearch_ItemType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDataAuctionSearch_ItemType*>(&to_msg);
  auto& from = static_cast<const TDataAuctionSearch_ItemType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TDataAuctionSearch.ItemType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sub_types_.MergeFrom(from._impl_.sub_types_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDataAuctionSearch_ItemType::CopyFrom(const TDataAuctionSearch_ItemType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TDataAuctionSearch.ItemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDataAuctionSearch_ItemType::IsInitialized() const {
  return true;
}

void TDataAuctionSearch_ItemType::InternalSwap(TDataAuctionSearch_ItemType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sub_types_.InternalSwap(&other->_impl_.sub_types_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDataAuctionSearch_ItemType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[14]);
}

// ===================================================================

class TDataAuctionSearch::_Internal {
 public:
};

TDataAuctionSearch::TDataAuctionSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TDataAuctionSearch)
}
TDataAuctionSearch::TDataAuctionSearch(const TDataAuctionSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDataAuctionSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.search_text_){}
    , decltype(_impl_.socket0_){}
    , decltype(_impl_.value0_){}
    , decltype(_impl_.include_anti_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_text().empty()) {
    _this->_impl_.search_text_.Set(from._internal_search_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.socket0_, &from._impl_.socket0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_anti_flag_) -
    reinterpret_cast<char*>(&_impl_.socket0_)) + sizeof(_impl_.include_anti_flag_));
  // @@protoc_insertion_point(copy_constructor:network.TDataAuctionSearch)
}

inline void TDataAuctionSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){arena}
    , decltype(_impl_.search_text_){}
    , decltype(_impl_.socket0_){0}
    , decltype(_impl_.value0_){0}
    , decltype(_impl_.include_anti_flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.search_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TDataAuctionSearch::~TDataAuctionSearch() {
  // @@protoc_insertion_point(destructor:network.TDataAuctionSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDataAuctionSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.types_.~RepeatedPtrField();
  _impl_.search_text_.Destroy();
}

void TDataAuctionSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDataAuctionSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TDataAuctionSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.types_.Clear();
  _impl_.search_text_.ClearToEmpty();
  ::memset(&_impl_.socket0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_anti_flag_) -
      reinterpret_cast<char*>(&_impl_.socket0_)) + sizeof(_impl_.include_anti_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDataAuctionSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes search_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TDataAuctionSearch.ItemType types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // sint32 socket0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.socket0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 value0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.value0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 include_anti_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_anti_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDataAuctionSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TDataAuctionSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes search_text = 1;
  if (!this->_internal_search_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_search_text(), target);
  }

  // repeated .network.TDataAuctionSearch.ItemType types = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // sint32 socket0 = 3;
  if (this->_internal_socket0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_socket0(), target);
  }

  // sint32 value0 = 4;
  if (this->_internal_value0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_value0(), target);
  }

  // uint32 include_anti_flag = 5;
  if (this->_internal_include_anti_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_include_anti_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TDataAuctionSearch)
  return target;
}

size_t TDataAuctionSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TDataAuctionSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TDataAuctionSearch.ItemType types = 2;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->_impl_.types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes search_text = 1;
  if (!this->_internal_search_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_search_text());
  }

  // sint32 socket0 = 3;
  if (this->_internal_socket0() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_socket0());
  }

  // sint32 value0 = 4;
  if (this->_internal_value0() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_value0());
  }

  // uint32 include_anti_flag = 5;
  if (this->_internal_include_anti_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_include_anti_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDataAuctionSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDataAuctionSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDataAuctionSearch::GetClassData() const { return &_class_data_; }


void TDataAuctionSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDataAuctionSearch*>(&to_msg);
  auto& from = static_cast<const TDataAuctionSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TDataAuctionSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  if (!from._internal_search_text().empty()) {
    _this->_internal_set_search_text(from._internal_search_text());
  }
  if (from._internal_socket0() != 0) {
    _this->_internal_set_socket0(from._internal_socket0());
  }
  if (from._internal_value0() != 0) {
    _this->_internal_set_value0(from._internal_value0());
  }
  if (from._internal_include_anti_flag() != 0) {
    _this->_internal_set_include_anti_flag(from._internal_include_anti_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDataAuctionSearch::CopyFrom(const TDataAuctionSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TDataAuctionSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDataAuctionSearch::IsInitialized() const {
  return true;
}

void TDataAuctionSearch::InternalSwap(TDataAuctionSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_text_, lhs_arena,
      &other->_impl_.search_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDataAuctionSearch, _impl_.include_anti_flag_)
      + sizeof(TDataAuctionSearch::_impl_.include_anti_flag_)
      - PROTOBUF_FIELD_OFFSET(TDataAuctionSearch, _impl_.socket0_)>(
          reinterpret_cast<char*>(&_impl_.socket0_),
          reinterpret_cast<char*>(&other->_impl_.socket0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDataAuctionSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[15]);
}

// ===================================================================

class TExtendedDataAuctionSearch::_Internal {
 public:
  static const ::network::TDataAuctionSearch& basic_data(const TExtendedDataAuctionSearch* msg);
};

const ::network::TDataAuctionSearch&
TExtendedDataAuctionSearch::_Internal::basic_data(const TExtendedDataAuctionSearch* msg) {
  return *msg->_impl_.basic_data_;
}
TExtendedDataAuctionSearch::TExtendedDataAuctionSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TExtendedDataAuctionSearch)
}
TExtendedDataAuctionSearch::TExtendedDataAuctionSearch(const TExtendedDataAuctionSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TExtendedDataAuctionSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.basic_data_){nullptr}
    , decltype(_impl_.search_type_){}
    , decltype(_impl_.level_min_){}
    , decltype(_impl_.price_min_){}
    , decltype(_impl_.price_max_){}
    , decltype(_impl_.level_max_){}
    , decltype(_impl_.is_only_auction_item_){}
    , decltype(_impl_.is_only_self_item_){}
    , decltype(_impl_.is_single_price_order_){}
    , decltype(_impl_.sort_order1_reversed_){}
    , decltype(_impl_.sort_order1_){}
    , decltype(_impl_.sort_order2_){}
    , decltype(_impl_.sort_order3_){}
    , decltype(_impl_.sort_order2_reversed_){}
    , decltype(_impl_.sort_order3_reversed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic_data()) {
    _this->_impl_.basic_data_ = new ::network::TDataAuctionSearch(*from._impl_.basic_data_);
  }
  ::memcpy(&_impl_.search_type_, &from._impl_.search_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sort_order3_reversed_) -
    reinterpret_cast<char*>(&_impl_.search_type_)) + sizeof(_impl_.sort_order3_reversed_));
  // @@protoc_insertion_point(copy_constructor:network.TExtendedDataAuctionSearch)
}

inline void TExtendedDataAuctionSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.basic_data_){nullptr}
    , decltype(_impl_.search_type_){0u}
    , decltype(_impl_.level_min_){0u}
    , decltype(_impl_.price_min_){uint64_t{0u}}
    , decltype(_impl_.price_max_){uint64_t{0u}}
    , decltype(_impl_.level_max_){0u}
    , decltype(_impl_.is_only_auction_item_){false}
    , decltype(_impl_.is_only_self_item_){false}
    , decltype(_impl_.is_single_price_order_){false}
    , decltype(_impl_.sort_order1_reversed_){false}
    , decltype(_impl_.sort_order1_){0u}
    , decltype(_impl_.sort_order2_){0u}
    , decltype(_impl_.sort_order3_){0u}
    , decltype(_impl_.sort_order2_reversed_){false}
    , decltype(_impl_.sort_order3_reversed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TExtendedDataAuctionSearch::~TExtendedDataAuctionSearch() {
  // @@protoc_insertion_point(destructor:network.TExtendedDataAuctionSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TExtendedDataAuctionSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.basic_data_;
}

void TExtendedDataAuctionSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TExtendedDataAuctionSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TExtendedDataAuctionSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.basic_data_ != nullptr) {
    delete _impl_.basic_data_;
  }
  _impl_.basic_data_ = nullptr;
  ::memset(&_impl_.search_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sort_order3_reversed_) -
      reinterpret_cast<char*>(&_impl_.search_type_)) + sizeof(_impl_.sort_order3_reversed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TExtendedDataAuctionSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TDataAuctionSearch basic_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 search_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.search_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.price_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.price_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_only_auction_item = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_only_auction_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_only_self_item = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.is_only_self_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_single_price_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_single_price_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sort_order1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sort_order1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_order1_reversed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.sort_order1_reversed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sort_order2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sort_order2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_order2_reversed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.sort_order2_reversed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sort_order3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.sort_order3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_order3_reversed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.sort_order3_reversed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TExtendedDataAuctionSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TExtendedDataAuctionSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TDataAuctionSearch basic_data = 1;
  if (this->_internal_has_basic_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::basic_data(this),
        _Internal::basic_data(this).GetCachedSize(), target, stream);
  }

  // uint32 search_type = 2;
  if (this->_internal_search_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_search_type(), target);
  }

  // uint32 level_min = 3;
  if (this->_internal_level_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level_min(), target);
  }

  // uint32 level_max = 4;
  if (this->_internal_level_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level_max(), target);
  }

  // uint64 price_min = 5;
  if (this->_internal_price_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_price_min(), target);
  }

  // uint64 price_max = 6;
  if (this->_internal_price_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_price_max(), target);
  }

  // bool is_only_auction_item = 7;
  if (this->_internal_is_only_auction_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_only_auction_item(), target);
  }

  // bool is_only_self_item = 8;
  if (this->_internal_is_only_self_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_only_self_item(), target);
  }

  // bool is_single_price_order = 9;
  if (this->_internal_is_single_price_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_single_price_order(), target);
  }

  // uint32 sort_order1 = 10;
  if (this->_internal_sort_order1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sort_order1(), target);
  }

  // bool sort_order1_reversed = 11;
  if (this->_internal_sort_order1_reversed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_sort_order1_reversed(), target);
  }

  // uint32 sort_order2 = 12;
  if (this->_internal_sort_order2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sort_order2(), target);
  }

  // bool sort_order2_reversed = 13;
  if (this->_internal_sort_order2_reversed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_sort_order2_reversed(), target);
  }

  // uint32 sort_order3 = 14;
  if (this->_internal_sort_order3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_sort_order3(), target);
  }

  // bool sort_order3_reversed = 15;
  if (this->_internal_sort_order3_reversed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_sort_order3_reversed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TExtendedDataAuctionSearch)
  return target;
}

size_t TExtendedDataAuctionSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TExtendedDataAuctionSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TDataAuctionSearch basic_data = 1;
  if (this->_internal_has_basic_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_data_);
  }

  // uint32 search_type = 2;
  if (this->_internal_search_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_search_type());
  }

  // uint32 level_min = 3;
  if (this->_internal_level_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level_min());
  }

  // uint64 price_min = 5;
  if (this->_internal_price_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price_min());
  }

  // uint64 price_max = 6;
  if (this->_internal_price_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price_max());
  }

  // uint32 level_max = 4;
  if (this->_internal_level_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level_max());
  }

  // bool is_only_auction_item = 7;
  if (this->_internal_is_only_auction_item() != 0) {
    total_size += 1 + 1;
  }

  // bool is_only_self_item = 8;
  if (this->_internal_is_only_self_item() != 0) {
    total_size += 1 + 1;
  }

  // bool is_single_price_order = 9;
  if (this->_internal_is_single_price_order() != 0) {
    total_size += 1 + 1;
  }

  // bool sort_order1_reversed = 11;
  if (this->_internal_sort_order1_reversed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sort_order1 = 10;
  if (this->_internal_sort_order1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_order1());
  }

  // uint32 sort_order2 = 12;
  if (this->_internal_sort_order2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_order2());
  }

  // uint32 sort_order3 = 14;
  if (this->_internal_sort_order3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_order3());
  }

  // bool sort_order2_reversed = 13;
  if (this->_internal_sort_order2_reversed() != 0) {
    total_size += 1 + 1;
  }

  // bool sort_order3_reversed = 15;
  if (this->_internal_sort_order3_reversed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TExtendedDataAuctionSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TExtendedDataAuctionSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TExtendedDataAuctionSearch::GetClassData() const { return &_class_data_; }


void TExtendedDataAuctionSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TExtendedDataAuctionSearch*>(&to_msg);
  auto& from = static_cast<const TExtendedDataAuctionSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TExtendedDataAuctionSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_basic_data()) {
    _this->_internal_mutable_basic_data()->::network::TDataAuctionSearch::MergeFrom(
        from._internal_basic_data());
  }
  if (from._internal_search_type() != 0) {
    _this->_internal_set_search_type(from._internal_search_type());
  }
  if (from._internal_level_min() != 0) {
    _this->_internal_set_level_min(from._internal_level_min());
  }
  if (from._internal_price_min() != 0) {
    _this->_internal_set_price_min(from._internal_price_min());
  }
  if (from._internal_price_max() != 0) {
    _this->_internal_set_price_max(from._internal_price_max());
  }
  if (from._internal_level_max() != 0) {
    _this->_internal_set_level_max(from._internal_level_max());
  }
  if (from._internal_is_only_auction_item() != 0) {
    _this->_internal_set_is_only_auction_item(from._internal_is_only_auction_item());
  }
  if (from._internal_is_only_self_item() != 0) {
    _this->_internal_set_is_only_self_item(from._internal_is_only_self_item());
  }
  if (from._internal_is_single_price_order() != 0) {
    _this->_internal_set_is_single_price_order(from._internal_is_single_price_order());
  }
  if (from._internal_sort_order1_reversed() != 0) {
    _this->_internal_set_sort_order1_reversed(from._internal_sort_order1_reversed());
  }
  if (from._internal_sort_order1() != 0) {
    _this->_internal_set_sort_order1(from._internal_sort_order1());
  }
  if (from._internal_sort_order2() != 0) {
    _this->_internal_set_sort_order2(from._internal_sort_order2());
  }
  if (from._internal_sort_order3() != 0) {
    _this->_internal_set_sort_order3(from._internal_sort_order3());
  }
  if (from._internal_sort_order2_reversed() != 0) {
    _this->_internal_set_sort_order2_reversed(from._internal_sort_order2_reversed());
  }
  if (from._internal_sort_order3_reversed() != 0) {
    _this->_internal_set_sort_order3_reversed(from._internal_sort_order3_reversed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TExtendedDataAuctionSearch::CopyFrom(const TExtendedDataAuctionSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TExtendedDataAuctionSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExtendedDataAuctionSearch::IsInitialized() const {
  return true;
}

void TExtendedDataAuctionSearch::InternalSwap(TExtendedDataAuctionSearch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TExtendedDataAuctionSearch, _impl_.sort_order3_reversed_)
      + sizeof(TExtendedDataAuctionSearch::_impl_.sort_order3_reversed_)
      - PROTOBUF_FIELD_OFFSET(TExtendedDataAuctionSearch, _impl_.basic_data_)>(
          reinterpret_cast<char*>(&_impl_.basic_data_),
          reinterpret_cast<char*>(&other->_impl_.basic_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TExtendedDataAuctionSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[16]);
}

// ===================================================================

class TAuctionShopHistoryElement::_Internal {
 public:
};

TAuctionShopHistoryElement::TAuctionShopHistoryElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TAuctionShopHistoryElement)
}
TAuctionShopHistoryElement::TAuctionShopHistoryElement(const TAuctionShopHistoryElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TAuctionShopHistoryElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buyer_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.date_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.buyer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buyer().empty()) {
    _this->_impl_.buyer_.Set(from._internal_buyer(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.date_));
  // @@protoc_insertion_point(copy_constructor:network.TAuctionShopHistoryElement)
}

inline void TAuctionShopHistoryElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buyer_){}
    , decltype(_impl_.price_){uint64_t{0u}}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.date_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.buyer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TAuctionShopHistoryElement::~TAuctionShopHistoryElement() {
  // @@protoc_insertion_point(destructor:network.TAuctionShopHistoryElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TAuctionShopHistoryElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buyer_.Destroy();
}

void TAuctionShopHistoryElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TAuctionShopHistoryElement::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TAuctionShopHistoryElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buyer_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.date_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TAuctionShopHistoryElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buyer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buyer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TAuctionShopHistoryElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TAuctionShopHistoryElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  // bytes buyer = 3;
  if (!this->_internal_buyer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_buyer(), target);
  }

  // uint32 date = 4;
  if (this->_internal_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TAuctionShopHistoryElement)
  return target;
}

size_t TAuctionShopHistoryElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TAuctionShopHistoryElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buyer = 3;
  if (!this->_internal_buyer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buyer());
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 date = 4;
  if (this->_internal_date() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TAuctionShopHistoryElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TAuctionShopHistoryElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TAuctionShopHistoryElement::GetClassData() const { return &_class_data_; }


void TAuctionShopHistoryElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TAuctionShopHistoryElement*>(&to_msg);
  auto& from = static_cast<const TAuctionShopHistoryElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TAuctionShopHistoryElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buyer().empty()) {
    _this->_internal_set_buyer(from._internal_buyer());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_date() != 0) {
    _this->_internal_set_date(from._internal_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TAuctionShopHistoryElement::CopyFrom(const TAuctionShopHistoryElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TAuctionShopHistoryElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAuctionShopHistoryElement::IsInitialized() const {
  return true;
}

void TAuctionShopHistoryElement::InternalSwap(TAuctionShopHistoryElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buyer_, lhs_arena,
      &other->_impl_.buyer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TAuctionShopHistoryElement, _impl_.date_)
      + sizeof(TAuctionShopHistoryElement::_impl_.date_)
      - PROTOBUF_FIELD_OFFSET(TAuctionShopHistoryElement, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TAuctionShopHistoryElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[17]);
}

// ===================================================================

class TSkillTable::_Internal {
 public:
};

TSkillTable::TSkillTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TSkillTable)
}
TSkillTable::TSkillTable(const TSkillTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSkillTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.point_on_){}
    , decltype(_impl_.point_poly_){}
    , decltype(_impl_.sp_cost_poly_){}
    , decltype(_impl_.duration_poly_){}
    , decltype(_impl_.duration_sp_cost_poly_){}
    , decltype(_impl_.cooldown_poly_){}
    , decltype(_impl_.master_bonus_poly_){}
    , decltype(_impl_.grand_master_add_sp_cost_poly_){}
    , decltype(_impl_.point_on2_){}
    , decltype(_impl_.point_poly2_){}
    , decltype(_impl_.duration_poly2_){}
    , decltype(_impl_.point_on3_){}
    , decltype(_impl_.point_poly3_){}
    , decltype(_impl_.duration_poly3_){}
    , decltype(_impl_.splash_around_damage_adjust_poly_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.max_level_){}
    , decltype(_impl_.splash_range_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.affect_flag_){}
    , decltype(_impl_.affect_flag_legendary_){}
    , decltype(_impl_.affect_flag2_){}
    , decltype(_impl_.affect_flag2_legendary_){}
    , decltype(_impl_.level_step_){}
    , decltype(_impl_.level_limit_){}
    , decltype(_impl_.pre_skill_vnum_){}
    , decltype(_impl_.pre_skill_level_){}
    , decltype(_impl_.max_hit_){}
    , decltype(_impl_.skill_attr_type_){}
    , decltype(_impl_.target_range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_on_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_on_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_on().empty()) {
    _this->_impl_.point_on_.Set(from._internal_point_on(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_poly().empty()) {
    _this->_impl_.point_poly_.Set(from._internal_point_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sp_cost_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sp_cost_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sp_cost_poly().empty()) {
    _this->_impl_.sp_cost_poly_.Set(from._internal_sp_cost_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.duration_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_duration_poly().empty()) {
    _this->_impl_.duration_poly_.Set(from._internal_duration_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.duration_sp_cost_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_sp_cost_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_duration_sp_cost_poly().empty()) {
    _this->_impl_.duration_sp_cost_poly_.Set(from._internal_duration_sp_cost_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cooldown_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cooldown_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cooldown_poly().empty()) {
    _this->_impl_.cooldown_poly_.Set(from._internal_cooldown_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.master_bonus_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_bonus_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_master_bonus_poly().empty()) {
    _this->_impl_.master_bonus_poly_.Set(from._internal_master_bonus_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.grand_master_add_sp_cost_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grand_master_add_sp_cost_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_grand_master_add_sp_cost_poly().empty()) {
    _this->_impl_.grand_master_add_sp_cost_poly_.Set(from._internal_grand_master_add_sp_cost_poly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_on2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_on2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_on2().empty()) {
    _this->_impl_.point_on2_.Set(from._internal_point_on2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_poly2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_poly2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_poly2().empty()) {
    _this->_impl_.point_poly2_.Set(from._internal_point_poly2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.duration_poly2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_poly2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_duration_poly2().empty()) {
    _this->_impl_.duration_poly2_.Set(from._internal_duration_poly2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_on3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_on3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_on3().empty()) {
    _this->_impl_.point_on3_.Set(from._internal_point_on3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_poly3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_poly3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_poly3().empty()) {
    _this->_impl_.point_poly3_.Set(from._internal_point_poly3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.duration_poly3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_poly3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_duration_poly3().empty()) {
    _this->_impl_.duration_poly3_.Set(from._internal_duration_poly3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.splash_around_damage_adjust_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.splash_around_damage_adjust_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_splash_around_damage_adjust_poly().empty()) {
    _this->_impl_.splash_around_damage_adjust_poly_.Set(from._internal_splash_around_damage_adjust_poly(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_range_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.target_range_));
  // @@protoc_insertion_point(copy_constructor:network.TSkillTable)
}

inline void TSkillTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.point_on_){}
    , decltype(_impl_.point_poly_){}
    , decltype(_impl_.sp_cost_poly_){}
    , decltype(_impl_.duration_poly_){}
    , decltype(_impl_.duration_sp_cost_poly_){}
    , decltype(_impl_.cooldown_poly_){}
    , decltype(_impl_.master_bonus_poly_){}
    , decltype(_impl_.grand_master_add_sp_cost_poly_){}
    , decltype(_impl_.point_on2_){}
    , decltype(_impl_.point_poly2_){}
    , decltype(_impl_.duration_poly2_){}
    , decltype(_impl_.point_on3_){}
    , decltype(_impl_.point_poly3_){}
    , decltype(_impl_.duration_poly3_){}
    , decltype(_impl_.splash_around_damage_adjust_poly_){}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.max_level_){0u}
    , decltype(_impl_.splash_range_){0u}
    , decltype(_impl_.flag_){0u}
    , decltype(_impl_.affect_flag_){0u}
    , decltype(_impl_.affect_flag_legendary_){0u}
    , decltype(_impl_.affect_flag2_){0u}
    , decltype(_impl_.affect_flag2_legendary_){0u}
    , decltype(_impl_.level_step_){0u}
    , decltype(_impl_.level_limit_){0u}
    , decltype(_impl_.pre_skill_vnum_){0u}
    , decltype(_impl_.pre_skill_level_){0u}
    , decltype(_impl_.max_hit_){0}
    , decltype(_impl_.skill_attr_type_){0u}
    , decltype(_impl_.target_range_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_on_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_on_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sp_cost_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sp_cost_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.duration_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.duration_sp_cost_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_sp_cost_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cooldown_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cooldown_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.master_bonus_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_bonus_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grand_master_add_sp_cost_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grand_master_add_sp_cost_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_on2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_on2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_poly2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_poly2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.duration_poly2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_poly2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_on3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_on3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_poly3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_poly3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.duration_poly3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_poly3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.splash_around_damage_adjust_poly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.splash_around_damage_adjust_poly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TSkillTable::~TSkillTable() {
  // @@protoc_insertion_point(destructor:network.TSkillTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSkillTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.point_on_.Destroy();
  _impl_.point_poly_.Destroy();
  _impl_.sp_cost_poly_.Destroy();
  _impl_.duration_poly_.Destroy();
  _impl_.duration_sp_cost_poly_.Destroy();
  _impl_.cooldown_poly_.Destroy();
  _impl_.master_bonus_poly_.Destroy();
  _impl_.grand_master_add_sp_cost_poly_.Destroy();
  _impl_.point_on2_.Destroy();
  _impl_.point_poly2_.Destroy();
  _impl_.duration_poly2_.Destroy();
  _impl_.point_on3_.Destroy();
  _impl_.point_poly3_.Destroy();
  _impl_.duration_poly3_.Destroy();
  _impl_.splash_around_damage_adjust_poly_.Destroy();
}

void TSkillTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSkillTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TSkillTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.point_on_.ClearToEmpty();
  _impl_.point_poly_.ClearToEmpty();
  _impl_.sp_cost_poly_.ClearToEmpty();
  _impl_.duration_poly_.ClearToEmpty();
  _impl_.duration_sp_cost_poly_.ClearToEmpty();
  _impl_.cooldown_poly_.ClearToEmpty();
  _impl_.master_bonus_poly_.ClearToEmpty();
  _impl_.grand_master_add_sp_cost_poly_.ClearToEmpty();
  _impl_.point_on2_.ClearToEmpty();
  _impl_.point_poly2_.ClearToEmpty();
  _impl_.duration_poly2_.ClearToEmpty();
  _impl_.point_on3_.ClearToEmpty();
  _impl_.point_poly3_.ClearToEmpty();
  _impl_.duration_poly3_.ClearToEmpty();
  _impl_.splash_around_damage_adjust_poly_.ClearToEmpty();
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_range_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.target_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSkillTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 splash_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.splash_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes point_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_point_on();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes point_poly = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_point_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sp_cost_poly = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sp_cost_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes duration_poly = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_duration_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes duration_sp_cost_poly = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_duration_sp_cost_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes cooldown_poly = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_cooldown_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes master_bonus_poly = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_master_bonus_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes grand_master_add_sp_cost_poly = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_grand_master_add_sp_cost_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 affect_flag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.affect_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 affect_flag_legendary = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.affect_flag_legendary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes point_on2 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_point_on2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes point_poly2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_point_poly2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes duration_poly2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_duration_poly2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 affect_flag2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.affect_flag2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 affect_flag2_legendary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.affect_flag2_legendary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes point_on3 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_point_on3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes point_poly3 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_point_poly3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes duration_poly3 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_duration_poly3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level_step = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.level_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level_limit = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.level_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pre_skill_vnum = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.pre_skill_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pre_skill_level = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.pre_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hit = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.max_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes splash_around_damage_adjust_poly = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_splash_around_damage_adjust_poly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_attr_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.skill_attr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_range = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.target_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TSkillTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TSkillTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 max_level = 4;
  if (this->_internal_max_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_level(), target);
  }

  // uint32 splash_range = 5;
  if (this->_internal_splash_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_splash_range(), target);
  }

  // bytes point_on = 6;
  if (!this->_internal_point_on().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_point_on(), target);
  }

  // bytes point_poly = 7;
  if (!this->_internal_point_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_point_poly(), target);
  }

  // bytes sp_cost_poly = 8;
  if (!this->_internal_sp_cost_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_sp_cost_poly(), target);
  }

  // bytes duration_poly = 9;
  if (!this->_internal_duration_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_duration_poly(), target);
  }

  // bytes duration_sp_cost_poly = 10;
  if (!this->_internal_duration_sp_cost_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_duration_sp_cost_poly(), target);
  }

  // bytes cooldown_poly = 11;
  if (!this->_internal_cooldown_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_cooldown_poly(), target);
  }

  // bytes master_bonus_poly = 12;
  if (!this->_internal_master_bonus_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_master_bonus_poly(), target);
  }

  // bytes grand_master_add_sp_cost_poly = 13;
  if (!this->_internal_grand_master_add_sp_cost_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_grand_master_add_sp_cost_poly(), target);
  }

  // uint32 flag = 14;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_flag(), target);
  }

  // uint32 affect_flag = 15;
  if (this->_internal_affect_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_affect_flag(), target);
  }

  // uint32 affect_flag_legendary = 16;
  if (this->_internal_affect_flag_legendary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_affect_flag_legendary(), target);
  }

  // bytes point_on2 = 17;
  if (!this->_internal_point_on2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_point_on2(), target);
  }

  // bytes point_poly2 = 18;
  if (!this->_internal_point_poly2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_point_poly2(), target);
  }

  // bytes duration_poly2 = 19;
  if (!this->_internal_duration_poly2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_duration_poly2(), target);
  }

  // uint32 affect_flag2 = 20;
  if (this->_internal_affect_flag2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_affect_flag2(), target);
  }

  // uint32 affect_flag2_legendary = 21;
  if (this->_internal_affect_flag2_legendary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_affect_flag2_legendary(), target);
  }

  // bytes point_on3 = 22;
  if (!this->_internal_point_on3().empty()) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_point_on3(), target);
  }

  // bytes point_poly3 = 23;
  if (!this->_internal_point_poly3().empty()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_point_poly3(), target);
  }

  // bytes duration_poly3 = 24;
  if (!this->_internal_duration_poly3().empty()) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_duration_poly3(), target);
  }

  // uint32 level_step = 25;
  if (this->_internal_level_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_level_step(), target);
  }

  // uint32 level_limit = 26;
  if (this->_internal_level_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_level_limit(), target);
  }

  // uint32 pre_skill_vnum = 27;
  if (this->_internal_pre_skill_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_pre_skill_vnum(), target);
  }

  // uint32 pre_skill_level = 28;
  if (this->_internal_pre_skill_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_pre_skill_level(), target);
  }

  // int32 max_hit = 29;
  if (this->_internal_max_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_max_hit(), target);
  }

  // bytes splash_around_damage_adjust_poly = 30;
  if (!this->_internal_splash_around_damage_adjust_poly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_splash_around_damage_adjust_poly(), target);
  }

  // uint32 skill_attr_type = 31;
  if (this->_internal_skill_attr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_skill_attr_type(), target);
  }

  // uint32 target_range = 32;
  if (this->_internal_target_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_target_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TSkillTable)
  return target;
}

size_t TSkillTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TSkillTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes point_on = 6;
  if (!this->_internal_point_on().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_on());
  }

  // bytes point_poly = 7;
  if (!this->_internal_point_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_poly());
  }

  // bytes sp_cost_poly = 8;
  if (!this->_internal_sp_cost_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sp_cost_poly());
  }

  // bytes duration_poly = 9;
  if (!this->_internal_duration_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_duration_poly());
  }

  // bytes duration_sp_cost_poly = 10;
  if (!this->_internal_duration_sp_cost_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_duration_sp_cost_poly());
  }

  // bytes cooldown_poly = 11;
  if (!this->_internal_cooldown_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cooldown_poly());
  }

  // bytes master_bonus_poly = 12;
  if (!this->_internal_master_bonus_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_master_bonus_poly());
  }

  // bytes grand_master_add_sp_cost_poly = 13;
  if (!this->_internal_grand_master_add_sp_cost_poly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_grand_master_add_sp_cost_poly());
  }

  // bytes point_on2 = 17;
  if (!this->_internal_point_on2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_on2());
  }

  // bytes point_poly2 = 18;
  if (!this->_internal_point_poly2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_poly2());
  }

  // bytes duration_poly2 = 19;
  if (!this->_internal_duration_poly2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_duration_poly2());
  }

  // bytes point_on3 = 22;
  if (!this->_internal_point_on3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_on3());
  }

  // bytes point_poly3 = 23;
  if (!this->_internal_point_poly3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_poly3());
  }

  // bytes duration_poly3 = 24;
  if (!this->_internal_duration_poly3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_duration_poly3());
  }

  // bytes splash_around_damage_adjust_poly = 30;
  if (!this->_internal_splash_around_damage_adjust_poly().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_splash_around_damage_adjust_poly());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 max_level = 4;
  if (this->_internal_max_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_level());
  }

  // uint32 splash_range = 5;
  if (this->_internal_splash_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_splash_range());
  }

  // uint32 flag = 14;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // uint32 affect_flag = 15;
  if (this->_internal_affect_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_affect_flag());
  }

  // uint32 affect_flag_legendary = 16;
  if (this->_internal_affect_flag_legendary() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_affect_flag_legendary());
  }

  // uint32 affect_flag2 = 20;
  if (this->_internal_affect_flag2() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_affect_flag2());
  }

  // uint32 affect_flag2_legendary = 21;
  if (this->_internal_affect_flag2_legendary() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_affect_flag2_legendary());
  }

  // uint32 level_step = 25;
  if (this->_internal_level_step() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_level_step());
  }

  // uint32 level_limit = 26;
  if (this->_internal_level_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_level_limit());
  }

  // uint32 pre_skill_vnum = 27;
  if (this->_internal_pre_skill_vnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pre_skill_vnum());
  }

  // uint32 pre_skill_level = 28;
  if (this->_internal_pre_skill_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pre_skill_level());
  }

  // int32 max_hit = 29;
  if (this->_internal_max_hit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_max_hit());
  }

  // uint32 skill_attr_type = 31;
  if (this->_internal_skill_attr_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_skill_attr_type());
  }

  // uint32 target_range = 32;
  if (this->_internal_target_range() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_target_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSkillTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSkillTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSkillTable::GetClassData() const { return &_class_data_; }


void TSkillTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSkillTable*>(&to_msg);
  auto& from = static_cast<const TSkillTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TSkillTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_point_on().empty()) {
    _this->_internal_set_point_on(from._internal_point_on());
  }
  if (!from._internal_point_poly().empty()) {
    _this->_internal_set_point_poly(from._internal_point_poly());
  }
  if (!from._internal_sp_cost_poly().empty()) {
    _this->_internal_set_sp_cost_poly(from._internal_sp_cost_poly());
  }
  if (!from._internal_duration_poly().empty()) {
    _this->_internal_set_duration_poly(from._internal_duration_poly());
  }
  if (!from._internal_duration_sp_cost_poly().empty()) {
    _this->_internal_set_duration_sp_cost_poly(from._internal_duration_sp_cost_poly());
  }
  if (!from._internal_cooldown_poly().empty()) {
    _this->_internal_set_cooldown_poly(from._internal_cooldown_poly());
  }
  if (!from._internal_master_bonus_poly().empty()) {
    _this->_internal_set_master_bonus_poly(from._internal_master_bonus_poly());
  }
  if (!from._internal_grand_master_add_sp_cost_poly().empty()) {
    _this->_internal_set_grand_master_add_sp_cost_poly(from._internal_grand_master_add_sp_cost_poly());
  }
  if (!from._internal_point_on2().empty()) {
    _this->_internal_set_point_on2(from._internal_point_on2());
  }
  if (!from._internal_point_poly2().empty()) {
    _this->_internal_set_point_poly2(from._internal_point_poly2());
  }
  if (!from._internal_duration_poly2().empty()) {
    _this->_internal_set_duration_poly2(from._internal_duration_poly2());
  }
  if (!from._internal_point_on3().empty()) {
    _this->_internal_set_point_on3(from._internal_point_on3());
  }
  if (!from._internal_point_poly3().empty()) {
    _this->_internal_set_point_poly3(from._internal_point_poly3());
  }
  if (!from._internal_duration_poly3().empty()) {
    _this->_internal_set_duration_poly3(from._internal_duration_poly3());
  }
  if (!from._internal_splash_around_damage_adjust_poly().empty()) {
    _this->_internal_set_splash_around_damage_adjust_poly(from._internal_splash_around_damage_adjust_poly());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_max_level() != 0) {
    _this->_internal_set_max_level(from._internal_max_level());
  }
  if (from._internal_splash_range() != 0) {
    _this->_internal_set_splash_range(from._internal_splash_range());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_affect_flag() != 0) {
    _this->_internal_set_affect_flag(from._internal_affect_flag());
  }
  if (from._internal_affect_flag_legendary() != 0) {
    _this->_internal_set_affect_flag_legendary(from._internal_affect_flag_legendary());
  }
  if (from._internal_affect_flag2() != 0) {
    _this->_internal_set_affect_flag2(from._internal_affect_flag2());
  }
  if (from._internal_affect_flag2_legendary() != 0) {
    _this->_internal_set_affect_flag2_legendary(from._internal_affect_flag2_legendary());
  }
  if (from._internal_level_step() != 0) {
    _this->_internal_set_level_step(from._internal_level_step());
  }
  if (from._internal_level_limit() != 0) {
    _this->_internal_set_level_limit(from._internal_level_limit());
  }
  if (from._internal_pre_skill_vnum() != 0) {
    _this->_internal_set_pre_skill_vnum(from._internal_pre_skill_vnum());
  }
  if (from._internal_pre_skill_level() != 0) {
    _this->_internal_set_pre_skill_level(from._internal_pre_skill_level());
  }
  if (from._internal_max_hit() != 0) {
    _this->_internal_set_max_hit(from._internal_max_hit());
  }
  if (from._internal_skill_attr_type() != 0) {
    _this->_internal_set_skill_attr_type(from._internal_skill_attr_type());
  }
  if (from._internal_target_range() != 0) {
    _this->_internal_set_target_range(from._internal_target_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSkillTable::CopyFrom(const TSkillTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TSkillTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSkillTable::IsInitialized() const {
  return true;
}

void TSkillTable::InternalSwap(TSkillTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_on_, lhs_arena,
      &other->_impl_.point_on_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_poly_, lhs_arena,
      &other->_impl_.point_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sp_cost_poly_, lhs_arena,
      &other->_impl_.sp_cost_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_poly_, lhs_arena,
      &other->_impl_.duration_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_sp_cost_poly_, lhs_arena,
      &other->_impl_.duration_sp_cost_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cooldown_poly_, lhs_arena,
      &other->_impl_.cooldown_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.master_bonus_poly_, lhs_arena,
      &other->_impl_.master_bonus_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.grand_master_add_sp_cost_poly_, lhs_arena,
      &other->_impl_.grand_master_add_sp_cost_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_on2_, lhs_arena,
      &other->_impl_.point_on2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_poly2_, lhs_arena,
      &other->_impl_.point_poly2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_poly2_, lhs_arena,
      &other->_impl_.duration_poly2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_on3_, lhs_arena,
      &other->_impl_.point_on3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_poly3_, lhs_arena,
      &other->_impl_.point_poly3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_poly3_, lhs_arena,
      &other->_impl_.duration_poly3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.splash_around_damage_adjust_poly_, lhs_arena,
      &other->_impl_.splash_around_damage_adjust_poly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSkillTable, _impl_.target_range_)
      + sizeof(TSkillTable::_impl_.target_range_)
      - PROTOBUF_FIELD_OFFSET(TSkillTable, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSkillTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[18]);
}

// ===================================================================

class TRefineMaterial::_Internal {
 public:
};

TRefineMaterial::TRefineMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TRefineMaterial)
}
TRefineMaterial::TRefineMaterial(const TRefineMaterial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRefineMaterial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.TRefineMaterial)
}

inline void TRefineMaterial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TRefineMaterial::~TRefineMaterial() {
  // @@protoc_insertion_point(destructor:network.TRefineMaterial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRefineMaterial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TRefineMaterial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRefineMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TRefineMaterial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRefineMaterial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRefineMaterial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TRefineMaterial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TRefineMaterial)
  return target;
}

size_t TRefineMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TRefineMaterial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRefineMaterial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRefineMaterial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRefineMaterial::GetClassData() const { return &_class_data_; }


void TRefineMaterial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRefineMaterial*>(&to_msg);
  auto& from = static_cast<const TRefineMaterial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TRefineMaterial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRefineMaterial::CopyFrom(const TRefineMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TRefineMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRefineMaterial::IsInitialized() const {
  return true;
}

void TRefineMaterial::InternalSwap(TRefineMaterial* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TRefineMaterial, _impl_.count_)
      + sizeof(TRefineMaterial::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TRefineMaterial, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRefineMaterial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[19]);
}

// ===================================================================

class TSwitchbotTable::_Internal {
 public:
};

void TSwitchbotTable::clear_attrs() {
  _impl_.attrs_.Clear();
}
void TSwitchbotTable::clear_premium_attrs() {
  _impl_.premium_attrs_.Clear();
}
TSwitchbotTable::TSwitchbotTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TSwitchbotTable)
}
TSwitchbotTable::TSwitchbotTable(const TSwitchbotTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSwitchbotTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attrs_){from._impl_.attrs_}
    , decltype(_impl_.premium_attrs_){from._impl_.premium_attrs_}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.inv_cell_){}
    , decltype(_impl_.switcher_used_){}
    , decltype(_impl_.use_premium_){}
    , decltype(_impl_.finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.finished_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.finished_));
  // @@protoc_insertion_point(copy_constructor:network.TSwitchbotTable)
}

inline void TSwitchbotTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attrs_){arena}
    , decltype(_impl_.premium_attrs_){arena}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.inv_cell_){0u}
    , decltype(_impl_.switcher_used_){0u}
    , decltype(_impl_.use_premium_){false}
    , decltype(_impl_.finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TSwitchbotTable::~TSwitchbotTable() {
  // @@protoc_insertion_point(destructor:network.TSwitchbotTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSwitchbotTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attrs_.~RepeatedPtrField();
  _impl_.premium_attrs_.~RepeatedPtrField();
}

void TSwitchbotTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSwitchbotTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TSwitchbotTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attrs_.Clear();
  _impl_.premium_attrs_.Clear();
  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.finished_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSwitchbotTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inv_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.inv_cell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 switcher_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.switcher_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttribute attrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttribute premium_attrs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_premium_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool use_premium = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.use_premium_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finished = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TSwitchbotTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TSwitchbotTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 inv_cell = 2;
  if (this->_internal_inv_cell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inv_cell(), target);
  }

  // uint32 switcher_used = 3;
  if (this->_internal_switcher_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_switcher_used(), target);
  }

  // repeated .network.TItemAttribute attrs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemAttribute premium_attrs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_premium_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_premium_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool use_premium = 6;
  if (this->_internal_use_premium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_premium(), target);
  }

  // bool finished = 7;
  if (this->_internal_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TSwitchbotTable)
  return target;
}

size_t TSwitchbotTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TSwitchbotTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemAttribute attrs = 4;
  total_size += 1UL * this->_internal_attrs_size();
  for (const auto& msg : this->_impl_.attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemAttribute premium_attrs = 5;
  total_size += 1UL * this->_internal_premium_attrs_size();
  for (const auto& msg : this->_impl_.premium_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint32 inv_cell = 2;
  if (this->_internal_inv_cell() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inv_cell());
  }

  // uint32 switcher_used = 3;
  if (this->_internal_switcher_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_switcher_used());
  }

  // bool use_premium = 6;
  if (this->_internal_use_premium() != 0) {
    total_size += 1 + 1;
  }

  // bool finished = 7;
  if (this->_internal_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSwitchbotTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSwitchbotTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSwitchbotTable::GetClassData() const { return &_class_data_; }


void TSwitchbotTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSwitchbotTable*>(&to_msg);
  auto& from = static_cast<const TSwitchbotTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TSwitchbotTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attrs_.MergeFrom(from._impl_.attrs_);
  _this->_impl_.premium_attrs_.MergeFrom(from._impl_.premium_attrs_);
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_inv_cell() != 0) {
    _this->_internal_set_inv_cell(from._internal_inv_cell());
  }
  if (from._internal_switcher_used() != 0) {
    _this->_internal_set_switcher_used(from._internal_switcher_used());
  }
  if (from._internal_use_premium() != 0) {
    _this->_internal_set_use_premium(from._internal_use_premium());
  }
  if (from._internal_finished() != 0) {
    _this->_internal_set_finished(from._internal_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSwitchbotTable::CopyFrom(const TSwitchbotTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TSwitchbotTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSwitchbotTable::IsInitialized() const {
  return true;
}

void TSwitchbotTable::InternalSwap(TSwitchbotTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attrs_.InternalSwap(&other->_impl_.attrs_);
  _impl_.premium_attrs_.InternalSwap(&other->_impl_.premium_attrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSwitchbotTable, _impl_.finished_)
      + sizeof(TSwitchbotTable::_impl_.finished_)
      - PROTOBUF_FIELD_OFFSET(TSwitchbotTable, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSwitchbotTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[20]);
}

// ===================================================================

class TRefineTable::_Internal {
 public:
};

TRefineTable::TRefineTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TRefineTable)
}
TRefineTable::TRefineTable(const TRefineTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRefineTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){from._impl_.materials_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.material_count_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.prob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prob_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.prob_));
  // @@protoc_insertion_point(copy_constructor:network.TRefineTable)
}

inline void TRefineTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){arena}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.material_count_){0u}
    , decltype(_impl_.cost_){int64_t{0}}
    , decltype(_impl_.prob_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TRefineTable::~TRefineTable() {
  // @@protoc_insertion_point(destructor:network.TRefineTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRefineTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
}

void TRefineTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRefineTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TRefineTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prob_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRefineTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 material_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.material_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TRefineMaterial materials = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRefineTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TRefineTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 material_count = 2;
  if (this->_internal_material_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_material_count(), target);
  }

  // int64 cost = 3;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_cost(), target);
  }

  // uint32 prob = 4;
  if (this->_internal_prob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prob(), target);
  }

  // repeated .network.TRefineMaterial materials = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TRefineTable)
  return target;
}

size_t TRefineTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TRefineTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TRefineMaterial materials = 5;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 material_count = 2;
  if (this->_internal_material_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_material_count());
  }

  // int64 cost = 3;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cost());
  }

  // uint32 prob = 4;
  if (this->_internal_prob() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRefineTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRefineTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRefineTable::GetClassData() const { return &_class_data_; }


void TRefineTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRefineTable*>(&to_msg);
  auto& from = static_cast<const TRefineTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TRefineTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_material_count() != 0) {
    _this->_internal_set_material_count(from._internal_material_count());
  }
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_prob() != 0) {
    _this->_internal_set_prob(from._internal_prob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRefineTable::CopyFrom(const TRefineTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TRefineTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRefineTable::IsInitialized() const {
  return true;
}

void TRefineTable::InternalSwap(TRefineTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TRefineTable, _impl_.prob_)
      + sizeof(TRefineTable::_impl_.prob_)
      - PROTOBUF_FIELD_OFFSET(TRefineTable, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRefineTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[21]);
}

// ===================================================================

class TWikiRefineInfo::_Internal {
 public:
};

TWikiRefineInfo::TWikiRefineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TWikiRefineInfo)
}
TWikiRefineInfo::TWikiRefineInfo(const TWikiRefineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TWikiRefineInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){from._impl_.materials_}
    , decltype(_impl_.mat_count_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mat_count_, &from._impl_.mat_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.mat_count_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:network.TWikiRefineInfo)
}

inline void TWikiRefineInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){arena}
    , decltype(_impl_.mat_count_){0u}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TWikiRefineInfo::~TWikiRefineInfo() {
  // @@protoc_insertion_point(destructor:network.TWikiRefineInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TWikiRefineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
}

void TWikiRefineInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TWikiRefineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TWikiRefineInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  ::memset(&_impl_.mat_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.mat_count_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TWikiRefineInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TRefineMaterial materials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 mat_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mat_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TWikiRefineInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TWikiRefineInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TRefineMaterial materials = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 mat_count = 2;
  if (this->_internal_mat_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mat_count(), target);
  }

  // int32 price = 3;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TWikiRefineInfo)
  return target;
}

size_t TWikiRefineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TWikiRefineInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TRefineMaterial materials = 1;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 mat_count = 2;
  if (this->_internal_mat_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mat_count());
  }

  // int32 price = 3;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TWikiRefineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TWikiRefineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TWikiRefineInfo::GetClassData() const { return &_class_data_; }


void TWikiRefineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TWikiRefineInfo*>(&to_msg);
  auto& from = static_cast<const TWikiRefineInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TWikiRefineInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  if (from._internal_mat_count() != 0) {
    _this->_internal_set_mat_count(from._internal_mat_count());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TWikiRefineInfo::CopyFrom(const TWikiRefineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TWikiRefineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWikiRefineInfo::IsInitialized() const {
  return true;
}

void TWikiRefineInfo::InternalSwap(TWikiRefineInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TWikiRefineInfo, _impl_.price_)
      + sizeof(TWikiRefineInfo::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(TWikiRefineInfo, _impl_.mat_count_)>(
          reinterpret_cast<char*>(&_impl_.mat_count_),
          reinterpret_cast<char*>(&other->_impl_.mat_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TWikiRefineInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[22]);
}

// ===================================================================

class TWikiChestDropInfo::_Internal {
 public:
};

TWikiChestDropInfo::TWikiChestDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TWikiChestDropInfo)
}
TWikiChestDropInfo::TWikiChestDropInfo(const TWikiChestDropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TWikiChestDropInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_start_){}
    , decltype(_impl_.vnum_end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_start_, &from._impl_.vnum_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vnum_end_) -
    reinterpret_cast<char*>(&_impl_.vnum_start_)) + sizeof(_impl_.vnum_end_));
  // @@protoc_insertion_point(copy_constructor:network.TWikiChestDropInfo)
}

inline void TWikiChestDropInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_start_){0u}
    , decltype(_impl_.vnum_end_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TWikiChestDropInfo::~TWikiChestDropInfo() {
  // @@protoc_insertion_point(destructor:network.TWikiChestDropInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TWikiChestDropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TWikiChestDropInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TWikiChestDropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TWikiChestDropInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vnum_end_) -
      reinterpret_cast<char*>(&_impl_.vnum_start_)) + sizeof(_impl_.vnum_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TWikiChestDropInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TWikiChestDropInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TWikiChestDropInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum_start = 1;
  if (this->_internal_vnum_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum_start(), target);
  }

  // uint32 vnum_end = 2;
  if (this->_internal_vnum_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TWikiChestDropInfo)
  return target;
}

size_t TWikiChestDropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TWikiChestDropInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum_start = 1;
  if (this->_internal_vnum_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum_start());
  }

  // uint32 vnum_end = 2;
  if (this->_internal_vnum_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TWikiChestDropInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TWikiChestDropInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TWikiChestDropInfo::GetClassData() const { return &_class_data_; }


void TWikiChestDropInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TWikiChestDropInfo*>(&to_msg);
  auto& from = static_cast<const TWikiChestDropInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TWikiChestDropInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum_start() != 0) {
    _this->_internal_set_vnum_start(from._internal_vnum_start());
  }
  if (from._internal_vnum_end() != 0) {
    _this->_internal_set_vnum_end(from._internal_vnum_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TWikiChestDropInfo::CopyFrom(const TWikiChestDropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TWikiChestDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWikiChestDropInfo::IsInitialized() const {
  return true;
}

void TWikiChestDropInfo::InternalSwap(TWikiChestDropInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TWikiChestDropInfo, _impl_.vnum_end_)
      + sizeof(TWikiChestDropInfo::_impl_.vnum_end_)
      - PROTOBUF_FIELD_OFFSET(TWikiChestDropInfo, _impl_.vnum_start_)>(
          reinterpret_cast<char*>(&_impl_.vnum_start_),
          reinterpret_cast<char*>(&other->_impl_.vnum_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TWikiChestDropInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[23]);
}

// ===================================================================

class TWikiItemOriginInfo::_Internal {
 public:
};

TWikiItemOriginInfo::TWikiItemOriginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TWikiItemOriginInfo)
}
TWikiItemOriginInfo::TWikiItemOriginInfo(const TWikiItemOriginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TWikiItemOriginInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.is_mob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_mob_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.is_mob_));
  // @@protoc_insertion_point(copy_constructor:network.TWikiItemOriginInfo)
}

inline void TWikiItemOriginInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.is_mob_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TWikiItemOriginInfo::~TWikiItemOriginInfo() {
  // @@protoc_insertion_point(destructor:network.TWikiItemOriginInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TWikiItemOriginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TWikiItemOriginInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TWikiItemOriginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TWikiItemOriginInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_mob_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.is_mob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TWikiItemOriginInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_mob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_mob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TWikiItemOriginInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TWikiItemOriginInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // bool is_mob = 2;
  if (this->_internal_is_mob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_mob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TWikiItemOriginInfo)
  return target;
}

size_t TWikiItemOriginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TWikiItemOriginInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // bool is_mob = 2;
  if (this->_internal_is_mob() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TWikiItemOriginInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TWikiItemOriginInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TWikiItemOriginInfo::GetClassData() const { return &_class_data_; }


void TWikiItemOriginInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TWikiItemOriginInfo*>(&to_msg);
  auto& from = static_cast<const TWikiItemOriginInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TWikiItemOriginInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_is_mob() != 0) {
    _this->_internal_set_is_mob(from._internal_is_mob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TWikiItemOriginInfo::CopyFrom(const TWikiItemOriginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TWikiItemOriginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWikiItemOriginInfo::IsInitialized() const {
  return true;
}

void TWikiItemOriginInfo::InternalSwap(TWikiItemOriginInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TWikiItemOriginInfo, _impl_.is_mob_)
      + sizeof(TWikiItemOriginInfo::_impl_.is_mob_)
      - PROTOBUF_FIELD_OFFSET(TWikiItemOriginInfo, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TWikiItemOriginInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[24]);
}

// ===================================================================

class TWikiInfoTable::_Internal {
 public:
};

TWikiInfoTable::TWikiInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TWikiInfoTable)
}
TWikiInfoTable::TWikiInfoTable(const TWikiInfoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TWikiInfoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_infos_){from._impl_.refine_infos_}
    , decltype(_impl_.chest_infos_){from._impl_.chest_infos_}
    , decltype(_impl_.is_common_){}
    , decltype(_impl_.origin_vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_common_, &from._impl_.is_common_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.origin_vnum_) -
    reinterpret_cast<char*>(&_impl_.is_common_)) + sizeof(_impl_.origin_vnum_));
  // @@protoc_insertion_point(copy_constructor:network.TWikiInfoTable)
}

inline void TWikiInfoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_infos_){arena}
    , decltype(_impl_.chest_infos_){arena}
    , decltype(_impl_.is_common_){false}
    , decltype(_impl_.origin_vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TWikiInfoTable::~TWikiInfoTable() {
  // @@protoc_insertion_point(destructor:network.TWikiInfoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TWikiInfoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refine_infos_.~RepeatedPtrField();
  _impl_.chest_infos_.~RepeatedPtrField();
}

void TWikiInfoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TWikiInfoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TWikiInfoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refine_infos_.Clear();
  _impl_.chest_infos_.Clear();
  ::memset(&_impl_.is_common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.origin_vnum_) -
      reinterpret_cast<char*>(&_impl_.is_common_)) + sizeof(_impl_.origin_vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TWikiInfoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TWikiRefineInfo refine_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refine_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TWikiChestDropInfo chest_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chest_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_common = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_common_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 origin_vnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.origin_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TWikiInfoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TWikiInfoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TWikiRefineInfo refine_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refine_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_refine_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TWikiChestDropInfo chest_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chest_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_chest_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_common = 3;
  if (this->_internal_is_common() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_common(), target);
  }

  // uint32 origin_vnum = 4;
  if (this->_internal_origin_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_origin_vnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TWikiInfoTable)
  return target;
}

size_t TWikiInfoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TWikiInfoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TWikiRefineInfo refine_infos = 1;
  total_size += 1UL * this->_internal_refine_infos_size();
  for (const auto& msg : this->_impl_.refine_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TWikiChestDropInfo chest_infos = 2;
  total_size += 1UL * this->_internal_chest_infos_size();
  for (const auto& msg : this->_impl_.chest_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_common = 3;
  if (this->_internal_is_common() != 0) {
    total_size += 1 + 1;
  }

  // uint32 origin_vnum = 4;
  if (this->_internal_origin_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_origin_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TWikiInfoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TWikiInfoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TWikiInfoTable::GetClassData() const { return &_class_data_; }


void TWikiInfoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TWikiInfoTable*>(&to_msg);
  auto& from = static_cast<const TWikiInfoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TWikiInfoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refine_infos_.MergeFrom(from._impl_.refine_infos_);
  _this->_impl_.chest_infos_.MergeFrom(from._impl_.chest_infos_);
  if (from._internal_is_common() != 0) {
    _this->_internal_set_is_common(from._internal_is_common());
  }
  if (from._internal_origin_vnum() != 0) {
    _this->_internal_set_origin_vnum(from._internal_origin_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TWikiInfoTable::CopyFrom(const TWikiInfoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TWikiInfoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWikiInfoTable::IsInitialized() const {
  return true;
}

void TWikiInfoTable::InternalSwap(TWikiInfoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refine_infos_.InternalSwap(&other->_impl_.refine_infos_);
  _impl_.chest_infos_.InternalSwap(&other->_impl_.chest_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TWikiInfoTable, _impl_.origin_vnum_)
      + sizeof(TWikiInfoTable::_impl_.origin_vnum_)
      - PROTOBUF_FIELD_OFFSET(TWikiInfoTable, _impl_.is_common_)>(
          reinterpret_cast<char*>(&_impl_.is_common_),
          reinterpret_cast<char*>(&other->_impl_.is_common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TWikiInfoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[25]);
}

// ===================================================================

class TItemAttrTable::_Internal {
 public:
};

TItemAttrTable::TItemAttrTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemAttrTable)
}
TItemAttrTable::TItemAttrTable(const TItemAttrTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemAttrTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.max_level_by_set_){from._impl_.max_level_by_set_}
    , /*decltype(_impl_._max_level_by_set_cached_byte_size_)*/{0}
    , decltype(_impl_.apply_){}
    , decltype(_impl_.apply_index_){}
    , decltype(_impl_.prob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.apply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apply().empty()) {
    _this->_impl_.apply_.Set(from._internal_apply(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.apply_index_, &from._impl_.apply_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prob_) -
    reinterpret_cast<char*>(&_impl_.apply_index_)) + sizeof(_impl_.prob_));
  // @@protoc_insertion_point(copy_constructor:network.TItemAttrTable)
}

inline void TItemAttrTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.max_level_by_set_){arena}
    , /*decltype(_impl_._max_level_by_set_cached_byte_size_)*/{0}
    , decltype(_impl_.apply_){}
    , decltype(_impl_.apply_index_){0u}
    , decltype(_impl_.prob_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.apply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TItemAttrTable::~TItemAttrTable() {
  // @@protoc_insertion_point(destructor:network.TItemAttrTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemAttrTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  _impl_.max_level_by_set_.~RepeatedField();
  _impl_.apply_.Destroy();
}

void TItemAttrTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemAttrTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemAttrTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.max_level_by_set_.Clear();
  _impl_.apply_.ClearToEmpty();
  ::memset(&_impl_.apply_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prob_) -
      reinterpret_cast<char*>(&_impl_.apply_index_)) + sizeof(_impl_.prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemAttrTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes apply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_apply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.apply_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 max_level_by_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max_level_by_set(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_max_level_by_set(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemAttrTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemAttrTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes apply = 1;
  if (!this->_internal_apply().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_apply(), target);
  }

  // uint32 apply_index = 2;
  if (this->_internal_apply_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apply_index(), target);
  }

  // uint32 prob = 3;
  if (this->_internal_prob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prob(), target);
  }

  // repeated int32 values = 4;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_values(), byte_size, target);
    }
  }

  // repeated uint32 max_level_by_set = 5;
  {
    int byte_size = _impl_._max_level_by_set_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_max_level_by_set(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemAttrTable)
  return target;
}

size_t TItemAttrTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemAttrTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 max_level_by_set = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.max_level_by_set_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._max_level_by_set_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes apply = 1;
  if (!this->_internal_apply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_apply());
  }

  // uint32 apply_index = 2;
  if (this->_internal_apply_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_index());
  }

  // uint32 prob = 3;
  if (this->_internal_prob() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemAttrTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemAttrTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemAttrTable::GetClassData() const { return &_class_data_; }


void TItemAttrTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemAttrTable*>(&to_msg);
  auto& from = static_cast<const TItemAttrTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemAttrTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_impl_.max_level_by_set_.MergeFrom(from._impl_.max_level_by_set_);
  if (!from._internal_apply().empty()) {
    _this->_internal_set_apply(from._internal_apply());
  }
  if (from._internal_apply_index() != 0) {
    _this->_internal_set_apply_index(from._internal_apply_index());
  }
  if (from._internal_prob() != 0) {
    _this->_internal_set_prob(from._internal_prob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemAttrTable::CopyFrom(const TItemAttrTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemAttrTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemAttrTable::IsInitialized() const {
  return true;
}

void TItemAttrTable::InternalSwap(TItemAttrTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.max_level_by_set_.InternalSwap(&other->_impl_.max_level_by_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apply_, lhs_arena,
      &other->_impl_.apply_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemAttrTable, _impl_.prob_)
      + sizeof(TItemAttrTable::_impl_.prob_)
      - PROTOBUF_FIELD_OFFSET(TItemAttrTable, _impl_.apply_index_)>(
          reinterpret_cast<char*>(&_impl_.apply_index_),
          reinterpret_cast<char*>(&other->_impl_.apply_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemAttrTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[26]);
}

// ===================================================================

class TGuildLadderInfo::_Internal {
 public:
};

TGuildLadderInfo::TGuildLadderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TGuildLadderInfo)
}
TGuildLadderInfo::TGuildLadderInfo(const TGuildLadderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TGuildLadderInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.ladder_points_){}
    , decltype(_impl_.min_member_){}
    , decltype(_impl_.max_member_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_member_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.max_member_));
  // @@protoc_insertion_point(copy_constructor:network.TGuildLadderInfo)
}

inline void TGuildLadderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.ladder_points_){0u}
    , decltype(_impl_.min_member_){0u}
    , decltype(_impl_.max_member_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TGuildLadderInfo::~TGuildLadderInfo() {
  // @@protoc_insertion_point(destructor:network.TGuildLadderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TGuildLadderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TGuildLadderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TGuildLadderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TGuildLadderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_member_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.max_member_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TGuildLadderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ladder_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ladder_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_member = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.min_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_member = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TGuildLadderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TGuildLadderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 ladder_points = 3;
  if (this->_internal_ladder_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ladder_points(), target);
  }

  // uint32 min_member = 4;
  if (this->_internal_min_member() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_member(), target);
  }

  // uint32 max_member = 5;
  if (this->_internal_max_member() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_member(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TGuildLadderInfo)
  return target;
}

size_t TGuildLadderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TGuildLadderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 ladder_points = 3;
  if (this->_internal_ladder_points() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ladder_points());
  }

  // uint32 min_member = 4;
  if (this->_internal_min_member() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_member());
  }

  // uint32 max_member = 5;
  if (this->_internal_max_member() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_member());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TGuildLadderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TGuildLadderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TGuildLadderInfo::GetClassData() const { return &_class_data_; }


void TGuildLadderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TGuildLadderInfo*>(&to_msg);
  auto& from = static_cast<const TGuildLadderInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TGuildLadderInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_ladder_points() != 0) {
    _this->_internal_set_ladder_points(from._internal_ladder_points());
  }
  if (from._internal_min_member() != 0) {
    _this->_internal_set_min_member(from._internal_min_member());
  }
  if (from._internal_max_member() != 0) {
    _this->_internal_set_max_member(from._internal_max_member());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TGuildLadderInfo::CopyFrom(const TGuildLadderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TGuildLadderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildLadderInfo::IsInitialized() const {
  return true;
}

void TGuildLadderInfo::InternalSwap(TGuildLadderInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TGuildLadderInfo, _impl_.max_member_)
      + sizeof(TGuildLadderInfo::_impl_.max_member_)
      - PROTOBUF_FIELD_OFFSET(TGuildLadderInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TGuildLadderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[27]);
}

// ===================================================================

class TBuildingLand::_Internal {
 public:
};

TBuildingLand::TBuildingLand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TBuildingLand)
}
TBuildingLand::TBuildingLand(const TBuildingLand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TBuildingLand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.guild_level_limit_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:network.TBuildingLand)
}

inline void TBuildingLand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.guild_level_limit_){0u}
    , decltype(_impl_.price_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TBuildingLand::~TBuildingLand() {
  // @@protoc_insertion_point(destructor:network.TBuildingLand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TBuildingLand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TBuildingLand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TBuildingLand::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TBuildingLand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TBuildingLand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_level_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.guild_level_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TBuildingLand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TBuildingLand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // uint32 guild_id = 7;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_id(), target);
  }

  // uint32 guild_level_limit = 8;
  if (this->_internal_guild_level_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_guild_level_limit(), target);
  }

  // int64 price = 9;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TBuildingLand)
  return target;
}

size_t TBuildingLand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TBuildingLand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 guild_id = 7;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 guild_level_limit = 8;
  if (this->_internal_guild_level_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_level_limit());
  }

  // int64 price = 9;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TBuildingLand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TBuildingLand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TBuildingLand::GetClassData() const { return &_class_data_; }


void TBuildingLand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TBuildingLand*>(&to_msg);
  auto& from = static_cast<const TBuildingLand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TBuildingLand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_guild_level_limit() != 0) {
    _this->_internal_set_guild_level_limit(from._internal_guild_level_limit());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TBuildingLand::CopyFrom(const TBuildingLand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TBuildingLand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBuildingLand::IsInitialized() const {
  return true;
}

void TBuildingLand::InternalSwap(TBuildingLand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TBuildingLand, _impl_.price_)
      + sizeof(TBuildingLand::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(TBuildingLand, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TBuildingLand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[28]);
}

// ===================================================================

class TBuildingObjectMaterial::_Internal {
 public:
};

TBuildingObjectMaterial::TBuildingObjectMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TBuildingObjectMaterial)
}
TBuildingObjectMaterial::TBuildingObjectMaterial(const TBuildingObjectMaterial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TBuildingObjectMaterial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_vnum_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_vnum_, &from._impl_.item_vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.item_vnum_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.TBuildingObjectMaterial)
}

inline void TBuildingObjectMaterial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_vnum_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TBuildingObjectMaterial::~TBuildingObjectMaterial() {
  // @@protoc_insertion_point(destructor:network.TBuildingObjectMaterial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TBuildingObjectMaterial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TBuildingObjectMaterial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TBuildingObjectMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TBuildingObjectMaterial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.item_vnum_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TBuildingObjectMaterial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TBuildingObjectMaterial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TBuildingObjectMaterial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_vnum = 1;
  if (this->_internal_item_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_vnum(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TBuildingObjectMaterial)
  return target;
}

size_t TBuildingObjectMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TBuildingObjectMaterial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_vnum = 1;
  if (this->_internal_item_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_vnum());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TBuildingObjectMaterial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TBuildingObjectMaterial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TBuildingObjectMaterial::GetClassData() const { return &_class_data_; }


void TBuildingObjectMaterial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TBuildingObjectMaterial*>(&to_msg);
  auto& from = static_cast<const TBuildingObjectMaterial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TBuildingObjectMaterial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_vnum() != 0) {
    _this->_internal_set_item_vnum(from._internal_item_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TBuildingObjectMaterial::CopyFrom(const TBuildingObjectMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TBuildingObjectMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBuildingObjectMaterial::IsInitialized() const {
  return true;
}

void TBuildingObjectMaterial::InternalSwap(TBuildingObjectMaterial* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TBuildingObjectMaterial, _impl_.count_)
      + sizeof(TBuildingObjectMaterial::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TBuildingObjectMaterial, _impl_.item_vnum_)>(
          reinterpret_cast<char*>(&_impl_.item_vnum_),
          reinterpret_cast<char*>(&other->_impl_.item_vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TBuildingObjectMaterial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[29]);
}

// ===================================================================

class TBuildingObjectProto::_Internal {
 public:
};

TBuildingObjectProto::TBuildingObjectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TBuildingObjectProto)
}
TBuildingObjectProto::TBuildingObjectProto(const TBuildingObjectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TBuildingObjectProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){from._impl_.materials_}
    , decltype(_impl_.region_){from._impl_.region_}
    , /*decltype(_impl_._region_cached_byte_size_)*/{0}
    , decltype(_impl_.price_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.upgrade_vnum_){}
    , decltype(_impl_.upgrade_limit_time_){}
    , decltype(_impl_.life_){}
    , decltype(_impl_.npc_vnum_){}
    , decltype(_impl_.npc_x_){}
    , decltype(_impl_.npc_y_){}
    , decltype(_impl_.group_vnum_){}
    , decltype(_impl_.depend_on_group_vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.depend_on_group_vnum_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.depend_on_group_vnum_));
  // @@protoc_insertion_point(copy_constructor:network.TBuildingObjectProto)
}

inline void TBuildingObjectProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){arena}
    , decltype(_impl_.region_){arena}
    , /*decltype(_impl_._region_cached_byte_size_)*/{0}
    , decltype(_impl_.price_){int64_t{0}}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.upgrade_vnum_){0u}
    , decltype(_impl_.upgrade_limit_time_){0u}
    , decltype(_impl_.life_){0}
    , decltype(_impl_.npc_vnum_){0u}
    , decltype(_impl_.npc_x_){0}
    , decltype(_impl_.npc_y_){0}
    , decltype(_impl_.group_vnum_){0u}
    , decltype(_impl_.depend_on_group_vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TBuildingObjectProto::~TBuildingObjectProto() {
  // @@protoc_insertion_point(destructor:network.TBuildingObjectProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TBuildingObjectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
  _impl_.region_.~RepeatedField();
}

void TBuildingObjectProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TBuildingObjectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TBuildingObjectProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  _impl_.region_.Clear();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.depend_on_group_vnum_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.depend_on_group_vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TBuildingObjectProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TBuildingObjectMaterial materials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 upgrade_vnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.upgrade_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 upgrade_limit_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.upgrade_limit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 life = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_region(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_region(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 npc_vnum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.npc_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 npc_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.npc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 npc_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.npc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_vnum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.group_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 depend_on_group_vnum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.depend_on_group_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TBuildingObjectProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TBuildingObjectProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // int64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_price(), target);
  }

  // repeated .network.TBuildingObjectMaterial materials = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 upgrade_vnum = 4;
  if (this->_internal_upgrade_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_upgrade_vnum(), target);
  }

  // uint32 upgrade_limit_time = 5;
  if (this->_internal_upgrade_limit_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_upgrade_limit_time(), target);
  }

  // int32 life = 6;
  if (this->_internal_life() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_life(), target);
  }

  // repeated int32 region = 7;
  {
    int byte_size = _impl_._region_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_region(), byte_size, target);
    }
  }

  // uint32 npc_vnum = 8;
  if (this->_internal_npc_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_npc_vnum(), target);
  }

  // int32 npc_x = 9;
  if (this->_internal_npc_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_npc_x(), target);
  }

  // int32 npc_y = 10;
  if (this->_internal_npc_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_npc_y(), target);
  }

  // uint32 group_vnum = 11;
  if (this->_internal_group_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_group_vnum(), target);
  }

  // uint32 depend_on_group_vnum = 12;
  if (this->_internal_depend_on_group_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_depend_on_group_vnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TBuildingObjectProto)
  return target;
}

size_t TBuildingObjectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TBuildingObjectProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TBuildingObjectMaterial materials = 3;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 region = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.region_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._region_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_price());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 upgrade_vnum = 4;
  if (this->_internal_upgrade_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upgrade_vnum());
  }

  // uint32 upgrade_limit_time = 5;
  if (this->_internal_upgrade_limit_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upgrade_limit_time());
  }

  // int32 life = 6;
  if (this->_internal_life() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_life());
  }

  // uint32 npc_vnum = 8;
  if (this->_internal_npc_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_npc_vnum());
  }

  // int32 npc_x = 9;
  if (this->_internal_npc_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_npc_x());
  }

  // int32 npc_y = 10;
  if (this->_internal_npc_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_npc_y());
  }

  // uint32 group_vnum = 11;
  if (this->_internal_group_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_vnum());
  }

  // uint32 depend_on_group_vnum = 12;
  if (this->_internal_depend_on_group_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depend_on_group_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TBuildingObjectProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TBuildingObjectProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TBuildingObjectProto::GetClassData() const { return &_class_data_; }


void TBuildingObjectProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TBuildingObjectProto*>(&to_msg);
  auto& from = static_cast<const TBuildingObjectProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TBuildingObjectProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  _this->_impl_.region_.MergeFrom(from._impl_.region_);
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_upgrade_vnum() != 0) {
    _this->_internal_set_upgrade_vnum(from._internal_upgrade_vnum());
  }
  if (from._internal_upgrade_limit_time() != 0) {
    _this->_internal_set_upgrade_limit_time(from._internal_upgrade_limit_time());
  }
  if (from._internal_life() != 0) {
    _this->_internal_set_life(from._internal_life());
  }
  if (from._internal_npc_vnum() != 0) {
    _this->_internal_set_npc_vnum(from._internal_npc_vnum());
  }
  if (from._internal_npc_x() != 0) {
    _this->_internal_set_npc_x(from._internal_npc_x());
  }
  if (from._internal_npc_y() != 0) {
    _this->_internal_set_npc_y(from._internal_npc_y());
  }
  if (from._internal_group_vnum() != 0) {
    _this->_internal_set_group_vnum(from._internal_group_vnum());
  }
  if (from._internal_depend_on_group_vnum() != 0) {
    _this->_internal_set_depend_on_group_vnum(from._internal_depend_on_group_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TBuildingObjectProto::CopyFrom(const TBuildingObjectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TBuildingObjectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBuildingObjectProto::IsInitialized() const {
  return true;
}

void TBuildingObjectProto::InternalSwap(TBuildingObjectProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
  _impl_.region_.InternalSwap(&other->_impl_.region_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TBuildingObjectProto, _impl_.depend_on_group_vnum_)
      + sizeof(TBuildingObjectProto::_impl_.depend_on_group_vnum_)
      - PROTOBUF_FIELD_OFFSET(TBuildingObjectProto, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TBuildingObjectProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[30]);
}

// ===================================================================

class TBuildingObject::_Internal {
 public:
};

TBuildingObject::TBuildingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TBuildingObject)
}
TBuildingObject::TBuildingObject(const TBuildingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TBuildingObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.land_id_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.x_rot_){}
    , decltype(_impl_.y_rot_){}
    , decltype(_impl_.z_rot_){}
    , decltype(_impl_.life_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.life_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.life_));
  // @@protoc_insertion_point(copy_constructor:network.TBuildingObject)
}

inline void TBuildingObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.land_id_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.x_rot_){0}
    , decltype(_impl_.y_rot_){0}
    , decltype(_impl_.z_rot_){0}
    , decltype(_impl_.life_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TBuildingObject::~TBuildingObject() {
  // @@protoc_insertion_point(destructor:network.TBuildingObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TBuildingObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TBuildingObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TBuildingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TBuildingObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.life_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.life_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TBuildingObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 land_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.land_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x_rot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.x_rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_rot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.y_rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z_rot = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.z_rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 life = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TBuildingObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TBuildingObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 land_id = 2;
  if (this->_internal_land_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_land_id(), target);
  }

  // uint32 vnum = 3;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vnum(), target);
  }

  // uint32 map_index = 4;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_map_index(), target);
  }

  // int32 x = 5;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // int32 y = 6;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  // float x_rot = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_rot = this->_internal_x_rot();
  uint32_t raw_x_rot;
  memcpy(&raw_x_rot, &tmp_x_rot, sizeof(tmp_x_rot));
  if (raw_x_rot != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_x_rot(), target);
  }

  // float y_rot = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_rot = this->_internal_y_rot();
  uint32_t raw_y_rot;
  memcpy(&raw_y_rot, &tmp_y_rot, sizeof(tmp_y_rot));
  if (raw_y_rot != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_y_rot(), target);
  }

  // float z_rot = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_rot = this->_internal_z_rot();
  uint32_t raw_z_rot;
  memcpy(&raw_z_rot, &tmp_z_rot, sizeof(tmp_z_rot));
  if (raw_z_rot != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_z_rot(), target);
  }

  // int32 life = 10;
  if (this->_internal_life() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_life(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TBuildingObject)
  return target;
}

size_t TBuildingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TBuildingObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 land_id = 2;
  if (this->_internal_land_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_land_id());
  }

  // uint32 vnum = 3;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 map_index = 4;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // int32 x = 5;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 6;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // float x_rot = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_rot = this->_internal_x_rot();
  uint32_t raw_x_rot;
  memcpy(&raw_x_rot, &tmp_x_rot, sizeof(tmp_x_rot));
  if (raw_x_rot != 0) {
    total_size += 1 + 4;
  }

  // float y_rot = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_rot = this->_internal_y_rot();
  uint32_t raw_y_rot;
  memcpy(&raw_y_rot, &tmp_y_rot, sizeof(tmp_y_rot));
  if (raw_y_rot != 0) {
    total_size += 1 + 4;
  }

  // float z_rot = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_rot = this->_internal_z_rot();
  uint32_t raw_z_rot;
  memcpy(&raw_z_rot, &tmp_z_rot, sizeof(tmp_z_rot));
  if (raw_z_rot != 0) {
    total_size += 1 + 4;
  }

  // int32 life = 10;
  if (this->_internal_life() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_life());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TBuildingObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TBuildingObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TBuildingObject::GetClassData() const { return &_class_data_; }


void TBuildingObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TBuildingObject*>(&to_msg);
  auto& from = static_cast<const TBuildingObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TBuildingObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_land_id() != 0) {
    _this->_internal_set_land_id(from._internal_land_id());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_rot = from._internal_x_rot();
  uint32_t raw_x_rot;
  memcpy(&raw_x_rot, &tmp_x_rot, sizeof(tmp_x_rot));
  if (raw_x_rot != 0) {
    _this->_internal_set_x_rot(from._internal_x_rot());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_rot = from._internal_y_rot();
  uint32_t raw_y_rot;
  memcpy(&raw_y_rot, &tmp_y_rot, sizeof(tmp_y_rot));
  if (raw_y_rot != 0) {
    _this->_internal_set_y_rot(from._internal_y_rot());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_rot = from._internal_z_rot();
  uint32_t raw_z_rot;
  memcpy(&raw_z_rot, &tmp_z_rot, sizeof(tmp_z_rot));
  if (raw_z_rot != 0) {
    _this->_internal_set_z_rot(from._internal_z_rot());
  }
  if (from._internal_life() != 0) {
    _this->_internal_set_life(from._internal_life());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TBuildingObject::CopyFrom(const TBuildingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TBuildingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBuildingObject::IsInitialized() const {
  return true;
}

void TBuildingObject::InternalSwap(TBuildingObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TBuildingObject, _impl_.life_)
      + sizeof(TBuildingObject::_impl_.life_)
      - PROTOBUF_FIELD_OFFSET(TBuildingObject, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TBuildingObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[31]);
}

// ===================================================================

class TGuildSafeboxInitial::_Internal {
 public:
};

TGuildSafeboxInitial::TGuildSafeboxInitial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TGuildSafeboxInitial)
}
TGuildSafeboxInitial::TGuildSafeboxInitial(const TGuildSafeboxInitial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TGuildSafeboxInitial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.TGuildSafeboxInitial)
}

inline void TGuildSafeboxInitial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TGuildSafeboxInitial::~TGuildSafeboxInitial() {
  // @@protoc_insertion_point(destructor:network.TGuildSafeboxInitial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TGuildSafeboxInitial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void TGuildSafeboxInitial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TGuildSafeboxInitial::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TGuildSafeboxInitial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TGuildSafeboxInitial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TGuildSafeboxInitial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TGuildSafeboxInitial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TGuildSafeboxInitial)
  return target;
}

size_t TGuildSafeboxInitial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TGuildSafeboxInitial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TGuildSafeboxInitial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TGuildSafeboxInitial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TGuildSafeboxInitial::GetClassData() const { return &_class_data_; }


void TGuildSafeboxInitial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TGuildSafeboxInitial*>(&to_msg);
  auto& from = static_cast<const TGuildSafeboxInitial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TGuildSafeboxInitial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TGuildSafeboxInitial::CopyFrom(const TGuildSafeboxInitial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TGuildSafeboxInitial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSafeboxInitial::IsInitialized() const {
  return true;
}

void TGuildSafeboxInitial::InternalSwap(TGuildSafeboxInitial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TGuildSafeboxInitial, _impl_.gold_)
      + sizeof(TGuildSafeboxInitial::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(TGuildSafeboxInitial, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TGuildSafeboxInitial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[32]);
}

// ===================================================================

class THorseUpgradeProto::_Internal {
 public:
};

THorseUpgradeProto::THorseUpgradeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.THorseUpgradeProto)
}
THorseUpgradeProto::THorseUpgradeProto(const THorseUpgradeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  THorseUpgradeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upgrade_type_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.level_limit_){}
    , decltype(_impl_.refine_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.upgrade_type_, &from._impl_.upgrade_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refine_id_) -
    reinterpret_cast<char*>(&_impl_.upgrade_type_)) + sizeof(_impl_.refine_id_));
  // @@protoc_insertion_point(copy_constructor:network.THorseUpgradeProto)
}

inline void THorseUpgradeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upgrade_type_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.level_limit_){0u}
    , decltype(_impl_.refine_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

THorseUpgradeProto::~THorseUpgradeProto() {
  // @@protoc_insertion_point(destructor:network.THorseUpgradeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void THorseUpgradeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void THorseUpgradeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void THorseUpgradeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:network.THorseUpgradeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.upgrade_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.refine_id_) -
      reinterpret_cast<char*>(&_impl_.upgrade_type_)) + sizeof(_impl_.refine_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* THorseUpgradeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 upgrade_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.upgrade_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 refine_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.refine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* THorseUpgradeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.THorseUpgradeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 upgrade_type = 1;
  if (this->_internal_upgrade_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_upgrade_type(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 level_limit = 3;
  if (this->_internal_level_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level_limit(), target);
  }

  // uint32 refine_id = 4;
  if (this->_internal_refine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_refine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.THorseUpgradeProto)
  return target;
}

size_t THorseUpgradeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.THorseUpgradeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 upgrade_type = 1;
  if (this->_internal_upgrade_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upgrade_type());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 level_limit = 3;
  if (this->_internal_level_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level_limit());
  }

  // uint32 refine_id = 4;
  if (this->_internal_refine_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData THorseUpgradeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    THorseUpgradeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*THorseUpgradeProto::GetClassData() const { return &_class_data_; }


void THorseUpgradeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<THorseUpgradeProto*>(&to_msg);
  auto& from = static_cast<const THorseUpgradeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.THorseUpgradeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_upgrade_type() != 0) {
    _this->_internal_set_upgrade_type(from._internal_upgrade_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_level_limit() != 0) {
    _this->_internal_set_level_limit(from._internal_level_limit());
  }
  if (from._internal_refine_id() != 0) {
    _this->_internal_set_refine_id(from._internal_refine_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void THorseUpgradeProto::CopyFrom(const THorseUpgradeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.THorseUpgradeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THorseUpgradeProto::IsInitialized() const {
  return true;
}

void THorseUpgradeProto::InternalSwap(THorseUpgradeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(THorseUpgradeProto, _impl_.refine_id_)
      + sizeof(THorseUpgradeProto::_impl_.refine_id_)
      - PROTOBUF_FIELD_OFFSET(THorseUpgradeProto, _impl_.upgrade_type_)>(
          reinterpret_cast<char*>(&_impl_.upgrade_type_),
          reinterpret_cast<char*>(&other->_impl_.upgrade_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata THorseUpgradeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[33]);
}

// ===================================================================

class THorseBonusProto::_Internal {
 public:
};

THorseBonusProto::THorseBonusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.THorseBonusProto)
}
THorseBonusProto::THorseBonusProto(const THorseBonusProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  THorseBonusProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , decltype(_impl_.max_hp_){}
    , decltype(_impl_.max_hp_item_){}
    , decltype(_impl_.armor_pct_){}
    , decltype(_impl_.armor_item_){}
    , decltype(_impl_.monster_pct_){}
    , decltype(_impl_.monster_item_){}
    , decltype(_impl_.item_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_count_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.item_count_));
  // @@protoc_insertion_point(copy_constructor:network.THorseBonusProto)
}

inline void THorseBonusProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0u}
    , decltype(_impl_.max_hp_){0u}
    , decltype(_impl_.max_hp_item_){0u}
    , decltype(_impl_.armor_pct_){0u}
    , decltype(_impl_.armor_item_){0u}
    , decltype(_impl_.monster_pct_){0u}
    , decltype(_impl_.monster_item_){0u}
    , decltype(_impl_.item_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

THorseBonusProto::~THorseBonusProto() {
  // @@protoc_insertion_point(destructor:network.THorseBonusProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void THorseBonusProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void THorseBonusProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void THorseBonusProto::Clear() {
// @@protoc_insertion_point(message_clear_start:network.THorseBonusProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_count_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.item_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* THorseBonusProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_hp_item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_hp_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 armor_pct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.armor_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 armor_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.armor_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 monster_pct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.monster_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 monster_item = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.monster_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* THorseBonusProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.THorseBonusProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // uint32 max_hp = 2;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_hp(), target);
  }

  // uint32 max_hp_item = 3;
  if (this->_internal_max_hp_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_hp_item(), target);
  }

  // uint32 armor_pct = 4;
  if (this->_internal_armor_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_armor_pct(), target);
  }

  // uint32 armor_item = 5;
  if (this->_internal_armor_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_armor_item(), target);
  }

  // uint32 monster_pct = 6;
  if (this->_internal_monster_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_monster_pct(), target);
  }

  // uint32 monster_item = 7;
  if (this->_internal_monster_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_monster_item(), target);
  }

  // uint32 item_count = 8;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.THorseBonusProto)
  return target;
}

size_t THorseBonusProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.THorseBonusProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 max_hp = 2;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_hp());
  }

  // uint32 max_hp_item = 3;
  if (this->_internal_max_hp_item() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_hp_item());
  }

  // uint32 armor_pct = 4;
  if (this->_internal_armor_pct() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_armor_pct());
  }

  // uint32 armor_item = 5;
  if (this->_internal_armor_item() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_armor_item());
  }

  // uint32 monster_pct = 6;
  if (this->_internal_monster_pct() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monster_pct());
  }

  // uint32 monster_item = 7;
  if (this->_internal_monster_item() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monster_item());
  }

  // uint32 item_count = 8;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData THorseBonusProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    THorseBonusProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*THorseBonusProto::GetClassData() const { return &_class_data_; }


void THorseBonusProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<THorseBonusProto*>(&to_msg);
  auto& from = static_cast<const THorseBonusProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.THorseBonusProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_max_hp_item() != 0) {
    _this->_internal_set_max_hp_item(from._internal_max_hp_item());
  }
  if (from._internal_armor_pct() != 0) {
    _this->_internal_set_armor_pct(from._internal_armor_pct());
  }
  if (from._internal_armor_item() != 0) {
    _this->_internal_set_armor_item(from._internal_armor_item());
  }
  if (from._internal_monster_pct() != 0) {
    _this->_internal_set_monster_pct(from._internal_monster_pct());
  }
  if (from._internal_monster_item() != 0) {
    _this->_internal_set_monster_item(from._internal_monster_item());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void THorseBonusProto::CopyFrom(const THorseBonusProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.THorseBonusProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THorseBonusProto::IsInitialized() const {
  return true;
}

void THorseBonusProto::InternalSwap(THorseBonusProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(THorseBonusProto, _impl_.item_count_)
      + sizeof(THorseBonusProto::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(THorseBonusProto, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata THorseBonusProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[34]);
}

// ===================================================================

class TGayaShopData::_Internal {
 public:
};

TGayaShopData::TGayaShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TGayaShopData)
}
TGayaShopData::TGayaShopData(const TGayaShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TGayaShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_, &from._impl_.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:network.TGayaShopData)
}

inline void TGayaShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.price_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TGayaShopData::~TGayaShopData() {
  // @@protoc_insertion_point(destructor:network.TGayaShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TGayaShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TGayaShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TGayaShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TGayaShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TGayaShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TGayaShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TGayaShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // uint32 price = 4;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TGayaShopData)
  return target;
}

size_t TGayaShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TGayaShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 price = 4;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TGayaShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TGayaShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TGayaShopData::GetClassData() const { return &_class_data_; }


void TGayaShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TGayaShopData*>(&to_msg);
  auto& from = static_cast<const TGayaShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TGayaShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TGayaShopData::CopyFrom(const TGayaShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TGayaShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGayaShopData::IsInitialized() const {
  return true;
}

void TGayaShopData::InternalSwap(TGayaShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TGayaShopData, _impl_.price_)
      + sizeof(TGayaShopData::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(TGayaShopData, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TGayaShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[35]);
}

// ===================================================================

class TAttrtreeProto::_Internal {
 public:
};

TAttrtreeProto::TAttrtreeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TAttrtreeProto)
}
TAttrtreeProto::TAttrtreeProto(const TAttrtreeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TAttrtreeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_level_){from._impl_.refine_level_}
    , /*decltype(_impl_._refine_level_cached_byte_size_)*/{0}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.apply_type_){}
    , decltype(_impl_.max_apply_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_apply_value_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.max_apply_value_));
  // @@protoc_insertion_point(copy_constructor:network.TAttrtreeProto)
}

inline void TAttrtreeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_level_){arena}
    , /*decltype(_impl_._refine_level_cached_byte_size_)*/{0}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.col_){0u}
    , decltype(_impl_.apply_type_){0u}
    , decltype(_impl_.max_apply_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TAttrtreeProto::~TAttrtreeProto() {
  // @@protoc_insertion_point(destructor:network.TAttrtreeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TAttrtreeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refine_level_.~RepeatedField();
}

void TAttrtreeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TAttrtreeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TAttrtreeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refine_level_.Clear();
  ::memset(&_impl_.row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_apply_value_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.max_apply_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TAttrtreeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.apply_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_apply_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_apply_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 refine_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_refine_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_refine_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TAttrtreeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TAttrtreeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row(), target);
  }

  // uint32 col = 2;
  if (this->_internal_col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_col(), target);
  }

  // uint32 apply_type = 3;
  if (this->_internal_apply_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apply_type(), target);
  }

  // int32 max_apply_value = 4;
  if (this->_internal_max_apply_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_apply_value(), target);
  }

  // repeated uint32 refine_level = 5;
  {
    int byte_size = _impl_._refine_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_refine_level(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TAttrtreeProto)
  return target;
}

size_t TAttrtreeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TAttrtreeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 refine_level = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.refine_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._refine_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  // uint32 col = 2;
  if (this->_internal_col() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_col());
  }

  // uint32 apply_type = 3;
  if (this->_internal_apply_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_type());
  }

  // int32 max_apply_value = 4;
  if (this->_internal_max_apply_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_apply_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TAttrtreeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TAttrtreeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TAttrtreeProto::GetClassData() const { return &_class_data_; }


void TAttrtreeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TAttrtreeProto*>(&to_msg);
  auto& from = static_cast<const TAttrtreeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TAttrtreeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refine_level_.MergeFrom(from._impl_.refine_level_);
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_col() != 0) {
    _this->_internal_set_col(from._internal_col());
  }
  if (from._internal_apply_type() != 0) {
    _this->_internal_set_apply_type(from._internal_apply_type());
  }
  if (from._internal_max_apply_value() != 0) {
    _this->_internal_set_max_apply_value(from._internal_max_apply_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TAttrtreeProto::CopyFrom(const TAttrtreeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TAttrtreeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAttrtreeProto::IsInitialized() const {
  return true;
}

void TAttrtreeProto::InternalSwap(TAttrtreeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refine_level_.InternalSwap(&other->_impl_.refine_level_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TAttrtreeProto, _impl_.max_apply_value_)
      + sizeof(TAttrtreeProto::_impl_.max_apply_value_)
      - PROTOBUF_FIELD_OFFSET(TAttrtreeProto, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TAttrtreeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[36]);
}

// ===================================================================

class TRuneProtoTable::_Internal {
 public:
};

TRuneProtoTable::TRuneProtoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TRuneProtoTable)
}
TRuneProtoTable::TRuneProtoTable(const TRuneProtoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRuneProtoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.apply_eval_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.sub_group_){}
    , decltype(_impl_.apply_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apply_eval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apply_eval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apply_eval().empty()) {
    _this->_impl_.apply_eval_.Set(from._internal_apply_eval(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.apply_type_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.apply_type_));
  // @@protoc_insertion_point(copy_constructor:network.TRuneProtoTable)
}

inline void TRuneProtoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.apply_eval_){}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.group_){0u}
    , decltype(_impl_.sub_group_){0u}
    , decltype(_impl_.apply_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apply_eval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apply_eval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TRuneProtoTable::~TRuneProtoTable() {
  // @@protoc_insertion_point(destructor:network.TRuneProtoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRuneProtoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.apply_eval_.Destroy();
}

void TRuneProtoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRuneProtoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TRuneProtoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.apply_eval_.ClearToEmpty();
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.apply_type_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.apply_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRuneProtoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sub_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sub_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.apply_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes apply_eval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_apply_eval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRuneProtoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TRuneProtoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 group = 3;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group(), target);
  }

  // uint32 sub_group = 4;
  if (this->_internal_sub_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sub_group(), target);
  }

  // uint32 apply_type = 5;
  if (this->_internal_apply_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_apply_type(), target);
  }

  // bytes apply_eval = 6;
  if (!this->_internal_apply_eval().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_apply_eval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TRuneProtoTable)
  return target;
}

size_t TRuneProtoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TRuneProtoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes apply_eval = 6;
  if (!this->_internal_apply_eval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_apply_eval());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 group = 3;
  if (this->_internal_group() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
  }

  // uint32 sub_group = 4;
  if (this->_internal_sub_group() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_group());
  }

  // uint32 apply_type = 5;
  if (this->_internal_apply_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRuneProtoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRuneProtoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRuneProtoTable::GetClassData() const { return &_class_data_; }


void TRuneProtoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRuneProtoTable*>(&to_msg);
  auto& from = static_cast<const TRuneProtoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TRuneProtoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_apply_eval().empty()) {
    _this->_internal_set_apply_eval(from._internal_apply_eval());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_sub_group() != 0) {
    _this->_internal_set_sub_group(from._internal_sub_group());
  }
  if (from._internal_apply_type() != 0) {
    _this->_internal_set_apply_type(from._internal_apply_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRuneProtoTable::CopyFrom(const TRuneProtoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TRuneProtoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRuneProtoTable::IsInitialized() const {
  return true;
}

void TRuneProtoTable::InternalSwap(TRuneProtoTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apply_eval_, lhs_arena,
      &other->_impl_.apply_eval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TRuneProtoTable, _impl_.apply_type_)
      + sizeof(TRuneProtoTable::_impl_.apply_type_)
      - PROTOBUF_FIELD_OFFSET(TRuneProtoTable, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRuneProtoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[37]);
}

// ===================================================================

class TRunePointProtoTable::_Internal {
 public:
};

TRunePointProtoTable::TRunePointProtoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TRunePointProtoTable)
}
TRunePointProtoTable::TRunePointProtoTable(const TRunePointProtoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRunePointProtoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){}
    , decltype(_impl_.refine_proto_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.point_, &from._impl_.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refine_proto_) -
    reinterpret_cast<char*>(&_impl_.point_)) + sizeof(_impl_.refine_proto_));
  // @@protoc_insertion_point(copy_constructor:network.TRunePointProtoTable)
}

inline void TRunePointProtoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){0u}
    , decltype(_impl_.refine_proto_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TRunePointProtoTable::~TRunePointProtoTable() {
  // @@protoc_insertion_point(destructor:network.TRunePointProtoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRunePointProtoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TRunePointProtoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRunePointProtoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TRunePointProtoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.refine_proto_) -
      reinterpret_cast<char*>(&_impl_.point_)) + sizeof(_impl_.refine_proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRunePointProtoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 refine_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.refine_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRunePointProtoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TRunePointProtoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point = 1;
  if (this->_internal_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_point(), target);
  }

  // uint32 refine_proto = 2;
  if (this->_internal_refine_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_refine_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TRunePointProtoTable)
  return target;
}

size_t TRunePointProtoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TRunePointProtoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 point = 1;
  if (this->_internal_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point());
  }

  // uint32 refine_proto = 2;
  if (this->_internal_refine_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refine_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRunePointProtoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRunePointProtoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRunePointProtoTable::GetClassData() const { return &_class_data_; }


void TRunePointProtoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRunePointProtoTable*>(&to_msg);
  auto& from = static_cast<const TRunePointProtoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TRunePointProtoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_point() != 0) {
    _this->_internal_set_point(from._internal_point());
  }
  if (from._internal_refine_proto() != 0) {
    _this->_internal_set_refine_proto(from._internal_refine_proto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRunePointProtoTable::CopyFrom(const TRunePointProtoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TRunePointProtoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRunePointProtoTable::IsInitialized() const {
  return true;
}

void TRunePointProtoTable::InternalSwap(TRunePointProtoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TRunePointProtoTable, _impl_.refine_proto_)
      + sizeof(TRunePointProtoTable::_impl_.refine_proto_)
      - PROTOBUF_FIELD_OFFSET(TRunePointProtoTable, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRunePointProtoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[38]);
}

// ===================================================================

class TXmasRewards::_Internal {
 public:
};

TXmasRewards::TXmasRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TXmasRewards)
}
TXmasRewards::TXmasRewards(const TXmasRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TXmasRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.day_, &from._impl_.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.TXmasRewards)
}

inline void TXmasRewards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TXmasRewards::~TXmasRewards() {
  // @@protoc_insertion_point(destructor:network.TXmasRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TXmasRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TXmasRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TXmasRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TXmasRewards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXmasRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TXmasRewards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TXmasRewards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 day = 1;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_day(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TXmasRewards)
  return target;
}

size_t TXmasRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TXmasRewards)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 day = 1;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TXmasRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TXmasRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TXmasRewards::GetClassData() const { return &_class_data_; }


void TXmasRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TXmasRewards*>(&to_msg);
  auto& from = static_cast<const TXmasRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TXmasRewards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TXmasRewards::CopyFrom(const TXmasRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TXmasRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXmasRewards::IsInitialized() const {
  return true;
}

void TXmasRewards::InternalSwap(TXmasRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TXmasRewards, _impl_.count_)
      + sizeof(TXmasRewards::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TXmasRewards, _impl_.day_)>(
          reinterpret_cast<char*>(&_impl_.day_),
          reinterpret_cast<char*>(&other->_impl_.day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TXmasRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[39]);
}

// ===================================================================

class TSoulProtoTable::_Internal {
 public:
};

TSoulProtoTable::TSoulProtoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TSoulProtoTable)
}
TSoulProtoTable::TSoulProtoTable(const TSoulProtoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSoulProtoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apply_values_){from._impl_.apply_values_}
    , /*decltype(_impl_._apply_values_cached_byte_size_)*/{0}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.soul_type_){}
    , decltype(_impl_.apply_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.apply_type_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.apply_type_));
  // @@protoc_insertion_point(copy_constructor:network.TSoulProtoTable)
}

inline void TSoulProtoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apply_values_){arena}
    , /*decltype(_impl_._apply_values_cached_byte_size_)*/{0}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.soul_type_){0u}
    , decltype(_impl_.apply_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TSoulProtoTable::~TSoulProtoTable() {
  // @@protoc_insertion_point(destructor:network.TSoulProtoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSoulProtoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apply_values_.~RepeatedField();
}

void TSoulProtoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSoulProtoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TSoulProtoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apply_values_.Clear();
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.apply_type_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.apply_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSoulProtoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 soul_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.soul_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.apply_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 apply_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_apply_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_apply_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TSoulProtoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TSoulProtoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 soul_type = 2;
  if (this->_internal_soul_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_soul_type(), target);
  }

  // uint32 apply_type = 3;
  if (this->_internal_apply_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apply_type(), target);
  }

  // repeated int32 apply_values = 4;
  {
    int byte_size = _impl_._apply_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_apply_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TSoulProtoTable)
  return target;
}

size_t TSoulProtoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TSoulProtoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 apply_values = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.apply_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._apply_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 soul_type = 2;
  if (this->_internal_soul_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_soul_type());
  }

  // uint32 apply_type = 3;
  if (this->_internal_apply_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSoulProtoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSoulProtoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSoulProtoTable::GetClassData() const { return &_class_data_; }


void TSoulProtoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSoulProtoTable*>(&to_msg);
  auto& from = static_cast<const TSoulProtoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TSoulProtoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apply_values_.MergeFrom(from._impl_.apply_values_);
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_soul_type() != 0) {
    _this->_internal_set_soul_type(from._internal_soul_type());
  }
  if (from._internal_apply_type() != 0) {
    _this->_internal_set_apply_type(from._internal_apply_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSoulProtoTable::CopyFrom(const TSoulProtoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TSoulProtoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSoulProtoTable::IsInitialized() const {
  return true;
}

void TSoulProtoTable::InternalSwap(TSoulProtoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apply_values_.InternalSwap(&other->_impl_.apply_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSoulProtoTable, _impl_.apply_type_)
      + sizeof(TSoulProtoTable::_impl_.apply_type_)
      - PROTOBUF_FIELD_OFFSET(TSoulProtoTable, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSoulProtoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[40]);
}

// ===================================================================

class TItemIDRangeTable::_Internal {
 public:
};

TItemIDRangeTable::TItemIDRangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemIDRangeTable)
}
TItemIDRangeTable::TItemIDRangeTable(const TItemIDRangeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemIDRangeTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_id_){}
    , decltype(_impl_.max_id_){}
    , decltype(_impl_.usable_item_id_min_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_id_, &from._impl_.min_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usable_item_id_min_) -
    reinterpret_cast<char*>(&_impl_.min_id_)) + sizeof(_impl_.usable_item_id_min_));
  // @@protoc_insertion_point(copy_constructor:network.TItemIDRangeTable)
}

inline void TItemIDRangeTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_id_){0u}
    , decltype(_impl_.max_id_){0u}
    , decltype(_impl_.usable_item_id_min_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemIDRangeTable::~TItemIDRangeTable() {
  // @@protoc_insertion_point(destructor:network.TItemIDRangeTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemIDRangeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemIDRangeTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemIDRangeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemIDRangeTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.min_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usable_item_id_min_) -
      reinterpret_cast<char*>(&_impl_.min_id_)) + sizeof(_impl_.usable_item_id_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemIDRangeTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 min_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.min_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 usable_item_id_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usable_item_id_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemIDRangeTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemIDRangeTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 min_id = 1;
  if (this->_internal_min_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_id(), target);
  }

  // uint32 max_id = 2;
  if (this->_internal_max_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_id(), target);
  }

  // uint32 usable_item_id_min = 3;
  if (this->_internal_usable_item_id_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_usable_item_id_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemIDRangeTable)
  return target;
}

size_t TItemIDRangeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemIDRangeTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 min_id = 1;
  if (this->_internal_min_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_id());
  }

  // uint32 max_id = 2;
  if (this->_internal_max_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_id());
  }

  // uint32 usable_item_id_min = 3;
  if (this->_internal_usable_item_id_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_usable_item_id_min());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemIDRangeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemIDRangeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemIDRangeTable::GetClassData() const { return &_class_data_; }


void TItemIDRangeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemIDRangeTable*>(&to_msg);
  auto& from = static_cast<const TItemIDRangeTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemIDRangeTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_min_id() != 0) {
    _this->_internal_set_min_id(from._internal_min_id());
  }
  if (from._internal_max_id() != 0) {
    _this->_internal_set_max_id(from._internal_max_id());
  }
  if (from._internal_usable_item_id_min() != 0) {
    _this->_internal_set_usable_item_id_min(from._internal_usable_item_id_min());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemIDRangeTable::CopyFrom(const TItemIDRangeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemIDRangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemIDRangeTable::IsInitialized() const {
  return true;
}

void TItemIDRangeTable::InternalSwap(TItemIDRangeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemIDRangeTable, _impl_.usable_item_id_min_)
      + sizeof(TItemIDRangeTable::_impl_.usable_item_id_min_)
      - PROTOBUF_FIELD_OFFSET(TItemIDRangeTable, _impl_.min_id_)>(
          reinterpret_cast<char*>(&_impl_.min_id_),
          reinterpret_cast<char*>(&other->_impl_.min_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemIDRangeTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[41]);
}

// ===================================================================

class TBattlepassData::_Internal {
 public:
};

TBattlepassData::TBattlepassData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TBattlepassData)
}
TBattlepassData::TBattlepassData(const TBattlepassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TBattlepassData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.task_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.reward_vnum_){}
    , decltype(_impl_.reward_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task().empty()) {
    _this->_impl_.task_.Set(from._internal_task(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reward_count_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.reward_count_));
  // @@protoc_insertion_point(copy_constructor:network.TBattlepassData)
}

inline void TBattlepassData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.task_){}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.reward_vnum_){0u}
    , decltype(_impl_.reward_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TBattlepassData::~TBattlepassData() {
  // @@protoc_insertion_point(destructor:network.TBattlepassData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TBattlepassData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.task_.Destroy();
}

void TBattlepassData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TBattlepassData::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TBattlepassData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.task_.ClearToEmpty();
  ::memset(&_impl_.progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reward_count_) -
      reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.reward_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TBattlepassData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_task();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reward_vnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.reward_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reward_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reward_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TBattlepassData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TBattlepassData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_progress(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes task = 3;
  if (!this->_internal_task().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_task(), target);
  }

  // uint32 reward_vnum = 4;
  if (this->_internal_reward_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_reward_vnum(), target);
  }

  // uint32 reward_count = 5;
  if (this->_internal_reward_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reward_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TBattlepassData)
  return target;
}

size_t TBattlepassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TBattlepassData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes task = 3;
  if (!this->_internal_task().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task());
  }

  // int32 progress = 1;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // uint32 reward_vnum = 4;
  if (this->_internal_reward_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reward_vnum());
  }

  // uint32 reward_count = 5;
  if (this->_internal_reward_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reward_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TBattlepassData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TBattlepassData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TBattlepassData::GetClassData() const { return &_class_data_; }


void TBattlepassData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TBattlepassData*>(&to_msg);
  auto& from = static_cast<const TBattlepassData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TBattlepassData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_task().empty()) {
    _this->_internal_set_task(from._internal_task());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_reward_vnum() != 0) {
    _this->_internal_set_reward_vnum(from._internal_reward_vnum());
  }
  if (from._internal_reward_count() != 0) {
    _this->_internal_set_reward_count(from._internal_reward_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TBattlepassData::CopyFrom(const TBattlepassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TBattlepassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattlepassData::IsInitialized() const {
  return true;
}

void TBattlepassData::InternalSwap(TBattlepassData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_, lhs_arena,
      &other->_impl_.task_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TBattlepassData, _impl_.reward_count_)
      + sizeof(TBattlepassData::_impl_.reward_count_)
      - PROTOBUF_FIELD_OFFSET(TBattlepassData, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TBattlepassData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[42]);
}

// ===================================================================

class TAdminInfo::_Internal {
 public:
};

TAdminInfo::TAdminInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TAdminInfo)
}
TAdminInfo::TAdminInfo(const TAdminInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TAdminInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.authority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.authority_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.authority_));
  // @@protoc_insertion_point(copy_constructor:network.TAdminInfo)
}

inline void TAdminInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.authority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TAdminInfo::~TAdminInfo() {
  // @@protoc_insertion_point(destructor:network.TAdminInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TAdminInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.name_.Destroy();
}

void TAdminInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TAdminInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TAdminInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.authority_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.authority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TAdminInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 authority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.authority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TAdminInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TAdminInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes account = 2;
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 authority = 4;
  if (this->_internal_authority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_authority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TAdminInfo)
  return target;
}

size_t TAdminInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TAdminInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 authority = 4;
  if (this->_internal_authority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_authority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TAdminInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TAdminInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TAdminInfo::GetClassData() const { return &_class_data_; }


void TAdminInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TAdminInfo*>(&to_msg);
  auto& from = static_cast<const TAdminInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TAdminInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_authority() != 0) {
    _this->_internal_set_authority(from._internal_authority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TAdminInfo::CopyFrom(const TAdminInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TAdminInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdminInfo::IsInitialized() const {
  return true;
}

void TAdminInfo::InternalSwap(TAdminInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TAdminInfo, _impl_.authority_)
      + sizeof(TAdminInfo::_impl_.authority_)
      - PROTOBUF_FIELD_OFFSET(TAdminInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TAdminInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[43]);
}

// ===================================================================

class TOfflineMessage::_Internal {
 public:
};

TOfflineMessage::TOfflineMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TOfflineMessage)
}
TOfflineMessage::TOfflineMessage(const TOfflineMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOfflineMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.is_gm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_gm_ = from._impl_.is_gm_;
  // @@protoc_insertion_point(copy_constructor:network.TOfflineMessage)
}

inline void TOfflineMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.is_gm_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TOfflineMessage::~TOfflineMessage() {
  // @@protoc_insertion_point(destructor:network.TOfflineMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOfflineMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.message_.Destroy();
}

void TOfflineMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOfflineMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TOfflineMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.is_gm_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOfflineMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_gm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_gm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOfflineMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TOfflineMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool is_gm = 3;
  if (this->_internal_is_gm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_gm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TOfflineMessage)
  return target;
}

size_t TOfflineMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TOfflineMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bool is_gm = 3;
  if (this->_internal_is_gm() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOfflineMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOfflineMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOfflineMessage::GetClassData() const { return &_class_data_; }


void TOfflineMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOfflineMessage*>(&to_msg);
  auto& from = static_cast<const TOfflineMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TOfflineMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_is_gm() != 0) {
    _this->_internal_set_is_gm(from._internal_is_gm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOfflineMessage::CopyFrom(const TOfflineMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TOfflineMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOfflineMessage::IsInitialized() const {
  return true;
}

void TOfflineMessage::InternalSwap(TOfflineMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.is_gm_, other->_impl_.is_gm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOfflineMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[44]);
}

// ===================================================================

class TGuildSafeboxLogTable::_Internal {
 public:
  static const ::network::TItemData& item(const TGuildSafeboxLogTable* msg);
};

const ::network::TItemData&
TGuildSafeboxLogTable::_Internal::item(const TGuildSafeboxLogTable* msg) {
  return *msg->_impl_.item_;
}
void TGuildSafeboxLogTable::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
TGuildSafeboxLogTable::TGuildSafeboxLogTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TGuildSafeboxLogTable)
}
TGuildSafeboxLogTable::TGuildSafeboxLogTable(const TGuildSafeboxLogTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TGuildSafeboxLogTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:network.TGuildSafeboxLogTable)
}

inline void TGuildSafeboxLogTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TGuildSafeboxLogTable::~TGuildSafeboxLogTable() {
  // @@protoc_insertion_point(destructor:network.TGuildSafeboxLogTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TGuildSafeboxLogTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_;
}

void TGuildSafeboxLogTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TGuildSafeboxLogTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TGuildSafeboxLogTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TGuildSafeboxLogTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes player_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemData item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TGuildSafeboxLogTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TGuildSafeboxLogTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // bytes player_name = 3;
  if (!this->_internal_player_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_player_name(), target);
  }

  // .network.TItemData item = 4;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // uint64 gold = 5;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gold(), target);
  }

  // uint32 time = 6;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TGuildSafeboxLogTable)
  return target;
}

size_t TGuildSafeboxLogTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TGuildSafeboxLogTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes player_name = 3;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  // .network.TItemData item = 4;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint64 gold = 5;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint32 time = 6;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TGuildSafeboxLogTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TGuildSafeboxLogTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TGuildSafeboxLogTable::GetClassData() const { return &_class_data_; }


void TGuildSafeboxLogTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TGuildSafeboxLogTable*>(&to_msg);
  auto& from = static_cast<const TGuildSafeboxLogTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TGuildSafeboxLogTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TGuildSafeboxLogTable::CopyFrom(const TGuildSafeboxLogTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TGuildSafeboxLogTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSafeboxLogTable::IsInitialized() const {
  return true;
}

void TGuildSafeboxLogTable::InternalSwap(TGuildSafeboxLogTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TGuildSafeboxLogTable, _impl_.time_)
      + sizeof(TGuildSafeboxLogTable::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(TGuildSafeboxLogTable, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TGuildSafeboxLogTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[45]);
}

// ===================================================================

class TMapLocation::_Internal {
 public:
};

TMapLocation::TMapLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TMapLocation)
}
TMapLocation::TMapLocation(const TMapLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TMapLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){from._impl_.maps_}
    , /*decltype(_impl_._maps_cached_byte_size_)*/{0}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:network.TMapLocation)
}

inline void TMapLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){arena}
    , /*decltype(_impl_._maps_cached_byte_size_)*/{0}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TMapLocation::~TMapLocation() {
  // @@protoc_insertion_point(destructor:network.TMapLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TMapLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maps_.~RepeatedField();
  _impl_.host_name_.Destroy();
}

void TMapLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TMapLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TMapLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maps_.Clear();
  _impl_.host_name_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TMapLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 maps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_maps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_maps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes host_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TMapLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TMapLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 maps = 1;
  {
    int byte_size = _impl_._maps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_maps(), byte_size, target);
    }
  }

  // bytes host_name = 2;
  if (!this->_internal_host_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TMapLocation)
  return target;
}

size_t TMapLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TMapLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 maps = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.maps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._maps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes host_name = 2;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_host_name());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TMapLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TMapLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TMapLocation::GetClassData() const { return &_class_data_; }


void TMapLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TMapLocation*>(&to_msg);
  auto& from = static_cast<const TMapLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TMapLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maps_.MergeFrom(from._impl_.maps_);
  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TMapLocation::CopyFrom(const TMapLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TMapLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMapLocation::IsInitialized() const {
  return true;
}

void TMapLocation::InternalSwap(TMapLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.maps_.InternalSwap(&other->_impl_.maps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TMapLocation, _impl_.channel_)
      + sizeof(TMapLocation::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(TMapLocation, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TMapLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[46]);
}

// ===================================================================

class TEquipmentChangerTable::_Internal {
 public:
};

TEquipmentChangerTable::TEquipmentChangerTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TEquipmentChangerTable)
}
TEquipmentChangerTable::TEquipmentChangerTable(const TEquipmentChangerTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TEquipmentChangerTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , /*decltype(_impl_._item_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.page_name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.rune_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.page_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_name().empty()) {
    _this->_impl_.page_name_.Set(from._internal_page_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rune_page_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.rune_page_));
  // @@protoc_insertion_point(copy_constructor:network.TEquipmentChangerTable)
}

inline void TEquipmentChangerTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_ids_){arena}
    , /*decltype(_impl_._item_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.page_name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.rune_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.page_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TEquipmentChangerTable::~TEquipmentChangerTable() {
  // @@protoc_insertion_point(destructor:network.TEquipmentChangerTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TEquipmentChangerTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
  _impl_.page_name_.Destroy();
}

void TEquipmentChangerTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TEquipmentChangerTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TEquipmentChangerTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _impl_.page_name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rune_page_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.rune_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TEquipmentChangerTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes page_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 item_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rune_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rune_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TEquipmentChangerTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TEquipmentChangerTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bytes page_name = 3;
  if (!this->_internal_page_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_page_name(), target);
  }

  // repeated uint32 item_ids = 4;
  {
    int byte_size = _impl_._item_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_item_ids(), byte_size, target);
    }
  }

  // uint32 rune_page = 5;
  if (this->_internal_rune_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rune_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TEquipmentChangerTable)
  return target;
}

size_t TEquipmentChangerTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TEquipmentChangerTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.item_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._item_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes page_name = 3;
  if (!this->_internal_page_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_page_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 rune_page = 5;
  if (this->_internal_rune_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rune_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TEquipmentChangerTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TEquipmentChangerTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TEquipmentChangerTable::GetClassData() const { return &_class_data_; }


void TEquipmentChangerTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TEquipmentChangerTable*>(&to_msg);
  auto& from = static_cast<const TEquipmentChangerTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TEquipmentChangerTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  if (!from._internal_page_name().empty()) {
    _this->_internal_set_page_name(from._internal_page_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_rune_page() != 0) {
    _this->_internal_set_rune_page(from._internal_rune_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TEquipmentChangerTable::CopyFrom(const TEquipmentChangerTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TEquipmentChangerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEquipmentChangerTable::IsInitialized() const {
  return true;
}

void TEquipmentChangerTable::InternalSwap(TEquipmentChangerTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_name_, lhs_arena,
      &other->_impl_.page_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TEquipmentChangerTable, _impl_.rune_page_)
      + sizeof(TEquipmentChangerTable::_impl_.rune_page_)
      - PROTOBUF_FIELD_OFFSET(TEquipmentChangerTable, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TEquipmentChangerTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[47]);
}

// ===================================================================

class TEquipmentPageInfo::_Internal {
 public:
};

TEquipmentPageInfo::TEquipmentPageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TEquipmentPageInfo)
}
TEquipmentPageInfo::TEquipmentPageInfo(const TEquipmentPageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TEquipmentPageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cells_){from._impl_.item_cells_}
    , /*decltype(_impl_._item_cells_cached_byte_size_)*/{0}
    , decltype(_impl_.page_name_){}
    , decltype(_impl_.rune_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.page_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_name().empty()) {
    _this->_impl_.page_name_.Set(from._internal_page_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.rune_page_ = from._impl_.rune_page_;
  // @@protoc_insertion_point(copy_constructor:network.TEquipmentPageInfo)
}

inline void TEquipmentPageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cells_){arena}
    , /*decltype(_impl_._item_cells_cached_byte_size_)*/{0}
    , decltype(_impl_.page_name_){}
    , decltype(_impl_.rune_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.page_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TEquipmentPageInfo::~TEquipmentPageInfo() {
  // @@protoc_insertion_point(destructor:network.TEquipmentPageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TEquipmentPageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_cells_.~RepeatedField();
  _impl_.page_name_.Destroy();
}

void TEquipmentPageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TEquipmentPageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TEquipmentPageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_cells_.Clear();
  _impl_.page_name_.ClearToEmpty();
  _impl_.rune_page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TEquipmentPageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes page_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_page_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 item_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_item_cells(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_item_cells(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rune_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rune_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TEquipmentPageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TEquipmentPageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes page_name = 1;
  if (!this->_internal_page_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_page_name(), target);
  }

  // repeated sint32 item_cells = 2;
  {
    int byte_size = _impl_._item_cells_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          2, _internal_item_cells(), byte_size, target);
    }
  }

  // uint32 rune_page = 3;
  if (this->_internal_rune_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rune_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TEquipmentPageInfo)
  return target;
}

size_t TEquipmentPageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TEquipmentPageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 item_cells = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.item_cells_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._item_cells_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes page_name = 1;
  if (!this->_internal_page_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_page_name());
  }

  // uint32 rune_page = 3;
  if (this->_internal_rune_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rune_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TEquipmentPageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TEquipmentPageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TEquipmentPageInfo::GetClassData() const { return &_class_data_; }


void TEquipmentPageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TEquipmentPageInfo*>(&to_msg);
  auto& from = static_cast<const TEquipmentPageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TEquipmentPageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_cells_.MergeFrom(from._impl_.item_cells_);
  if (!from._internal_page_name().empty()) {
    _this->_internal_set_page_name(from._internal_page_name());
  }
  if (from._internal_rune_page() != 0) {
    _this->_internal_set_rune_page(from._internal_rune_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TEquipmentPageInfo::CopyFrom(const TEquipmentPageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TEquipmentPageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEquipmentPageInfo::IsInitialized() const {
  return true;
}

void TEquipmentPageInfo::InternalSwap(TEquipmentPageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_cells_.InternalSwap(&other->_impl_.item_cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_name_, lhs_arena,
      &other->_impl_.page_name_, rhs_arena
  );
  swap(_impl_.rune_page_, other->_impl_.rune_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TEquipmentPageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[48]);
}

// ===================================================================

class TCombatZoneRankingPlayer::_Internal {
 public:
};

TCombatZoneRankingPlayer::TCombatZoneRankingPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TCombatZoneRankingPlayer)
}
TCombatZoneRankingPlayer::TCombatZoneRankingPlayer(const TCombatZoneRankingPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TCombatZoneRankingPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.points_){}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.empire_, &from._impl_.empire_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.empire_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:network.TCombatZoneRankingPlayer)
}

inline void TCombatZoneRankingPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.points_){0u}
    , decltype(_impl_.rank_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TCombatZoneRankingPlayer::~TCombatZoneRankingPlayer() {
  // @@protoc_insertion_point(destructor:network.TCombatZoneRankingPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TCombatZoneRankingPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TCombatZoneRankingPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TCombatZoneRankingPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TCombatZoneRankingPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.empire_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rank_) -
      reinterpret_cast<char*>(&_impl_.empire_)) + sizeof(_impl_.rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TCombatZoneRankingPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TCombatZoneRankingPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TCombatZoneRankingPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 empire = 2;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_empire(), target);
  }

  // uint32 points = 3;
  if (this->_internal_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  // uint32 rank = 4;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TCombatZoneRankingPlayer)
  return target;
}

size_t TCombatZoneRankingPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TCombatZoneRankingPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 empire = 2;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 points = 3;
  if (this->_internal_points() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_points());
  }

  // uint32 rank = 4;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TCombatZoneRankingPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TCombatZoneRankingPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TCombatZoneRankingPlayer::GetClassData() const { return &_class_data_; }


void TCombatZoneRankingPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TCombatZoneRankingPlayer*>(&to_msg);
  auto& from = static_cast<const TCombatZoneRankingPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TCombatZoneRankingPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_points() != 0) {
    _this->_internal_set_points(from._internal_points());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TCombatZoneRankingPlayer::CopyFrom(const TCombatZoneRankingPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TCombatZoneRankingPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCombatZoneRankingPlayer::IsInitialized() const {
  return true;
}

void TCombatZoneRankingPlayer::InternalSwap(TCombatZoneRankingPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TCombatZoneRankingPlayer, _impl_.rank_)
      + sizeof(TCombatZoneRankingPlayer::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(TCombatZoneRankingPlayer, _impl_.empire_)>(
          reinterpret_cast<char*>(&_impl_.empire_),
          reinterpret_cast<char*>(&other->_impl_.empire_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TCombatZoneRankingPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[49]);
}

// ===================================================================

class TSimplePlayer::_Internal {
 public:
};

TSimplePlayer::TSimplePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TSimplePlayer)
}
TSimplePlayer::TSimplePlayer(const TSimplePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSimplePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.play_minutes_){}
    , decltype(_impl_.st_){}
    , decltype(_impl_.ht_){}
    , decltype(_impl_.dx_){}
    , decltype(_impl_.iq_){}
    , decltype(_impl_.main_part_){}
    , decltype(_impl_.hair_part_){}
    , decltype(_impl_.acce_part_){}
    , decltype(_impl_.change_name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.skill_group_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.hair_base_part_){}
    , decltype(_impl_.last_playtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_name().empty()) {
    _this->_impl_.guild_name_.Set(from._internal_guild_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_playtime_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_playtime_));
  // @@protoc_insertion_point(copy_constructor:network.TSimplePlayer)
}

inline void TSimplePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_name_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.job_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.play_minutes_){0u}
    , decltype(_impl_.st_){0u}
    , decltype(_impl_.ht_){0u}
    , decltype(_impl_.dx_){0u}
    , decltype(_impl_.iq_){0u}
    , decltype(_impl_.main_part_){0u}
    , decltype(_impl_.hair_part_){0u}
    , decltype(_impl_.acce_part_){0u}
    , decltype(_impl_.change_name_){false}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.addr_){0}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.skill_group_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.hair_base_part_){0u}
    , decltype(_impl_.last_playtime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TSimplePlayer::~TSimplePlayer() {
  // @@protoc_insertion_point(destructor:network.TSimplePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSimplePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.guild_name_.Destroy();
}

void TSimplePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSimplePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TSimplePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.guild_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_playtime_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_playtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSimplePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 job = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 play_minutes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.play_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 st = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ht = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ht_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 iq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.iq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 main_part = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.main_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hair_part = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.hair_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 acce_part = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.acce_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool change_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.change_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 addr = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_group = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.skill_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes guild_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hair_base_part = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.hair_base_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_playtime = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.last_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TSimplePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TSimplePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 job = 3;
  if (this->_internal_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_job(), target);
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 play_minutes = 5;
  if (this->_internal_play_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_play_minutes(), target);
  }

  // uint32 st = 6;
  if (this->_internal_st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_st(), target);
  }

  // uint32 ht = 7;
  if (this->_internal_ht() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ht(), target);
  }

  // uint32 dx = 8;
  if (this->_internal_dx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dx(), target);
  }

  // uint32 iq = 9;
  if (this->_internal_iq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_iq(), target);
  }

  // uint32 main_part = 10;
  if (this->_internal_main_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_main_part(), target);
  }

  // uint32 hair_part = 11;
  if (this->_internal_hair_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hair_part(), target);
  }

  // uint32 acce_part = 12;
  if (this->_internal_acce_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_acce_part(), target);
  }

  // bool change_name = 13;
  if (this->_internal_change_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_change_name(), target);
  }

  // int32 x = 14;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_x(), target);
  }

  // int32 y = 15;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_y(), target);
  }

  // int32 addr = 16;
  if (this->_internal_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_addr(), target);
  }

  // uint32 port = 17;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_port(), target);
  }

  // uint32 skill_group = 18;
  if (this->_internal_skill_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_skill_group(), target);
  }

  // uint32 guild_id = 19;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_guild_id(), target);
  }

  // bytes guild_name = 20;
  if (!this->_internal_guild_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_guild_name(), target);
  }

  // uint32 hair_base_part = 21;
  if (this->_internal_hair_base_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_hair_base_part(), target);
  }

  // uint32 last_playtime = 22;
  if (this->_internal_last_playtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_last_playtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TSimplePlayer)
  return target;
}

size_t TSimplePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TSimplePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes guild_name = 20;
  if (!this->_internal_guild_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_guild_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 job = 3;
  if (this->_internal_job() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_job());
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 play_minutes = 5;
  if (this->_internal_play_minutes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_play_minutes());
  }

  // uint32 st = 6;
  if (this->_internal_st() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_st());
  }

  // uint32 ht = 7;
  if (this->_internal_ht() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ht());
  }

  // uint32 dx = 8;
  if (this->_internal_dx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dx());
  }

  // uint32 iq = 9;
  if (this->_internal_iq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_iq());
  }

  // uint32 main_part = 10;
  if (this->_internal_main_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_main_part());
  }

  // uint32 hair_part = 11;
  if (this->_internal_hair_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hair_part());
  }

  // uint32 acce_part = 12;
  if (this->_internal_acce_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_acce_part());
  }

  // bool change_name = 13;
  if (this->_internal_change_name() != 0) {
    total_size += 1 + 1;
  }

  // int32 x = 14;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 15;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 addr = 16;
  if (this->_internal_addr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_addr());
  }

  // uint32 port = 17;
  if (this->_internal_port() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 skill_group = 18;
  if (this->_internal_skill_group() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_skill_group());
  }

  // uint32 guild_id = 19;
  if (this->_internal_guild_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_guild_id());
  }

  // uint32 hair_base_part = 21;
  if (this->_internal_hair_base_part() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_hair_base_part());
  }

  // uint32 last_playtime = 22;
  if (this->_internal_last_playtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_last_playtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSimplePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSimplePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSimplePlayer::GetClassData() const { return &_class_data_; }


void TSimplePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSimplePlayer*>(&to_msg);
  auto& from = static_cast<const TSimplePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TSimplePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_guild_name().empty()) {
    _this->_internal_set_guild_name(from._internal_guild_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_job() != 0) {
    _this->_internal_set_job(from._internal_job());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_play_minutes() != 0) {
    _this->_internal_set_play_minutes(from._internal_play_minutes());
  }
  if (from._internal_st() != 0) {
    _this->_internal_set_st(from._internal_st());
  }
  if (from._internal_ht() != 0) {
    _this->_internal_set_ht(from._internal_ht());
  }
  if (from._internal_dx() != 0) {
    _this->_internal_set_dx(from._internal_dx());
  }
  if (from._internal_iq() != 0) {
    _this->_internal_set_iq(from._internal_iq());
  }
  if (from._internal_main_part() != 0) {
    _this->_internal_set_main_part(from._internal_main_part());
  }
  if (from._internal_hair_part() != 0) {
    _this->_internal_set_hair_part(from._internal_hair_part());
  }
  if (from._internal_acce_part() != 0) {
    _this->_internal_set_acce_part(from._internal_acce_part());
  }
  if (from._internal_change_name() != 0) {
    _this->_internal_set_change_name(from._internal_change_name());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_skill_group() != 0) {
    _this->_internal_set_skill_group(from._internal_skill_group());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_hair_base_part() != 0) {
    _this->_internal_set_hair_base_part(from._internal_hair_base_part());
  }
  if (from._internal_last_playtime() != 0) {
    _this->_internal_set_last_playtime(from._internal_last_playtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSimplePlayer::CopyFrom(const TSimplePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TSimplePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSimplePlayer::IsInitialized() const {
  return true;
}

void TSimplePlayer::InternalSwap(TSimplePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_name_, lhs_arena,
      &other->_impl_.guild_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSimplePlayer, _impl_.last_playtime_)
      + sizeof(TSimplePlayer::_impl_.last_playtime_)
      - PROTOBUF_FIELD_OFFSET(TSimplePlayer, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSimplePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[50]);
}

// ===================================================================

class TAccountTable::_Internal {
 public:
};

TAccountTable::TAccountTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TAccountTable)
}
TAccountTable::TAccountTable(const TAccountTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TAccountTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.hwid_){}
    , decltype(_impl_.social_id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.hwid2_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.tradeblock_){}
    , decltype(_impl_.hwid2ban_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.coins_){}
    , decltype(_impl_.temp_login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hwid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hwid().empty()) {
    _this->_impl_.hwid_.Set(from._internal_hwid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.social_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.social_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_social_id().empty()) {
    _this->_impl_.social_id_.Set(from._internal_social_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hwid2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hwid2().empty()) {
    _this->_impl_.hwid2_.Set(from._internal_hwid2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.temp_login_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.temp_login_));
  // @@protoc_insertion_point(copy_constructor:network.TAccountTable)
}

inline void TAccountTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.hwid_){}
    , decltype(_impl_.social_id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.hwid2_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.tradeblock_){0u}
    , decltype(_impl_.hwid2ban_){0u}
    , decltype(_impl_.language_){0u}
    , decltype(_impl_.coins_){false}
    , decltype(_impl_.temp_login_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hwid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.social_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.social_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hwid2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TAccountTable::~TAccountTable() {
  // @@protoc_insertion_point(destructor:network.TAccountTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TAccountTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.login_.Destroy();
  _impl_.passwd_.Destroy();
  _impl_.hwid_.Destroy();
  _impl_.social_id_.Destroy();
  _impl_.status_.Destroy();
  _impl_.hwid2_.Destroy();
}

void TAccountTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TAccountTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TAccountTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.login_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _impl_.hwid_.ClearToEmpty();
  _impl_.social_id_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.hwid2_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.temp_login_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.temp_login_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TAccountTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hwid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hwid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes social_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_social_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TSimplePlayer players = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 tradeblock = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tradeblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hwid2ban = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.hwid2ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hwid2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_hwid2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool coins = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.coins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 language = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool temp_login = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.temp_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TAccountTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TAccountTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  // bytes passwd = 3;
  if (!this->_internal_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_passwd(), target);
  }

  // bytes hwid = 4;
  if (!this->_internal_hwid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hwid(), target);
  }

  // bytes social_id = 5;
  if (!this->_internal_social_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_social_id(), target);
  }

  // bytes status = 6;
  if (!this->_internal_status().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_status(), target);
  }

  // uint32 empire = 7;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_empire(), target);
  }

  // repeated .network.TSimplePlayer players = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 tradeblock = 9;
  if (this->_internal_tradeblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tradeblock(), target);
  }

  // uint32 hwid2ban = 10;
  if (this->_internal_hwid2ban() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hwid2ban(), target);
  }

  // bytes hwid2 = 11;
  if (!this->_internal_hwid2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_hwid2(), target);
  }

  // bool coins = 12;
  if (this->_internal_coins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_coins(), target);
  }

  // uint32 language = 13;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_language(), target);
  }

  // bool temp_login = 14;
  if (this->_internal_temp_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_temp_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TAccountTable)
  return target;
}

size_t TAccountTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TAccountTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TSimplePlayer players = 8;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes passwd = 3;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passwd());
  }

  // bytes hwid = 4;
  if (!this->_internal_hwid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hwid());
  }

  // bytes social_id = 5;
  if (!this->_internal_social_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_social_id());
  }

  // bytes status = 6;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // bytes hwid2 = 11;
  if (!this->_internal_hwid2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hwid2());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 empire = 7;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 tradeblock = 9;
  if (this->_internal_tradeblock() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tradeblock());
  }

  // uint32 hwid2ban = 10;
  if (this->_internal_hwid2ban() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hwid2ban());
  }

  // uint32 language = 13;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
  }

  // bool coins = 12;
  if (this->_internal_coins() != 0) {
    total_size += 1 + 1;
  }

  // bool temp_login = 14;
  if (this->_internal_temp_login() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TAccountTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TAccountTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TAccountTable::GetClassData() const { return &_class_data_; }


void TAccountTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TAccountTable*>(&to_msg);
  auto& from = static_cast<const TAccountTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TAccountTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  if (!from._internal_hwid().empty()) {
    _this->_internal_set_hwid(from._internal_hwid());
  }
  if (!from._internal_social_id().empty()) {
    _this->_internal_set_social_id(from._internal_social_id());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_hwid2().empty()) {
    _this->_internal_set_hwid2(from._internal_hwid2());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_tradeblock() != 0) {
    _this->_internal_set_tradeblock(from._internal_tradeblock());
  }
  if (from._internal_hwid2ban() != 0) {
    _this->_internal_set_hwid2ban(from._internal_hwid2ban());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_coins() != 0) {
    _this->_internal_set_coins(from._internal_coins());
  }
  if (from._internal_temp_login() != 0) {
    _this->_internal_set_temp_login(from._internal_temp_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TAccountTable::CopyFrom(const TAccountTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TAccountTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAccountTable::IsInitialized() const {
  return true;
}

void TAccountTable::InternalSwap(TAccountTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hwid_, lhs_arena,
      &other->_impl_.hwid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.social_id_, lhs_arena,
      &other->_impl_.social_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hwid2_, lhs_arena,
      &other->_impl_.hwid2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TAccountTable, _impl_.temp_login_)
      + sizeof(TAccountTable::_impl_.temp_login_)
      - PROTOBUF_FIELD_OFFSET(TAccountTable, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TAccountTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[51]);
}

// ===================================================================

class TItemPriceInfo::_Internal {
 public:
};

TItemPriceInfo::TItemPriceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemPriceInfo)
}
TItemPriceInfo::TItemPriceInfo(const TItemPriceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemPriceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){}
    , decltype(_impl_.vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vnum_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.vnum_));
  // @@protoc_insertion_point(copy_constructor:network.TItemPriceInfo)
}

inline void TItemPriceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){int64_t{0}}
    , decltype(_impl_.vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemPriceInfo::~TItemPriceInfo() {
  // @@protoc_insertion_point(destructor:network.TItemPriceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemPriceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemPriceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemPriceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemPriceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vnum_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemPriceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemPriceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemPriceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // int64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemPriceInfo)
  return target;
}

size_t TItemPriceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemPriceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_price());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemPriceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemPriceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemPriceInfo::GetClassData() const { return &_class_data_; }


void TItemPriceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemPriceInfo*>(&to_msg);
  auto& from = static_cast<const TItemPriceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemPriceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemPriceInfo::CopyFrom(const TItemPriceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemPriceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemPriceInfo::IsInitialized() const {
  return true;
}

void TItemPriceInfo::InternalSwap(TItemPriceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemPriceInfo, _impl_.vnum_)
      + sizeof(TItemPriceInfo::_impl_.vnum_)
      - PROTOBUF_FIELD_OFFSET(TItemPriceInfo, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemPriceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[52]);
}

// ===================================================================

class TChannelStatus::_Internal {
 public:
};

TChannelStatus::TChannelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TChannelStatus)
}
TChannelStatus::TChannelStatus(const TChannelStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TChannelStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:network.TChannelStatus)
}

inline void TChannelStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TChannelStatus::~TChannelStatus() {
  // @@protoc_insertion_point(destructor:network.TChannelStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TChannelStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TChannelStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TChannelStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TChannelStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TChannelStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TChannelStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TChannelStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TChannelStatus)
  return target;
}

size_t TChannelStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TChannelStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TChannelStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TChannelStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TChannelStatus::GetClassData() const { return &_class_data_; }


void TChannelStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TChannelStatus*>(&to_msg);
  auto& from = static_cast<const TChannelStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TChannelStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TChannelStatus::CopyFrom(const TChannelStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChannelStatus::IsInitialized() const {
  return true;
}

void TChannelStatus::InternalSwap(TChannelStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TChannelStatus, _impl_.status_)
      + sizeof(TChannelStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TChannelStatus, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TChannelStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[53]);
}

// ===================================================================

class TPacketLoginOnSetup::_Internal {
 public:
};

TPacketLoginOnSetup::TPacketLoginOnSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TPacketLoginOnSetup)
}
TPacketLoginOnSetup::TPacketLoginOnSetup(const TPacketLoginOnSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPacketLoginOnSetup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){from._impl_.client_keys_}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.social_id_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.login_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.social_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.social_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_social_id().empty()) {
    _this->_impl_.social_id_.Set(from._internal_social_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_key_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.login_key_));
  // @@protoc_insertion_point(copy_constructor:network.TPacketLoginOnSetup)
}

inline void TPacketLoginOnSetup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){arena}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.social_id_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.login_key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.social_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.social_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TPacketLoginOnSetup::~TPacketLoginOnSetup() {
  // @@protoc_insertion_point(destructor:network.TPacketLoginOnSetup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPacketLoginOnSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_keys_.~RepeatedField();
  _impl_.login_.Destroy();
  _impl_.social_id_.Destroy();
  _impl_.host_.Destroy();
}

void TPacketLoginOnSetup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPacketLoginOnSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TPacketLoginOnSetup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_keys_.Clear();
  _impl_.login_.ClearToEmpty();
  _impl_.social_id_.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.login_key_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.login_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPacketLoginOnSetup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes social_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_social_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes host = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 login_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.login_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 client_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_client_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPacketLoginOnSetup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TPacketLoginOnSetup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  // bytes social_id = 3;
  if (!this->_internal_social_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_social_id(), target);
  }

  // bytes host = 4;
  if (!this->_internal_host().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_host(), target);
  }

  // uint32 login_key = 5;
  if (this->_internal_login_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_key(), target);
  }

  // repeated uint32 client_keys = 6;
  {
    int byte_size = _impl_._client_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_client_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TPacketLoginOnSetup)
  return target;
}

size_t TPacketLoginOnSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TPacketLoginOnSetup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_keys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.client_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._client_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes social_id = 3;
  if (!this->_internal_social_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_social_id());
  }

  // bytes host = 4;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_host());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 login_key = 5;
  if (this->_internal_login_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPacketLoginOnSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPacketLoginOnSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPacketLoginOnSetup::GetClassData() const { return &_class_data_; }


void TPacketLoginOnSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPacketLoginOnSetup*>(&to_msg);
  auto& from = static_cast<const TPacketLoginOnSetup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TPacketLoginOnSetup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_keys_.MergeFrom(from._impl_.client_keys_);
  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_social_id().empty()) {
    _this->_internal_set_social_id(from._internal_social_id());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_login_key() != 0) {
    _this->_internal_set_login_key(from._internal_login_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPacketLoginOnSetup::CopyFrom(const TPacketLoginOnSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TPacketLoginOnSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPacketLoginOnSetup::IsInitialized() const {
  return true;
}

void TPacketLoginOnSetup::InternalSwap(TPacketLoginOnSetup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.client_keys_.InternalSwap(&other->_impl_.client_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.social_id_, lhs_arena,
      &other->_impl_.social_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPacketLoginOnSetup, _impl_.login_key_)
      + sizeof(TPacketLoginOnSetup::_impl_.login_key_)
      - PROTOBUF_FIELD_OFFSET(TPacketLoginOnSetup, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPacketLoginOnSetup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[54]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::SyncPositionElement*
Arena::CreateMaybeMessage< ::network::SyncPositionElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::SyncPositionElement >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TGuildMemberInfo*
Arena::CreateMaybeMessage< ::network::TGuildMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TGuildMemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TOnlinePlayerInfo*
Arena::CreateMaybeMessage< ::network::TOnlinePlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TOnlinePlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TTargetMonsterDropInfoTable*
Arena::CreateMaybeMessage< ::network::TTargetMonsterDropInfoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TTargetMonsterDropInfoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TEventManagerTagTeam*
Arena::CreateMaybeMessage< ::network::TEventManagerTagTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TEventManagerTagTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TCrystalProto*
Arena::CreateMaybeMessage< ::network::TCrystalProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TCrystalProto >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TMobSkillLevel*
Arena::CreateMaybeMessage< ::network::TMobSkillLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TMobSkillLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TMobTable*
Arena::CreateMaybeMessage< ::network::TMobTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TMobTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TRepeatedMobTable*
Arena::CreateMaybeMessage< ::network::TRepeatedMobTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TRepeatedMobTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemLimit*
Arena::CreateMaybeMessage< ::network::TItemLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemApply*
Arena::CreateMaybeMessage< ::network::TItemApply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemApply >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemTable*
Arena::CreateMaybeMessage< ::network::TItemTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TRepeatedItemTable*
Arena::CreateMaybeMessage< ::network::TRepeatedItemTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TRepeatedItemTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TShopTable*
Arena::CreateMaybeMessage< ::network::TShopTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TShopTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TDataAuctionSearch_ItemType*
Arena::CreateMaybeMessage< ::network::TDataAuctionSearch_ItemType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TDataAuctionSearch_ItemType >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TDataAuctionSearch*
Arena::CreateMaybeMessage< ::network::TDataAuctionSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TDataAuctionSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TExtendedDataAuctionSearch*
Arena::CreateMaybeMessage< ::network::TExtendedDataAuctionSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TExtendedDataAuctionSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TAuctionShopHistoryElement*
Arena::CreateMaybeMessage< ::network::TAuctionShopHistoryElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TAuctionShopHistoryElement >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TSkillTable*
Arena::CreateMaybeMessage< ::network::TSkillTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TSkillTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TRefineMaterial*
Arena::CreateMaybeMessage< ::network::TRefineMaterial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TRefineMaterial >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TSwitchbotTable*
Arena::CreateMaybeMessage< ::network::TSwitchbotTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TSwitchbotTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TRefineTable*
Arena::CreateMaybeMessage< ::network::TRefineTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TRefineTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TWikiRefineInfo*
Arena::CreateMaybeMessage< ::network::TWikiRefineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TWikiRefineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TWikiChestDropInfo*
Arena::CreateMaybeMessage< ::network::TWikiChestDropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TWikiChestDropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TWikiItemOriginInfo*
Arena::CreateMaybeMessage< ::network::TWikiItemOriginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TWikiItemOriginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TWikiInfoTable*
Arena::CreateMaybeMessage< ::network::TWikiInfoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TWikiInfoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemAttrTable*
Arena::CreateMaybeMessage< ::network::TItemAttrTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemAttrTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TGuildLadderInfo*
Arena::CreateMaybeMessage< ::network::TGuildLadderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TGuildLadderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TBuildingLand*
Arena::CreateMaybeMessage< ::network::TBuildingLand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TBuildingLand >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TBuildingObjectMaterial*
Arena::CreateMaybeMessage< ::network::TBuildingObjectMaterial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TBuildingObjectMaterial >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TBuildingObjectProto*
Arena::CreateMaybeMessage< ::network::TBuildingObjectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TBuildingObjectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TBuildingObject*
Arena::CreateMaybeMessage< ::network::TBuildingObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TBuildingObject >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TGuildSafeboxInitial*
Arena::CreateMaybeMessage< ::network::TGuildSafeboxInitial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TGuildSafeboxInitial >(arena);
}
template<> PROTOBUF_NOINLINE ::network::THorseUpgradeProto*
Arena::CreateMaybeMessage< ::network::THorseUpgradeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::THorseUpgradeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::network::THorseBonusProto*
Arena::CreateMaybeMessage< ::network::THorseBonusProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::THorseBonusProto >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TGayaShopData*
Arena::CreateMaybeMessage< ::network::TGayaShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TGayaShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TAttrtreeProto*
Arena::CreateMaybeMessage< ::network::TAttrtreeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TAttrtreeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TRuneProtoTable*
Arena::CreateMaybeMessage< ::network::TRuneProtoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TRuneProtoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TRunePointProtoTable*
Arena::CreateMaybeMessage< ::network::TRunePointProtoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TRunePointProtoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TXmasRewards*
Arena::CreateMaybeMessage< ::network::TXmasRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TXmasRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TSoulProtoTable*
Arena::CreateMaybeMessage< ::network::TSoulProtoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TSoulProtoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemIDRangeTable*
Arena::CreateMaybeMessage< ::network::TItemIDRangeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemIDRangeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TBattlepassData*
Arena::CreateMaybeMessage< ::network::TBattlepassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TBattlepassData >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TAdminInfo*
Arena::CreateMaybeMessage< ::network::TAdminInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TAdminInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TOfflineMessage*
Arena::CreateMaybeMessage< ::network::TOfflineMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TOfflineMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TGuildSafeboxLogTable*
Arena::CreateMaybeMessage< ::network::TGuildSafeboxLogTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TGuildSafeboxLogTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TMapLocation*
Arena::CreateMaybeMessage< ::network::TMapLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TMapLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TEquipmentChangerTable*
Arena::CreateMaybeMessage< ::network::TEquipmentChangerTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TEquipmentChangerTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TEquipmentPageInfo*
Arena::CreateMaybeMessage< ::network::TEquipmentPageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TEquipmentPageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TCombatZoneRankingPlayer*
Arena::CreateMaybeMessage< ::network::TCombatZoneRankingPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TCombatZoneRankingPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TSimplePlayer*
Arena::CreateMaybeMessage< ::network::TSimplePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TSimplePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TAccountTable*
Arena::CreateMaybeMessage< ::network::TAccountTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TAccountTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemPriceInfo*
Arena::CreateMaybeMessage< ::network::TItemPriceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemPriceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TChannelStatus*
Arena::CreateMaybeMessage< ::network::TChannelStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TChannelStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TPacketLoginOnSetup*
Arena::CreateMaybeMessage< ::network::TPacketLoginOnSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TPacketLoginOnSetup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
