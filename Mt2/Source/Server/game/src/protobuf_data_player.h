// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fplayer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fplayer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fplayer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fplayer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fplayer_2eproto;
class TPacketAffectElement;
struct TPacketAffectElementDefaultTypeInternal;
extern TPacketAffectElementDefaultTypeInternal _TPacketAffectElement_default_instance_;
class TPlayerFishEventSlot;
struct TPlayerFishEventSlotDefaultTypeInternal;
extern TPlayerFishEventSlotDefaultTypeInternal _TPlayerFishEventSlot_default_instance_;
class TPlayerSkill;
struct TPlayerSkillDefaultTypeInternal;
extern TPlayerSkillDefaultTypeInternal _TPlayerSkill_default_instance_;
class TPlayerTable;
struct TPlayerTableDefaultTypeInternal;
extern TPlayerTableDefaultTypeInternal _TPlayerTable_default_instance_;
class TQuestTable;
struct TQuestTableDefaultTypeInternal;
extern TQuestTableDefaultTypeInternal _TQuestTable_default_instance_;
class TQuickslot;
struct TQuickslotDefaultTypeInternal;
extern TQuickslotDefaultTypeInternal _TQuickslot_default_instance_;
class TRunePageData;
struct TRunePageDataDefaultTypeInternal;
extern TRunePageDataDefaultTypeInternal _TRunePageData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TPacketAffectElement* Arena::CreateMaybeMessage<::TPacketAffectElement>(Arena*);
template<> ::TPlayerFishEventSlot* Arena::CreateMaybeMessage<::TPlayerFishEventSlot>(Arena*);
template<> ::TPlayerSkill* Arena::CreateMaybeMessage<::TPlayerSkill>(Arena*);
template<> ::TPlayerTable* Arena::CreateMaybeMessage<::TPlayerTable>(Arena*);
template<> ::TQuestTable* Arena::CreateMaybeMessage<::TQuestTable>(Arena*);
template<> ::TQuickslot* Arena::CreateMaybeMessage<::TQuickslot>(Arena*);
template<> ::TRunePageData* Arena::CreateMaybeMessage<::TRunePageData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TPlayerSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TPlayerSkill) */ {
 public:
  inline TPlayerSkill() : TPlayerSkill(nullptr) {}
  ~TPlayerSkill() override;
  explicit PROTOBUF_CONSTEXPR TPlayerSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPlayerSkill(const TPlayerSkill& from);
  TPlayerSkill(TPlayerSkill&& from) noexcept
    : TPlayerSkill() {
    *this = ::std::move(from);
  }

  inline TPlayerSkill& operator=(const TPlayerSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPlayerSkill& operator=(TPlayerSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPlayerSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPlayerSkill* internal_default_instance() {
    return reinterpret_cast<const TPlayerSkill*>(
               &_TPlayerSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TPlayerSkill& a, TPlayerSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(TPlayerSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPlayerSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPlayerSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPlayerSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPlayerSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPlayerSkill& from) {
    TPlayerSkill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPlayerSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TPlayerSkill";
  }
  protected:
  explicit TPlayerSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
    kNextReadFieldNumber = 3,
    kColorFieldNumber = 4,
    kCanChangeColorFieldNumber = 5,
    kChangedFieldNumber = 6,
  };
  // uint32 master_type = 1;
  void clear_master_type();
  uint32_t master_type() const;
  void set_master_type(uint32_t value);
  private:
  uint32_t _internal_master_type() const;
  void _internal_set_master_type(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 next_read = 3;
  void clear_next_read();
  uint32_t next_read() const;
  void set_next_read(uint32_t value);
  private:
  uint32_t _internal_next_read() const;
  void _internal_set_next_read(uint32_t value);
  public:

  // uint32 color = 4;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // bool can_change_color = 5;
  void clear_can_change_color();
  bool can_change_color() const;
  void set_can_change_color(bool value);
  private:
  bool _internal_can_change_color() const;
  void _internal_set_can_change_color(bool value);
  public:

  // bool changed = 6;
  void clear_changed();
  bool changed() const;
  void set_changed(bool value);
  private:
  bool _internal_changed() const;
  void _internal_set_changed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TPlayerSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t master_type_;
    uint32_t level_;
    uint32_t next_read_;
    uint32_t color_;
    bool can_change_color_;
    bool changed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class TQuickslot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TQuickslot) */ {
 public:
  inline TQuickslot() : TQuickslot(nullptr) {}
  ~TQuickslot() override;
  explicit PROTOBUF_CONSTEXPR TQuickslot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TQuickslot(const TQuickslot& from);
  TQuickslot(TQuickslot&& from) noexcept
    : TQuickslot() {
    *this = ::std::move(from);
  }

  inline TQuickslot& operator=(const TQuickslot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TQuickslot& operator=(TQuickslot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TQuickslot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TQuickslot* internal_default_instance() {
    return reinterpret_cast<const TQuickslot*>(
               &_TQuickslot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TQuickslot& a, TQuickslot& b) {
    a.Swap(&b);
  }
  inline void Swap(TQuickslot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TQuickslot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TQuickslot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TQuickslot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TQuickslot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TQuickslot& from) {
    TQuickslot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TQuickslot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TQuickslot";
  }
  protected:
  explicit TQuickslot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 pos = 2;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TQuickslot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class TPlayerFishEventSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TPlayerFishEventSlot) */ {
 public:
  inline TPlayerFishEventSlot() : TPlayerFishEventSlot(nullptr) {}
  ~TPlayerFishEventSlot() override;
  explicit PROTOBUF_CONSTEXPR TPlayerFishEventSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPlayerFishEventSlot(const TPlayerFishEventSlot& from);
  TPlayerFishEventSlot(TPlayerFishEventSlot&& from) noexcept
    : TPlayerFishEventSlot() {
    *this = ::std::move(from);
  }

  inline TPlayerFishEventSlot& operator=(const TPlayerFishEventSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPlayerFishEventSlot& operator=(TPlayerFishEventSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPlayerFishEventSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPlayerFishEventSlot* internal_default_instance() {
    return reinterpret_cast<const TPlayerFishEventSlot*>(
               &_TPlayerFishEventSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TPlayerFishEventSlot& a, TPlayerFishEventSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(TPlayerFishEventSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPlayerFishEventSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPlayerFishEventSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPlayerFishEventSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPlayerFishEventSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPlayerFishEventSlot& from) {
    TPlayerFishEventSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPlayerFishEventSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TPlayerFishEventSlot";
  }
  protected:
  explicit TPlayerFishEventSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsMainFieldNumber = 1,
    kShapeFieldNumber = 2,
  };
  // bool is_main = 1;
  void clear_is_main();
  bool is_main() const;
  void set_is_main(bool value);
  private:
  bool _internal_is_main() const;
  void _internal_set_is_main(bool value);
  public:

  // uint32 shape = 2;
  void clear_shape();
  uint32_t shape() const;
  void set_shape(uint32_t value);
  private:
  uint32_t _internal_shape() const;
  void _internal_set_shape(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TPlayerFishEventSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_main_;
    uint32_t shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class TRunePageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TRunePageData) */ {
 public:
  inline TRunePageData() : TRunePageData(nullptr) {}
  ~TRunePageData() override;
  explicit PROTOBUF_CONSTEXPR TRunePageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRunePageData(const TRunePageData& from);
  TRunePageData(TRunePageData&& from) noexcept
    : TRunePageData() {
    *this = ::std::move(from);
  }

  inline TRunePageData& operator=(const TRunePageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRunePageData& operator=(TRunePageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRunePageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRunePageData* internal_default_instance() {
    return reinterpret_cast<const TRunePageData*>(
               &_TRunePageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TRunePageData& a, TRunePageData& b) {
    a.Swap(&b);
  }
  inline void Swap(TRunePageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRunePageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRunePageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRunePageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRunePageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRunePageData& from) {
    TRunePageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRunePageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TRunePageData";
  }
  protected:
  explicit TRunePageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainVnumFieldNumber = 2,
    kSubVnumFieldNumber = 4,
    kMainGroupFieldNumber = 1,
    kSubGroupFieldNumber = 3,
  };
  // repeated uint32 main_vnum = 2;
  int main_vnum_size() const;
  private:
  int _internal_main_vnum_size() const;
  public:
  void clear_main_vnum();
  private:
  uint32_t _internal_main_vnum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_main_vnum() const;
  void _internal_add_main_vnum(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_main_vnum();
  public:
  uint32_t main_vnum(int index) const;
  void set_main_vnum(int index, uint32_t value);
  void add_main_vnum(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      main_vnum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_main_vnum();

  // repeated uint32 sub_vnum = 4;
  int sub_vnum_size() const;
  private:
  int _internal_sub_vnum_size() const;
  public:
  void clear_sub_vnum();
  private:
  uint32_t _internal_sub_vnum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_sub_vnum() const;
  void _internal_add_sub_vnum(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_sub_vnum();
  public:
  uint32_t sub_vnum(int index) const;
  void set_sub_vnum(int index, uint32_t value);
  void add_sub_vnum(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      sub_vnum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_sub_vnum();

  // sint32 main_group = 1;
  void clear_main_group();
  int32_t main_group() const;
  void set_main_group(int32_t value);
  private:
  int32_t _internal_main_group() const;
  void _internal_set_main_group(int32_t value);
  public:

  // sint32 sub_group = 3;
  void clear_sub_group();
  int32_t sub_group() const;
  void set_sub_group(int32_t value);
  private:
  int32_t _internal_sub_group() const;
  void _internal_set_sub_group(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TRunePageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > main_vnum_;
    mutable std::atomic<int> _main_vnum_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > sub_vnum_;
    mutable std::atomic<int> _sub_vnum_cached_byte_size_;
    int32_t main_group_;
    int32_t sub_group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class TPlayerTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TPlayerTable) */ {
 public:
  inline TPlayerTable() : TPlayerTable(nullptr) {}
  ~TPlayerTable() override;
  explicit PROTOBUF_CONSTEXPR TPlayerTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPlayerTable(const TPlayerTable& from);
  TPlayerTable(TPlayerTable&& from) noexcept
    : TPlayerTable() {
    *this = ::std::move(from);
  }

  inline TPlayerTable& operator=(const TPlayerTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPlayerTable& operator=(TPlayerTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPlayerTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPlayerTable* internal_default_instance() {
    return reinterpret_cast<const TPlayerTable*>(
               &_TPlayerTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TPlayerTable& a, TPlayerTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TPlayerTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPlayerTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPlayerTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPlayerTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPlayerTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPlayerTable& from) {
    TPlayerTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPlayerTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TPlayerTable";
  }
  protected:
  explicit TPlayerTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 28,
    kQuickslotsFieldNumber = 29,
    kPartsFieldNumber = 31,
    kPremiumTimesFieldNumber = 42,
    kDataChangedFieldNumber = 45,
    kRunesFieldNumber = 48,
    kFishSlotsFieldNumber = 50,
    kAttrtreeFieldNumber = 54,
    kNameFieldNumber = 2,
    kIpFieldNumber = 3,
    kMountNameFieldNumber = 37,
    kRunePageDataFieldNumber = 47,
    kIdFieldNumber = 1,
    kJobFieldNumber = 4,
    kVoiceFieldNumber = 5,
    kLevelFieldNumber = 6,
    kLevelStepFieldNumber = 7,
    kStFieldNumber = 8,
    kHtFieldNumber = 9,
    kDxFieldNumber = 10,
    kIqFieldNumber = 11,
    kExpFieldNumber = 12,
    kGoldFieldNumber = 13,
    kDirFieldNumber = 14,
    kXFieldNumber = 15,
    kYFieldNumber = 16,
    kMapIndexFieldNumber = 17,
    kExitXFieldNumber = 18,
    kExitYFieldNumber = 19,
    kExitMapIndexFieldNumber = 20,
    kHpFieldNumber = 21,
    kSpFieldNumber = 22,
    kPlaytimeFieldNumber = 23,
    kStatPointFieldNumber = 24,
    kSkillPointFieldNumber = 25,
    kSubSkillPointFieldNumber = 26,
    kHorseSkillPointFieldNumber = 27,
    kPartBaseFieldNumber = 30,
    kPartHairBaseFieldNumber = 32,
    kSkillGroupFieldNumber = 33,
    kAlignmentFieldNumber = 34,
    kStatResetCountFieldNumber = 35,
    kMountStateFieldNumber = 36,
    kMountItemIdFieldNumber = 38,
    kHorseGradeFieldNumber = 39,
    kHorseElapsedTimeFieldNumber = 40,
    kLogoffIntervalFieldNumber = 41,
    kInventoryMaxNumFieldNumber = 43,
    kUppitemInvMaxNumFieldNumber = 44,
    kLastPlayTimeFieldNumber = 46,
    kFishEventUseCountFieldNumber = 49,
    kFakebuffSkill1FieldNumber = 51,
    kFakebuffSkill2FieldNumber = 52,
    kFakebuffSkill3FieldNumber = 53,
    kEquipmentPageIndexFieldNumber = 55,
    kCombatZonePointsFieldNumber = 56,
    kAnimasphereFieldNumber = 57,
    kGayaFieldNumber = 58,
    kSkillbookInvMaxNumFieldNumber = 59,
    kStoneInvMaxNumFieldNumber = 60,
    kEnchantInvMaxNumFieldNumber = 61,
  };
  // repeated .TPlayerSkill skills = 28;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::TPlayerSkill* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >*
      mutable_skills();
  private:
  const ::TPlayerSkill& _internal_skills(int index) const;
  ::TPlayerSkill* _internal_add_skills();
  public:
  const ::TPlayerSkill& skills(int index) const;
  ::TPlayerSkill* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >&
      skills() const;

  // repeated .TQuickslot quickslots = 29;
  int quickslots_size() const;
  private:
  int _internal_quickslots_size() const;
  public:
  void clear_quickslots();
  ::TQuickslot* mutable_quickslots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuickslot >*
      mutable_quickslots();
  private:
  const ::TQuickslot& _internal_quickslots(int index) const;
  ::TQuickslot* _internal_add_quickslots();
  public:
  const ::TQuickslot& quickslots(int index) const;
  ::TQuickslot* add_quickslots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuickslot >&
      quickslots() const;

  // repeated uint32 parts = 31;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  private:
  uint32_t _internal_parts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_parts() const;
  void _internal_add_parts(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_parts();
  public:
  uint32_t parts(int index) const;
  void set_parts(int index, uint32_t value);
  void add_parts(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      parts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_parts();

  // repeated int32 premium_times = 42;
  int premium_times_size() const;
  private:
  int _internal_premium_times_size() const;
  public:
  void clear_premium_times();
  private:
  int32_t _internal_premium_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_premium_times() const;
  void _internal_add_premium_times(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_premium_times();
  public:
  int32_t premium_times(int index) const;
  void set_premium_times(int index, int32_t value);
  void add_premium_times(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      premium_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_premium_times();

  // repeated bool data_changed = 45;
  int data_changed_size() const;
  private:
  int _internal_data_changed_size() const;
  public:
  void clear_data_changed();
  private:
  bool _internal_data_changed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_data_changed() const;
  void _internal_add_data_changed(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_data_changed();
  public:
  bool data_changed(int index) const;
  void set_data_changed(int index, bool value);
  void add_data_changed(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      data_changed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_data_changed();

  // repeated uint32 runes = 48;
  int runes_size() const;
  private:
  int _internal_runes_size() const;
  public:
  void clear_runes();
  private:
  uint32_t _internal_runes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_runes() const;
  void _internal_add_runes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_runes();
  public:
  uint32_t runes(int index) const;
  void set_runes(int index, uint32_t value);
  void add_runes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      runes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_runes();

  // repeated .TPlayerFishEventSlot fish_slots = 50;
  int fish_slots_size() const;
  private:
  int _internal_fish_slots_size() const;
  public:
  void clear_fish_slots();
  ::TPlayerFishEventSlot* mutable_fish_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerFishEventSlot >*
      mutable_fish_slots();
  private:
  const ::TPlayerFishEventSlot& _internal_fish_slots(int index) const;
  ::TPlayerFishEventSlot* _internal_add_fish_slots();
  public:
  const ::TPlayerFishEventSlot& fish_slots(int index) const;
  ::TPlayerFishEventSlot* add_fish_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerFishEventSlot >&
      fish_slots() const;

  // repeated uint32 attrtree = 54;
  int attrtree_size() const;
  private:
  int _internal_attrtree_size() const;
  public:
  void clear_attrtree();
  private:
  uint32_t _internal_attrtree(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_attrtree() const;
  void _internal_add_attrtree(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_attrtree();
  public:
  uint32_t attrtree(int index) const;
  void set_attrtree(int index, uint32_t value);
  void add_attrtree(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      attrtree() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_attrtree();

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes mount_name = 37;
  void clear_mount_name();
  const std::string& mount_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mount_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mount_name();
  PROTOBUF_NODISCARD std::string* release_mount_name();
  void set_allocated_mount_name(std::string* mount_name);
  private:
  const std::string& _internal_mount_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mount_name(const std::string& value);
  std::string* _internal_mutable_mount_name();
  public:

  // .TRunePageData rune_page_data = 47;
  bool has_rune_page_data() const;
  private:
  bool _internal_has_rune_page_data() const;
  public:
  void clear_rune_page_data();
  const ::TRunePageData& rune_page_data() const;
  PROTOBUF_NODISCARD ::TRunePageData* release_rune_page_data();
  ::TRunePageData* mutable_rune_page_data();
  void set_allocated_rune_page_data(::TRunePageData* rune_page_data);
  private:
  const ::TRunePageData& _internal_rune_page_data() const;
  ::TRunePageData* _internal_mutable_rune_page_data();
  public:
  void unsafe_arena_set_allocated_rune_page_data(
      ::TRunePageData* rune_page_data);
  ::TRunePageData* unsafe_arena_release_rune_page_data();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 job = 4;
  void clear_job();
  uint32_t job() const;
  void set_job(uint32_t value);
  private:
  uint32_t _internal_job() const;
  void _internal_set_job(uint32_t value);
  public:

  // uint32 voice = 5;
  void clear_voice();
  uint32_t voice() const;
  void set_voice(uint32_t value);
  private:
  uint32_t _internal_voice() const;
  void _internal_set_voice(uint32_t value);
  public:

  // uint32 level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 level_step = 7;
  void clear_level_step();
  uint32_t level_step() const;
  void set_level_step(uint32_t value);
  private:
  uint32_t _internal_level_step() const;
  void _internal_set_level_step(uint32_t value);
  public:

  // uint32 st = 8;
  void clear_st();
  uint32_t st() const;
  void set_st(uint32_t value);
  private:
  uint32_t _internal_st() const;
  void _internal_set_st(uint32_t value);
  public:

  // uint32 ht = 9;
  void clear_ht();
  uint32_t ht() const;
  void set_ht(uint32_t value);
  private:
  uint32_t _internal_ht() const;
  void _internal_set_ht(uint32_t value);
  public:

  // uint32 dx = 10;
  void clear_dx();
  uint32_t dx() const;
  void set_dx(uint32_t value);
  private:
  uint32_t _internal_dx() const;
  void _internal_set_dx(uint32_t value);
  public:

  // uint32 iq = 11;
  void clear_iq();
  uint32_t iq() const;
  void set_iq(uint32_t value);
  private:
  uint32_t _internal_iq() const;
  void _internal_set_iq(uint32_t value);
  public:

  // uint32 exp = 12;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // int64 gold = 13;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // uint32 dir = 14;
  void clear_dir();
  uint32_t dir() const;
  void set_dir(uint32_t value);
  private:
  uint32_t _internal_dir() const;
  void _internal_set_dir(uint32_t value);
  public:

  // int32 x = 15;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 16;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 map_index = 17;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // int32 exit_x = 18;
  void clear_exit_x();
  int32_t exit_x() const;
  void set_exit_x(int32_t value);
  private:
  int32_t _internal_exit_x() const;
  void _internal_set_exit_x(int32_t value);
  public:

  // int32 exit_y = 19;
  void clear_exit_y();
  int32_t exit_y() const;
  void set_exit_y(int32_t value);
  private:
  int32_t _internal_exit_y() const;
  void _internal_set_exit_y(int32_t value);
  public:

  // uint32 exit_map_index = 20;
  void clear_exit_map_index();
  uint32_t exit_map_index() const;
  void set_exit_map_index(uint32_t value);
  private:
  uint32_t _internal_exit_map_index() const;
  void _internal_set_exit_map_index(uint32_t value);
  public:

  // int32 hp = 21;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // int32 sp = 22;
  void clear_sp();
  int32_t sp() const;
  void set_sp(int32_t value);
  private:
  int32_t _internal_sp() const;
  void _internal_set_sp(int32_t value);
  public:

  // int32 playtime = 23;
  void clear_playtime();
  int32_t playtime() const;
  void set_playtime(int32_t value);
  private:
  int32_t _internal_playtime() const;
  void _internal_set_playtime(int32_t value);
  public:

  // int32 stat_point = 24;
  void clear_stat_point();
  int32_t stat_point() const;
  void set_stat_point(int32_t value);
  private:
  int32_t _internal_stat_point() const;
  void _internal_set_stat_point(int32_t value);
  public:

  // int32 skill_point = 25;
  void clear_skill_point();
  int32_t skill_point() const;
  void set_skill_point(int32_t value);
  private:
  int32_t _internal_skill_point() const;
  void _internal_set_skill_point(int32_t value);
  public:

  // int32 sub_skill_point = 26;
  void clear_sub_skill_point();
  int32_t sub_skill_point() const;
  void set_sub_skill_point(int32_t value);
  private:
  int32_t _internal_sub_skill_point() const;
  void _internal_set_sub_skill_point(int32_t value);
  public:

  // int32 horse_skill_point = 27;
  void clear_horse_skill_point();
  int32_t horse_skill_point() const;
  void set_horse_skill_point(int32_t value);
  private:
  int32_t _internal_horse_skill_point() const;
  void _internal_set_horse_skill_point(int32_t value);
  public:

  // uint32 part_base = 30;
  void clear_part_base();
  uint32_t part_base() const;
  void set_part_base(uint32_t value);
  private:
  uint32_t _internal_part_base() const;
  void _internal_set_part_base(uint32_t value);
  public:

  // uint32 part_hair_base = 32;
  void clear_part_hair_base();
  uint32_t part_hair_base() const;
  void set_part_hair_base(uint32_t value);
  private:
  uint32_t _internal_part_hair_base() const;
  void _internal_set_part_hair_base(uint32_t value);
  public:

  // uint32 skill_group = 33;
  void clear_skill_group();
  uint32_t skill_group() const;
  void set_skill_group(uint32_t value);
  private:
  uint32_t _internal_skill_group() const;
  void _internal_set_skill_group(uint32_t value);
  public:

  // int32 alignment = 34;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // int32 stat_reset_count = 35;
  void clear_stat_reset_count();
  int32_t stat_reset_count() const;
  void set_stat_reset_count(int32_t value);
  private:
  int32_t _internal_stat_reset_count() const;
  void _internal_set_stat_reset_count(int32_t value);
  public:

  // uint32 mount_state = 36;
  void clear_mount_state();
  uint32_t mount_state() const;
  void set_mount_state(uint32_t value);
  private:
  uint32_t _internal_mount_state() const;
  void _internal_set_mount_state(uint32_t value);
  public:

  // uint32 mount_item_id = 38;
  void clear_mount_item_id();
  uint32_t mount_item_id() const;
  void set_mount_item_id(uint32_t value);
  private:
  uint32_t _internal_mount_item_id() const;
  void _internal_set_mount_item_id(uint32_t value);
  public:

  // uint32 horse_grade = 39;
  void clear_horse_grade();
  uint32_t horse_grade() const;
  void set_horse_grade(uint32_t value);
  private:
  uint32_t _internal_horse_grade() const;
  void _internal_set_horse_grade(uint32_t value);
  public:

  // uint32 horse_elapsed_time = 40;
  void clear_horse_elapsed_time();
  uint32_t horse_elapsed_time() const;
  void set_horse_elapsed_time(uint32_t value);
  private:
  uint32_t _internal_horse_elapsed_time() const;
  void _internal_set_horse_elapsed_time(uint32_t value);
  public:

  // uint32 logoff_interval = 41;
  void clear_logoff_interval();
  uint32_t logoff_interval() const;
  void set_logoff_interval(uint32_t value);
  private:
  uint32_t _internal_logoff_interval() const;
  void _internal_set_logoff_interval(uint32_t value);
  public:

  // uint32 inventory_max_num = 43;
  void clear_inventory_max_num();
  uint32_t inventory_max_num() const;
  void set_inventory_max_num(uint32_t value);
  private:
  uint32_t _internal_inventory_max_num() const;
  void _internal_set_inventory_max_num(uint32_t value);
  public:

  // uint32 uppitem_inv_max_num = 44;
  void clear_uppitem_inv_max_num();
  uint32_t uppitem_inv_max_num() const;
  void set_uppitem_inv_max_num(uint32_t value);
  private:
  uint32_t _internal_uppitem_inv_max_num() const;
  void _internal_set_uppitem_inv_max_num(uint32_t value);
  public:

  // uint32 last_play_time = 46;
  void clear_last_play_time();
  uint32_t last_play_time() const;
  void set_last_play_time(uint32_t value);
  private:
  uint32_t _internal_last_play_time() const;
  void _internal_set_last_play_time(uint32_t value);
  public:

  // uint32 fish_event_use_count = 49;
  void clear_fish_event_use_count();
  uint32_t fish_event_use_count() const;
  void set_fish_event_use_count(uint32_t value);
  private:
  uint32_t _internal_fish_event_use_count() const;
  void _internal_set_fish_event_use_count(uint32_t value);
  public:

  // uint32 fakebuff_skill1 = 51;
  void clear_fakebuff_skill1();
  uint32_t fakebuff_skill1() const;
  void set_fakebuff_skill1(uint32_t value);
  private:
  uint32_t _internal_fakebuff_skill1() const;
  void _internal_set_fakebuff_skill1(uint32_t value);
  public:

  // uint32 fakebuff_skill2 = 52;
  void clear_fakebuff_skill2();
  uint32_t fakebuff_skill2() const;
  void set_fakebuff_skill2(uint32_t value);
  private:
  uint32_t _internal_fakebuff_skill2() const;
  void _internal_set_fakebuff_skill2(uint32_t value);
  public:

  // uint32 fakebuff_skill3 = 53;
  void clear_fakebuff_skill3();
  uint32_t fakebuff_skill3() const;
  void set_fakebuff_skill3(uint32_t value);
  private:
  uint32_t _internal_fakebuff_skill3() const;
  void _internal_set_fakebuff_skill3(uint32_t value);
  public:

  // uint32 equipment_page_index = 55;
  void clear_equipment_page_index();
  uint32_t equipment_page_index() const;
  void set_equipment_page_index(uint32_t value);
  private:
  uint32_t _internal_equipment_page_index() const;
  void _internal_set_equipment_page_index(uint32_t value);
  public:

  // uint32 combat_zone_points = 56;
  void clear_combat_zone_points();
  uint32_t combat_zone_points() const;
  void set_combat_zone_points(uint32_t value);
  private:
  uint32_t _internal_combat_zone_points() const;
  void _internal_set_combat_zone_points(uint32_t value);
  public:

  // uint32 animasphere = 57;
  void clear_animasphere();
  uint32_t animasphere() const;
  void set_animasphere(uint32_t value);
  private:
  uint32_t _internal_animasphere() const;
  void _internal_set_animasphere(uint32_t value);
  public:

  // uint32 gaya = 58;
  void clear_gaya();
  uint32_t gaya() const;
  void set_gaya(uint32_t value);
  private:
  uint32_t _internal_gaya() const;
  void _internal_set_gaya(uint32_t value);
  public:

  // uint32 skillbook_inv_max_num = 59;
  void clear_skillbook_inv_max_num();
  uint32_t skillbook_inv_max_num() const;
  void set_skillbook_inv_max_num(uint32_t value);
  private:
  uint32_t _internal_skillbook_inv_max_num() const;
  void _internal_set_skillbook_inv_max_num(uint32_t value);
  public:

  // uint32 stone_inv_max_num = 60;
  void clear_stone_inv_max_num();
  uint32_t stone_inv_max_num() const;
  void set_stone_inv_max_num(uint32_t value);
  private:
  uint32_t _internal_stone_inv_max_num() const;
  void _internal_set_stone_inv_max_num(uint32_t value);
  public:

  // uint32 enchant_inv_max_num = 61;
  void clear_enchant_inv_max_num();
  uint32_t enchant_inv_max_num() const;
  void set_enchant_inv_max_num(uint32_t value);
  private:
  uint32_t _internal_enchant_inv_max_num() const;
  void _internal_set_enchant_inv_max_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TPlayerTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill > skills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuickslot > quickslots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > parts_;
    mutable std::atomic<int> _parts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > premium_times_;
    mutable std::atomic<int> _premium_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > data_changed_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > runes_;
    mutable std::atomic<int> _runes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerFishEventSlot > fish_slots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > attrtree_;
    mutable std::atomic<int> _attrtree_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mount_name_;
    ::TRunePageData* rune_page_data_;
    uint32_t id_;
    uint32_t job_;
    uint32_t voice_;
    uint32_t level_;
    uint32_t level_step_;
    uint32_t st_;
    uint32_t ht_;
    uint32_t dx_;
    uint32_t iq_;
    uint32_t exp_;
    int64_t gold_;
    uint32_t dir_;
    int32_t x_;
    int32_t y_;
    uint32_t map_index_;
    int32_t exit_x_;
    int32_t exit_y_;
    uint32_t exit_map_index_;
    int32_t hp_;
    int32_t sp_;
    int32_t playtime_;
    int32_t stat_point_;
    int32_t skill_point_;
    int32_t sub_skill_point_;
    int32_t horse_skill_point_;
    uint32_t part_base_;
    uint32_t part_hair_base_;
    uint32_t skill_group_;
    int32_t alignment_;
    int32_t stat_reset_count_;
    uint32_t mount_state_;
    uint32_t mount_item_id_;
    uint32_t horse_grade_;
    uint32_t horse_elapsed_time_;
    uint32_t logoff_interval_;
    uint32_t inventory_max_num_;
    uint32_t uppitem_inv_max_num_;
    uint32_t last_play_time_;
    uint32_t fish_event_use_count_;
    uint32_t fakebuff_skill1_;
    uint32_t fakebuff_skill2_;
    uint32_t fakebuff_skill3_;
    uint32_t equipment_page_index_;
    uint32_t combat_zone_points_;
    uint32_t animasphere_;
    uint32_t gaya_;
    uint32_t skillbook_inv_max_num_;
    uint32_t stone_inv_max_num_;
    uint32_t enchant_inv_max_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class TQuestTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TQuestTable) */ {
 public:
  inline TQuestTable() : TQuestTable(nullptr) {}
  ~TQuestTable() override;
  explicit PROTOBUF_CONSTEXPR TQuestTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TQuestTable(const TQuestTable& from);
  TQuestTable(TQuestTable&& from) noexcept
    : TQuestTable() {
    *this = ::std::move(from);
  }

  inline TQuestTable& operator=(const TQuestTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TQuestTable& operator=(TQuestTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TQuestTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TQuestTable* internal_default_instance() {
    return reinterpret_cast<const TQuestTable*>(
               &_TQuestTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TQuestTable& a, TQuestTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TQuestTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TQuestTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TQuestTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TQuestTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TQuestTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TQuestTable& from) {
    TQuestTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TQuestTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TQuestTable";
  }
  protected:
  explicit TQuestTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kPidFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // int32 value = 4;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TQuestTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    uint32_t pid_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class TPacketAffectElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TPacketAffectElement) */ {
 public:
  inline TPacketAffectElement() : TPacketAffectElement(nullptr) {}
  ~TPacketAffectElement() override;
  explicit PROTOBUF_CONSTEXPR TPacketAffectElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPacketAffectElement(const TPacketAffectElement& from);
  TPacketAffectElement(TPacketAffectElement&& from) noexcept
    : TPacketAffectElement() {
    *this = ::std::move(from);
  }

  inline TPacketAffectElement& operator=(const TPacketAffectElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPacketAffectElement& operator=(TPacketAffectElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPacketAffectElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPacketAffectElement* internal_default_instance() {
    return reinterpret_cast<const TPacketAffectElement*>(
               &_TPacketAffectElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TPacketAffectElement& a, TPacketAffectElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TPacketAffectElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPacketAffectElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPacketAffectElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPacketAffectElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPacketAffectElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPacketAffectElement& from) {
    TPacketAffectElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPacketAffectElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TPacketAffectElement";
  }
  protected:
  explicit TPacketAffectElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kApplyOnFieldNumber = 2,
    kApplyValueFieldNumber = 3,
    kFlagFieldNumber = 4,
    kDurationFieldNumber = 5,
    kSpCostFieldNumber = 6,
    kBlendColorFieldNumber = 7,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 apply_on = 2;
  void clear_apply_on();
  uint32_t apply_on() const;
  void set_apply_on(uint32_t value);
  private:
  uint32_t _internal_apply_on() const;
  void _internal_set_apply_on(uint32_t value);
  public:

  // int32 apply_value = 3;
  void clear_apply_value();
  int32_t apply_value() const;
  void set_apply_value(int32_t value);
  private:
  int32_t _internal_apply_value() const;
  void _internal_set_apply_value(int32_t value);
  public:

  // uint32 flag = 4;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // int32 duration = 5;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // int32 sp_cost = 6;
  void clear_sp_cost();
  int32_t sp_cost() const;
  void set_sp_cost(int32_t value);
  private:
  int32_t _internal_sp_cost() const;
  void _internal_set_sp_cost(int32_t value);
  public:

  // uint32 blend_color = 7;
  void clear_blend_color();
  uint32_t blend_color() const;
  void set_blend_color(uint32_t value);
  private:
  uint32_t _internal_blend_color() const;
  void _internal_set_blend_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TPacketAffectElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t apply_on_;
    int32_t apply_value_;
    uint32_t flag_;
    int32_t duration_;
    int32_t sp_cost_;
    uint32_t blend_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fplayer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPlayerSkill

// uint32 master_type = 1;
inline void TPlayerSkill::clear_master_type() {
  _impl_.master_type_ = 0u;
}
inline uint32_t TPlayerSkill::_internal_master_type() const {
  return _impl_.master_type_;
}
inline uint32_t TPlayerSkill::master_type() const {
  // @@protoc_insertion_point(field_get:TPlayerSkill.master_type)
  return _internal_master_type();
}
inline void TPlayerSkill::_internal_set_master_type(uint32_t value) {
  
  _impl_.master_type_ = value;
}
inline void TPlayerSkill::set_master_type(uint32_t value) {
  _internal_set_master_type(value);
  // @@protoc_insertion_point(field_set:TPlayerSkill.master_type)
}

// uint32 level = 2;
inline void TPlayerSkill::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TPlayerSkill::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TPlayerSkill::level() const {
  // @@protoc_insertion_point(field_get:TPlayerSkill.level)
  return _internal_level();
}
inline void TPlayerSkill::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TPlayerSkill::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TPlayerSkill.level)
}

// uint32 next_read = 3;
inline void TPlayerSkill::clear_next_read() {
  _impl_.next_read_ = 0u;
}
inline uint32_t TPlayerSkill::_internal_next_read() const {
  return _impl_.next_read_;
}
inline uint32_t TPlayerSkill::next_read() const {
  // @@protoc_insertion_point(field_get:TPlayerSkill.next_read)
  return _internal_next_read();
}
inline void TPlayerSkill::_internal_set_next_read(uint32_t value) {
  
  _impl_.next_read_ = value;
}
inline void TPlayerSkill::set_next_read(uint32_t value) {
  _internal_set_next_read(value);
  // @@protoc_insertion_point(field_set:TPlayerSkill.next_read)
}

// uint32 color = 4;
inline void TPlayerSkill::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t TPlayerSkill::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t TPlayerSkill::color() const {
  // @@protoc_insertion_point(field_get:TPlayerSkill.color)
  return _internal_color();
}
inline void TPlayerSkill::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void TPlayerSkill::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:TPlayerSkill.color)
}

// bool can_change_color = 5;
inline void TPlayerSkill::clear_can_change_color() {
  _impl_.can_change_color_ = false;
}
inline bool TPlayerSkill::_internal_can_change_color() const {
  return _impl_.can_change_color_;
}
inline bool TPlayerSkill::can_change_color() const {
  // @@protoc_insertion_point(field_get:TPlayerSkill.can_change_color)
  return _internal_can_change_color();
}
inline void TPlayerSkill::_internal_set_can_change_color(bool value) {
  
  _impl_.can_change_color_ = value;
}
inline void TPlayerSkill::set_can_change_color(bool value) {
  _internal_set_can_change_color(value);
  // @@protoc_insertion_point(field_set:TPlayerSkill.can_change_color)
}

// bool changed = 6;
inline void TPlayerSkill::clear_changed() {
  _impl_.changed_ = false;
}
inline bool TPlayerSkill::_internal_changed() const {
  return _impl_.changed_;
}
inline bool TPlayerSkill::changed() const {
  // @@protoc_insertion_point(field_get:TPlayerSkill.changed)
  return _internal_changed();
}
inline void TPlayerSkill::_internal_set_changed(bool value) {
  
  _impl_.changed_ = value;
}
inline void TPlayerSkill::set_changed(bool value) {
  _internal_set_changed(value);
  // @@protoc_insertion_point(field_set:TPlayerSkill.changed)
}

// -------------------------------------------------------------------

// TQuickslot

// uint32 type = 1;
inline void TQuickslot::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TQuickslot::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TQuickslot::type() const {
  // @@protoc_insertion_point(field_get:TQuickslot.type)
  return _internal_type();
}
inline void TQuickslot::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TQuickslot::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TQuickslot.type)
}

// uint32 pos = 2;
inline void TQuickslot::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t TQuickslot::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t TQuickslot::pos() const {
  // @@protoc_insertion_point(field_get:TQuickslot.pos)
  return _internal_pos();
}
inline void TQuickslot::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void TQuickslot::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:TQuickslot.pos)
}

// -------------------------------------------------------------------

// TPlayerFishEventSlot

// bool is_main = 1;
inline void TPlayerFishEventSlot::clear_is_main() {
  _impl_.is_main_ = false;
}
inline bool TPlayerFishEventSlot::_internal_is_main() const {
  return _impl_.is_main_;
}
inline bool TPlayerFishEventSlot::is_main() const {
  // @@protoc_insertion_point(field_get:TPlayerFishEventSlot.is_main)
  return _internal_is_main();
}
inline void TPlayerFishEventSlot::_internal_set_is_main(bool value) {
  
  _impl_.is_main_ = value;
}
inline void TPlayerFishEventSlot::set_is_main(bool value) {
  _internal_set_is_main(value);
  // @@protoc_insertion_point(field_set:TPlayerFishEventSlot.is_main)
}

// uint32 shape = 2;
inline void TPlayerFishEventSlot::clear_shape() {
  _impl_.shape_ = 0u;
}
inline uint32_t TPlayerFishEventSlot::_internal_shape() const {
  return _impl_.shape_;
}
inline uint32_t TPlayerFishEventSlot::shape() const {
  // @@protoc_insertion_point(field_get:TPlayerFishEventSlot.shape)
  return _internal_shape();
}
inline void TPlayerFishEventSlot::_internal_set_shape(uint32_t value) {
  
  _impl_.shape_ = value;
}
inline void TPlayerFishEventSlot::set_shape(uint32_t value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:TPlayerFishEventSlot.shape)
}

// -------------------------------------------------------------------

// TRunePageData

// sint32 main_group = 1;
inline void TRunePageData::clear_main_group() {
  _impl_.main_group_ = 0;
}
inline int32_t TRunePageData::_internal_main_group() const {
  return _impl_.main_group_;
}
inline int32_t TRunePageData::main_group() const {
  // @@protoc_insertion_point(field_get:TRunePageData.main_group)
  return _internal_main_group();
}
inline void TRunePageData::_internal_set_main_group(int32_t value) {
  
  _impl_.main_group_ = value;
}
inline void TRunePageData::set_main_group(int32_t value) {
  _internal_set_main_group(value);
  // @@protoc_insertion_point(field_set:TRunePageData.main_group)
}

// repeated uint32 main_vnum = 2;
inline int TRunePageData::_internal_main_vnum_size() const {
  return _impl_.main_vnum_.size();
}
inline int TRunePageData::main_vnum_size() const {
  return _internal_main_vnum_size();
}
inline void TRunePageData::clear_main_vnum() {
  _impl_.main_vnum_.Clear();
}
inline uint32_t TRunePageData::_internal_main_vnum(int index) const {
  return _impl_.main_vnum_.Get(index);
}
inline uint32_t TRunePageData::main_vnum(int index) const {
  // @@protoc_insertion_point(field_get:TRunePageData.main_vnum)
  return _internal_main_vnum(index);
}
inline void TRunePageData::set_main_vnum(int index, uint32_t value) {
  _impl_.main_vnum_.Set(index, value);
  // @@protoc_insertion_point(field_set:TRunePageData.main_vnum)
}
inline void TRunePageData::_internal_add_main_vnum(uint32_t value) {
  _impl_.main_vnum_.Add(value);
}
inline void TRunePageData::add_main_vnum(uint32_t value) {
  _internal_add_main_vnum(value);
  // @@protoc_insertion_point(field_add:TRunePageData.main_vnum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TRunePageData::_internal_main_vnum() const {
  return _impl_.main_vnum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TRunePageData::main_vnum() const {
  // @@protoc_insertion_point(field_list:TRunePageData.main_vnum)
  return _internal_main_vnum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TRunePageData::_internal_mutable_main_vnum() {
  return &_impl_.main_vnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TRunePageData::mutable_main_vnum() {
  // @@protoc_insertion_point(field_mutable_list:TRunePageData.main_vnum)
  return _internal_mutable_main_vnum();
}

// sint32 sub_group = 3;
inline void TRunePageData::clear_sub_group() {
  _impl_.sub_group_ = 0;
}
inline int32_t TRunePageData::_internal_sub_group() const {
  return _impl_.sub_group_;
}
inline int32_t TRunePageData::sub_group() const {
  // @@protoc_insertion_point(field_get:TRunePageData.sub_group)
  return _internal_sub_group();
}
inline void TRunePageData::_internal_set_sub_group(int32_t value) {
  
  _impl_.sub_group_ = value;
}
inline void TRunePageData::set_sub_group(int32_t value) {
  _internal_set_sub_group(value);
  // @@protoc_insertion_point(field_set:TRunePageData.sub_group)
}

// repeated uint32 sub_vnum = 4;
inline int TRunePageData::_internal_sub_vnum_size() const {
  return _impl_.sub_vnum_.size();
}
inline int TRunePageData::sub_vnum_size() const {
  return _internal_sub_vnum_size();
}
inline void TRunePageData::clear_sub_vnum() {
  _impl_.sub_vnum_.Clear();
}
inline uint32_t TRunePageData::_internal_sub_vnum(int index) const {
  return _impl_.sub_vnum_.Get(index);
}
inline uint32_t TRunePageData::sub_vnum(int index) const {
  // @@protoc_insertion_point(field_get:TRunePageData.sub_vnum)
  return _internal_sub_vnum(index);
}
inline void TRunePageData::set_sub_vnum(int index, uint32_t value) {
  _impl_.sub_vnum_.Set(index, value);
  // @@protoc_insertion_point(field_set:TRunePageData.sub_vnum)
}
inline void TRunePageData::_internal_add_sub_vnum(uint32_t value) {
  _impl_.sub_vnum_.Add(value);
}
inline void TRunePageData::add_sub_vnum(uint32_t value) {
  _internal_add_sub_vnum(value);
  // @@protoc_insertion_point(field_add:TRunePageData.sub_vnum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TRunePageData::_internal_sub_vnum() const {
  return _impl_.sub_vnum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TRunePageData::sub_vnum() const {
  // @@protoc_insertion_point(field_list:TRunePageData.sub_vnum)
  return _internal_sub_vnum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TRunePageData::_internal_mutable_sub_vnum() {
  return &_impl_.sub_vnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TRunePageData::mutable_sub_vnum() {
  // @@protoc_insertion_point(field_mutable_list:TRunePageData.sub_vnum)
  return _internal_mutable_sub_vnum();
}

// -------------------------------------------------------------------

// TPlayerTable

// uint32 id = 1;
inline void TPlayerTable::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TPlayerTable::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TPlayerTable::id() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.id)
  return _internal_id();
}
inline void TPlayerTable::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TPlayerTable::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.id)
}

// bytes name = 2;
inline void TPlayerTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TPlayerTable::name() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPlayerTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TPlayerTable.name)
}
inline std::string* TPlayerTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TPlayerTable.name)
  return _s;
}
inline const std::string& TPlayerTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TPlayerTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TPlayerTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TPlayerTable::release_name() {
  // @@protoc_insertion_point(field_release:TPlayerTable.name)
  return _impl_.name_.Release();
}
inline void TPlayerTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TPlayerTable.name)
}

// bytes ip = 3;
inline void TPlayerTable::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& TPlayerTable::ip() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPlayerTable::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TPlayerTable.ip)
}
inline std::string* TPlayerTable::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:TPlayerTable.ip)
  return _s;
}
inline const std::string& TPlayerTable::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void TPlayerTable::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* TPlayerTable::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* TPlayerTable::release_ip() {
  // @@protoc_insertion_point(field_release:TPlayerTable.ip)
  return _impl_.ip_.Release();
}
inline void TPlayerTable::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TPlayerTable.ip)
}

// uint32 job = 4;
inline void TPlayerTable::clear_job() {
  _impl_.job_ = 0u;
}
inline uint32_t TPlayerTable::_internal_job() const {
  return _impl_.job_;
}
inline uint32_t TPlayerTable::job() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.job)
  return _internal_job();
}
inline void TPlayerTable::_internal_set_job(uint32_t value) {
  
  _impl_.job_ = value;
}
inline void TPlayerTable::set_job(uint32_t value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.job)
}

// uint32 voice = 5;
inline void TPlayerTable::clear_voice() {
  _impl_.voice_ = 0u;
}
inline uint32_t TPlayerTable::_internal_voice() const {
  return _impl_.voice_;
}
inline uint32_t TPlayerTable::voice() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.voice)
  return _internal_voice();
}
inline void TPlayerTable::_internal_set_voice(uint32_t value) {
  
  _impl_.voice_ = value;
}
inline void TPlayerTable::set_voice(uint32_t value) {
  _internal_set_voice(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.voice)
}

// uint32 level = 6;
inline void TPlayerTable::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TPlayerTable::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TPlayerTable::level() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.level)
  return _internal_level();
}
inline void TPlayerTable::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TPlayerTable::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.level)
}

// uint32 level_step = 7;
inline void TPlayerTable::clear_level_step() {
  _impl_.level_step_ = 0u;
}
inline uint32_t TPlayerTable::_internal_level_step() const {
  return _impl_.level_step_;
}
inline uint32_t TPlayerTable::level_step() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.level_step)
  return _internal_level_step();
}
inline void TPlayerTable::_internal_set_level_step(uint32_t value) {
  
  _impl_.level_step_ = value;
}
inline void TPlayerTable::set_level_step(uint32_t value) {
  _internal_set_level_step(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.level_step)
}

// uint32 st = 8;
inline void TPlayerTable::clear_st() {
  _impl_.st_ = 0u;
}
inline uint32_t TPlayerTable::_internal_st() const {
  return _impl_.st_;
}
inline uint32_t TPlayerTable::st() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.st)
  return _internal_st();
}
inline void TPlayerTable::_internal_set_st(uint32_t value) {
  
  _impl_.st_ = value;
}
inline void TPlayerTable::set_st(uint32_t value) {
  _internal_set_st(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.st)
}

// uint32 ht = 9;
inline void TPlayerTable::clear_ht() {
  _impl_.ht_ = 0u;
}
inline uint32_t TPlayerTable::_internal_ht() const {
  return _impl_.ht_;
}
inline uint32_t TPlayerTable::ht() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.ht)
  return _internal_ht();
}
inline void TPlayerTable::_internal_set_ht(uint32_t value) {
  
  _impl_.ht_ = value;
}
inline void TPlayerTable::set_ht(uint32_t value) {
  _internal_set_ht(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.ht)
}

// uint32 dx = 10;
inline void TPlayerTable::clear_dx() {
  _impl_.dx_ = 0u;
}
inline uint32_t TPlayerTable::_internal_dx() const {
  return _impl_.dx_;
}
inline uint32_t TPlayerTable::dx() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.dx)
  return _internal_dx();
}
inline void TPlayerTable::_internal_set_dx(uint32_t value) {
  
  _impl_.dx_ = value;
}
inline void TPlayerTable::set_dx(uint32_t value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.dx)
}

// uint32 iq = 11;
inline void TPlayerTable::clear_iq() {
  _impl_.iq_ = 0u;
}
inline uint32_t TPlayerTable::_internal_iq() const {
  return _impl_.iq_;
}
inline uint32_t TPlayerTable::iq() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.iq)
  return _internal_iq();
}
inline void TPlayerTable::_internal_set_iq(uint32_t value) {
  
  _impl_.iq_ = value;
}
inline void TPlayerTable::set_iq(uint32_t value) {
  _internal_set_iq(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.iq)
}

// uint32 exp = 12;
inline void TPlayerTable::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t TPlayerTable::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t TPlayerTable::exp() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.exp)
  return _internal_exp();
}
inline void TPlayerTable::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void TPlayerTable::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.exp)
}

// int64 gold = 13;
inline void TPlayerTable::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t TPlayerTable::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t TPlayerTable::gold() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.gold)
  return _internal_gold();
}
inline void TPlayerTable::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void TPlayerTable::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.gold)
}

// uint32 dir = 14;
inline void TPlayerTable::clear_dir() {
  _impl_.dir_ = 0u;
}
inline uint32_t TPlayerTable::_internal_dir() const {
  return _impl_.dir_;
}
inline uint32_t TPlayerTable::dir() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.dir)
  return _internal_dir();
}
inline void TPlayerTable::_internal_set_dir(uint32_t value) {
  
  _impl_.dir_ = value;
}
inline void TPlayerTable::set_dir(uint32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.dir)
}

// int32 x = 15;
inline void TPlayerTable::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t TPlayerTable::_internal_x() const {
  return _impl_.x_;
}
inline int32_t TPlayerTable::x() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.x)
  return _internal_x();
}
inline void TPlayerTable::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void TPlayerTable::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.x)
}

// int32 y = 16;
inline void TPlayerTable::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t TPlayerTable::_internal_y() const {
  return _impl_.y_;
}
inline int32_t TPlayerTable::y() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.y)
  return _internal_y();
}
inline void TPlayerTable::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void TPlayerTable::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.y)
}

// uint32 map_index = 17;
inline void TPlayerTable::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t TPlayerTable::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t TPlayerTable::map_index() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.map_index)
  return _internal_map_index();
}
inline void TPlayerTable::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void TPlayerTable::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.map_index)
}

// int32 exit_x = 18;
inline void TPlayerTable::clear_exit_x() {
  _impl_.exit_x_ = 0;
}
inline int32_t TPlayerTable::_internal_exit_x() const {
  return _impl_.exit_x_;
}
inline int32_t TPlayerTable::exit_x() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.exit_x)
  return _internal_exit_x();
}
inline void TPlayerTable::_internal_set_exit_x(int32_t value) {
  
  _impl_.exit_x_ = value;
}
inline void TPlayerTable::set_exit_x(int32_t value) {
  _internal_set_exit_x(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.exit_x)
}

// int32 exit_y = 19;
inline void TPlayerTable::clear_exit_y() {
  _impl_.exit_y_ = 0;
}
inline int32_t TPlayerTable::_internal_exit_y() const {
  return _impl_.exit_y_;
}
inline int32_t TPlayerTable::exit_y() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.exit_y)
  return _internal_exit_y();
}
inline void TPlayerTable::_internal_set_exit_y(int32_t value) {
  
  _impl_.exit_y_ = value;
}
inline void TPlayerTable::set_exit_y(int32_t value) {
  _internal_set_exit_y(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.exit_y)
}

// uint32 exit_map_index = 20;
inline void TPlayerTable::clear_exit_map_index() {
  _impl_.exit_map_index_ = 0u;
}
inline uint32_t TPlayerTable::_internal_exit_map_index() const {
  return _impl_.exit_map_index_;
}
inline uint32_t TPlayerTable::exit_map_index() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.exit_map_index)
  return _internal_exit_map_index();
}
inline void TPlayerTable::_internal_set_exit_map_index(uint32_t value) {
  
  _impl_.exit_map_index_ = value;
}
inline void TPlayerTable::set_exit_map_index(uint32_t value) {
  _internal_set_exit_map_index(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.exit_map_index)
}

// int32 hp = 21;
inline void TPlayerTable::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t TPlayerTable::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t TPlayerTable::hp() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.hp)
  return _internal_hp();
}
inline void TPlayerTable::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void TPlayerTable::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.hp)
}

// int32 sp = 22;
inline void TPlayerTable::clear_sp() {
  _impl_.sp_ = 0;
}
inline int32_t TPlayerTable::_internal_sp() const {
  return _impl_.sp_;
}
inline int32_t TPlayerTable::sp() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.sp)
  return _internal_sp();
}
inline void TPlayerTable::_internal_set_sp(int32_t value) {
  
  _impl_.sp_ = value;
}
inline void TPlayerTable::set_sp(int32_t value) {
  _internal_set_sp(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.sp)
}

// int32 playtime = 23;
inline void TPlayerTable::clear_playtime() {
  _impl_.playtime_ = 0;
}
inline int32_t TPlayerTable::_internal_playtime() const {
  return _impl_.playtime_;
}
inline int32_t TPlayerTable::playtime() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.playtime)
  return _internal_playtime();
}
inline void TPlayerTable::_internal_set_playtime(int32_t value) {
  
  _impl_.playtime_ = value;
}
inline void TPlayerTable::set_playtime(int32_t value) {
  _internal_set_playtime(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.playtime)
}

// int32 stat_point = 24;
inline void TPlayerTable::clear_stat_point() {
  _impl_.stat_point_ = 0;
}
inline int32_t TPlayerTable::_internal_stat_point() const {
  return _impl_.stat_point_;
}
inline int32_t TPlayerTable::stat_point() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.stat_point)
  return _internal_stat_point();
}
inline void TPlayerTable::_internal_set_stat_point(int32_t value) {
  
  _impl_.stat_point_ = value;
}
inline void TPlayerTable::set_stat_point(int32_t value) {
  _internal_set_stat_point(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.stat_point)
}

// int32 skill_point = 25;
inline void TPlayerTable::clear_skill_point() {
  _impl_.skill_point_ = 0;
}
inline int32_t TPlayerTable::_internal_skill_point() const {
  return _impl_.skill_point_;
}
inline int32_t TPlayerTable::skill_point() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.skill_point)
  return _internal_skill_point();
}
inline void TPlayerTable::_internal_set_skill_point(int32_t value) {
  
  _impl_.skill_point_ = value;
}
inline void TPlayerTable::set_skill_point(int32_t value) {
  _internal_set_skill_point(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.skill_point)
}

// int32 sub_skill_point = 26;
inline void TPlayerTable::clear_sub_skill_point() {
  _impl_.sub_skill_point_ = 0;
}
inline int32_t TPlayerTable::_internal_sub_skill_point() const {
  return _impl_.sub_skill_point_;
}
inline int32_t TPlayerTable::sub_skill_point() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.sub_skill_point)
  return _internal_sub_skill_point();
}
inline void TPlayerTable::_internal_set_sub_skill_point(int32_t value) {
  
  _impl_.sub_skill_point_ = value;
}
inline void TPlayerTable::set_sub_skill_point(int32_t value) {
  _internal_set_sub_skill_point(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.sub_skill_point)
}

// int32 horse_skill_point = 27;
inline void TPlayerTable::clear_horse_skill_point() {
  _impl_.horse_skill_point_ = 0;
}
inline int32_t TPlayerTable::_internal_horse_skill_point() const {
  return _impl_.horse_skill_point_;
}
inline int32_t TPlayerTable::horse_skill_point() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.horse_skill_point)
  return _internal_horse_skill_point();
}
inline void TPlayerTable::_internal_set_horse_skill_point(int32_t value) {
  
  _impl_.horse_skill_point_ = value;
}
inline void TPlayerTable::set_horse_skill_point(int32_t value) {
  _internal_set_horse_skill_point(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.horse_skill_point)
}

// repeated .TPlayerSkill skills = 28;
inline int TPlayerTable::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int TPlayerTable::skills_size() const {
  return _internal_skills_size();
}
inline void TPlayerTable::clear_skills() {
  _impl_.skills_.Clear();
}
inline ::TPlayerSkill* TPlayerTable::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:TPlayerTable.skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >*
TPlayerTable::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.skills)
  return &_impl_.skills_;
}
inline const ::TPlayerSkill& TPlayerTable::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::TPlayerSkill& TPlayerTable::skills(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.skills)
  return _internal_skills(index);
}
inline ::TPlayerSkill* TPlayerTable::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::TPlayerSkill* TPlayerTable::add_skills() {
  ::TPlayerSkill* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:TPlayerTable.skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >&
TPlayerTable::skills() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.skills)
  return _impl_.skills_;
}

// repeated .TQuickslot quickslots = 29;
inline int TPlayerTable::_internal_quickslots_size() const {
  return _impl_.quickslots_.size();
}
inline int TPlayerTable::quickslots_size() const {
  return _internal_quickslots_size();
}
inline void TPlayerTable::clear_quickslots() {
  _impl_.quickslots_.Clear();
}
inline ::TQuickslot* TPlayerTable::mutable_quickslots(int index) {
  // @@protoc_insertion_point(field_mutable:TPlayerTable.quickslots)
  return _impl_.quickslots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuickslot >*
TPlayerTable::mutable_quickslots() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.quickslots)
  return &_impl_.quickslots_;
}
inline const ::TQuickslot& TPlayerTable::_internal_quickslots(int index) const {
  return _impl_.quickslots_.Get(index);
}
inline const ::TQuickslot& TPlayerTable::quickslots(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.quickslots)
  return _internal_quickslots(index);
}
inline ::TQuickslot* TPlayerTable::_internal_add_quickslots() {
  return _impl_.quickslots_.Add();
}
inline ::TQuickslot* TPlayerTable::add_quickslots() {
  ::TQuickslot* _add = _internal_add_quickslots();
  // @@protoc_insertion_point(field_add:TPlayerTable.quickslots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuickslot >&
TPlayerTable::quickslots() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.quickslots)
  return _impl_.quickslots_;
}

// uint32 part_base = 30;
inline void TPlayerTable::clear_part_base() {
  _impl_.part_base_ = 0u;
}
inline uint32_t TPlayerTable::_internal_part_base() const {
  return _impl_.part_base_;
}
inline uint32_t TPlayerTable::part_base() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.part_base)
  return _internal_part_base();
}
inline void TPlayerTable::_internal_set_part_base(uint32_t value) {
  
  _impl_.part_base_ = value;
}
inline void TPlayerTable::set_part_base(uint32_t value) {
  _internal_set_part_base(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.part_base)
}

// repeated uint32 parts = 31;
inline int TPlayerTable::_internal_parts_size() const {
  return _impl_.parts_.size();
}
inline int TPlayerTable::parts_size() const {
  return _internal_parts_size();
}
inline void TPlayerTable::clear_parts() {
  _impl_.parts_.Clear();
}
inline uint32_t TPlayerTable::_internal_parts(int index) const {
  return _impl_.parts_.Get(index);
}
inline uint32_t TPlayerTable::parts(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.parts)
  return _internal_parts(index);
}
inline void TPlayerTable::set_parts(int index, uint32_t value) {
  _impl_.parts_.Set(index, value);
  // @@protoc_insertion_point(field_set:TPlayerTable.parts)
}
inline void TPlayerTable::_internal_add_parts(uint32_t value) {
  _impl_.parts_.Add(value);
}
inline void TPlayerTable::add_parts(uint32_t value) {
  _internal_add_parts(value);
  // @@protoc_insertion_point(field_add:TPlayerTable.parts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPlayerTable::_internal_parts() const {
  return _impl_.parts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPlayerTable::parts() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.parts)
  return _internal_parts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPlayerTable::_internal_mutable_parts() {
  return &_impl_.parts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPlayerTable::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.parts)
  return _internal_mutable_parts();
}

// uint32 part_hair_base = 32;
inline void TPlayerTable::clear_part_hair_base() {
  _impl_.part_hair_base_ = 0u;
}
inline uint32_t TPlayerTable::_internal_part_hair_base() const {
  return _impl_.part_hair_base_;
}
inline uint32_t TPlayerTable::part_hair_base() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.part_hair_base)
  return _internal_part_hair_base();
}
inline void TPlayerTable::_internal_set_part_hair_base(uint32_t value) {
  
  _impl_.part_hair_base_ = value;
}
inline void TPlayerTable::set_part_hair_base(uint32_t value) {
  _internal_set_part_hair_base(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.part_hair_base)
}

// uint32 skill_group = 33;
inline void TPlayerTable::clear_skill_group() {
  _impl_.skill_group_ = 0u;
}
inline uint32_t TPlayerTable::_internal_skill_group() const {
  return _impl_.skill_group_;
}
inline uint32_t TPlayerTable::skill_group() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.skill_group)
  return _internal_skill_group();
}
inline void TPlayerTable::_internal_set_skill_group(uint32_t value) {
  
  _impl_.skill_group_ = value;
}
inline void TPlayerTable::set_skill_group(uint32_t value) {
  _internal_set_skill_group(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.skill_group)
}

// int32 alignment = 34;
inline void TPlayerTable::clear_alignment() {
  _impl_.alignment_ = 0;
}
inline int32_t TPlayerTable::_internal_alignment() const {
  return _impl_.alignment_;
}
inline int32_t TPlayerTable::alignment() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.alignment)
  return _internal_alignment();
}
inline void TPlayerTable::_internal_set_alignment(int32_t value) {
  
  _impl_.alignment_ = value;
}
inline void TPlayerTable::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.alignment)
}

// int32 stat_reset_count = 35;
inline void TPlayerTable::clear_stat_reset_count() {
  _impl_.stat_reset_count_ = 0;
}
inline int32_t TPlayerTable::_internal_stat_reset_count() const {
  return _impl_.stat_reset_count_;
}
inline int32_t TPlayerTable::stat_reset_count() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.stat_reset_count)
  return _internal_stat_reset_count();
}
inline void TPlayerTable::_internal_set_stat_reset_count(int32_t value) {
  
  _impl_.stat_reset_count_ = value;
}
inline void TPlayerTable::set_stat_reset_count(int32_t value) {
  _internal_set_stat_reset_count(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.stat_reset_count)
}

// uint32 mount_state = 36;
inline void TPlayerTable::clear_mount_state() {
  _impl_.mount_state_ = 0u;
}
inline uint32_t TPlayerTable::_internal_mount_state() const {
  return _impl_.mount_state_;
}
inline uint32_t TPlayerTable::mount_state() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.mount_state)
  return _internal_mount_state();
}
inline void TPlayerTable::_internal_set_mount_state(uint32_t value) {
  
  _impl_.mount_state_ = value;
}
inline void TPlayerTable::set_mount_state(uint32_t value) {
  _internal_set_mount_state(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.mount_state)
}

// bytes mount_name = 37;
inline void TPlayerTable::clear_mount_name() {
  _impl_.mount_name_.ClearToEmpty();
}
inline const std::string& TPlayerTable::mount_name() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.mount_name)
  return _internal_mount_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPlayerTable::set_mount_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mount_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TPlayerTable.mount_name)
}
inline std::string* TPlayerTable::mutable_mount_name() {
  std::string* _s = _internal_mutable_mount_name();
  // @@protoc_insertion_point(field_mutable:TPlayerTable.mount_name)
  return _s;
}
inline const std::string& TPlayerTable::_internal_mount_name() const {
  return _impl_.mount_name_.Get();
}
inline void TPlayerTable::_internal_set_mount_name(const std::string& value) {
  
  _impl_.mount_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TPlayerTable::_internal_mutable_mount_name() {
  
  return _impl_.mount_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TPlayerTable::release_mount_name() {
  // @@protoc_insertion_point(field_release:TPlayerTable.mount_name)
  return _impl_.mount_name_.Release();
}
inline void TPlayerTable::set_allocated_mount_name(std::string* mount_name) {
  if (mount_name != nullptr) {
    
  } else {
    
  }
  _impl_.mount_name_.SetAllocated(mount_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mount_name_.IsDefault()) {
    _impl_.mount_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TPlayerTable.mount_name)
}

// uint32 mount_item_id = 38;
inline void TPlayerTable::clear_mount_item_id() {
  _impl_.mount_item_id_ = 0u;
}
inline uint32_t TPlayerTable::_internal_mount_item_id() const {
  return _impl_.mount_item_id_;
}
inline uint32_t TPlayerTable::mount_item_id() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.mount_item_id)
  return _internal_mount_item_id();
}
inline void TPlayerTable::_internal_set_mount_item_id(uint32_t value) {
  
  _impl_.mount_item_id_ = value;
}
inline void TPlayerTable::set_mount_item_id(uint32_t value) {
  _internal_set_mount_item_id(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.mount_item_id)
}

// uint32 horse_grade = 39;
inline void TPlayerTable::clear_horse_grade() {
  _impl_.horse_grade_ = 0u;
}
inline uint32_t TPlayerTable::_internal_horse_grade() const {
  return _impl_.horse_grade_;
}
inline uint32_t TPlayerTable::horse_grade() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.horse_grade)
  return _internal_horse_grade();
}
inline void TPlayerTable::_internal_set_horse_grade(uint32_t value) {
  
  _impl_.horse_grade_ = value;
}
inline void TPlayerTable::set_horse_grade(uint32_t value) {
  _internal_set_horse_grade(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.horse_grade)
}

// uint32 horse_elapsed_time = 40;
inline void TPlayerTable::clear_horse_elapsed_time() {
  _impl_.horse_elapsed_time_ = 0u;
}
inline uint32_t TPlayerTable::_internal_horse_elapsed_time() const {
  return _impl_.horse_elapsed_time_;
}
inline uint32_t TPlayerTable::horse_elapsed_time() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.horse_elapsed_time)
  return _internal_horse_elapsed_time();
}
inline void TPlayerTable::_internal_set_horse_elapsed_time(uint32_t value) {
  
  _impl_.horse_elapsed_time_ = value;
}
inline void TPlayerTable::set_horse_elapsed_time(uint32_t value) {
  _internal_set_horse_elapsed_time(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.horse_elapsed_time)
}

// uint32 logoff_interval = 41;
inline void TPlayerTable::clear_logoff_interval() {
  _impl_.logoff_interval_ = 0u;
}
inline uint32_t TPlayerTable::_internal_logoff_interval() const {
  return _impl_.logoff_interval_;
}
inline uint32_t TPlayerTable::logoff_interval() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.logoff_interval)
  return _internal_logoff_interval();
}
inline void TPlayerTable::_internal_set_logoff_interval(uint32_t value) {
  
  _impl_.logoff_interval_ = value;
}
inline void TPlayerTable::set_logoff_interval(uint32_t value) {
  _internal_set_logoff_interval(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.logoff_interval)
}

// repeated int32 premium_times = 42;
inline int TPlayerTable::_internal_premium_times_size() const {
  return _impl_.premium_times_.size();
}
inline int TPlayerTable::premium_times_size() const {
  return _internal_premium_times_size();
}
inline void TPlayerTable::clear_premium_times() {
  _impl_.premium_times_.Clear();
}
inline int32_t TPlayerTable::_internal_premium_times(int index) const {
  return _impl_.premium_times_.Get(index);
}
inline int32_t TPlayerTable::premium_times(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.premium_times)
  return _internal_premium_times(index);
}
inline void TPlayerTable::set_premium_times(int index, int32_t value) {
  _impl_.premium_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:TPlayerTable.premium_times)
}
inline void TPlayerTable::_internal_add_premium_times(int32_t value) {
  _impl_.premium_times_.Add(value);
}
inline void TPlayerTable::add_premium_times(int32_t value) {
  _internal_add_premium_times(value);
  // @@protoc_insertion_point(field_add:TPlayerTable.premium_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TPlayerTable::_internal_premium_times() const {
  return _impl_.premium_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TPlayerTable::premium_times() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.premium_times)
  return _internal_premium_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TPlayerTable::_internal_mutable_premium_times() {
  return &_impl_.premium_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TPlayerTable::mutable_premium_times() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.premium_times)
  return _internal_mutable_premium_times();
}

// uint32 inventory_max_num = 43;
inline void TPlayerTable::clear_inventory_max_num() {
  _impl_.inventory_max_num_ = 0u;
}
inline uint32_t TPlayerTable::_internal_inventory_max_num() const {
  return _impl_.inventory_max_num_;
}
inline uint32_t TPlayerTable::inventory_max_num() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.inventory_max_num)
  return _internal_inventory_max_num();
}
inline void TPlayerTable::_internal_set_inventory_max_num(uint32_t value) {
  
  _impl_.inventory_max_num_ = value;
}
inline void TPlayerTable::set_inventory_max_num(uint32_t value) {
  _internal_set_inventory_max_num(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.inventory_max_num)
}

// uint32 uppitem_inv_max_num = 44;
inline void TPlayerTable::clear_uppitem_inv_max_num() {
  _impl_.uppitem_inv_max_num_ = 0u;
}
inline uint32_t TPlayerTable::_internal_uppitem_inv_max_num() const {
  return _impl_.uppitem_inv_max_num_;
}
inline uint32_t TPlayerTable::uppitem_inv_max_num() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.uppitem_inv_max_num)
  return _internal_uppitem_inv_max_num();
}
inline void TPlayerTable::_internal_set_uppitem_inv_max_num(uint32_t value) {
  
  _impl_.uppitem_inv_max_num_ = value;
}
inline void TPlayerTable::set_uppitem_inv_max_num(uint32_t value) {
  _internal_set_uppitem_inv_max_num(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.uppitem_inv_max_num)
}

// repeated bool data_changed = 45;
inline int TPlayerTable::_internal_data_changed_size() const {
  return _impl_.data_changed_.size();
}
inline int TPlayerTable::data_changed_size() const {
  return _internal_data_changed_size();
}
inline void TPlayerTable::clear_data_changed() {
  _impl_.data_changed_.Clear();
}
inline bool TPlayerTable::_internal_data_changed(int index) const {
  return _impl_.data_changed_.Get(index);
}
inline bool TPlayerTable::data_changed(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.data_changed)
  return _internal_data_changed(index);
}
inline void TPlayerTable::set_data_changed(int index, bool value) {
  _impl_.data_changed_.Set(index, value);
  // @@protoc_insertion_point(field_set:TPlayerTable.data_changed)
}
inline void TPlayerTable::_internal_add_data_changed(bool value) {
  _impl_.data_changed_.Add(value);
}
inline void TPlayerTable::add_data_changed(bool value) {
  _internal_add_data_changed(value);
  // @@protoc_insertion_point(field_add:TPlayerTable.data_changed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TPlayerTable::_internal_data_changed() const {
  return _impl_.data_changed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TPlayerTable::data_changed() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.data_changed)
  return _internal_data_changed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TPlayerTable::_internal_mutable_data_changed() {
  return &_impl_.data_changed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TPlayerTable::mutable_data_changed() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.data_changed)
  return _internal_mutable_data_changed();
}

// uint32 last_play_time = 46;
inline void TPlayerTable::clear_last_play_time() {
  _impl_.last_play_time_ = 0u;
}
inline uint32_t TPlayerTable::_internal_last_play_time() const {
  return _impl_.last_play_time_;
}
inline uint32_t TPlayerTable::last_play_time() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.last_play_time)
  return _internal_last_play_time();
}
inline void TPlayerTable::_internal_set_last_play_time(uint32_t value) {
  
  _impl_.last_play_time_ = value;
}
inline void TPlayerTable::set_last_play_time(uint32_t value) {
  _internal_set_last_play_time(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.last_play_time)
}

// .TRunePageData rune_page_data = 47;
inline bool TPlayerTable::_internal_has_rune_page_data() const {
  return this != internal_default_instance() && _impl_.rune_page_data_ != nullptr;
}
inline bool TPlayerTable::has_rune_page_data() const {
  return _internal_has_rune_page_data();
}
inline void TPlayerTable::clear_rune_page_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.rune_page_data_ != nullptr) {
    delete _impl_.rune_page_data_;
  }
  _impl_.rune_page_data_ = nullptr;
}
inline const ::TRunePageData& TPlayerTable::_internal_rune_page_data() const {
  const ::TRunePageData* p = _impl_.rune_page_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TRunePageData&>(
      ::_TRunePageData_default_instance_);
}
inline const ::TRunePageData& TPlayerTable::rune_page_data() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.rune_page_data)
  return _internal_rune_page_data();
}
inline void TPlayerTable::unsafe_arena_set_allocated_rune_page_data(
    ::TRunePageData* rune_page_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rune_page_data_);
  }
  _impl_.rune_page_data_ = rune_page_data;
  if (rune_page_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TPlayerTable.rune_page_data)
}
inline ::TRunePageData* TPlayerTable::release_rune_page_data() {
  
  ::TRunePageData* temp = _impl_.rune_page_data_;
  _impl_.rune_page_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TRunePageData* TPlayerTable::unsafe_arena_release_rune_page_data() {
  // @@protoc_insertion_point(field_release:TPlayerTable.rune_page_data)
  
  ::TRunePageData* temp = _impl_.rune_page_data_;
  _impl_.rune_page_data_ = nullptr;
  return temp;
}
inline ::TRunePageData* TPlayerTable::_internal_mutable_rune_page_data() {
  
  if (_impl_.rune_page_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TRunePageData>(GetArenaForAllocation());
    _impl_.rune_page_data_ = p;
  }
  return _impl_.rune_page_data_;
}
inline ::TRunePageData* TPlayerTable::mutable_rune_page_data() {
  ::TRunePageData* _msg = _internal_mutable_rune_page_data();
  // @@protoc_insertion_point(field_mutable:TPlayerTable.rune_page_data)
  return _msg;
}
inline void TPlayerTable::set_allocated_rune_page_data(::TRunePageData* rune_page_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rune_page_data_;
  }
  if (rune_page_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rune_page_data);
    if (message_arena != submessage_arena) {
      rune_page_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rune_page_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rune_page_data_ = rune_page_data;
  // @@protoc_insertion_point(field_set_allocated:TPlayerTable.rune_page_data)
}

// repeated uint32 runes = 48;
inline int TPlayerTable::_internal_runes_size() const {
  return _impl_.runes_.size();
}
inline int TPlayerTable::runes_size() const {
  return _internal_runes_size();
}
inline void TPlayerTable::clear_runes() {
  _impl_.runes_.Clear();
}
inline uint32_t TPlayerTable::_internal_runes(int index) const {
  return _impl_.runes_.Get(index);
}
inline uint32_t TPlayerTable::runes(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.runes)
  return _internal_runes(index);
}
inline void TPlayerTable::set_runes(int index, uint32_t value) {
  _impl_.runes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TPlayerTable.runes)
}
inline void TPlayerTable::_internal_add_runes(uint32_t value) {
  _impl_.runes_.Add(value);
}
inline void TPlayerTable::add_runes(uint32_t value) {
  _internal_add_runes(value);
  // @@protoc_insertion_point(field_add:TPlayerTable.runes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPlayerTable::_internal_runes() const {
  return _impl_.runes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPlayerTable::runes() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.runes)
  return _internal_runes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPlayerTable::_internal_mutable_runes() {
  return &_impl_.runes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPlayerTable::mutable_runes() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.runes)
  return _internal_mutable_runes();
}

// uint32 fish_event_use_count = 49;
inline void TPlayerTable::clear_fish_event_use_count() {
  _impl_.fish_event_use_count_ = 0u;
}
inline uint32_t TPlayerTable::_internal_fish_event_use_count() const {
  return _impl_.fish_event_use_count_;
}
inline uint32_t TPlayerTable::fish_event_use_count() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.fish_event_use_count)
  return _internal_fish_event_use_count();
}
inline void TPlayerTable::_internal_set_fish_event_use_count(uint32_t value) {
  
  _impl_.fish_event_use_count_ = value;
}
inline void TPlayerTable::set_fish_event_use_count(uint32_t value) {
  _internal_set_fish_event_use_count(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.fish_event_use_count)
}

// repeated .TPlayerFishEventSlot fish_slots = 50;
inline int TPlayerTable::_internal_fish_slots_size() const {
  return _impl_.fish_slots_.size();
}
inline int TPlayerTable::fish_slots_size() const {
  return _internal_fish_slots_size();
}
inline void TPlayerTable::clear_fish_slots() {
  _impl_.fish_slots_.Clear();
}
inline ::TPlayerFishEventSlot* TPlayerTable::mutable_fish_slots(int index) {
  // @@protoc_insertion_point(field_mutable:TPlayerTable.fish_slots)
  return _impl_.fish_slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerFishEventSlot >*
TPlayerTable::mutable_fish_slots() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.fish_slots)
  return &_impl_.fish_slots_;
}
inline const ::TPlayerFishEventSlot& TPlayerTable::_internal_fish_slots(int index) const {
  return _impl_.fish_slots_.Get(index);
}
inline const ::TPlayerFishEventSlot& TPlayerTable::fish_slots(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.fish_slots)
  return _internal_fish_slots(index);
}
inline ::TPlayerFishEventSlot* TPlayerTable::_internal_add_fish_slots() {
  return _impl_.fish_slots_.Add();
}
inline ::TPlayerFishEventSlot* TPlayerTable::add_fish_slots() {
  ::TPlayerFishEventSlot* _add = _internal_add_fish_slots();
  // @@protoc_insertion_point(field_add:TPlayerTable.fish_slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerFishEventSlot >&
TPlayerTable::fish_slots() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.fish_slots)
  return _impl_.fish_slots_;
}

// uint32 fakebuff_skill1 = 51;
inline void TPlayerTable::clear_fakebuff_skill1() {
  _impl_.fakebuff_skill1_ = 0u;
}
inline uint32_t TPlayerTable::_internal_fakebuff_skill1() const {
  return _impl_.fakebuff_skill1_;
}
inline uint32_t TPlayerTable::fakebuff_skill1() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.fakebuff_skill1)
  return _internal_fakebuff_skill1();
}
inline void TPlayerTable::_internal_set_fakebuff_skill1(uint32_t value) {
  
  _impl_.fakebuff_skill1_ = value;
}
inline void TPlayerTable::set_fakebuff_skill1(uint32_t value) {
  _internal_set_fakebuff_skill1(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.fakebuff_skill1)
}

// uint32 fakebuff_skill2 = 52;
inline void TPlayerTable::clear_fakebuff_skill2() {
  _impl_.fakebuff_skill2_ = 0u;
}
inline uint32_t TPlayerTable::_internal_fakebuff_skill2() const {
  return _impl_.fakebuff_skill2_;
}
inline uint32_t TPlayerTable::fakebuff_skill2() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.fakebuff_skill2)
  return _internal_fakebuff_skill2();
}
inline void TPlayerTable::_internal_set_fakebuff_skill2(uint32_t value) {
  
  _impl_.fakebuff_skill2_ = value;
}
inline void TPlayerTable::set_fakebuff_skill2(uint32_t value) {
  _internal_set_fakebuff_skill2(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.fakebuff_skill2)
}

// uint32 fakebuff_skill3 = 53;
inline void TPlayerTable::clear_fakebuff_skill3() {
  _impl_.fakebuff_skill3_ = 0u;
}
inline uint32_t TPlayerTable::_internal_fakebuff_skill3() const {
  return _impl_.fakebuff_skill3_;
}
inline uint32_t TPlayerTable::fakebuff_skill3() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.fakebuff_skill3)
  return _internal_fakebuff_skill3();
}
inline void TPlayerTable::_internal_set_fakebuff_skill3(uint32_t value) {
  
  _impl_.fakebuff_skill3_ = value;
}
inline void TPlayerTable::set_fakebuff_skill3(uint32_t value) {
  _internal_set_fakebuff_skill3(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.fakebuff_skill3)
}

// repeated uint32 attrtree = 54;
inline int TPlayerTable::_internal_attrtree_size() const {
  return _impl_.attrtree_.size();
}
inline int TPlayerTable::attrtree_size() const {
  return _internal_attrtree_size();
}
inline void TPlayerTable::clear_attrtree() {
  _impl_.attrtree_.Clear();
}
inline uint32_t TPlayerTable::_internal_attrtree(int index) const {
  return _impl_.attrtree_.Get(index);
}
inline uint32_t TPlayerTable::attrtree(int index) const {
  // @@protoc_insertion_point(field_get:TPlayerTable.attrtree)
  return _internal_attrtree(index);
}
inline void TPlayerTable::set_attrtree(int index, uint32_t value) {
  _impl_.attrtree_.Set(index, value);
  // @@protoc_insertion_point(field_set:TPlayerTable.attrtree)
}
inline void TPlayerTable::_internal_add_attrtree(uint32_t value) {
  _impl_.attrtree_.Add(value);
}
inline void TPlayerTable::add_attrtree(uint32_t value) {
  _internal_add_attrtree(value);
  // @@protoc_insertion_point(field_add:TPlayerTable.attrtree)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPlayerTable::_internal_attrtree() const {
  return _impl_.attrtree_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPlayerTable::attrtree() const {
  // @@protoc_insertion_point(field_list:TPlayerTable.attrtree)
  return _internal_attrtree();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPlayerTable::_internal_mutable_attrtree() {
  return &_impl_.attrtree_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPlayerTable::mutable_attrtree() {
  // @@protoc_insertion_point(field_mutable_list:TPlayerTable.attrtree)
  return _internal_mutable_attrtree();
}

// uint32 equipment_page_index = 55;
inline void TPlayerTable::clear_equipment_page_index() {
  _impl_.equipment_page_index_ = 0u;
}
inline uint32_t TPlayerTable::_internal_equipment_page_index() const {
  return _impl_.equipment_page_index_;
}
inline uint32_t TPlayerTable::equipment_page_index() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.equipment_page_index)
  return _internal_equipment_page_index();
}
inline void TPlayerTable::_internal_set_equipment_page_index(uint32_t value) {
  
  _impl_.equipment_page_index_ = value;
}
inline void TPlayerTable::set_equipment_page_index(uint32_t value) {
  _internal_set_equipment_page_index(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.equipment_page_index)
}

// uint32 combat_zone_points = 56;
inline void TPlayerTable::clear_combat_zone_points() {
  _impl_.combat_zone_points_ = 0u;
}
inline uint32_t TPlayerTable::_internal_combat_zone_points() const {
  return _impl_.combat_zone_points_;
}
inline uint32_t TPlayerTable::combat_zone_points() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.combat_zone_points)
  return _internal_combat_zone_points();
}
inline void TPlayerTable::_internal_set_combat_zone_points(uint32_t value) {
  
  _impl_.combat_zone_points_ = value;
}
inline void TPlayerTable::set_combat_zone_points(uint32_t value) {
  _internal_set_combat_zone_points(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.combat_zone_points)
}

// uint32 animasphere = 57;
inline void TPlayerTable::clear_animasphere() {
  _impl_.animasphere_ = 0u;
}
inline uint32_t TPlayerTable::_internal_animasphere() const {
  return _impl_.animasphere_;
}
inline uint32_t TPlayerTable::animasphere() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.animasphere)
  return _internal_animasphere();
}
inline void TPlayerTable::_internal_set_animasphere(uint32_t value) {
  
  _impl_.animasphere_ = value;
}
inline void TPlayerTable::set_animasphere(uint32_t value) {
  _internal_set_animasphere(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.animasphere)
}

// uint32 gaya = 58;
inline void TPlayerTable::clear_gaya() {
  _impl_.gaya_ = 0u;
}
inline uint32_t TPlayerTable::_internal_gaya() const {
  return _impl_.gaya_;
}
inline uint32_t TPlayerTable::gaya() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.gaya)
  return _internal_gaya();
}
inline void TPlayerTable::_internal_set_gaya(uint32_t value) {
  
  _impl_.gaya_ = value;
}
inline void TPlayerTable::set_gaya(uint32_t value) {
  _internal_set_gaya(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.gaya)
}

// uint32 skillbook_inv_max_num = 59;
inline void TPlayerTable::clear_skillbook_inv_max_num() {
  _impl_.skillbook_inv_max_num_ = 0u;
}
inline uint32_t TPlayerTable::_internal_skillbook_inv_max_num() const {
  return _impl_.skillbook_inv_max_num_;
}
inline uint32_t TPlayerTable::skillbook_inv_max_num() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.skillbook_inv_max_num)
  return _internal_skillbook_inv_max_num();
}
inline void TPlayerTable::_internal_set_skillbook_inv_max_num(uint32_t value) {
  
  _impl_.skillbook_inv_max_num_ = value;
}
inline void TPlayerTable::set_skillbook_inv_max_num(uint32_t value) {
  _internal_set_skillbook_inv_max_num(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.skillbook_inv_max_num)
}

// uint32 stone_inv_max_num = 60;
inline void TPlayerTable::clear_stone_inv_max_num() {
  _impl_.stone_inv_max_num_ = 0u;
}
inline uint32_t TPlayerTable::_internal_stone_inv_max_num() const {
  return _impl_.stone_inv_max_num_;
}
inline uint32_t TPlayerTable::stone_inv_max_num() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.stone_inv_max_num)
  return _internal_stone_inv_max_num();
}
inline void TPlayerTable::_internal_set_stone_inv_max_num(uint32_t value) {
  
  _impl_.stone_inv_max_num_ = value;
}
inline void TPlayerTable::set_stone_inv_max_num(uint32_t value) {
  _internal_set_stone_inv_max_num(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.stone_inv_max_num)
}

// uint32 enchant_inv_max_num = 61;
inline void TPlayerTable::clear_enchant_inv_max_num() {
  _impl_.enchant_inv_max_num_ = 0u;
}
inline uint32_t TPlayerTable::_internal_enchant_inv_max_num() const {
  return _impl_.enchant_inv_max_num_;
}
inline uint32_t TPlayerTable::enchant_inv_max_num() const {
  // @@protoc_insertion_point(field_get:TPlayerTable.enchant_inv_max_num)
  return _internal_enchant_inv_max_num();
}
inline void TPlayerTable::_internal_set_enchant_inv_max_num(uint32_t value) {
  
  _impl_.enchant_inv_max_num_ = value;
}
inline void TPlayerTable::set_enchant_inv_max_num(uint32_t value) {
  _internal_set_enchant_inv_max_num(value);
  // @@protoc_insertion_point(field_set:TPlayerTable.enchant_inv_max_num)
}

// -------------------------------------------------------------------

// TQuestTable

// uint32 pid = 1;
inline void TQuestTable::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t TQuestTable::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t TQuestTable::pid() const {
  // @@protoc_insertion_point(field_get:TQuestTable.pid)
  return _internal_pid();
}
inline void TQuestTable::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void TQuestTable::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:TQuestTable.pid)
}

// bytes name = 2;
inline void TQuestTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TQuestTable::name() const {
  // @@protoc_insertion_point(field_get:TQuestTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TQuestTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TQuestTable.name)
}
inline std::string* TQuestTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TQuestTable.name)
  return _s;
}
inline const std::string& TQuestTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TQuestTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TQuestTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TQuestTable::release_name() {
  // @@protoc_insertion_point(field_release:TQuestTable.name)
  return _impl_.name_.Release();
}
inline void TQuestTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TQuestTable.name)
}

// bytes state = 3;
inline void TQuestTable::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& TQuestTable::state() const {
  // @@protoc_insertion_point(field_get:TQuestTable.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TQuestTable::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TQuestTable.state)
}
inline std::string* TQuestTable::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:TQuestTable.state)
  return _s;
}
inline const std::string& TQuestTable::_internal_state() const {
  return _impl_.state_.Get();
}
inline void TQuestTable::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* TQuestTable::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* TQuestTable::release_state() {
  // @@protoc_insertion_point(field_release:TQuestTable.state)
  return _impl_.state_.Release();
}
inline void TQuestTable::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TQuestTable.state)
}

// int32 value = 4;
inline void TQuestTable::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t TQuestTable::_internal_value() const {
  return _impl_.value_;
}
inline int32_t TQuestTable::value() const {
  // @@protoc_insertion_point(field_get:TQuestTable.value)
  return _internal_value();
}
inline void TQuestTable::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void TQuestTable::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TQuestTable.value)
}

// -------------------------------------------------------------------

// TPacketAffectElement

// uint32 type = 1;
inline void TPacketAffectElement::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TPacketAffectElement::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TPacketAffectElement::type() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.type)
  return _internal_type();
}
inline void TPacketAffectElement::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TPacketAffectElement::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.type)
}

// uint32 apply_on = 2;
inline void TPacketAffectElement::clear_apply_on() {
  _impl_.apply_on_ = 0u;
}
inline uint32_t TPacketAffectElement::_internal_apply_on() const {
  return _impl_.apply_on_;
}
inline uint32_t TPacketAffectElement::apply_on() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.apply_on)
  return _internal_apply_on();
}
inline void TPacketAffectElement::_internal_set_apply_on(uint32_t value) {
  
  _impl_.apply_on_ = value;
}
inline void TPacketAffectElement::set_apply_on(uint32_t value) {
  _internal_set_apply_on(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.apply_on)
}

// int32 apply_value = 3;
inline void TPacketAffectElement::clear_apply_value() {
  _impl_.apply_value_ = 0;
}
inline int32_t TPacketAffectElement::_internal_apply_value() const {
  return _impl_.apply_value_;
}
inline int32_t TPacketAffectElement::apply_value() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.apply_value)
  return _internal_apply_value();
}
inline void TPacketAffectElement::_internal_set_apply_value(int32_t value) {
  
  _impl_.apply_value_ = value;
}
inline void TPacketAffectElement::set_apply_value(int32_t value) {
  _internal_set_apply_value(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.apply_value)
}

// uint32 flag = 4;
inline void TPacketAffectElement::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t TPacketAffectElement::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t TPacketAffectElement::flag() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.flag)
  return _internal_flag();
}
inline void TPacketAffectElement::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void TPacketAffectElement::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.flag)
}

// int32 duration = 5;
inline void TPacketAffectElement::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t TPacketAffectElement::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t TPacketAffectElement::duration() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.duration)
  return _internal_duration();
}
inline void TPacketAffectElement::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void TPacketAffectElement::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.duration)
}

// int32 sp_cost = 6;
inline void TPacketAffectElement::clear_sp_cost() {
  _impl_.sp_cost_ = 0;
}
inline int32_t TPacketAffectElement::_internal_sp_cost() const {
  return _impl_.sp_cost_;
}
inline int32_t TPacketAffectElement::sp_cost() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.sp_cost)
  return _internal_sp_cost();
}
inline void TPacketAffectElement::_internal_set_sp_cost(int32_t value) {
  
  _impl_.sp_cost_ = value;
}
inline void TPacketAffectElement::set_sp_cost(int32_t value) {
  _internal_set_sp_cost(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.sp_cost)
}

// uint32 blend_color = 7;
inline void TPacketAffectElement::clear_blend_color() {
  _impl_.blend_color_ = 0u;
}
inline uint32_t TPacketAffectElement::_internal_blend_color() const {
  return _impl_.blend_color_;
}
inline uint32_t TPacketAffectElement::blend_color() const {
  // @@protoc_insertion_point(field_get:TPacketAffectElement.blend_color)
  return _internal_blend_color();
}
inline void TPacketAffectElement::_internal_set_blend_color(uint32_t value) {
  
  _impl_.blend_color_ = value;
}
inline void TPacketAffectElement::set_blend_color(uint32_t value) {
  _internal_set_blend_color(value);
  // @@protoc_insertion_point(field_set:TPacketAffectElement.blend_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fplayer_2eproto
