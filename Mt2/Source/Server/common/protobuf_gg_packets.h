// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg_packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gg_5fpackets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gg_5fpackets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf_data.h"
#include "protobuf_data_item.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gg_5fpackets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gg_5fpackets_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gg_5fpackets_2eproto;
namespace network {
class GGAnswerDungeonWarpPacket;
struct GGAnswerDungeonWarpPacketDefaultTypeInternal;
extern GGAnswerDungeonWarpPacketDefaultTypeInternal _GGAnswerDungeonWarpPacket_default_instance_;
class GGAuctionAnswerMarkShopPacket;
struct GGAuctionAnswerMarkShopPacketDefaultTypeInternal;
extern GGAuctionAnswerMarkShopPacketDefaultTypeInternal _GGAuctionAnswerMarkShopPacket_default_instance_;
class GGAuctionBuyItemPacket;
struct GGAuctionBuyItemPacketDefaultTypeInternal;
extern GGAuctionBuyItemPacketDefaultTypeInternal _GGAuctionBuyItemPacket_default_instance_;
class GGAuctionExtendedSearchItemsPacket;
struct GGAuctionExtendedSearchItemsPacketDefaultTypeInternal;
extern GGAuctionExtendedSearchItemsPacketDefaultTypeInternal _GGAuctionExtendedSearchItemsPacket_default_instance_;
class GGAuctionInsertItemPacket;
struct GGAuctionInsertItemPacketDefaultTypeInternal;
extern GGAuctionInsertItemPacketDefaultTypeInternal _GGAuctionInsertItemPacket_default_instance_;
class GGAuctionMarkShopPacket;
struct GGAuctionMarkShopPacketDefaultTypeInternal;
extern GGAuctionMarkShopPacketDefaultTypeInternal _GGAuctionMarkShopPacket_default_instance_;
class GGAuctionRequestAveragePricePacket;
struct GGAuctionRequestAveragePricePacketDefaultTypeInternal;
extern GGAuctionRequestAveragePricePacketDefaultTypeInternal _GGAuctionRequestAveragePricePacket_default_instance_;
class GGAuctionSearchItemsPacket;
struct GGAuctionSearchItemsPacketDefaultTypeInternal;
extern GGAuctionSearchItemsPacketDefaultTypeInternal _GGAuctionSearchItemsPacket_default_instance_;
class GGAuctionShopClosePacket;
struct GGAuctionShopClosePacketDefaultTypeInternal;
extern GGAuctionShopClosePacketDefaultTypeInternal _GGAuctionShopClosePacket_default_instance_;
class GGAuctionShopDespawnPacket;
struct GGAuctionShopDespawnPacketDefaultTypeInternal;
extern GGAuctionShopDespawnPacketDefaultTypeInternal _GGAuctionShopDespawnPacket_default_instance_;
class GGAuctionShopOpenPacket;
struct GGAuctionShopOpenPacketDefaultTypeInternal;
extern GGAuctionShopOpenPacketDefaultTypeInternal _GGAuctionShopOpenPacket_default_instance_;
class GGAuctionShopRenewPacket;
struct GGAuctionShopRenewPacketDefaultTypeInternal;
extern GGAuctionShopRenewPacketDefaultTypeInternal _GGAuctionShopRenewPacket_default_instance_;
class GGAuctionShopRequestHistoryPacket;
struct GGAuctionShopRequestHistoryPacketDefaultTypeInternal;
extern GGAuctionShopRequestHistoryPacketDefaultTypeInternal _GGAuctionShopRequestHistoryPacket_default_instance_;
class GGAuctionShopRequestShowPacket;
struct GGAuctionShopRequestShowPacketDefaultTypeInternal;
extern GGAuctionShopRequestShowPacketDefaultTypeInternal _GGAuctionShopRequestShowPacket_default_instance_;
class GGAuctionShopSpawnPacket;
struct GGAuctionShopSpawnPacketDefaultTypeInternal;
extern GGAuctionShopSpawnPacketDefaultTypeInternal _GGAuctionShopSpawnPacket_default_instance_;
class GGAuctionShopTakeGoldPacket;
struct GGAuctionShopTakeGoldPacketDefaultTypeInternal;
extern GGAuctionShopTakeGoldPacketDefaultTypeInternal _GGAuctionShopTakeGoldPacket_default_instance_;
class GGAuctionShopViewCancelPacket;
struct GGAuctionShopViewCancelPacketDefaultTypeInternal;
extern GGAuctionShopViewCancelPacketDefaultTypeInternal _GGAuctionShopViewCancelPacket_default_instance_;
class GGAuctionShopViewPacket;
struct GGAuctionShopViewPacketDefaultTypeInternal;
extern GGAuctionShopViewPacketDefaultTypeInternal _GGAuctionShopViewPacket_default_instance_;
class GGAuctionTakeGoldPacket;
struct GGAuctionTakeGoldPacketDefaultTypeInternal;
extern GGAuctionTakeGoldPacketDefaultTypeInternal _GGAuctionTakeGoldPacket_default_instance_;
class GGAuctionTakeItemPacket;
struct GGAuctionTakeItemPacketDefaultTypeInternal;
extern GGAuctionTakeItemPacketDefaultTypeInternal _GGAuctionTakeItemPacket_default_instance_;
class GGBlockChatPacket;
struct GGBlockChatPacketDefaultTypeInternal;
extern GGBlockChatPacketDefaultTypeInternal _GGBlockChatPacket_default_instance_;
class GGCastleSiegePacket;
struct GGCastleSiegePacketDefaultTypeInternal;
extern GGCastleSiegePacketDefaultTypeInternal _GGCastleSiegePacket_default_instance_;
class GGCombatZoneRankingPacket;
struct GGCombatZoneRankingPacketDefaultTypeInternal;
extern GGCombatZoneRankingPacketDefaultTypeInternal _GGCombatZoneRankingPacket_default_instance_;
class GGDisconnectPacket;
struct GGDisconnectPacketDefaultTypeInternal;
extern GGDisconnectPacketDefaultTypeInternal _GGDisconnectPacket_default_instance_;
class GGDmgRankingUpdatePacket;
struct GGDmgRankingUpdatePacketDefaultTypeInternal;
extern GGDmgRankingUpdatePacketDefaultTypeInternal _GGDmgRankingUpdatePacket_default_instance_;
class GGDmgRankingUpdatePacket_Entry;
struct GGDmgRankingUpdatePacket_EntryDefaultTypeInternal;
extern GGDmgRankingUpdatePacket_EntryDefaultTypeInternal _GGDmgRankingUpdatePacket_Entry_default_instance_;
class GGDungeonSetFlagPacket;
struct GGDungeonSetFlagPacketDefaultTypeInternal;
extern GGDungeonSetFlagPacketDefaultTypeInternal _GGDungeonSetFlagPacket_default_instance_;
class GGEventManagerCloseRegistrationPacket;
struct GGEventManagerCloseRegistrationPacketDefaultTypeInternal;
extern GGEventManagerCloseRegistrationPacketDefaultTypeInternal _GGEventManagerCloseRegistrationPacket_default_instance_;
class GGEventManagerIgnorePlayerPacket;
struct GGEventManagerIgnorePlayerPacketDefaultTypeInternal;
extern GGEventManagerIgnorePlayerPacketDefaultTypeInternal _GGEventManagerIgnorePlayerPacket_default_instance_;
class GGEventManagerOpenAnnouncementPacket;
struct GGEventManagerOpenAnnouncementPacketDefaultTypeInternal;
extern GGEventManagerOpenAnnouncementPacketDefaultTypeInternal _GGEventManagerOpenAnnouncementPacket_default_instance_;
class GGEventManagerOpenRegistrationPacket;
struct GGEventManagerOpenRegistrationPacketDefaultTypeInternal;
extern GGEventManagerOpenRegistrationPacketDefaultTypeInternal _GGEventManagerOpenRegistrationPacket_default_instance_;
class GGEventManagerTagTeamCreatePacket;
struct GGEventManagerTagTeamCreatePacketDefaultTypeInternal;
extern GGEventManagerTagTeamCreatePacketDefaultTypeInternal _GGEventManagerTagTeamCreatePacket_default_instance_;
class GGEventManagerTagTeamRegisterPacket;
struct GGEventManagerTagTeamRegisterPacketDefaultTypeInternal;
extern GGEventManagerTagTeamRegisterPacketDefaultTypeInternal _GGEventManagerTagTeamRegisterPacket_default_instance_;
class GGEventManagerTagTeamUnregisterPacket;
struct GGEventManagerTagTeamUnregisterPacketDefaultTypeInternal;
extern GGEventManagerTagTeamUnregisterPacketDefaultTypeInternal _GGEventManagerTagTeamUnregisterPacket_default_instance_;
class GGExecReloadCommandPacket;
struct GGExecReloadCommandPacketDefaultTypeInternal;
extern GGExecReloadCommandPacketDefaultTypeInternal _GGExecReloadCommandPacket_default_instance_;
class GGFindPositionPacket;
struct GGFindPositionPacketDefaultTypeInternal;
extern GGFindPositionPacketDefaultTypeInternal _GGFindPositionPacket_default_instance_;
class GGFlushPlayerPacket;
struct GGFlushPlayerPacketDefaultTypeInternal;
extern GGFlushPlayerPacketDefaultTypeInternal _GGFlushPlayerPacket_default_instance_;
class GGForceItemDeletePacket;
struct GGForceItemDeletePacketDefaultTypeInternal;
extern GGForceItemDeletePacketDefaultTypeInternal _GGForceItemDeletePacket_default_instance_;
class GGGiveGoldPacket;
struct GGGiveGoldPacketDefaultTypeInternal;
extern GGGiveGoldPacketDefaultTypeInternal _GGGiveGoldPacket_default_instance_;
class GGGiveItemPacket;
struct GGGiveItemPacketDefaultTypeInternal;
extern GGGiveItemPacketDefaultTypeInternal _GGGiveItemPacket_default_instance_;
class GGGuildChangeNamePacket;
struct GGGuildChangeNamePacketDefaultTypeInternal;
extern GGGuildChangeNamePacketDefaultTypeInternal _GGGuildChangeNamePacket_default_instance_;
class GGGuildChatPacket;
struct GGGuildChatPacketDefaultTypeInternal;
extern GGGuildChatPacketDefaultTypeInternal _GGGuildChatPacket_default_instance_;
class GGGuildSetMemberCountBonusPacket;
struct GGGuildSetMemberCountBonusPacketDefaultTypeInternal;
extern GGGuildSetMemberCountBonusPacketDefaultTypeInternal _GGGuildSetMemberCountBonusPacket_default_instance_;
class GGGuildWarZoneMapIndexPacket;
struct GGGuildWarZoneMapIndexPacketDefaultTypeInternal;
extern GGGuildWarZoneMapIndexPacketDefaultTypeInternal _GGGuildWarZoneMapIndexPacket_default_instance_;
class GGHomepageCommandPacket;
struct GGHomepageCommandPacketDefaultTypeInternal;
extern GGHomepageCommandPacketDefaultTypeInternal _GGHomepageCommandPacket_default_instance_;
class GGLocaleUpdateLastUsagePacket;
struct GGLocaleUpdateLastUsagePacketDefaultTypeInternal;
extern GGLocaleUpdateLastUsagePacketDefaultTypeInternal _GGLocaleUpdateLastUsagePacket_default_instance_;
class GGLoginPacket;
struct GGLoginPacketDefaultTypeInternal;
extern GGLoginPacketDefaultTypeInternal _GGLoginPacket_default_instance_;
class GGLoginPingPacket;
struct GGLoginPingPacketDefaultTypeInternal;
extern GGLoginPingPacketDefaultTypeInternal _GGLoginPingPacket_default_instance_;
class GGLogoutPacket;
struct GGLogoutPacketDefaultTypeInternal;
extern GGLogoutPacketDefaultTypeInternal _GGLogoutPacket_default_instance_;
class GGMessengerAddPacket;
struct GGMessengerAddPacketDefaultTypeInternal;
extern GGMessengerAddPacketDefaultTypeInternal _GGMessengerAddPacket_default_instance_;
class GGMessengerBlockAddPacket;
struct GGMessengerBlockAddPacketDefaultTypeInternal;
extern GGMessengerBlockAddPacketDefaultTypeInternal _GGMessengerBlockAddPacket_default_instance_;
class GGMessengerBlockRemovePacket;
struct GGMessengerBlockRemovePacketDefaultTypeInternal;
extern GGMessengerBlockRemovePacketDefaultTypeInternal _GGMessengerBlockRemovePacket_default_instance_;
class GGMessengerRemovePacket;
struct GGMessengerRemovePacketDefaultTypeInternal;
extern GGMessengerRemovePacketDefaultTypeInternal _GGMessengerRemovePacket_default_instance_;
class GGMessengerRequestFailPacket;
struct GGMessengerRequestFailPacketDefaultTypeInternal;
extern GGMessengerRequestFailPacketDefaultTypeInternal _GGMessengerRequestFailPacket_default_instance_;
class GGMessengerRequestPacket;
struct GGMessengerRequestPacketDefaultTypeInternal;
extern GGMessengerRequestPacketDefaultTypeInternal _GGMessengerRequestPacket_default_instance_;
class GGNoticePacket;
struct GGNoticePacketDefaultTypeInternal;
extern GGNoticePacketDefaultTypeInternal _GGNoticePacket_default_instance_;
class GGPCBangUpdatePacket;
struct GGPCBangUpdatePacketDefaultTypeInternal;
extern GGPCBangUpdatePacketDefaultTypeInternal _GGPCBangUpdatePacket_default_instance_;
class GGPlayerPacket;
struct GGPlayerPacketDefaultTypeInternal;
extern GGPlayerPacketDefaultTypeInternal _GGPlayerPacket_default_instance_;
class GGPullOfflineMessagesPacket;
struct GGPullOfflineMessagesPacketDefaultTypeInternal;
extern GGPullOfflineMessagesPacketDefaultTypeInternal _GGPullOfflineMessagesPacket_default_instance_;
class GGRecvShutdownPacket;
struct GGRecvShutdownPacketDefaultTypeInternal;
extern GGRecvShutdownPacketDefaultTypeInternal _GGRecvShutdownPacket_default_instance_;
class GGRelayPacket;
struct GGRelayPacketDefaultTypeInternal;
extern GGRelayPacketDefaultTypeInternal _GGRelayPacket_default_instance_;
class GGReloadCommandPacket;
struct GGReloadCommandPacketDefaultTypeInternal;
extern GGReloadCommandPacketDefaultTypeInternal _GGReloadCommandPacket_default_instance_;
class GGRequestDungeonWarpPacket;
struct GGRequestDungeonWarpPacketDefaultTypeInternal;
extern GGRequestDungeonWarpPacketDefaultTypeInternal _GGRequestDungeonWarpPacket_default_instance_;
class GGSetupPacket;
struct GGSetupPacketDefaultTypeInternal;
extern GGSetupPacketDefaultTypeInternal _GGSetupPacket_default_instance_;
class GGShoutPacket;
struct GGShoutPacketDefaultTypeInternal;
extern GGShoutPacketDefaultTypeInternal _GGShoutPacket_default_instance_;
class GGSuccessNoticePacket;
struct GGSuccessNoticePacketDefaultTypeInternal;
extern GGSuccessNoticePacketDefaultTypeInternal _GGSuccessNoticePacket_default_instance_;
class GGTeamChatPacket;
struct GGTeamChatPacketDefaultTypeInternal;
extern GGTeamChatPacketDefaultTypeInternal _GGTeamChatPacket_default_instance_;
class GGTeamlerStatusPacket;
struct GGTeamlerStatusPacketDefaultTypeInternal;
extern GGTeamlerStatusPacketDefaultTypeInternal _GGTeamlerStatusPacket_default_instance_;
class GGTransferPacket;
struct GGTransferPacketDefaultTypeInternal;
extern GGTransferPacketDefaultTypeInternal _GGTransferPacket_default_instance_;
class GGUpdateRightsPacket;
struct GGUpdateRightsPacketDefaultTypeInternal;
extern GGUpdateRightsPacketDefaultTypeInternal _GGUpdateRightsPacket_default_instance_;
class GGWarpCharacterPacket;
struct GGWarpCharacterPacketDefaultTypeInternal;
extern GGWarpCharacterPacketDefaultTypeInternal _GGWarpCharacterPacket_default_instance_;
class GGWhisperManagerAddPacket;
struct GGWhisperManagerAddPacketDefaultTypeInternal;
extern GGWhisperManagerAddPacketDefaultTypeInternal _GGWhisperManagerAddPacket_default_instance_;
class GGXmasWarpSantaPacket;
struct GGXmasWarpSantaPacketDefaultTypeInternal;
extern GGXmasWarpSantaPacketDefaultTypeInternal _GGXmasWarpSantaPacket_default_instance_;
class GGXmasWarpSantaReplyPacket;
struct GGXmasWarpSantaReplyPacketDefaultTypeInternal;
extern GGXmasWarpSantaReplyPacketDefaultTypeInternal _GGXmasWarpSantaReplyPacket_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::GGAnswerDungeonWarpPacket* Arena::CreateMaybeMessage<::network::GGAnswerDungeonWarpPacket>(Arena*);
template<> ::network::GGAuctionAnswerMarkShopPacket* Arena::CreateMaybeMessage<::network::GGAuctionAnswerMarkShopPacket>(Arena*);
template<> ::network::GGAuctionBuyItemPacket* Arena::CreateMaybeMessage<::network::GGAuctionBuyItemPacket>(Arena*);
template<> ::network::GGAuctionExtendedSearchItemsPacket* Arena::CreateMaybeMessage<::network::GGAuctionExtendedSearchItemsPacket>(Arena*);
template<> ::network::GGAuctionInsertItemPacket* Arena::CreateMaybeMessage<::network::GGAuctionInsertItemPacket>(Arena*);
template<> ::network::GGAuctionMarkShopPacket* Arena::CreateMaybeMessage<::network::GGAuctionMarkShopPacket>(Arena*);
template<> ::network::GGAuctionRequestAveragePricePacket* Arena::CreateMaybeMessage<::network::GGAuctionRequestAveragePricePacket>(Arena*);
template<> ::network::GGAuctionSearchItemsPacket* Arena::CreateMaybeMessage<::network::GGAuctionSearchItemsPacket>(Arena*);
template<> ::network::GGAuctionShopClosePacket* Arena::CreateMaybeMessage<::network::GGAuctionShopClosePacket>(Arena*);
template<> ::network::GGAuctionShopDespawnPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopDespawnPacket>(Arena*);
template<> ::network::GGAuctionShopOpenPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopOpenPacket>(Arena*);
template<> ::network::GGAuctionShopRenewPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopRenewPacket>(Arena*);
template<> ::network::GGAuctionShopRequestHistoryPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopRequestHistoryPacket>(Arena*);
template<> ::network::GGAuctionShopRequestShowPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopRequestShowPacket>(Arena*);
template<> ::network::GGAuctionShopSpawnPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopSpawnPacket>(Arena*);
template<> ::network::GGAuctionShopTakeGoldPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopTakeGoldPacket>(Arena*);
template<> ::network::GGAuctionShopViewCancelPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopViewCancelPacket>(Arena*);
template<> ::network::GGAuctionShopViewPacket* Arena::CreateMaybeMessage<::network::GGAuctionShopViewPacket>(Arena*);
template<> ::network::GGAuctionTakeGoldPacket* Arena::CreateMaybeMessage<::network::GGAuctionTakeGoldPacket>(Arena*);
template<> ::network::GGAuctionTakeItemPacket* Arena::CreateMaybeMessage<::network::GGAuctionTakeItemPacket>(Arena*);
template<> ::network::GGBlockChatPacket* Arena::CreateMaybeMessage<::network::GGBlockChatPacket>(Arena*);
template<> ::network::GGCastleSiegePacket* Arena::CreateMaybeMessage<::network::GGCastleSiegePacket>(Arena*);
template<> ::network::GGCombatZoneRankingPacket* Arena::CreateMaybeMessage<::network::GGCombatZoneRankingPacket>(Arena*);
template<> ::network::GGDisconnectPacket* Arena::CreateMaybeMessage<::network::GGDisconnectPacket>(Arena*);
template<> ::network::GGDmgRankingUpdatePacket* Arena::CreateMaybeMessage<::network::GGDmgRankingUpdatePacket>(Arena*);
template<> ::network::GGDmgRankingUpdatePacket_Entry* Arena::CreateMaybeMessage<::network::GGDmgRankingUpdatePacket_Entry>(Arena*);
template<> ::network::GGDungeonSetFlagPacket* Arena::CreateMaybeMessage<::network::GGDungeonSetFlagPacket>(Arena*);
template<> ::network::GGEventManagerCloseRegistrationPacket* Arena::CreateMaybeMessage<::network::GGEventManagerCloseRegistrationPacket>(Arena*);
template<> ::network::GGEventManagerIgnorePlayerPacket* Arena::CreateMaybeMessage<::network::GGEventManagerIgnorePlayerPacket>(Arena*);
template<> ::network::GGEventManagerOpenAnnouncementPacket* Arena::CreateMaybeMessage<::network::GGEventManagerOpenAnnouncementPacket>(Arena*);
template<> ::network::GGEventManagerOpenRegistrationPacket* Arena::CreateMaybeMessage<::network::GGEventManagerOpenRegistrationPacket>(Arena*);
template<> ::network::GGEventManagerTagTeamCreatePacket* Arena::CreateMaybeMessage<::network::GGEventManagerTagTeamCreatePacket>(Arena*);
template<> ::network::GGEventManagerTagTeamRegisterPacket* Arena::CreateMaybeMessage<::network::GGEventManagerTagTeamRegisterPacket>(Arena*);
template<> ::network::GGEventManagerTagTeamUnregisterPacket* Arena::CreateMaybeMessage<::network::GGEventManagerTagTeamUnregisterPacket>(Arena*);
template<> ::network::GGExecReloadCommandPacket* Arena::CreateMaybeMessage<::network::GGExecReloadCommandPacket>(Arena*);
template<> ::network::GGFindPositionPacket* Arena::CreateMaybeMessage<::network::GGFindPositionPacket>(Arena*);
template<> ::network::GGFlushPlayerPacket* Arena::CreateMaybeMessage<::network::GGFlushPlayerPacket>(Arena*);
template<> ::network::GGForceItemDeletePacket* Arena::CreateMaybeMessage<::network::GGForceItemDeletePacket>(Arena*);
template<> ::network::GGGiveGoldPacket* Arena::CreateMaybeMessage<::network::GGGiveGoldPacket>(Arena*);
template<> ::network::GGGiveItemPacket* Arena::CreateMaybeMessage<::network::GGGiveItemPacket>(Arena*);
template<> ::network::GGGuildChangeNamePacket* Arena::CreateMaybeMessage<::network::GGGuildChangeNamePacket>(Arena*);
template<> ::network::GGGuildChatPacket* Arena::CreateMaybeMessage<::network::GGGuildChatPacket>(Arena*);
template<> ::network::GGGuildSetMemberCountBonusPacket* Arena::CreateMaybeMessage<::network::GGGuildSetMemberCountBonusPacket>(Arena*);
template<> ::network::GGGuildWarZoneMapIndexPacket* Arena::CreateMaybeMessage<::network::GGGuildWarZoneMapIndexPacket>(Arena*);
template<> ::network::GGHomepageCommandPacket* Arena::CreateMaybeMessage<::network::GGHomepageCommandPacket>(Arena*);
template<> ::network::GGLocaleUpdateLastUsagePacket* Arena::CreateMaybeMessage<::network::GGLocaleUpdateLastUsagePacket>(Arena*);
template<> ::network::GGLoginPacket* Arena::CreateMaybeMessage<::network::GGLoginPacket>(Arena*);
template<> ::network::GGLoginPingPacket* Arena::CreateMaybeMessage<::network::GGLoginPingPacket>(Arena*);
template<> ::network::GGLogoutPacket* Arena::CreateMaybeMessage<::network::GGLogoutPacket>(Arena*);
template<> ::network::GGMessengerAddPacket* Arena::CreateMaybeMessage<::network::GGMessengerAddPacket>(Arena*);
template<> ::network::GGMessengerBlockAddPacket* Arena::CreateMaybeMessage<::network::GGMessengerBlockAddPacket>(Arena*);
template<> ::network::GGMessengerBlockRemovePacket* Arena::CreateMaybeMessage<::network::GGMessengerBlockRemovePacket>(Arena*);
template<> ::network::GGMessengerRemovePacket* Arena::CreateMaybeMessage<::network::GGMessengerRemovePacket>(Arena*);
template<> ::network::GGMessengerRequestFailPacket* Arena::CreateMaybeMessage<::network::GGMessengerRequestFailPacket>(Arena*);
template<> ::network::GGMessengerRequestPacket* Arena::CreateMaybeMessage<::network::GGMessengerRequestPacket>(Arena*);
template<> ::network::GGNoticePacket* Arena::CreateMaybeMessage<::network::GGNoticePacket>(Arena*);
template<> ::network::GGPCBangUpdatePacket* Arena::CreateMaybeMessage<::network::GGPCBangUpdatePacket>(Arena*);
template<> ::network::GGPlayerPacket* Arena::CreateMaybeMessage<::network::GGPlayerPacket>(Arena*);
template<> ::network::GGPullOfflineMessagesPacket* Arena::CreateMaybeMessage<::network::GGPullOfflineMessagesPacket>(Arena*);
template<> ::network::GGRecvShutdownPacket* Arena::CreateMaybeMessage<::network::GGRecvShutdownPacket>(Arena*);
template<> ::network::GGRelayPacket* Arena::CreateMaybeMessage<::network::GGRelayPacket>(Arena*);
template<> ::network::GGReloadCommandPacket* Arena::CreateMaybeMessage<::network::GGReloadCommandPacket>(Arena*);
template<> ::network::GGRequestDungeonWarpPacket* Arena::CreateMaybeMessage<::network::GGRequestDungeonWarpPacket>(Arena*);
template<> ::network::GGSetupPacket* Arena::CreateMaybeMessage<::network::GGSetupPacket>(Arena*);
template<> ::network::GGShoutPacket* Arena::CreateMaybeMessage<::network::GGShoutPacket>(Arena*);
template<> ::network::GGSuccessNoticePacket* Arena::CreateMaybeMessage<::network::GGSuccessNoticePacket>(Arena*);
template<> ::network::GGTeamChatPacket* Arena::CreateMaybeMessage<::network::GGTeamChatPacket>(Arena*);
template<> ::network::GGTeamlerStatusPacket* Arena::CreateMaybeMessage<::network::GGTeamlerStatusPacket>(Arena*);
template<> ::network::GGTransferPacket* Arena::CreateMaybeMessage<::network::GGTransferPacket>(Arena*);
template<> ::network::GGUpdateRightsPacket* Arena::CreateMaybeMessage<::network::GGUpdateRightsPacket>(Arena*);
template<> ::network::GGWarpCharacterPacket* Arena::CreateMaybeMessage<::network::GGWarpCharacterPacket>(Arena*);
template<> ::network::GGWhisperManagerAddPacket* Arena::CreateMaybeMessage<::network::GGWhisperManagerAddPacket>(Arena*);
template<> ::network::GGXmasWarpSantaPacket* Arena::CreateMaybeMessage<::network::GGXmasWarpSantaPacket>(Arena*);
template<> ::network::GGXmasWarpSantaReplyPacket* Arena::CreateMaybeMessage<::network::GGXmasWarpSantaReplyPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class GGSetupPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGSetupPacket) */ {
 public:
  inline GGSetupPacket() : GGSetupPacket(nullptr) {}
  ~GGSetupPacket() override;
  explicit PROTOBUF_CONSTEXPR GGSetupPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGSetupPacket(const GGSetupPacket& from);
  GGSetupPacket(GGSetupPacket&& from) noexcept
    : GGSetupPacket() {
    *this = ::std::move(from);
  }

  inline GGSetupPacket& operator=(const GGSetupPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGSetupPacket& operator=(GGSetupPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGSetupPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGSetupPacket* internal_default_instance() {
    return reinterpret_cast<const GGSetupPacket*>(
               &_GGSetupPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GGSetupPacket& a, GGSetupPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGSetupPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGSetupPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGSetupPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGSetupPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGSetupPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGSetupPacket& from) {
    GGSetupPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGSetupPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGSetupPacket";
  }
  protected:
  explicit GGSetupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kListenPortFieldNumber = 2,
    kChannelFieldNumber = 3,
    kProcessorCoreFieldNumber = 4,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 listen_port = 2;
  void clear_listen_port();
  uint32_t listen_port() const;
  void set_listen_port(uint32_t value);
  private:
  uint32_t _internal_listen_port() const;
  void _internal_set_listen_port(uint32_t value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // bool processor_core = 4;
  void clear_processor_core();
  bool processor_core() const;
  void set_processor_core(bool value);
  private:
  bool _internal_processor_core() const;
  void _internal_set_processor_core(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGSetupPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    uint32_t listen_port_;
    uint32_t channel_;
    bool processor_core_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGLoginPacket) */ {
 public:
  inline GGLoginPacket() : GGLoginPacket(nullptr) {}
  ~GGLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR GGLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGLoginPacket(const GGLoginPacket& from);
  GGLoginPacket(GGLoginPacket&& from) noexcept
    : GGLoginPacket() {
    *this = ::std::move(from);
  }

  inline GGLoginPacket& operator=(const GGLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGLoginPacket& operator=(GGLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGLoginPacket* internal_default_instance() {
    return reinterpret_cast<const GGLoginPacket*>(
               &_GGLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GGLoginPacket& a, GGLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGLoginPacket& from) {
    GGLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGLoginPacket";
  }
  protected:
  explicit GGLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPidFieldNumber = 2,
    kEmpireFieldNumber = 3,
    kMapIndexFieldNumber = 4,
    kChannelFieldNumber = 5,
    kLanguageFieldNumber = 6,
    kRaceFieldNumber = 8,
    kIsInDungeonFieldNumber = 7,
    kTempLoginFieldNumber = 9,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 empire = 3;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 map_index = 4;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 channel = 5;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 language = 6;
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // uint32 race = 8;
  void clear_race();
  uint32_t race() const;
  void set_race(uint32_t value);
  private:
  uint32_t _internal_race() const;
  void _internal_set_race(uint32_t value);
  public:

  // bool is_in_dungeon = 7;
  void clear_is_in_dungeon();
  bool is_in_dungeon() const;
  void set_is_in_dungeon(bool value);
  private:
  bool _internal_is_in_dungeon() const;
  void _internal_set_is_in_dungeon(bool value);
  public:

  // bool temp_login = 9;
  void clear_temp_login();
  bool temp_login() const;
  void set_temp_login(bool value);
  private:
  bool _internal_temp_login() const;
  void _internal_set_temp_login(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    uint32_t empire_;
    uint32_t map_index_;
    uint32_t channel_;
    uint32_t language_;
    uint32_t race_;
    bool is_in_dungeon_;
    bool temp_login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGLogoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGLogoutPacket) */ {
 public:
  inline GGLogoutPacket() : GGLogoutPacket(nullptr) {}
  ~GGLogoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GGLogoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGLogoutPacket(const GGLogoutPacket& from);
  GGLogoutPacket(GGLogoutPacket&& from) noexcept
    : GGLogoutPacket() {
    *this = ::std::move(from);
  }

  inline GGLogoutPacket& operator=(const GGLogoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGLogoutPacket& operator=(GGLogoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGLogoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGLogoutPacket* internal_default_instance() {
    return reinterpret_cast<const GGLogoutPacket*>(
               &_GGLogoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GGLogoutPacket& a, GGLogoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGLogoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGLogoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGLogoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGLogoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGLogoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGLogoutPacket& from) {
    GGLogoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGLogoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGLogoutPacket";
  }
  protected:
  explicit GGLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGLogoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGRelayPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGRelayPacket) */ {
 public:
  inline GGRelayPacket() : GGRelayPacket(nullptr) {}
  ~GGRelayPacket() override;
  explicit PROTOBUF_CONSTEXPR GGRelayPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGRelayPacket(const GGRelayPacket& from);
  GGRelayPacket(GGRelayPacket&& from) noexcept
    : GGRelayPacket() {
    *this = ::std::move(from);
  }

  inline GGRelayPacket& operator=(const GGRelayPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGRelayPacket& operator=(GGRelayPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGRelayPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGRelayPacket* internal_default_instance() {
    return reinterpret_cast<const GGRelayPacket*>(
               &_GGRelayPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GGRelayPacket& a, GGRelayPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGRelayPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGRelayPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGRelayPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGRelayPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGRelayPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGRelayPacket& from) {
    GGRelayPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGRelayPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGRelayPacket";
  }
  protected:
  explicit GGRelayPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRelayFieldNumber = 4,
    kPidFieldNumber = 2,
    kRelayHeaderFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes relay = 4;
  void clear_relay();
  const std::string& relay() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relay(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relay();
  PROTOBUF_NODISCARD std::string* release_relay();
  void set_allocated_relay(std::string* relay);
  private:
  const std::string& _internal_relay() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relay(const std::string& value);
  std::string* _internal_mutable_relay();
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 relay_header = 3;
  void clear_relay_header();
  uint32_t relay_header() const;
  void set_relay_header(uint32_t value);
  private:
  uint32_t _internal_relay_header() const;
  void _internal_set_relay_header(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGRelayPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relay_;
    uint32_t pid_;
    uint32_t relay_header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGPlayerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGPlayerPacket) */ {
 public:
  inline GGPlayerPacket() : GGPlayerPacket(nullptr) {}
  ~GGPlayerPacket() override;
  explicit PROTOBUF_CONSTEXPR GGPlayerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGPlayerPacket(const GGPlayerPacket& from);
  GGPlayerPacket(GGPlayerPacket&& from) noexcept
    : GGPlayerPacket() {
    *this = ::std::move(from);
  }

  inline GGPlayerPacket& operator=(const GGPlayerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGPlayerPacket& operator=(GGPlayerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGPlayerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGPlayerPacket* internal_default_instance() {
    return reinterpret_cast<const GGPlayerPacket*>(
               &_GGPlayerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GGPlayerPacket& a, GGPlayerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGPlayerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGPlayerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGPlayerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGPlayerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGPlayerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGPlayerPacket& from) {
    GGPlayerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGPlayerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGPlayerPacket";
  }
  protected:
  explicit GGPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayFieldNumber = 5,
    kLanguageFieldNumber = 1,
    kEmpireFieldNumber = 2,
    kPidFieldNumber = 3,
    kRelayHeaderFieldNumber = 4,
  };
  // bytes relay = 5;
  void clear_relay();
  const std::string& relay() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relay(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relay();
  PROTOBUF_NODISCARD std::string* release_relay();
  void set_allocated_relay(std::string* relay);
  private:
  const std::string& _internal_relay() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relay(const std::string& value);
  std::string* _internal_mutable_relay();
  public:

  // sint32 language = 1;
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // uint32 empire = 2;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 pid = 3;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 relay_header = 4;
  void clear_relay_header();
  uint32_t relay_header() const;
  void set_relay_header(uint32_t value);
  private:
  uint32_t _internal_relay_header() const;
  void _internal_set_relay_header(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGPlayerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relay_;
    int32_t language_;
    uint32_t empire_;
    uint32_t pid_;
    uint32_t relay_header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGDisconnectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGDisconnectPacket) */ {
 public:
  inline GGDisconnectPacket() : GGDisconnectPacket(nullptr) {}
  ~GGDisconnectPacket() override;
  explicit PROTOBUF_CONSTEXPR GGDisconnectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGDisconnectPacket(const GGDisconnectPacket& from);
  GGDisconnectPacket(GGDisconnectPacket&& from) noexcept
    : GGDisconnectPacket() {
    *this = ::std::move(from);
  }

  inline GGDisconnectPacket& operator=(const GGDisconnectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGDisconnectPacket& operator=(GGDisconnectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGDisconnectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGDisconnectPacket* internal_default_instance() {
    return reinterpret_cast<const GGDisconnectPacket*>(
               &_GGDisconnectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GGDisconnectPacket& a, GGDisconnectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGDisconnectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGDisconnectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGDisconnectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGDisconnectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGDisconnectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGDisconnectPacket& from) {
    GGDisconnectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGDisconnectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGDisconnectPacket";
  }
  protected:
  explicit GGDisconnectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:network.GGDisconnectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGLoginPingPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGLoginPingPacket) */ {
 public:
  inline GGLoginPingPacket() : GGLoginPingPacket(nullptr) {}
  ~GGLoginPingPacket() override;
  explicit PROTOBUF_CONSTEXPR GGLoginPingPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGLoginPingPacket(const GGLoginPingPacket& from);
  GGLoginPingPacket(GGLoginPingPacket&& from) noexcept
    : GGLoginPingPacket() {
    *this = ::std::move(from);
  }

  inline GGLoginPingPacket& operator=(const GGLoginPingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGLoginPingPacket& operator=(GGLoginPingPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGLoginPingPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGLoginPingPacket* internal_default_instance() {
    return reinterpret_cast<const GGLoginPingPacket*>(
               &_GGLoginPingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GGLoginPingPacket& a, GGLoginPingPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGLoginPingPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGLoginPingPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGLoginPingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGLoginPingPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGLoginPingPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGLoginPingPacket& from) {
    GGLoginPingPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGLoginPingPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGLoginPingPacket";
  }
  protected:
  explicit GGLoginPingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:network.GGLoginPingPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGGiveItemPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGGiveItemPacket) */ {
 public:
  inline GGGiveItemPacket() : GGGiveItemPacket(nullptr) {}
  ~GGGiveItemPacket() override;
  explicit PROTOBUF_CONSTEXPR GGGiveItemPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGGiveItemPacket(const GGGiveItemPacket& from);
  GGGiveItemPacket(GGGiveItemPacket&& from) noexcept
    : GGGiveItemPacket() {
    *this = ::std::move(from);
  }

  inline GGGiveItemPacket& operator=(const GGGiveItemPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGGiveItemPacket& operator=(GGGiveItemPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGGiveItemPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGGiveItemPacket* internal_default_instance() {
    return reinterpret_cast<const GGGiveItemPacket*>(
               &_GGGiveItemPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GGGiveItemPacket& a, GGGiveItemPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGGiveItemPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGGiveItemPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGGiveItemPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGGiveItemPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGGiveItemPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGGiveItemPacket& from) {
    GGGiveItemPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGGiveItemPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGGiveItemPacket";
  }
  protected:
  explicit GGGiveItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kNoRefundFieldNumber = 2,
  };
  // .network.TItemData item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // bool no_refund = 2;
  void clear_no_refund();
  bool no_refund() const;
  void set_no_refund(bool value);
  private:
  bool _internal_no_refund() const;
  void _internal_set_no_refund(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGGiveItemPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* item_;
    bool no_refund_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGGiveGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGGiveGoldPacket) */ {
 public:
  inline GGGiveGoldPacket() : GGGiveGoldPacket(nullptr) {}
  ~GGGiveGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GGGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGGiveGoldPacket(const GGGiveGoldPacket& from);
  GGGiveGoldPacket(GGGiveGoldPacket&& from) noexcept
    : GGGiveGoldPacket() {
    *this = ::std::move(from);
  }

  inline GGGiveGoldPacket& operator=(const GGGiveGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGGiveGoldPacket& operator=(GGGiveGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGGiveGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGGiveGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GGGiveGoldPacket*>(
               &_GGGiveGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GGGiveGoldPacket& a, GGGiveGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGGiveGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGGiveGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGGiveGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGGiveGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGGiveGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGGiveGoldPacket& from) {
    GGGiveGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGGiveGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGGiveGoldPacket";
  }
  protected:
  explicit GGGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // int64 gold = 2;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGGiveGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t gold_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGShoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGShoutPacket) */ {
 public:
  inline GGShoutPacket() : GGShoutPacket(nullptr) {}
  ~GGShoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GGShoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGShoutPacket(const GGShoutPacket& from);
  GGShoutPacket(GGShoutPacket&& from) noexcept
    : GGShoutPacket() {
    *this = ::std::move(from);
  }

  inline GGShoutPacket& operator=(const GGShoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGShoutPacket& operator=(GGShoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGShoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGShoutPacket* internal_default_instance() {
    return reinterpret_cast<const GGShoutPacket*>(
               &_GGShoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GGShoutPacket& a, GGShoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGShoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGShoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGShoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGShoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGShoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGShoutPacket& from) {
    GGShoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGShoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGShoutPacket";
  }
  protected:
  explicit GGShoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kEmpireFieldNumber = 1,
  };
  // bytes text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 empire = 1;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGShoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    uint32_t empire_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGNoticePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGNoticePacket) */ {
 public:
  inline GGNoticePacket() : GGNoticePacket(nullptr) {}
  ~GGNoticePacket() override;
  explicit PROTOBUF_CONSTEXPR GGNoticePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGNoticePacket(const GGNoticePacket& from);
  GGNoticePacket(GGNoticePacket&& from) noexcept
    : GGNoticePacket() {
    *this = ::std::move(from);
  }

  inline GGNoticePacket& operator=(const GGNoticePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGNoticePacket& operator=(GGNoticePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGNoticePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGNoticePacket* internal_default_instance() {
    return reinterpret_cast<const GGNoticePacket*>(
               &_GGNoticePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GGNoticePacket& a, GGNoticePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGNoticePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGNoticePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGNoticePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGNoticePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGNoticePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGNoticePacket& from) {
    GGNoticePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGNoticePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGNoticePacket";
  }
  protected:
  explicit GGNoticePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kBigFontFieldNumber = 2,
    kLangIdFieldNumber = 3,
    kChannelFieldNumber = 4,
    kEmpireFieldNumber = 5,
  };
  // bytes message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool big_font = 2;
  void clear_big_font();
  bool big_font() const;
  void set_big_font(bool value);
  private:
  bool _internal_big_font() const;
  void _internal_set_big_font(bool value);
  public:

  // int32 lang_id = 3;
  void clear_lang_id();
  int32_t lang_id() const;
  void set_lang_id(int32_t value);
  private:
  int32_t _internal_lang_id() const;
  void _internal_set_lang_id(int32_t value);
  public:

  // uint32 channel = 4;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 empire = 5;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGNoticePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool big_font_;
    int32_t lang_id_;
    uint32_t channel_;
    uint32_t empire_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGSuccessNoticePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGSuccessNoticePacket) */ {
 public:
  inline GGSuccessNoticePacket() : GGSuccessNoticePacket(nullptr) {}
  ~GGSuccessNoticePacket() override;
  explicit PROTOBUF_CONSTEXPR GGSuccessNoticePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGSuccessNoticePacket(const GGSuccessNoticePacket& from);
  GGSuccessNoticePacket(GGSuccessNoticePacket&& from) noexcept
    : GGSuccessNoticePacket() {
    *this = ::std::move(from);
  }

  inline GGSuccessNoticePacket& operator=(const GGSuccessNoticePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGSuccessNoticePacket& operator=(GGSuccessNoticePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGSuccessNoticePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGSuccessNoticePacket* internal_default_instance() {
    return reinterpret_cast<const GGSuccessNoticePacket*>(
               &_GGSuccessNoticePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GGSuccessNoticePacket& a, GGSuccessNoticePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGSuccessNoticePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGSuccessNoticePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGSuccessNoticePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGSuccessNoticePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGSuccessNoticePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGSuccessNoticePacket& from) {
    GGSuccessNoticePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGSuccessNoticePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGSuccessNoticePacket";
  }
  protected:
  explicit GGSuccessNoticePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLangIdFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 lang_id = 1;
  void clear_lang_id();
  int32_t lang_id() const;
  void set_lang_id(int32_t value);
  private:
  int32_t _internal_lang_id() const;
  void _internal_set_lang_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGSuccessNoticePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t lang_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGMessengerRequestPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGMessengerRequestPacket) */ {
 public:
  inline GGMessengerRequestPacket() : GGMessengerRequestPacket(nullptr) {}
  ~GGMessengerRequestPacket() override;
  explicit PROTOBUF_CONSTEXPR GGMessengerRequestPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGMessengerRequestPacket(const GGMessengerRequestPacket& from);
  GGMessengerRequestPacket(GGMessengerRequestPacket&& from) noexcept
    : GGMessengerRequestPacket() {
    *this = ::std::move(from);
  }

  inline GGMessengerRequestPacket& operator=(const GGMessengerRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGMessengerRequestPacket& operator=(GGMessengerRequestPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGMessengerRequestPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGMessengerRequestPacket* internal_default_instance() {
    return reinterpret_cast<const GGMessengerRequestPacket*>(
               &_GGMessengerRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GGMessengerRequestPacket& a, GGMessengerRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGMessengerRequestPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGMessengerRequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGMessengerRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGMessengerRequestPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGMessengerRequestPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGMessengerRequestPacket& from) {
    GGMessengerRequestPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGMessengerRequestPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGMessengerRequestPacket";
  }
  protected:
  explicit GGMessengerRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestorFieldNumber = 1,
    kTargetPidFieldNumber = 2,
  };
  // bytes requestor = 1;
  void clear_requestor();
  const std::string& requestor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestor();
  PROTOBUF_NODISCARD std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // uint32 target_pid = 2;
  void clear_target_pid();
  uint32_t target_pid() const;
  void set_target_pid(uint32_t value);
  private:
  uint32_t _internal_target_pid() const;
  void _internal_set_target_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGMessengerRequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
    uint32_t target_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGMessengerRequestFailPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGMessengerRequestFailPacket) */ {
 public:
  inline GGMessengerRequestFailPacket() : GGMessengerRequestFailPacket(nullptr) {}
  ~GGMessengerRequestFailPacket() override;
  explicit PROTOBUF_CONSTEXPR GGMessengerRequestFailPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGMessengerRequestFailPacket(const GGMessengerRequestFailPacket& from);
  GGMessengerRequestFailPacket(GGMessengerRequestFailPacket&& from) noexcept
    : GGMessengerRequestFailPacket() {
    *this = ::std::move(from);
  }

  inline GGMessengerRequestFailPacket& operator=(const GGMessengerRequestFailPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGMessengerRequestFailPacket& operator=(GGMessengerRequestFailPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGMessengerRequestFailPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGMessengerRequestFailPacket* internal_default_instance() {
    return reinterpret_cast<const GGMessengerRequestFailPacket*>(
               &_GGMessengerRequestFailPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GGMessengerRequestFailPacket& a, GGMessengerRequestFailPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGMessengerRequestFailPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGMessengerRequestFailPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGMessengerRequestFailPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGMessengerRequestFailPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGMessengerRequestFailPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGMessengerRequestFailPacket& from) {
    GGMessengerRequestFailPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGMessengerRequestFailPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGMessengerRequestFailPacket";
  }
  protected:
  explicit GGMessengerRequestFailPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestorFieldNumber = 1,
    kTargetPidFieldNumber = 2,
  };
  // bytes requestor = 1;
  void clear_requestor();
  const std::string& requestor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestor();
  PROTOBUF_NODISCARD std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // uint32 target_pid = 2;
  void clear_target_pid();
  uint32_t target_pid() const;
  void set_target_pid(uint32_t value);
  private:
  uint32_t _internal_target_pid() const;
  void _internal_set_target_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGMessengerRequestFailPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
    uint32_t target_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGMessengerAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGMessengerAddPacket) */ {
 public:
  inline GGMessengerAddPacket() : GGMessengerAddPacket(nullptr) {}
  ~GGMessengerAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GGMessengerAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGMessengerAddPacket(const GGMessengerAddPacket& from);
  GGMessengerAddPacket(GGMessengerAddPacket&& from) noexcept
    : GGMessengerAddPacket() {
    *this = ::std::move(from);
  }

  inline GGMessengerAddPacket& operator=(const GGMessengerAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGMessengerAddPacket& operator=(GGMessengerAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGMessengerAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGMessengerAddPacket* internal_default_instance() {
    return reinterpret_cast<const GGMessengerAddPacket*>(
               &_GGMessengerAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GGMessengerAddPacket& a, GGMessengerAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGMessengerAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGMessengerAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGMessengerAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGMessengerAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGMessengerAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGMessengerAddPacket& from) {
    GGMessengerAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGMessengerAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGMessengerAddPacket";
  }
  protected:
  explicit GGMessengerAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kCompanionFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes companion = 2;
  void clear_companion();
  const std::string& companion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companion();
  PROTOBUF_NODISCARD std::string* release_companion();
  void set_allocated_companion(std::string* companion);
  private:
  const std::string& _internal_companion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companion(const std::string& value);
  std::string* _internal_mutable_companion();
  public:

  // @@protoc_insertion_point(class_scope:network.GGMessengerAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGMessengerRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGMessengerRemovePacket) */ {
 public:
  inline GGMessengerRemovePacket() : GGMessengerRemovePacket(nullptr) {}
  ~GGMessengerRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GGMessengerRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGMessengerRemovePacket(const GGMessengerRemovePacket& from);
  GGMessengerRemovePacket(GGMessengerRemovePacket&& from) noexcept
    : GGMessengerRemovePacket() {
    *this = ::std::move(from);
  }

  inline GGMessengerRemovePacket& operator=(const GGMessengerRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGMessengerRemovePacket& operator=(GGMessengerRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGMessengerRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGMessengerRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GGMessengerRemovePacket*>(
               &_GGMessengerRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GGMessengerRemovePacket& a, GGMessengerRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGMessengerRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGMessengerRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGMessengerRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGMessengerRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGMessengerRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGMessengerRemovePacket& from) {
    GGMessengerRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGMessengerRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGMessengerRemovePacket";
  }
  protected:
  explicit GGMessengerRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kCompanionFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes companion = 2;
  void clear_companion();
  const std::string& companion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companion();
  PROTOBUF_NODISCARD std::string* release_companion();
  void set_allocated_companion(std::string* companion);
  private:
  const std::string& _internal_companion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companion(const std::string& value);
  std::string* _internal_mutable_companion();
  public:

  // @@protoc_insertion_point(class_scope:network.GGMessengerRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGMessengerBlockAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGMessengerBlockAddPacket) */ {
 public:
  inline GGMessengerBlockAddPacket() : GGMessengerBlockAddPacket(nullptr) {}
  ~GGMessengerBlockAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GGMessengerBlockAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGMessengerBlockAddPacket(const GGMessengerBlockAddPacket& from);
  GGMessengerBlockAddPacket(GGMessengerBlockAddPacket&& from) noexcept
    : GGMessengerBlockAddPacket() {
    *this = ::std::move(from);
  }

  inline GGMessengerBlockAddPacket& operator=(const GGMessengerBlockAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGMessengerBlockAddPacket& operator=(GGMessengerBlockAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGMessengerBlockAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGMessengerBlockAddPacket* internal_default_instance() {
    return reinterpret_cast<const GGMessengerBlockAddPacket*>(
               &_GGMessengerBlockAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GGMessengerBlockAddPacket& a, GGMessengerBlockAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGMessengerBlockAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGMessengerBlockAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGMessengerBlockAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGMessengerBlockAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGMessengerBlockAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGMessengerBlockAddPacket& from) {
    GGMessengerBlockAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGMessengerBlockAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGMessengerBlockAddPacket";
  }
  protected:
  explicit GGMessengerBlockAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kCompanionFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes companion = 2;
  void clear_companion();
  const std::string& companion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companion();
  PROTOBUF_NODISCARD std::string* release_companion();
  void set_allocated_companion(std::string* companion);
  private:
  const std::string& _internal_companion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companion(const std::string& value);
  std::string* _internal_mutable_companion();
  public:

  // @@protoc_insertion_point(class_scope:network.GGMessengerBlockAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGMessengerBlockRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGMessengerBlockRemovePacket) */ {
 public:
  inline GGMessengerBlockRemovePacket() : GGMessengerBlockRemovePacket(nullptr) {}
  ~GGMessengerBlockRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GGMessengerBlockRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGMessengerBlockRemovePacket(const GGMessengerBlockRemovePacket& from);
  GGMessengerBlockRemovePacket(GGMessengerBlockRemovePacket&& from) noexcept
    : GGMessengerBlockRemovePacket() {
    *this = ::std::move(from);
  }

  inline GGMessengerBlockRemovePacket& operator=(const GGMessengerBlockRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGMessengerBlockRemovePacket& operator=(GGMessengerBlockRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGMessengerBlockRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGMessengerBlockRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GGMessengerBlockRemovePacket*>(
               &_GGMessengerBlockRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GGMessengerBlockRemovePacket& a, GGMessengerBlockRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGMessengerBlockRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGMessengerBlockRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGMessengerBlockRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGMessengerBlockRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGMessengerBlockRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGMessengerBlockRemovePacket& from) {
    GGMessengerBlockRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGMessengerBlockRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGMessengerBlockRemovePacket";
  }
  protected:
  explicit GGMessengerBlockRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kCompanionFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes companion = 2;
  void clear_companion();
  const std::string& companion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companion();
  PROTOBUF_NODISCARD std::string* release_companion();
  void set_allocated_companion(std::string* companion);
  private:
  const std::string& _internal_companion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companion(const std::string& value);
  std::string* _internal_mutable_companion();
  public:

  // @@protoc_insertion_point(class_scope:network.GGMessengerBlockRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGFindPositionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGFindPositionPacket) */ {
 public:
  inline GGFindPositionPacket() : GGFindPositionPacket(nullptr) {}
  ~GGFindPositionPacket() override;
  explicit PROTOBUF_CONSTEXPR GGFindPositionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGFindPositionPacket(const GGFindPositionPacket& from);
  GGFindPositionPacket(GGFindPositionPacket&& from) noexcept
    : GGFindPositionPacket() {
    *this = ::std::move(from);
  }

  inline GGFindPositionPacket& operator=(const GGFindPositionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGFindPositionPacket& operator=(GGFindPositionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGFindPositionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGFindPositionPacket* internal_default_instance() {
    return reinterpret_cast<const GGFindPositionPacket*>(
               &_GGFindPositionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GGFindPositionPacket& a, GGFindPositionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGFindPositionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGFindPositionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGFindPositionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGFindPositionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGFindPositionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGFindPositionPacket& from) {
    GGFindPositionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGFindPositionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGFindPositionPacket";
  }
  protected:
  explicit GGFindPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromPidFieldNumber = 1,
    kTargetPidFieldNumber = 2,
    kIsGmFieldNumber = 3,
  };
  // uint32 from_pid = 1;
  void clear_from_pid();
  uint32_t from_pid() const;
  void set_from_pid(uint32_t value);
  private:
  uint32_t _internal_from_pid() const;
  void _internal_set_from_pid(uint32_t value);
  public:

  // uint32 target_pid = 2;
  void clear_target_pid();
  uint32_t target_pid() const;
  void set_target_pid(uint32_t value);
  private:
  uint32_t _internal_target_pid() const;
  void _internal_set_target_pid(uint32_t value);
  public:

  // bool is_gm = 3;
  void clear_is_gm();
  bool is_gm() const;
  void set_is_gm(bool value);
  private:
  bool _internal_is_gm() const;
  void _internal_set_is_gm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGFindPositionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t from_pid_;
    uint32_t target_pid_;
    bool is_gm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGWarpCharacterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGWarpCharacterPacket) */ {
 public:
  inline GGWarpCharacterPacket() : GGWarpCharacterPacket(nullptr) {}
  ~GGWarpCharacterPacket() override;
  explicit PROTOBUF_CONSTEXPR GGWarpCharacterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGWarpCharacterPacket(const GGWarpCharacterPacket& from);
  GGWarpCharacterPacket(GGWarpCharacterPacket&& from) noexcept
    : GGWarpCharacterPacket() {
    *this = ::std::move(from);
  }

  inline GGWarpCharacterPacket& operator=(const GGWarpCharacterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGWarpCharacterPacket& operator=(GGWarpCharacterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGWarpCharacterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGWarpCharacterPacket* internal_default_instance() {
    return reinterpret_cast<const GGWarpCharacterPacket*>(
               &_GGWarpCharacterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GGWarpCharacterPacket& a, GGWarpCharacterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGWarpCharacterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGWarpCharacterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGWarpCharacterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGWarpCharacterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGWarpCharacterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGWarpCharacterPacket& from) {
    GGWarpCharacterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGWarpCharacterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGWarpCharacterPacket";
  }
  protected:
  explicit GGWarpCharacterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kMapIndexFieldNumber = 4,
    kTargetPidFieldNumber = 5,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 map_index = 4;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 target_pid = 5;
  void clear_target_pid();
  uint32_t target_pid() const;
  void set_target_pid(uint32_t value);
  private:
  uint32_t _internal_target_pid() const;
  void _internal_set_target_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGWarpCharacterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    int32_t x_;
    int32_t y_;
    uint32_t map_index_;
    uint32_t target_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGXmasWarpSantaPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGXmasWarpSantaPacket) */ {
 public:
  inline GGXmasWarpSantaPacket() : GGXmasWarpSantaPacket(nullptr) {}
  ~GGXmasWarpSantaPacket() override;
  explicit PROTOBUF_CONSTEXPR GGXmasWarpSantaPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGXmasWarpSantaPacket(const GGXmasWarpSantaPacket& from);
  GGXmasWarpSantaPacket(GGXmasWarpSantaPacket&& from) noexcept
    : GGXmasWarpSantaPacket() {
    *this = ::std::move(from);
  }

  inline GGXmasWarpSantaPacket& operator=(const GGXmasWarpSantaPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGXmasWarpSantaPacket& operator=(GGXmasWarpSantaPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGXmasWarpSantaPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGXmasWarpSantaPacket* internal_default_instance() {
    return reinterpret_cast<const GGXmasWarpSantaPacket*>(
               &_GGXmasWarpSantaPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GGXmasWarpSantaPacket& a, GGXmasWarpSantaPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGXmasWarpSantaPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGXmasWarpSantaPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGXmasWarpSantaPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGXmasWarpSantaPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGXmasWarpSantaPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGXmasWarpSantaPacket& from) {
    GGXmasWarpSantaPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGXmasWarpSantaPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGXmasWarpSantaPacket";
  }
  protected:
  explicit GGXmasWarpSantaPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kMapIndexFieldNumber = 2,
  };
  // uint32 channel = 1;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGXmasWarpSantaPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t channel_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGXmasWarpSantaReplyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGXmasWarpSantaReplyPacket) */ {
 public:
  inline GGXmasWarpSantaReplyPacket() : GGXmasWarpSantaReplyPacket(nullptr) {}
  ~GGXmasWarpSantaReplyPacket() override;
  explicit PROTOBUF_CONSTEXPR GGXmasWarpSantaReplyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGXmasWarpSantaReplyPacket(const GGXmasWarpSantaReplyPacket& from);
  GGXmasWarpSantaReplyPacket(GGXmasWarpSantaReplyPacket&& from) noexcept
    : GGXmasWarpSantaReplyPacket() {
    *this = ::std::move(from);
  }

  inline GGXmasWarpSantaReplyPacket& operator=(const GGXmasWarpSantaReplyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGXmasWarpSantaReplyPacket& operator=(GGXmasWarpSantaReplyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGXmasWarpSantaReplyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGXmasWarpSantaReplyPacket* internal_default_instance() {
    return reinterpret_cast<const GGXmasWarpSantaReplyPacket*>(
               &_GGXmasWarpSantaReplyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GGXmasWarpSantaReplyPacket& a, GGXmasWarpSantaReplyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGXmasWarpSantaReplyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGXmasWarpSantaReplyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGXmasWarpSantaReplyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGXmasWarpSantaReplyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGXmasWarpSantaReplyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGXmasWarpSantaReplyPacket& from) {
    GGXmasWarpSantaReplyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGXmasWarpSantaReplyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGXmasWarpSantaReplyPacket";
  }
  protected:
  explicit GGXmasWarpSantaReplyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // uint32 channel = 1;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGXmasWarpSantaReplyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGBlockChatPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGBlockChatPacket) */ {
 public:
  inline GGBlockChatPacket() : GGBlockChatPacket(nullptr) {}
  ~GGBlockChatPacket() override;
  explicit PROTOBUF_CONSTEXPR GGBlockChatPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGBlockChatPacket(const GGBlockChatPacket& from);
  GGBlockChatPacket(GGBlockChatPacket&& from) noexcept
    : GGBlockChatPacket() {
    *this = ::std::move(from);
  }

  inline GGBlockChatPacket& operator=(const GGBlockChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGBlockChatPacket& operator=(GGBlockChatPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGBlockChatPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGBlockChatPacket* internal_default_instance() {
    return reinterpret_cast<const GGBlockChatPacket*>(
               &_GGBlockChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GGBlockChatPacket& a, GGBlockChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGBlockChatPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGBlockChatPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGBlockChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGBlockChatPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGBlockChatPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGBlockChatPacket& from) {
    GGBlockChatPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGBlockChatPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGBlockChatPacket";
  }
  protected:
  explicit GGBlockChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBlockDurationFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 block_duration = 2;
  void clear_block_duration();
  int32_t block_duration() const;
  void set_block_duration(int32_t value);
  private:
  int32_t _internal_block_duration() const;
  void _internal_set_block_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGBlockChatPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t block_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGCastleSiegePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGCastleSiegePacket) */ {
 public:
  inline GGCastleSiegePacket() : GGCastleSiegePacket(nullptr) {}
  ~GGCastleSiegePacket() override;
  explicit PROTOBUF_CONSTEXPR GGCastleSiegePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGCastleSiegePacket(const GGCastleSiegePacket& from);
  GGCastleSiegePacket(GGCastleSiegePacket&& from) noexcept
    : GGCastleSiegePacket() {
    *this = ::std::move(from);
  }

  inline GGCastleSiegePacket& operator=(const GGCastleSiegePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGCastleSiegePacket& operator=(GGCastleSiegePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGCastleSiegePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGCastleSiegePacket* internal_default_instance() {
    return reinterpret_cast<const GGCastleSiegePacket*>(
               &_GGCastleSiegePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GGCastleSiegePacket& a, GGCastleSiegePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGCastleSiegePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGCastleSiegePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGCastleSiegePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGCastleSiegePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGCastleSiegePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGCastleSiegePacket& from) {
    GGCastleSiegePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGCastleSiegePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGCastleSiegePacket";
  }
  protected:
  explicit GGCastleSiegePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmpireFieldNumber = 1,
    kTowerCountFieldNumber = 2,
  };
  // uint32 empire = 1;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 tower_count = 2;
  void clear_tower_count();
  uint32_t tower_count() const;
  void set_tower_count(uint32_t value);
  private:
  uint32_t _internal_tower_count() const;
  void _internal_set_tower_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGCastleSiegePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t empire_;
    uint32_t tower_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGPCBangUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGPCBangUpdatePacket) */ {
 public:
  inline GGPCBangUpdatePacket() : GGPCBangUpdatePacket(nullptr) {}
  ~GGPCBangUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GGPCBangUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGPCBangUpdatePacket(const GGPCBangUpdatePacket& from);
  GGPCBangUpdatePacket(GGPCBangUpdatePacket&& from) noexcept
    : GGPCBangUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GGPCBangUpdatePacket& operator=(const GGPCBangUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGPCBangUpdatePacket& operator=(GGPCBangUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGPCBangUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGPCBangUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GGPCBangUpdatePacket*>(
               &_GGPCBangUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GGPCBangUpdatePacket& a, GGPCBangUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGPCBangUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGPCBangUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGPCBangUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGPCBangUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGPCBangUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGPCBangUpdatePacket& from) {
    GGPCBangUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGPCBangUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGPCBangUpdatePacket";
  }
  protected:
  explicit GGPCBangUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcBangIdFieldNumber = 1,
  };
  // uint32 pc_bang_id = 1;
  void clear_pc_bang_id();
  uint32_t pc_bang_id() const;
  void set_pc_bang_id(uint32_t value);
  private:
  uint32_t _internal_pc_bang_id() const;
  void _internal_set_pc_bang_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGPCBangUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pc_bang_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGWhisperManagerAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGWhisperManagerAddPacket) */ {
 public:
  inline GGWhisperManagerAddPacket() : GGWhisperManagerAddPacket(nullptr) {}
  ~GGWhisperManagerAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GGWhisperManagerAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGWhisperManagerAddPacket(const GGWhisperManagerAddPacket& from);
  GGWhisperManagerAddPacket(GGWhisperManagerAddPacket&& from) noexcept
    : GGWhisperManagerAddPacket() {
    *this = ::std::move(from);
  }

  inline GGWhisperManagerAddPacket& operator=(const GGWhisperManagerAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGWhisperManagerAddPacket& operator=(GGWhisperManagerAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGWhisperManagerAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGWhisperManagerAddPacket* internal_default_instance() {
    return reinterpret_cast<const GGWhisperManagerAddPacket*>(
               &_GGWhisperManagerAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GGWhisperManagerAddPacket& a, GGWhisperManagerAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGWhisperManagerAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGWhisperManagerAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGWhisperManagerAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGWhisperManagerAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGWhisperManagerAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGWhisperManagerAddPacket& from) {
    GGWhisperManagerAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGWhisperManagerAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGWhisperManagerAddPacket";
  }
  protected:
  explicit GGWhisperManagerAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderNameFieldNumber = 1,
    kReceiverNameFieldNumber = 3,
    kMessageFieldNumber = 5,
    kSenderPidFieldNumber = 2,
    kReceiverPidFieldNumber = 4,
  };
  // bytes sender_name = 1;
  void clear_sender_name();
  const std::string& sender_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_name();
  PROTOBUF_NODISCARD std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // bytes receiver_name = 3;
  void clear_receiver_name();
  const std::string& receiver_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_name();
  PROTOBUF_NODISCARD std::string* release_receiver_name();
  void set_allocated_receiver_name(std::string* receiver_name);
  private:
  const std::string& _internal_receiver_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_name(const std::string& value);
  std::string* _internal_mutable_receiver_name();
  public:

  // bytes message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 sender_pid = 2;
  void clear_sender_pid();
  uint32_t sender_pid() const;
  void set_sender_pid(uint32_t value);
  private:
  uint32_t _internal_sender_pid() const;
  void _internal_set_sender_pid(uint32_t value);
  public:

  // uint32 receiver_pid = 4;
  void clear_receiver_pid();
  uint32_t receiver_pid() const;
  void set_receiver_pid(uint32_t value);
  private:
  uint32_t _internal_receiver_pid() const;
  void _internal_set_receiver_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGWhisperManagerAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t sender_pid_;
    uint32_t receiver_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGTeamlerStatusPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGTeamlerStatusPacket) */ {
 public:
  inline GGTeamlerStatusPacket() : GGTeamlerStatusPacket(nullptr) {}
  ~GGTeamlerStatusPacket() override;
  explicit PROTOBUF_CONSTEXPR GGTeamlerStatusPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGTeamlerStatusPacket(const GGTeamlerStatusPacket& from);
  GGTeamlerStatusPacket(GGTeamlerStatusPacket&& from) noexcept
    : GGTeamlerStatusPacket() {
    *this = ::std::move(from);
  }

  inline GGTeamlerStatusPacket& operator=(const GGTeamlerStatusPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGTeamlerStatusPacket& operator=(GGTeamlerStatusPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGTeamlerStatusPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGTeamlerStatusPacket* internal_default_instance() {
    return reinterpret_cast<const GGTeamlerStatusPacket*>(
               &_GGTeamlerStatusPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GGTeamlerStatusPacket& a, GGTeamlerStatusPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGTeamlerStatusPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGTeamlerStatusPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGTeamlerStatusPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGTeamlerStatusPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGTeamlerStatusPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGTeamlerStatusPacket& from) {
    GGTeamlerStatusPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGTeamlerStatusPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGTeamlerStatusPacket";
  }
  protected:
  explicit GGTeamlerStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIsOnlineFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_online = 2;
  void clear_is_online();
  bool is_online() const;
  void set_is_online(bool value);
  private:
  bool _internal_is_online() const;
  void _internal_set_is_online(bool value);
  public:

  // int32 language = 3;
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGTeamlerStatusPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_online_;
    int32_t language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGRequestDungeonWarpPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGRequestDungeonWarpPacket) */ {
 public:
  inline GGRequestDungeonWarpPacket() : GGRequestDungeonWarpPacket(nullptr) {}
  ~GGRequestDungeonWarpPacket() override;
  explicit PROTOBUF_CONSTEXPR GGRequestDungeonWarpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGRequestDungeonWarpPacket(const GGRequestDungeonWarpPacket& from);
  GGRequestDungeonWarpPacket(GGRequestDungeonWarpPacket&& from) noexcept
    : GGRequestDungeonWarpPacket() {
    *this = ::std::move(from);
  }

  inline GGRequestDungeonWarpPacket& operator=(const GGRequestDungeonWarpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGRequestDungeonWarpPacket& operator=(GGRequestDungeonWarpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGRequestDungeonWarpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGRequestDungeonWarpPacket* internal_default_instance() {
    return reinterpret_cast<const GGRequestDungeonWarpPacket*>(
               &_GGRequestDungeonWarpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GGRequestDungeonWarpPacket& a, GGRequestDungeonWarpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGRequestDungeonWarpPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGRequestDungeonWarpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGRequestDungeonWarpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGRequestDungeonWarpPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGRequestDungeonWarpPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGRequestDungeonWarpPacket& from) {
    GGRequestDungeonWarpPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGRequestDungeonWarpPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGRequestDungeonWarpPacket";
  }
  protected:
  explicit GGRequestDungeonWarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kMapIndexFieldNumber = 3,
    kDestXFieldNumber = 4,
    kDestYFieldNumber = 5,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 dest_x = 4;
  void clear_dest_x();
  uint32_t dest_x() const;
  void set_dest_x(uint32_t value);
  private:
  uint32_t _internal_dest_x() const;
  void _internal_set_dest_x(uint32_t value);
  public:

  // uint32 dest_y = 5;
  void clear_dest_y();
  uint32_t dest_y() const;
  void set_dest_y(uint32_t value);
  private:
  uint32_t _internal_dest_y() const;
  void _internal_set_dest_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGRequestDungeonWarpPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t player_id_;
    uint32_t map_index_;
    uint32_t dest_x_;
    uint32_t dest_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAnswerDungeonWarpPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAnswerDungeonWarpPacket) */ {
 public:
  inline GGAnswerDungeonWarpPacket() : GGAnswerDungeonWarpPacket(nullptr) {}
  ~GGAnswerDungeonWarpPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAnswerDungeonWarpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAnswerDungeonWarpPacket(const GGAnswerDungeonWarpPacket& from);
  GGAnswerDungeonWarpPacket(GGAnswerDungeonWarpPacket&& from) noexcept
    : GGAnswerDungeonWarpPacket() {
    *this = ::std::move(from);
  }

  inline GGAnswerDungeonWarpPacket& operator=(const GGAnswerDungeonWarpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAnswerDungeonWarpPacket& operator=(GGAnswerDungeonWarpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAnswerDungeonWarpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAnswerDungeonWarpPacket* internal_default_instance() {
    return reinterpret_cast<const GGAnswerDungeonWarpPacket*>(
               &_GGAnswerDungeonWarpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GGAnswerDungeonWarpPacket& a, GGAnswerDungeonWarpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAnswerDungeonWarpPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAnswerDungeonWarpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAnswerDungeonWarpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAnswerDungeonWarpPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAnswerDungeonWarpPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAnswerDungeonWarpPacket& from) {
    GGAnswerDungeonWarpPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAnswerDungeonWarpPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAnswerDungeonWarpPacket";
  }
  protected:
  explicit GGAnswerDungeonWarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kMapIndexFieldNumber = 3,
    kDestXFieldNumber = 4,
    kDestYFieldNumber = 5,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 dest_x = 4;
  void clear_dest_x();
  uint32_t dest_x() const;
  void set_dest_x(uint32_t value);
  private:
  uint32_t _internal_dest_x() const;
  void _internal_set_dest_x(uint32_t value);
  public:

  // uint32 dest_y = 5;
  void clear_dest_y();
  uint32_t dest_y() const;
  void set_dest_y(uint32_t value);
  private:
  uint32_t _internal_dest_y() const;
  void _internal_set_dest_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAnswerDungeonWarpPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t player_id_;
    uint32_t map_index_;
    uint32_t dest_x_;
    uint32_t dest_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGDungeonSetFlagPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGDungeonSetFlagPacket) */ {
 public:
  inline GGDungeonSetFlagPacket() : GGDungeonSetFlagPacket(nullptr) {}
  ~GGDungeonSetFlagPacket() override;
  explicit PROTOBUF_CONSTEXPR GGDungeonSetFlagPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGDungeonSetFlagPacket(const GGDungeonSetFlagPacket& from);
  GGDungeonSetFlagPacket(GGDungeonSetFlagPacket&& from) noexcept
    : GGDungeonSetFlagPacket() {
    *this = ::std::move(from);
  }

  inline GGDungeonSetFlagPacket& operator=(const GGDungeonSetFlagPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGDungeonSetFlagPacket& operator=(GGDungeonSetFlagPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGDungeonSetFlagPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGDungeonSetFlagPacket* internal_default_instance() {
    return reinterpret_cast<const GGDungeonSetFlagPacket*>(
               &_GGDungeonSetFlagPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GGDungeonSetFlagPacket& a, GGDungeonSetFlagPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGDungeonSetFlagPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGDungeonSetFlagPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGDungeonSetFlagPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGDungeonSetFlagPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGDungeonSetFlagPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGDungeonSetFlagPacket& from) {
    GGDungeonSetFlagPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGDungeonSetFlagPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGDungeonSetFlagPacket";
  }
  protected:
  explicit GGDungeonSetFlagPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kFlagValueFieldNumber = 3,
  };
  // bytes flag_name = 2;
  void clear_flag_name();
  const std::string& flag_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag_name();
  PROTOBUF_NODISCARD std::string* release_flag_name();
  void set_allocated_flag_name(std::string* flag_name);
  private:
  const std::string& _internal_flag_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag_name(const std::string& value);
  std::string* _internal_mutable_flag_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // int32 flag_value = 3;
  void clear_flag_value();
  int32_t flag_value() const;
  void set_flag_value(int32_t value);
  private:
  int32_t _internal_flag_value() const;
  void _internal_set_flag_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGDungeonSetFlagPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_name_;
    uint32_t pid_;
    int32_t flag_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGExecReloadCommandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGExecReloadCommandPacket) */ {
 public:
  inline GGExecReloadCommandPacket() : GGExecReloadCommandPacket(nullptr) {}
  ~GGExecReloadCommandPacket() override;
  explicit PROTOBUF_CONSTEXPR GGExecReloadCommandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGExecReloadCommandPacket(const GGExecReloadCommandPacket& from);
  GGExecReloadCommandPacket(GGExecReloadCommandPacket&& from) noexcept
    : GGExecReloadCommandPacket() {
    *this = ::std::move(from);
  }

  inline GGExecReloadCommandPacket& operator=(const GGExecReloadCommandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGExecReloadCommandPacket& operator=(GGExecReloadCommandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGExecReloadCommandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGExecReloadCommandPacket* internal_default_instance() {
    return reinterpret_cast<const GGExecReloadCommandPacket*>(
               &_GGExecReloadCommandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GGExecReloadCommandPacket& a, GGExecReloadCommandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGExecReloadCommandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGExecReloadCommandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGExecReloadCommandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGExecReloadCommandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGExecReloadCommandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGExecReloadCommandPacket& from) {
    GGExecReloadCommandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGExecReloadCommandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGExecReloadCommandPacket";
  }
  protected:
  explicit GGExecReloadCommandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentFieldNumber = 1,
  };
  // bytes argument = 1;
  void clear_argument();
  const std::string& argument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_argument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_argument();
  PROTOBUF_NODISCARD std::string* release_argument();
  void set_allocated_argument(std::string* argument);
  private:
  const std::string& _internal_argument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_argument(const std::string& value);
  std::string* _internal_mutable_argument();
  public:

  // @@protoc_insertion_point(class_scope:network.GGExecReloadCommandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr argument_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGRecvShutdownPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGRecvShutdownPacket) */ {
 public:
  inline GGRecvShutdownPacket() : GGRecvShutdownPacket(nullptr) {}
  ~GGRecvShutdownPacket() override;
  explicit PROTOBUF_CONSTEXPR GGRecvShutdownPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGRecvShutdownPacket(const GGRecvShutdownPacket& from);
  GGRecvShutdownPacket(GGRecvShutdownPacket&& from) noexcept
    : GGRecvShutdownPacket() {
    *this = ::std::move(from);
  }

  inline GGRecvShutdownPacket& operator=(const GGRecvShutdownPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGRecvShutdownPacket& operator=(GGRecvShutdownPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGRecvShutdownPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGRecvShutdownPacket* internal_default_instance() {
    return reinterpret_cast<const GGRecvShutdownPacket*>(
               &_GGRecvShutdownPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GGRecvShutdownPacket& a, GGRecvShutdownPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGRecvShutdownPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGRecvShutdownPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGRecvShutdownPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGRecvShutdownPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGRecvShutdownPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGRecvShutdownPacket& from) {
    GGRecvShutdownPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGRecvShutdownPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGRecvShutdownPacket";
  }
  protected:
  explicit GGRecvShutdownPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartSecFieldNumber = 1,
    kMaintenanceFieldNumber = 2,
    kMaintenanceDurationFieldNumber = 3,
  };
  // int32 start_sec = 1;
  void clear_start_sec();
  int32_t start_sec() const;
  void set_start_sec(int32_t value);
  private:
  int32_t _internal_start_sec() const;
  void _internal_set_start_sec(int32_t value);
  public:

  // bool maintenance = 2;
  void clear_maintenance();
  bool maintenance() const;
  void set_maintenance(bool value);
  private:
  bool _internal_maintenance() const;
  void _internal_set_maintenance(bool value);
  public:

  // int32 maintenance_duration = 3;
  void clear_maintenance_duration();
  int32_t maintenance_duration() const;
  void set_maintenance_duration(int32_t value);
  private:
  int32_t _internal_maintenance_duration() const;
  void _internal_set_maintenance_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGRecvShutdownPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t start_sec_;
    bool maintenance_;
    int32_t maintenance_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGTransferPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGTransferPacket) */ {
 public:
  inline GGTransferPacket() : GGTransferPacket(nullptr) {}
  ~GGTransferPacket() override;
  explicit PROTOBUF_CONSTEXPR GGTransferPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGTransferPacket(const GGTransferPacket& from);
  GGTransferPacket(GGTransferPacket&& from) noexcept
    : GGTransferPacket() {
    *this = ::std::move(from);
  }

  inline GGTransferPacket& operator=(const GGTransferPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGTransferPacket& operator=(GGTransferPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGTransferPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGTransferPacket* internal_default_instance() {
    return reinterpret_cast<const GGTransferPacket*>(
               &_GGTransferPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GGTransferPacket& a, GGTransferPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGTransferPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGTransferPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGTransferPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGTransferPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGTransferPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGTransferPacket& from) {
    GGTransferPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGTransferPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGTransferPacket";
  }
  protected:
  explicit GGTransferPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGTransferPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGForceItemDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGForceItemDeletePacket) */ {
 public:
  inline GGForceItemDeletePacket() : GGForceItemDeletePacket(nullptr) {}
  ~GGForceItemDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GGForceItemDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGForceItemDeletePacket(const GGForceItemDeletePacket& from);
  GGForceItemDeletePacket(GGForceItemDeletePacket&& from) noexcept
    : GGForceItemDeletePacket() {
    *this = ::std::move(from);
  }

  inline GGForceItemDeletePacket& operator=(const GGForceItemDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGForceItemDeletePacket& operator=(GGForceItemDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGForceItemDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGForceItemDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GGForceItemDeletePacket*>(
               &_GGForceItemDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GGForceItemDeletePacket& a, GGForceItemDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGForceItemDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGForceItemDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGForceItemDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGForceItemDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGForceItemDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGForceItemDeletePacket& from) {
    GGForceItemDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGForceItemDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGForceItemDeletePacket";
  }
  protected:
  explicit GGForceItemDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGForceItemDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGTeamChatPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGTeamChatPacket) */ {
 public:
  inline GGTeamChatPacket() : GGTeamChatPacket(nullptr) {}
  ~GGTeamChatPacket() override;
  explicit PROTOBUF_CONSTEXPR GGTeamChatPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGTeamChatPacket(const GGTeamChatPacket& from);
  GGTeamChatPacket(GGTeamChatPacket&& from) noexcept
    : GGTeamChatPacket() {
    *this = ::std::move(from);
  }

  inline GGTeamChatPacket& operator=(const GGTeamChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGTeamChatPacket& operator=(GGTeamChatPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGTeamChatPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGTeamChatPacket* internal_default_instance() {
    return reinterpret_cast<const GGTeamChatPacket*>(
               &_GGTeamChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GGTeamChatPacket& a, GGTeamChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGTeamChatPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGTeamChatPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGTeamChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGTeamChatPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGTeamChatPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGTeamChatPacket& from) {
    GGTeamChatPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGTeamChatPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGTeamChatPacket";
  }
  protected:
  explicit GGTeamChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // bytes text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:network.GGTeamChatPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGCombatZoneRankingPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGCombatZoneRankingPacket) */ {
 public:
  inline GGCombatZoneRankingPacket() : GGCombatZoneRankingPacket(nullptr) {}
  ~GGCombatZoneRankingPacket() override;
  explicit PROTOBUF_CONSTEXPR GGCombatZoneRankingPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGCombatZoneRankingPacket(const GGCombatZoneRankingPacket& from);
  GGCombatZoneRankingPacket(GGCombatZoneRankingPacket&& from) noexcept
    : GGCombatZoneRankingPacket() {
    *this = ::std::move(from);
  }

  inline GGCombatZoneRankingPacket& operator=(const GGCombatZoneRankingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGCombatZoneRankingPacket& operator=(GGCombatZoneRankingPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGCombatZoneRankingPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGCombatZoneRankingPacket* internal_default_instance() {
    return reinterpret_cast<const GGCombatZoneRankingPacket*>(
               &_GGCombatZoneRankingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GGCombatZoneRankingPacket& a, GGCombatZoneRankingPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGCombatZoneRankingPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGCombatZoneRankingPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGCombatZoneRankingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGCombatZoneRankingPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGCombatZoneRankingPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGCombatZoneRankingPacket& from) {
    GGCombatZoneRankingPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGCombatZoneRankingPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGCombatZoneRankingPacket";
  }
  protected:
  explicit GGCombatZoneRankingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeeklyFieldNumber = 1,
    kGeneralFieldNumber = 2,
  };
  // repeated .network.TCombatZoneRankingPlayer weekly = 1;
  int weekly_size() const;
  private:
  int _internal_weekly_size() const;
  public:
  void clear_weekly();
  ::network::TCombatZoneRankingPlayer* mutable_weekly(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >*
      mutable_weekly();
  private:
  const ::network::TCombatZoneRankingPlayer& _internal_weekly(int index) const;
  ::network::TCombatZoneRankingPlayer* _internal_add_weekly();
  public:
  const ::network::TCombatZoneRankingPlayer& weekly(int index) const;
  ::network::TCombatZoneRankingPlayer* add_weekly();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >&
      weekly() const;

  // repeated .network.TCombatZoneRankingPlayer general = 2;
  int general_size() const;
  private:
  int _internal_general_size() const;
  public:
  void clear_general();
  ::network::TCombatZoneRankingPlayer* mutable_general(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >*
      mutable_general();
  private:
  const ::network::TCombatZoneRankingPlayer& _internal_general(int index) const;
  ::network::TCombatZoneRankingPlayer* _internal_add_general();
  public:
  const ::network::TCombatZoneRankingPlayer& general(int index) const;
  ::network::TCombatZoneRankingPlayer* add_general();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >&
      general() const;

  // @@protoc_insertion_point(class_scope:network.GGCombatZoneRankingPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer > weekly_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer > general_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGUpdateRightsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGUpdateRightsPacket) */ {
 public:
  inline GGUpdateRightsPacket() : GGUpdateRightsPacket(nullptr) {}
  ~GGUpdateRightsPacket() override;
  explicit PROTOBUF_CONSTEXPR GGUpdateRightsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGUpdateRightsPacket(const GGUpdateRightsPacket& from);
  GGUpdateRightsPacket(GGUpdateRightsPacket&& from) noexcept
    : GGUpdateRightsPacket() {
    *this = ::std::move(from);
  }

  inline GGUpdateRightsPacket& operator=(const GGUpdateRightsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGUpdateRightsPacket& operator=(GGUpdateRightsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGUpdateRightsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGUpdateRightsPacket* internal_default_instance() {
    return reinterpret_cast<const GGUpdateRightsPacket*>(
               &_GGUpdateRightsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GGUpdateRightsPacket& a, GGUpdateRightsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGUpdateRightsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGUpdateRightsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGUpdateRightsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGUpdateRightsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGUpdateRightsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGUpdateRightsPacket& from) {
    GGUpdateRightsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGUpdateRightsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGUpdateRightsPacket";
  }
  protected:
  explicit GGUpdateRightsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGmLevelFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 gm_level = 2;
  void clear_gm_level();
  uint32_t gm_level() const;
  void set_gm_level(uint32_t value);
  private:
  uint32_t _internal_gm_level() const;
  void _internal_set_gm_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGUpdateRightsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t gm_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGFlushPlayerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGFlushPlayerPacket) */ {
 public:
  inline GGFlushPlayerPacket() : GGFlushPlayerPacket(nullptr) {}
  ~GGFlushPlayerPacket() override;
  explicit PROTOBUF_CONSTEXPR GGFlushPlayerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGFlushPlayerPacket(const GGFlushPlayerPacket& from);
  GGFlushPlayerPacket(GGFlushPlayerPacket&& from) noexcept
    : GGFlushPlayerPacket() {
    *this = ::std::move(from);
  }

  inline GGFlushPlayerPacket& operator=(const GGFlushPlayerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGFlushPlayerPacket& operator=(GGFlushPlayerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGFlushPlayerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGFlushPlayerPacket* internal_default_instance() {
    return reinterpret_cast<const GGFlushPlayerPacket*>(
               &_GGFlushPlayerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GGFlushPlayerPacket& a, GGFlushPlayerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGFlushPlayerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGFlushPlayerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGFlushPlayerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGFlushPlayerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGFlushPlayerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGFlushPlayerPacket& from) {
    GGFlushPlayerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGFlushPlayerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGFlushPlayerPacket";
  }
  protected:
  explicit GGFlushPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGFlushPlayerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGHomepageCommandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGHomepageCommandPacket) */ {
 public:
  inline GGHomepageCommandPacket() : GGHomepageCommandPacket(nullptr) {}
  ~GGHomepageCommandPacket() override;
  explicit PROTOBUF_CONSTEXPR GGHomepageCommandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGHomepageCommandPacket(const GGHomepageCommandPacket& from);
  GGHomepageCommandPacket(GGHomepageCommandPacket&& from) noexcept
    : GGHomepageCommandPacket() {
    *this = ::std::move(from);
  }

  inline GGHomepageCommandPacket& operator=(const GGHomepageCommandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGHomepageCommandPacket& operator=(GGHomepageCommandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGHomepageCommandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGHomepageCommandPacket* internal_default_instance() {
    return reinterpret_cast<const GGHomepageCommandPacket*>(
               &_GGHomepageCommandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GGHomepageCommandPacket& a, GGHomepageCommandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGHomepageCommandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGHomepageCommandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGHomepageCommandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGHomepageCommandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGHomepageCommandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGHomepageCommandPacket& from) {
    GGHomepageCommandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGHomepageCommandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGHomepageCommandPacket";
  }
  protected:
  explicit GGHomepageCommandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // bytes command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:network.GGHomepageCommandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGPullOfflineMessagesPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGPullOfflineMessagesPacket) */ {
 public:
  inline GGPullOfflineMessagesPacket() : GGPullOfflineMessagesPacket(nullptr) {}
  ~GGPullOfflineMessagesPacket() override;
  explicit PROTOBUF_CONSTEXPR GGPullOfflineMessagesPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGPullOfflineMessagesPacket(const GGPullOfflineMessagesPacket& from);
  GGPullOfflineMessagesPacket(GGPullOfflineMessagesPacket&& from) noexcept
    : GGPullOfflineMessagesPacket() {
    *this = ::std::move(from);
  }

  inline GGPullOfflineMessagesPacket& operator=(const GGPullOfflineMessagesPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGPullOfflineMessagesPacket& operator=(GGPullOfflineMessagesPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGPullOfflineMessagesPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGPullOfflineMessagesPacket* internal_default_instance() {
    return reinterpret_cast<const GGPullOfflineMessagesPacket*>(
               &_GGPullOfflineMessagesPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GGPullOfflineMessagesPacket& a, GGPullOfflineMessagesPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGPullOfflineMessagesPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGPullOfflineMessagesPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGPullOfflineMessagesPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGPullOfflineMessagesPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGPullOfflineMessagesPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGPullOfflineMessagesPacket& from) {
    GGPullOfflineMessagesPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGPullOfflineMessagesPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGPullOfflineMessagesPacket";
  }
  protected:
  explicit GGPullOfflineMessagesPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGPullOfflineMessagesPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGDmgRankingUpdatePacket_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGDmgRankingUpdatePacket.Entry) */ {
 public:
  inline GGDmgRankingUpdatePacket_Entry() : GGDmgRankingUpdatePacket_Entry(nullptr) {}
  ~GGDmgRankingUpdatePacket_Entry() override;
  explicit PROTOBUF_CONSTEXPR GGDmgRankingUpdatePacket_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGDmgRankingUpdatePacket_Entry(const GGDmgRankingUpdatePacket_Entry& from);
  GGDmgRankingUpdatePacket_Entry(GGDmgRankingUpdatePacket_Entry&& from) noexcept
    : GGDmgRankingUpdatePacket_Entry() {
    *this = ::std::move(from);
  }

  inline GGDmgRankingUpdatePacket_Entry& operator=(const GGDmgRankingUpdatePacket_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGDmgRankingUpdatePacket_Entry& operator=(GGDmgRankingUpdatePacket_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGDmgRankingUpdatePacket_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGDmgRankingUpdatePacket_Entry* internal_default_instance() {
    return reinterpret_cast<const GGDmgRankingUpdatePacket_Entry*>(
               &_GGDmgRankingUpdatePacket_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GGDmgRankingUpdatePacket_Entry& a, GGDmgRankingUpdatePacket_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(GGDmgRankingUpdatePacket_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGDmgRankingUpdatePacket_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGDmgRankingUpdatePacket_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGDmgRankingUpdatePacket_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGDmgRankingUpdatePacket_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGDmgRankingUpdatePacket_Entry& from) {
    GGDmgRankingUpdatePacket_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGDmgRankingUpdatePacket_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGDmgRankingUpdatePacket.Entry";
  }
  protected:
  explicit GGDmgRankingUpdatePacket_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDmgFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 dmg = 2;
  void clear_dmg();
  int32_t dmg() const;
  void set_dmg(int32_t value);
  private:
  int32_t _internal_dmg() const;
  void _internal_set_dmg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGDmgRankingUpdatePacket.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t dmg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGDmgRankingUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGDmgRankingUpdatePacket) */ {
 public:
  inline GGDmgRankingUpdatePacket() : GGDmgRankingUpdatePacket(nullptr) {}
  ~GGDmgRankingUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GGDmgRankingUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGDmgRankingUpdatePacket(const GGDmgRankingUpdatePacket& from);
  GGDmgRankingUpdatePacket(GGDmgRankingUpdatePacket&& from) noexcept
    : GGDmgRankingUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GGDmgRankingUpdatePacket& operator=(const GGDmgRankingUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGDmgRankingUpdatePacket& operator=(GGDmgRankingUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGDmgRankingUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGDmgRankingUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GGDmgRankingUpdatePacket*>(
               &_GGDmgRankingUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GGDmgRankingUpdatePacket& a, GGDmgRankingUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGDmgRankingUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGDmgRankingUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGDmgRankingUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGDmgRankingUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGDmgRankingUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGDmgRankingUpdatePacket& from) {
    GGDmgRankingUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGDmgRankingUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGDmgRankingUpdatePacket";
  }
  protected:
  explicit GGDmgRankingUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GGDmgRankingUpdatePacket_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .network.GGDmgRankingUpdatePacket.Entry data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::GGDmgRankingUpdatePacket_Entry& data() const;
  PROTOBUF_NODISCARD ::network::GGDmgRankingUpdatePacket_Entry* release_data();
  ::network::GGDmgRankingUpdatePacket_Entry* mutable_data();
  void set_allocated_data(::network::GGDmgRankingUpdatePacket_Entry* data);
  private:
  const ::network::GGDmgRankingUpdatePacket_Entry& _internal_data() const;
  ::network::GGDmgRankingUpdatePacket_Entry* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::GGDmgRankingUpdatePacket_Entry* data);
  ::network::GGDmgRankingUpdatePacket_Entry* unsafe_arena_release_data();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGDmgRankingUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::GGDmgRankingUpdatePacket_Entry* data_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGLocaleUpdateLastUsagePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGLocaleUpdateLastUsagePacket) */ {
 public:
  inline GGLocaleUpdateLastUsagePacket() : GGLocaleUpdateLastUsagePacket(nullptr) {}
  ~GGLocaleUpdateLastUsagePacket() override;
  explicit PROTOBUF_CONSTEXPR GGLocaleUpdateLastUsagePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGLocaleUpdateLastUsagePacket(const GGLocaleUpdateLastUsagePacket& from);
  GGLocaleUpdateLastUsagePacket(GGLocaleUpdateLastUsagePacket&& from) noexcept
    : GGLocaleUpdateLastUsagePacket() {
    *this = ::std::move(from);
  }

  inline GGLocaleUpdateLastUsagePacket& operator=(const GGLocaleUpdateLastUsagePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGLocaleUpdateLastUsagePacket& operator=(GGLocaleUpdateLastUsagePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGLocaleUpdateLastUsagePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGLocaleUpdateLastUsagePacket* internal_default_instance() {
    return reinterpret_cast<const GGLocaleUpdateLastUsagePacket*>(
               &_GGLocaleUpdateLastUsagePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GGLocaleUpdateLastUsagePacket& a, GGLocaleUpdateLastUsagePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGLocaleUpdateLastUsagePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGLocaleUpdateLastUsagePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGLocaleUpdateLastUsagePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGLocaleUpdateLastUsagePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGLocaleUpdateLastUsagePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGLocaleUpdateLastUsagePacket& from) {
    GGLocaleUpdateLastUsagePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGLocaleUpdateLastUsagePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGLocaleUpdateLastUsagePacket";
  }
  protected:
  explicit GGLocaleUpdateLastUsagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangBaseFieldNumber = 1,
  };
  // bytes lang_base = 1;
  void clear_lang_base();
  const std::string& lang_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang_base();
  PROTOBUF_NODISCARD std::string* release_lang_base();
  void set_allocated_lang_base(std::string* lang_base);
  private:
  const std::string& _internal_lang_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang_base(const std::string& value);
  std::string* _internal_mutable_lang_base();
  public:

  // @@protoc_insertion_point(class_scope:network.GGLocaleUpdateLastUsagePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGReloadCommandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGReloadCommandPacket) */ {
 public:
  inline GGReloadCommandPacket() : GGReloadCommandPacket(nullptr) {}
  ~GGReloadCommandPacket() override;
  explicit PROTOBUF_CONSTEXPR GGReloadCommandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGReloadCommandPacket(const GGReloadCommandPacket& from);
  GGReloadCommandPacket(GGReloadCommandPacket&& from) noexcept
    : GGReloadCommandPacket() {
    *this = ::std::move(from);
  }

  inline GGReloadCommandPacket& operator=(const GGReloadCommandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGReloadCommandPacket& operator=(GGReloadCommandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGReloadCommandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGReloadCommandPacket* internal_default_instance() {
    return reinterpret_cast<const GGReloadCommandPacket*>(
               &_GGReloadCommandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GGReloadCommandPacket& a, GGReloadCommandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGReloadCommandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGReloadCommandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGReloadCommandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGReloadCommandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGReloadCommandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGReloadCommandPacket& from) {
    GGReloadCommandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGReloadCommandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGReloadCommandPacket";
  }
  protected:
  explicit GGReloadCommandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentFieldNumber = 1,
  };
  // bytes argument = 1;
  void clear_argument();
  const std::string& argument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_argument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_argument();
  PROTOBUF_NODISCARD std::string* release_argument();
  void set_allocated_argument(std::string* argument);
  private:
  const std::string& _internal_argument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_argument(const std::string& value);
  std::string* _internal_mutable_argument();
  public:

  // @@protoc_insertion_point(class_scope:network.GGReloadCommandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr argument_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionInsertItemPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionInsertItemPacket) */ {
 public:
  inline GGAuctionInsertItemPacket() : GGAuctionInsertItemPacket(nullptr) {}
  ~GGAuctionInsertItemPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionInsertItemPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionInsertItemPacket(const GGAuctionInsertItemPacket& from);
  GGAuctionInsertItemPacket(GGAuctionInsertItemPacket&& from) noexcept
    : GGAuctionInsertItemPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionInsertItemPacket& operator=(const GGAuctionInsertItemPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionInsertItemPacket& operator=(GGAuctionInsertItemPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionInsertItemPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionInsertItemPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionInsertItemPacket*>(
               &_GGAuctionInsertItemPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GGAuctionInsertItemPacket& a, GGAuctionInsertItemPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionInsertItemPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionInsertItemPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionInsertItemPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionInsertItemPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionInsertItemPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionInsertItemPacket& from) {
    GGAuctionInsertItemPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionInsertItemPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionInsertItemPacket";
  }
  protected:
  explicit GGAuctionInsertItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .network.TShopItemTable item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TShopItemTable& item() const;
  PROTOBUF_NODISCARD ::network::TShopItemTable* release_item();
  ::network::TShopItemTable* mutable_item();
  void set_allocated_item(::network::TShopItemTable* item);
  private:
  const ::network::TShopItemTable& _internal_item() const;
  ::network::TShopItemTable* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TShopItemTable* item);
  ::network::TShopItemTable* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:network.GGAuctionInsertItemPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TShopItemTable* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionTakeItemPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionTakeItemPacket) */ {
 public:
  inline GGAuctionTakeItemPacket() : GGAuctionTakeItemPacket(nullptr) {}
  ~GGAuctionTakeItemPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionTakeItemPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionTakeItemPacket(const GGAuctionTakeItemPacket& from);
  GGAuctionTakeItemPacket(GGAuctionTakeItemPacket&& from) noexcept
    : GGAuctionTakeItemPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionTakeItemPacket& operator=(const GGAuctionTakeItemPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionTakeItemPacket& operator=(GGAuctionTakeItemPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionTakeItemPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionTakeItemPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionTakeItemPacket*>(
               &_GGAuctionTakeItemPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GGAuctionTakeItemPacket& a, GGAuctionTakeItemPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionTakeItemPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionTakeItemPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionTakeItemPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionTakeItemPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionTakeItemPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionTakeItemPacket& from) {
    GGAuctionTakeItemPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionTakeItemPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionTakeItemPacket";
  }
  protected:
  explicit GGAuctionTakeItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kInventoryPosFieldNumber = 3,
  };
  // uint32 owner_id = 1;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // uint32 item_id = 2;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // uint32 inventory_pos = 3;
  void clear_inventory_pos();
  uint32_t inventory_pos() const;
  void set_inventory_pos(uint32_t value);
  private:
  uint32_t _internal_inventory_pos() const;
  void _internal_set_inventory_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionTakeItemPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t owner_id_;
    uint32_t item_id_;
    uint32_t inventory_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionBuyItemPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionBuyItemPacket) */ {
 public:
  inline GGAuctionBuyItemPacket() : GGAuctionBuyItemPacket(nullptr) {}
  ~GGAuctionBuyItemPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionBuyItemPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionBuyItemPacket(const GGAuctionBuyItemPacket& from);
  GGAuctionBuyItemPacket(GGAuctionBuyItemPacket&& from) noexcept
    : GGAuctionBuyItemPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionBuyItemPacket& operator=(const GGAuctionBuyItemPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionBuyItemPacket& operator=(GGAuctionBuyItemPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionBuyItemPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionBuyItemPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionBuyItemPacket*>(
               &_GGAuctionBuyItemPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GGAuctionBuyItemPacket& a, GGAuctionBuyItemPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionBuyItemPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionBuyItemPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionBuyItemPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionBuyItemPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionBuyItemPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionBuyItemPacket& from) {
    GGAuctionBuyItemPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionBuyItemPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionBuyItemPacket";
  }
  protected:
  explicit GGAuctionBuyItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kItemIdFieldNumber = 3,
    kPaidGoldFieldNumber = 4,
  };
  // string player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 item_id = 3;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // uint64 paid_gold = 4;
  void clear_paid_gold();
  uint64_t paid_gold() const;
  void set_paid_gold(uint64_t value);
  private:
  uint64_t _internal_paid_gold() const;
  void _internal_set_paid_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionBuyItemPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    uint32_t pid_;
    uint32_t item_id_;
    uint64_t paid_gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionTakeGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionTakeGoldPacket) */ {
 public:
  inline GGAuctionTakeGoldPacket() : GGAuctionTakeGoldPacket(nullptr) {}
  ~GGAuctionTakeGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionTakeGoldPacket(const GGAuctionTakeGoldPacket& from);
  GGAuctionTakeGoldPacket(GGAuctionTakeGoldPacket&& from) noexcept
    : GGAuctionTakeGoldPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionTakeGoldPacket& operator=(const GGAuctionTakeGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionTakeGoldPacket& operator=(GGAuctionTakeGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionTakeGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionTakeGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionTakeGoldPacket*>(
               &_GGAuctionTakeGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GGAuctionTakeGoldPacket& a, GGAuctionTakeGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionTakeGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionTakeGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionTakeGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionTakeGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionTakeGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionTakeGoldPacket& from) {
    GGAuctionTakeGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionTakeGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionTakeGoldPacket";
  }
  protected:
  explicit GGAuctionTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
  };
  // uint64 gold = 2;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // uint32 owner_id = 1;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionTakeGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t gold_;
    uint32_t owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionSearchItemsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionSearchItemsPacket) */ {
 public:
  inline GGAuctionSearchItemsPacket() : GGAuctionSearchItemsPacket(nullptr) {}
  ~GGAuctionSearchItemsPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionSearchItemsPacket(const GGAuctionSearchItemsPacket& from);
  GGAuctionSearchItemsPacket(GGAuctionSearchItemsPacket&& from) noexcept
    : GGAuctionSearchItemsPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionSearchItemsPacket& operator=(const GGAuctionSearchItemsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionSearchItemsPacket& operator=(GGAuctionSearchItemsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionSearchItemsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionSearchItemsPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionSearchItemsPacket*>(
               &_GGAuctionSearchItemsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GGAuctionSearchItemsPacket& a, GGAuctionSearchItemsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionSearchItemsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionSearchItemsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionSearchItemsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionSearchItemsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionSearchItemsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionSearchItemsPacket& from) {
    GGAuctionSearchItemsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionSearchItemsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionSearchItemsPacket";
  }
  protected:
  explicit GGAuctionSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 4,
    kPidFieldNumber = 1,
    kPageFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // .network.TDataAuctionSearch options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::network::TDataAuctionSearch& options() const;
  PROTOBUF_NODISCARD ::network::TDataAuctionSearch* release_options();
  ::network::TDataAuctionSearch* mutable_options();
  void set_allocated_options(::network::TDataAuctionSearch* options);
  private:
  const ::network::TDataAuctionSearch& _internal_options() const;
  ::network::TDataAuctionSearch* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::network::TDataAuctionSearch* options);
  ::network::TDataAuctionSearch* unsafe_arena_release_options();

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 language = 3;
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionSearchItemsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TDataAuctionSearch* options_;
    uint32_t pid_;
    uint32_t page_;
    uint32_t language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionExtendedSearchItemsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionExtendedSearchItemsPacket) */ {
 public:
  inline GGAuctionExtendedSearchItemsPacket() : GGAuctionExtendedSearchItemsPacket(nullptr) {}
  ~GGAuctionExtendedSearchItemsPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionExtendedSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionExtendedSearchItemsPacket(const GGAuctionExtendedSearchItemsPacket& from);
  GGAuctionExtendedSearchItemsPacket(GGAuctionExtendedSearchItemsPacket&& from) noexcept
    : GGAuctionExtendedSearchItemsPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionExtendedSearchItemsPacket& operator=(const GGAuctionExtendedSearchItemsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionExtendedSearchItemsPacket& operator=(GGAuctionExtendedSearchItemsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionExtendedSearchItemsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionExtendedSearchItemsPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionExtendedSearchItemsPacket*>(
               &_GGAuctionExtendedSearchItemsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GGAuctionExtendedSearchItemsPacket& a, GGAuctionExtendedSearchItemsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionExtendedSearchItemsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionExtendedSearchItemsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionExtendedSearchItemsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionExtendedSearchItemsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionExtendedSearchItemsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionExtendedSearchItemsPacket& from) {
    GGAuctionExtendedSearchItemsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionExtendedSearchItemsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionExtendedSearchItemsPacket";
  }
  protected:
  explicit GGAuctionExtendedSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 4,
    kPidFieldNumber = 1,
    kPageFieldNumber = 2,
    kLanguageFieldNumber = 3,
    kMapIndexFieldNumber = 5,
    kChannelFieldNumber = 6,
  };
  // .network.TExtendedDataAuctionSearch options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::network::TExtendedDataAuctionSearch& options() const;
  PROTOBUF_NODISCARD ::network::TExtendedDataAuctionSearch* release_options();
  ::network::TExtendedDataAuctionSearch* mutable_options();
  void set_allocated_options(::network::TExtendedDataAuctionSearch* options);
  private:
  const ::network::TExtendedDataAuctionSearch& _internal_options() const;
  ::network::TExtendedDataAuctionSearch* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::network::TExtendedDataAuctionSearch* options);
  ::network::TExtendedDataAuctionSearch* unsafe_arena_release_options();

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 language = 3;
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // uint32 map_index = 5;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 channel = 6;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionExtendedSearchItemsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TExtendedDataAuctionSearch* options_;
    uint32_t pid_;
    uint32_t page_;
    uint32_t language_;
    uint32_t map_index_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionMarkShopPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionMarkShopPacket) */ {
 public:
  inline GGAuctionMarkShopPacket() : GGAuctionMarkShopPacket(nullptr) {}
  ~GGAuctionMarkShopPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionMarkShopPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionMarkShopPacket(const GGAuctionMarkShopPacket& from);
  GGAuctionMarkShopPacket(GGAuctionMarkShopPacket&& from) noexcept
    : GGAuctionMarkShopPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionMarkShopPacket& operator=(const GGAuctionMarkShopPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionMarkShopPacket& operator=(GGAuctionMarkShopPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionMarkShopPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionMarkShopPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionMarkShopPacket*>(
               &_GGAuctionMarkShopPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GGAuctionMarkShopPacket& a, GGAuctionMarkShopPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionMarkShopPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionMarkShopPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionMarkShopPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionMarkShopPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionMarkShopPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionMarkShopPacket& from) {
    GGAuctionMarkShopPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionMarkShopPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionMarkShopPacket";
  }
  protected:
  explicit GGAuctionMarkShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 item_id = 2;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionMarkShopPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionAnswerMarkShopPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionAnswerMarkShopPacket) */ {
 public:
  inline GGAuctionAnswerMarkShopPacket() : GGAuctionAnswerMarkShopPacket(nullptr) {}
  ~GGAuctionAnswerMarkShopPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionAnswerMarkShopPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionAnswerMarkShopPacket(const GGAuctionAnswerMarkShopPacket& from);
  GGAuctionAnswerMarkShopPacket(GGAuctionAnswerMarkShopPacket&& from) noexcept
    : GGAuctionAnswerMarkShopPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionAnswerMarkShopPacket& operator=(const GGAuctionAnswerMarkShopPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionAnswerMarkShopPacket& operator=(GGAuctionAnswerMarkShopPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionAnswerMarkShopPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionAnswerMarkShopPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionAnswerMarkShopPacket*>(
               &_GGAuctionAnswerMarkShopPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GGAuctionAnswerMarkShopPacket& a, GGAuctionAnswerMarkShopPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionAnswerMarkShopPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionAnswerMarkShopPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionAnswerMarkShopPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionAnswerMarkShopPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionAnswerMarkShopPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionAnswerMarkShopPacket& from) {
    GGAuctionAnswerMarkShopPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionAnswerMarkShopPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionAnswerMarkShopPacket";
  }
  protected:
  explicit GGAuctionAnswerMarkShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionAnswerMarkShopPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopRequestShowPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopRequestShowPacket) */ {
 public:
  inline GGAuctionShopRequestShowPacket() : GGAuctionShopRequestShowPacket(nullptr) {}
  ~GGAuctionShopRequestShowPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopRequestShowPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopRequestShowPacket(const GGAuctionShopRequestShowPacket& from);
  GGAuctionShopRequestShowPacket(GGAuctionShopRequestShowPacket&& from) noexcept
    : GGAuctionShopRequestShowPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopRequestShowPacket& operator=(const GGAuctionShopRequestShowPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopRequestShowPacket& operator=(GGAuctionShopRequestShowPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopRequestShowPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopRequestShowPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopRequestShowPacket*>(
               &_GGAuctionShopRequestShowPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GGAuctionShopRequestShowPacket& a, GGAuctionShopRequestShowPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopRequestShowPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopRequestShowPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopRequestShowPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopRequestShowPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopRequestShowPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopRequestShowPacket& from) {
    GGAuctionShopRequestShowPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopRequestShowPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopRequestShowPacket";
  }
  protected:
  explicit GGAuctionShopRequestShowPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopRequestShowPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopOpenPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopOpenPacket) */ {
 public:
  inline GGAuctionShopOpenPacket() : GGAuctionShopOpenPacket(nullptr) {}
  ~GGAuctionShopOpenPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopOpenPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopOpenPacket(const GGAuctionShopOpenPacket& from);
  GGAuctionShopOpenPacket(GGAuctionShopOpenPacket&& from) noexcept
    : GGAuctionShopOpenPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopOpenPacket& operator=(const GGAuctionShopOpenPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopOpenPacket& operator=(GGAuctionShopOpenPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopOpenPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopOpenPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopOpenPacket*>(
               &_GGAuctionShopOpenPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GGAuctionShopOpenPacket& a, GGAuctionShopOpenPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopOpenPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopOpenPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopOpenPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopOpenPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopOpenPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopOpenPacket& from) {
    GGAuctionShopOpenPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopOpenPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopOpenPacket";
  }
  protected:
  explicit GGAuctionShopOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 14,
    kOwnerNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kOwnerIdFieldNumber = 1,
    kStyleFieldNumber = 4,
    kVnumFieldNumber = 5,
    kColorRedFieldNumber = 6,
    kColorGreenFieldNumber = 7,
    kColorBlueFieldNumber = 8,
    kChannelFieldNumber = 9,
    kMapIndexFieldNumber = 10,
    kXFieldNumber = 11,
    kYFieldNumber = 12,
    kTimeoutFieldNumber = 13,
  };
  // repeated .network.TItemData items = 14;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // string owner_name = 2;
  void clear_owner_name();
  const std::string& owner_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_name();
  PROTOBUF_NODISCARD std::string* release_owner_name();
  void set_allocated_owner_name(std::string* owner_name);
  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(const std::string& value);
  std::string* _internal_mutable_owner_name();
  public:

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 owner_id = 1;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // uint32 style = 4;
  void clear_style();
  uint32_t style() const;
  void set_style(uint32_t value);
  private:
  uint32_t _internal_style() const;
  void _internal_set_style(uint32_t value);
  public:

  // uint32 vnum = 5;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // float color_red = 6;
  void clear_color_red();
  float color_red() const;
  void set_color_red(float value);
  private:
  float _internal_color_red() const;
  void _internal_set_color_red(float value);
  public:

  // float color_green = 7;
  void clear_color_green();
  float color_green() const;
  void set_color_green(float value);
  private:
  float _internal_color_green() const;
  void _internal_set_color_green(float value);
  public:

  // float color_blue = 8;
  void clear_color_blue();
  float color_blue() const;
  void set_color_blue(float value);
  private:
  float _internal_color_blue() const;
  void _internal_set_color_blue(float value);
  public:

  // uint32 channel = 9;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 map_index = 10;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 x = 11;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 12;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // uint32 timeout = 13;
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopOpenPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t owner_id_;
    uint32_t style_;
    uint32_t vnum_;
    float color_red_;
    float color_green_;
    float color_blue_;
    uint32_t channel_;
    uint32_t map_index_;
    uint32_t x_;
    uint32_t y_;
    uint32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopTakeGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopTakeGoldPacket) */ {
 public:
  inline GGAuctionShopTakeGoldPacket() : GGAuctionShopTakeGoldPacket(nullptr) {}
  ~GGAuctionShopTakeGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopTakeGoldPacket(const GGAuctionShopTakeGoldPacket& from);
  GGAuctionShopTakeGoldPacket(GGAuctionShopTakeGoldPacket&& from) noexcept
    : GGAuctionShopTakeGoldPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopTakeGoldPacket& operator=(const GGAuctionShopTakeGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopTakeGoldPacket& operator=(GGAuctionShopTakeGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopTakeGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopTakeGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopTakeGoldPacket*>(
               &_GGAuctionShopTakeGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GGAuctionShopTakeGoldPacket& a, GGAuctionShopTakeGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopTakeGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopTakeGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopTakeGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopTakeGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopTakeGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopTakeGoldPacket& from) {
    GGAuctionShopTakeGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopTakeGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopTakeGoldPacket";
  }
  protected:
  explicit GGAuctionShopTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
  };
  // uint64 gold = 2;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // uint32 owner_id = 1;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopTakeGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t gold_;
    uint32_t owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopSpawnPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopSpawnPacket) */ {
 public:
  inline GGAuctionShopSpawnPacket() : GGAuctionShopSpawnPacket(nullptr) {}
  ~GGAuctionShopSpawnPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopSpawnPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopSpawnPacket(const GGAuctionShopSpawnPacket& from);
  GGAuctionShopSpawnPacket(GGAuctionShopSpawnPacket&& from) noexcept
    : GGAuctionShopSpawnPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopSpawnPacket& operator=(const GGAuctionShopSpawnPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopSpawnPacket& operator=(GGAuctionShopSpawnPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopSpawnPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopSpawnPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopSpawnPacket*>(
               &_GGAuctionShopSpawnPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GGAuctionShopSpawnPacket& a, GGAuctionShopSpawnPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopSpawnPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopSpawnPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopSpawnPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopSpawnPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopSpawnPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopSpawnPacket& from) {
    GGAuctionShopSpawnPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopSpawnPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopSpawnPacket";
  }
  protected:
  explicit GGAuctionShopSpawnPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOwnerNameFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
    kVnumFieldNumber = 4,
    kStyleFieldNumber = 5,
    kColorRedFieldNumber = 6,
    kColorGreenFieldNumber = 7,
    kColorBlueFieldNumber = 8,
    kMapIndexFieldNumber = 9,
    kXFieldNumber = 10,
    kYFieldNumber = 11,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes owner_name = 2;
  void clear_owner_name();
  const std::string& owner_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_name();
  PROTOBUF_NODISCARD std::string* release_owner_name();
  void set_allocated_owner_name(std::string* owner_name);
  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(const std::string& value);
  std::string* _internal_mutable_owner_name();
  public:

  // uint32 owner_id = 3;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // uint32 vnum = 4;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 style = 5;
  void clear_style();
  uint32_t style() const;
  void set_style(uint32_t value);
  private:
  uint32_t _internal_style() const;
  void _internal_set_style(uint32_t value);
  public:

  // float color_red = 6;
  void clear_color_red();
  float color_red() const;
  void set_color_red(float value);
  private:
  float _internal_color_red() const;
  void _internal_set_color_red(float value);
  public:

  // float color_green = 7;
  void clear_color_green();
  float color_green() const;
  void set_color_green(float value);
  private:
  float _internal_color_green() const;
  void _internal_set_color_green(float value);
  public:

  // float color_blue = 8;
  void clear_color_blue();
  float color_blue() const;
  void set_color_blue(float value);
  private:
  float _internal_color_blue() const;
  void _internal_set_color_blue(float value);
  public:

  // uint32 map_index = 9;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 x = 10;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 11;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopSpawnPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_name_;
    uint32_t owner_id_;
    uint32_t vnum_;
    uint32_t style_;
    float color_red_;
    float color_green_;
    float color_blue_;
    uint32_t map_index_;
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopDespawnPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopDespawnPacket) */ {
 public:
  inline GGAuctionShopDespawnPacket() : GGAuctionShopDespawnPacket(nullptr) {}
  ~GGAuctionShopDespawnPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopDespawnPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopDespawnPacket(const GGAuctionShopDespawnPacket& from);
  GGAuctionShopDespawnPacket(GGAuctionShopDespawnPacket&& from) noexcept
    : GGAuctionShopDespawnPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopDespawnPacket& operator=(const GGAuctionShopDespawnPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopDespawnPacket& operator=(GGAuctionShopDespawnPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopDespawnPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopDespawnPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopDespawnPacket*>(
               &_GGAuctionShopDespawnPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GGAuctionShopDespawnPacket& a, GGAuctionShopDespawnPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopDespawnPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopDespawnPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopDespawnPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopDespawnPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopDespawnPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopDespawnPacket& from) {
    GGAuctionShopDespawnPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopDespawnPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopDespawnPacket";
  }
  protected:
  explicit GGAuctionShopDespawnPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
  };
  // uint32 owner_id = 1;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopDespawnPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopViewPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopViewPacket) */ {
 public:
  inline GGAuctionShopViewPacket() : GGAuctionShopViewPacket(nullptr) {}
  ~GGAuctionShopViewPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopViewPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopViewPacket(const GGAuctionShopViewPacket& from);
  GGAuctionShopViewPacket(GGAuctionShopViewPacket&& from) noexcept
    : GGAuctionShopViewPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopViewPacket& operator=(const GGAuctionShopViewPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopViewPacket& operator=(GGAuctionShopViewPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopViewPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopViewPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopViewPacket*>(
               &_GGAuctionShopViewPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GGAuctionShopViewPacket& a, GGAuctionShopViewPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopViewPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopViewPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopViewPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopViewPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopViewPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopViewPacket& from) {
    GGAuctionShopViewPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopViewPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopViewPacket";
  }
  protected:
  explicit GGAuctionShopViewPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 owner_id = 2;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopViewPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    uint32_t owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopViewCancelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopViewCancelPacket) */ {
 public:
  inline GGAuctionShopViewCancelPacket() : GGAuctionShopViewCancelPacket(nullptr) {}
  ~GGAuctionShopViewCancelPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopViewCancelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopViewCancelPacket(const GGAuctionShopViewCancelPacket& from);
  GGAuctionShopViewCancelPacket(GGAuctionShopViewCancelPacket&& from) noexcept
    : GGAuctionShopViewCancelPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopViewCancelPacket& operator=(const GGAuctionShopViewCancelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopViewCancelPacket& operator=(GGAuctionShopViewCancelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopViewCancelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopViewCancelPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopViewCancelPacket*>(
               &_GGAuctionShopViewCancelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GGAuctionShopViewCancelPacket& a, GGAuctionShopViewCancelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopViewCancelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopViewCancelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopViewCancelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopViewCancelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopViewCancelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopViewCancelPacket& from) {
    GGAuctionShopViewCancelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopViewCancelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopViewCancelPacket";
  }
  protected:
  explicit GGAuctionShopViewCancelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopViewCancelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopRequestHistoryPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopRequestHistoryPacket) */ {
 public:
  inline GGAuctionShopRequestHistoryPacket() : GGAuctionShopRequestHistoryPacket(nullptr) {}
  ~GGAuctionShopRequestHistoryPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopRequestHistoryPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopRequestHistoryPacket(const GGAuctionShopRequestHistoryPacket& from);
  GGAuctionShopRequestHistoryPacket(GGAuctionShopRequestHistoryPacket&& from) noexcept
    : GGAuctionShopRequestHistoryPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopRequestHistoryPacket& operator=(const GGAuctionShopRequestHistoryPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopRequestHistoryPacket& operator=(GGAuctionShopRequestHistoryPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopRequestHistoryPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopRequestHistoryPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopRequestHistoryPacket*>(
               &_GGAuctionShopRequestHistoryPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GGAuctionShopRequestHistoryPacket& a, GGAuctionShopRequestHistoryPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopRequestHistoryPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopRequestHistoryPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopRequestHistoryPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopRequestHistoryPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopRequestHistoryPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopRequestHistoryPacket& from) {
    GGAuctionShopRequestHistoryPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopRequestHistoryPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopRequestHistoryPacket";
  }
  protected:
  explicit GGAuctionShopRequestHistoryPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopRequestHistoryPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopRenewPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopRenewPacket) */ {
 public:
  inline GGAuctionShopRenewPacket() : GGAuctionShopRenewPacket(nullptr) {}
  ~GGAuctionShopRenewPacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopRenewPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopRenewPacket(const GGAuctionShopRenewPacket& from);
  GGAuctionShopRenewPacket(GGAuctionShopRenewPacket&& from) noexcept
    : GGAuctionShopRenewPacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopRenewPacket& operator=(const GGAuctionShopRenewPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopRenewPacket& operator=(GGAuctionShopRenewPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopRenewPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopRenewPacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopRenewPacket*>(
               &_GGAuctionShopRenewPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GGAuctionShopRenewPacket& a, GGAuctionShopRenewPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopRenewPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopRenewPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopRenewPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopRenewPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopRenewPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopRenewPacket& from) {
    GGAuctionShopRenewPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopRenewPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopRenewPacket";
  }
  protected:
  explicit GGAuctionShopRenewPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 timeout = 2;
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopRenewPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    uint32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionShopClosePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionShopClosePacket) */ {
 public:
  inline GGAuctionShopClosePacket() : GGAuctionShopClosePacket(nullptr) {}
  ~GGAuctionShopClosePacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionShopClosePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionShopClosePacket(const GGAuctionShopClosePacket& from);
  GGAuctionShopClosePacket(GGAuctionShopClosePacket&& from) noexcept
    : GGAuctionShopClosePacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionShopClosePacket& operator=(const GGAuctionShopClosePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionShopClosePacket& operator=(GGAuctionShopClosePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionShopClosePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionShopClosePacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionShopClosePacket*>(
               &_GGAuctionShopClosePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GGAuctionShopClosePacket& a, GGAuctionShopClosePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionShopClosePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionShopClosePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionShopClosePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionShopClosePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionShopClosePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionShopClosePacket& from) {
    GGAuctionShopClosePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionShopClosePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionShopClosePacket";
  }
  protected:
  explicit GGAuctionShopClosePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMapIndexFieldNumber = 2,
    kChannelFieldNumber = 3,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionShopClosePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    uint32_t map_index_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGAuctionRequestAveragePricePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGAuctionRequestAveragePricePacket) */ {
 public:
  inline GGAuctionRequestAveragePricePacket() : GGAuctionRequestAveragePricePacket(nullptr) {}
  ~GGAuctionRequestAveragePricePacket() override;
  explicit PROTOBUF_CONSTEXPR GGAuctionRequestAveragePricePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGAuctionRequestAveragePricePacket(const GGAuctionRequestAveragePricePacket& from);
  GGAuctionRequestAveragePricePacket(GGAuctionRequestAveragePricePacket&& from) noexcept
    : GGAuctionRequestAveragePricePacket() {
    *this = ::std::move(from);
  }

  inline GGAuctionRequestAveragePricePacket& operator=(const GGAuctionRequestAveragePricePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGAuctionRequestAveragePricePacket& operator=(GGAuctionRequestAveragePricePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGAuctionRequestAveragePricePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGAuctionRequestAveragePricePacket* internal_default_instance() {
    return reinterpret_cast<const GGAuctionRequestAveragePricePacket*>(
               &_GGAuctionRequestAveragePricePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GGAuctionRequestAveragePricePacket& a, GGAuctionRequestAveragePricePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGAuctionRequestAveragePricePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGAuctionRequestAveragePricePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGAuctionRequestAveragePricePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGAuctionRequestAveragePricePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGAuctionRequestAveragePricePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGAuctionRequestAveragePricePacket& from) {
    GGAuctionRequestAveragePricePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGAuctionRequestAveragePricePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGAuctionRequestAveragePricePacket";
  }
  protected:
  explicit GGAuctionRequestAveragePricePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRequestorFieldNumber = 2,
    kVnumFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 requestor = 2;
  void clear_requestor();
  uint32_t requestor() const;
  void set_requestor(uint32_t value);
  private:
  uint32_t _internal_requestor() const;
  void _internal_set_requestor(uint32_t value);
  public:

  // uint32 vnum = 3;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 4;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGAuctionRequestAveragePricePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    uint32_t requestor_;
    uint32_t vnum_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerOpenRegistrationPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerOpenRegistrationPacket) */ {
 public:
  inline GGEventManagerOpenRegistrationPacket() : GGEventManagerOpenRegistrationPacket(nullptr) {}
  ~GGEventManagerOpenRegistrationPacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerOpenRegistrationPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerOpenRegistrationPacket(const GGEventManagerOpenRegistrationPacket& from);
  GGEventManagerOpenRegistrationPacket(GGEventManagerOpenRegistrationPacket&& from) noexcept
    : GGEventManagerOpenRegistrationPacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerOpenRegistrationPacket& operator=(const GGEventManagerOpenRegistrationPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerOpenRegistrationPacket& operator=(GGEventManagerOpenRegistrationPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerOpenRegistrationPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerOpenRegistrationPacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerOpenRegistrationPacket*>(
               &_GGEventManagerOpenRegistrationPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GGEventManagerOpenRegistrationPacket& a, GGEventManagerOpenRegistrationPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerOpenRegistrationPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerOpenRegistrationPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerOpenRegistrationPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerOpenRegistrationPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerOpenRegistrationPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerOpenRegistrationPacket& from) {
    GGEventManagerOpenRegistrationPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerOpenRegistrationPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerOpenRegistrationPacket";
  }
  protected:
  explicit GGEventManagerOpenRegistrationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIndexFieldNumber = 1,
  };
  // uint32 event_index = 1;
  void clear_event_index();
  uint32_t event_index() const;
  void set_event_index(uint32_t value);
  private:
  uint32_t _internal_event_index() const;
  void _internal_set_event_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGEventManagerOpenRegistrationPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t event_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerCloseRegistrationPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerCloseRegistrationPacket) */ {
 public:
  inline GGEventManagerCloseRegistrationPacket() : GGEventManagerCloseRegistrationPacket(nullptr) {}
  ~GGEventManagerCloseRegistrationPacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerCloseRegistrationPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerCloseRegistrationPacket(const GGEventManagerCloseRegistrationPacket& from);
  GGEventManagerCloseRegistrationPacket(GGEventManagerCloseRegistrationPacket&& from) noexcept
    : GGEventManagerCloseRegistrationPacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerCloseRegistrationPacket& operator=(const GGEventManagerCloseRegistrationPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerCloseRegistrationPacket& operator=(GGEventManagerCloseRegistrationPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerCloseRegistrationPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerCloseRegistrationPacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerCloseRegistrationPacket*>(
               &_GGEventManagerCloseRegistrationPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GGEventManagerCloseRegistrationPacket& a, GGEventManagerCloseRegistrationPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerCloseRegistrationPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerCloseRegistrationPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerCloseRegistrationPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerCloseRegistrationPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerCloseRegistrationPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerCloseRegistrationPacket& from) {
    GGEventManagerCloseRegistrationPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerCloseRegistrationPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerCloseRegistrationPacket";
  }
  protected:
  explicit GGEventManagerCloseRegistrationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearEventIndexFieldNumber = 1,
  };
  // bool clear_event_index = 1;
  void clear_clear_event_index();
  bool clear_event_index() const;
  void set_clear_event_index(bool value);
  private:
  bool _internal_clear_event_index() const;
  void _internal_set_clear_event_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGEventManagerCloseRegistrationPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool clear_event_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerIgnorePlayerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerIgnorePlayerPacket) */ {
 public:
  inline GGEventManagerIgnorePlayerPacket() : GGEventManagerIgnorePlayerPacket(nullptr) {}
  ~GGEventManagerIgnorePlayerPacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerIgnorePlayerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerIgnorePlayerPacket(const GGEventManagerIgnorePlayerPacket& from);
  GGEventManagerIgnorePlayerPacket(GGEventManagerIgnorePlayerPacket&& from) noexcept
    : GGEventManagerIgnorePlayerPacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerIgnorePlayerPacket& operator=(const GGEventManagerIgnorePlayerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerIgnorePlayerPacket& operator=(GGEventManagerIgnorePlayerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerIgnorePlayerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerIgnorePlayerPacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerIgnorePlayerPacket*>(
               &_GGEventManagerIgnorePlayerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GGEventManagerIgnorePlayerPacket& a, GGEventManagerIgnorePlayerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerIgnorePlayerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerIgnorePlayerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerIgnorePlayerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerIgnorePlayerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerIgnorePlayerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerIgnorePlayerPacket& from) {
    GGEventManagerIgnorePlayerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerIgnorePlayerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerIgnorePlayerPacket";
  }
  protected:
  explicit GGEventManagerIgnorePlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGEventManagerIgnorePlayerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerOpenAnnouncementPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerOpenAnnouncementPacket) */ {
 public:
  inline GGEventManagerOpenAnnouncementPacket() : GGEventManagerOpenAnnouncementPacket(nullptr) {}
  ~GGEventManagerOpenAnnouncementPacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerOpenAnnouncementPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerOpenAnnouncementPacket(const GGEventManagerOpenAnnouncementPacket& from);
  GGEventManagerOpenAnnouncementPacket(GGEventManagerOpenAnnouncementPacket&& from) noexcept
    : GGEventManagerOpenAnnouncementPacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerOpenAnnouncementPacket& operator=(const GGEventManagerOpenAnnouncementPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerOpenAnnouncementPacket& operator=(GGEventManagerOpenAnnouncementPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerOpenAnnouncementPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerOpenAnnouncementPacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerOpenAnnouncementPacket*>(
               &_GGEventManagerOpenAnnouncementPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GGEventManagerOpenAnnouncementPacket& a, GGEventManagerOpenAnnouncementPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerOpenAnnouncementPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerOpenAnnouncementPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerOpenAnnouncementPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerOpenAnnouncementPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerOpenAnnouncementPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerOpenAnnouncementPacket& from) {
    GGEventManagerOpenAnnouncementPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerOpenAnnouncementPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerOpenAnnouncementPacket";
  }
  protected:
  explicit GGEventManagerOpenAnnouncementPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTmStampFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 tm_stamp = 2;
  void clear_tm_stamp();
  uint32_t tm_stamp() const;
  void set_tm_stamp(uint32_t value);
  private:
  uint32_t _internal_tm_stamp() const;
  void _internal_set_tm_stamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGEventManagerOpenAnnouncementPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t tm_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerTagTeamRegisterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerTagTeamRegisterPacket) */ {
 public:
  inline GGEventManagerTagTeamRegisterPacket() : GGEventManagerTagTeamRegisterPacket(nullptr) {}
  ~GGEventManagerTagTeamRegisterPacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerTagTeamRegisterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerTagTeamRegisterPacket(const GGEventManagerTagTeamRegisterPacket& from);
  GGEventManagerTagTeamRegisterPacket(GGEventManagerTagTeamRegisterPacket&& from) noexcept
    : GGEventManagerTagTeamRegisterPacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerTagTeamRegisterPacket& operator=(const GGEventManagerTagTeamRegisterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerTagTeamRegisterPacket& operator=(GGEventManagerTagTeamRegisterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerTagTeamRegisterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerTagTeamRegisterPacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerTagTeamRegisterPacket*>(
               &_GGEventManagerTagTeamRegisterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GGEventManagerTagTeamRegisterPacket& a, GGEventManagerTagTeamRegisterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerTagTeamRegisterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerTagTeamRegisterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerTagTeamRegisterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerTagTeamRegisterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerTagTeamRegisterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerTagTeamRegisterPacket& from) {
    GGEventManagerTagTeamRegisterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerTagTeamRegisterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerTagTeamRegisterPacket";
  }
  protected:
  explicit GGEventManagerTagTeamRegisterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kGroupidxFieldNumber = 3,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // uint32 groupidx = 3;
  void clear_groupidx();
  uint32_t groupidx() const;
  void set_groupidx(uint32_t value);
  private:
  uint32_t _internal_groupidx() const;
  void _internal_set_groupidx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGEventManagerTagTeamRegisterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    uint32_t groupidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerTagTeamUnregisterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerTagTeamUnregisterPacket) */ {
 public:
  inline GGEventManagerTagTeamUnregisterPacket() : GGEventManagerTagTeamUnregisterPacket(nullptr) {}
  ~GGEventManagerTagTeamUnregisterPacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerTagTeamUnregisterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerTagTeamUnregisterPacket(const GGEventManagerTagTeamUnregisterPacket& from);
  GGEventManagerTagTeamUnregisterPacket(GGEventManagerTagTeamUnregisterPacket&& from) noexcept
    : GGEventManagerTagTeamUnregisterPacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerTagTeamUnregisterPacket& operator=(const GGEventManagerTagTeamUnregisterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerTagTeamUnregisterPacket& operator=(GGEventManagerTagTeamUnregisterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerTagTeamUnregisterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerTagTeamUnregisterPacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerTagTeamUnregisterPacket*>(
               &_GGEventManagerTagTeamUnregisterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GGEventManagerTagTeamUnregisterPacket& a, GGEventManagerTagTeamUnregisterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerTagTeamUnregisterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerTagTeamUnregisterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerTagTeamUnregisterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerTagTeamUnregisterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerTagTeamUnregisterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerTagTeamUnregisterPacket& from) {
    GGEventManagerTagTeamUnregisterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerTagTeamUnregisterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerTagTeamUnregisterPacket";
  }
  protected:
  explicit GGEventManagerTagTeamUnregisterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kGroupidxFieldNumber = 3,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // uint32 groupidx = 3;
  void clear_groupidx();
  uint32_t groupidx() const;
  void set_groupidx(uint32_t value);
  private:
  uint32_t _internal_groupidx() const;
  void _internal_set_groupidx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGEventManagerTagTeamUnregisterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    uint32_t groupidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGEventManagerTagTeamCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGEventManagerTagTeamCreatePacket) */ {
 public:
  inline GGEventManagerTagTeamCreatePacket() : GGEventManagerTagTeamCreatePacket(nullptr) {}
  ~GGEventManagerTagTeamCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR GGEventManagerTagTeamCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGEventManagerTagTeamCreatePacket(const GGEventManagerTagTeamCreatePacket& from);
  GGEventManagerTagTeamCreatePacket(GGEventManagerTagTeamCreatePacket&& from) noexcept
    : GGEventManagerTagTeamCreatePacket() {
    *this = ::std::move(from);
  }

  inline GGEventManagerTagTeamCreatePacket& operator=(const GGEventManagerTagTeamCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGEventManagerTagTeamCreatePacket& operator=(GGEventManagerTagTeamCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGEventManagerTagTeamCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGEventManagerTagTeamCreatePacket* internal_default_instance() {
    return reinterpret_cast<const GGEventManagerTagTeamCreatePacket*>(
               &_GGEventManagerTagTeamCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GGEventManagerTagTeamCreatePacket& a, GGEventManagerTagTeamCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGEventManagerTagTeamCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGEventManagerTagTeamCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGEventManagerTagTeamCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGEventManagerTagTeamCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGEventManagerTagTeamCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGEventManagerTagTeamCreatePacket& from) {
    GGEventManagerTagTeamCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGEventManagerTagTeamCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGEventManagerTagTeamCreatePacket";
  }
  protected:
  explicit GGEventManagerTagTeamCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
  };
  // repeated .network.TEventManagerTagTeam teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::network::TEventManagerTagTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEventManagerTagTeam >*
      mutable_teams();
  private:
  const ::network::TEventManagerTagTeam& _internal_teams(int index) const;
  ::network::TEventManagerTagTeam* _internal_add_teams();
  public:
  const ::network::TEventManagerTagTeam& teams(int index) const;
  ::network::TEventManagerTagTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEventManagerTagTeam >&
      teams() const;

  // @@protoc_insertion_point(class_scope:network.GGEventManagerTagTeamCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEventManagerTagTeam > teams_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGGuildChatPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGGuildChatPacket) */ {
 public:
  inline GGGuildChatPacket() : GGGuildChatPacket(nullptr) {}
  ~GGGuildChatPacket() override;
  explicit PROTOBUF_CONSTEXPR GGGuildChatPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGGuildChatPacket(const GGGuildChatPacket& from);
  GGGuildChatPacket(GGGuildChatPacket&& from) noexcept
    : GGGuildChatPacket() {
    *this = ::std::move(from);
  }

  inline GGGuildChatPacket& operator=(const GGGuildChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGGuildChatPacket& operator=(GGGuildChatPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGGuildChatPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGGuildChatPacket* internal_default_instance() {
    return reinterpret_cast<const GGGuildChatPacket*>(
               &_GGGuildChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GGGuildChatPacket& a, GGGuildChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGGuildChatPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGGuildChatPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGGuildChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGGuildChatPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGGuildChatPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGGuildChatPacket& from) {
    GGGuildChatPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGGuildChatPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGGuildChatPacket";
  }
  protected:
  explicit GGGuildChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGGuildChatPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGGuildSetMemberCountBonusPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGGuildSetMemberCountBonusPacket) */ {
 public:
  inline GGGuildSetMemberCountBonusPacket() : GGGuildSetMemberCountBonusPacket(nullptr) {}
  ~GGGuildSetMemberCountBonusPacket() override;
  explicit PROTOBUF_CONSTEXPR GGGuildSetMemberCountBonusPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGGuildSetMemberCountBonusPacket(const GGGuildSetMemberCountBonusPacket& from);
  GGGuildSetMemberCountBonusPacket(GGGuildSetMemberCountBonusPacket&& from) noexcept
    : GGGuildSetMemberCountBonusPacket() {
    *this = ::std::move(from);
  }

  inline GGGuildSetMemberCountBonusPacket& operator=(const GGGuildSetMemberCountBonusPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGGuildSetMemberCountBonusPacket& operator=(GGGuildSetMemberCountBonusPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGGuildSetMemberCountBonusPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGGuildSetMemberCountBonusPacket* internal_default_instance() {
    return reinterpret_cast<const GGGuildSetMemberCountBonusPacket*>(
               &_GGGuildSetMemberCountBonusPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GGGuildSetMemberCountBonusPacket& a, GGGuildSetMemberCountBonusPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGGuildSetMemberCountBonusPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGGuildSetMemberCountBonusPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGGuildSetMemberCountBonusPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGGuildSetMemberCountBonusPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGGuildSetMemberCountBonusPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGGuildSetMemberCountBonusPacket& from) {
    GGGuildSetMemberCountBonusPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGGuildSetMemberCountBonusPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGGuildSetMemberCountBonusPacket";
  }
  protected:
  explicit GGGuildSetMemberCountBonusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kBonusFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 bonus = 2;
  void clear_bonus();
  int32_t bonus() const;
  void set_bonus(int32_t value);
  private:
  int32_t _internal_bonus() const;
  void _internal_set_bonus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGGuildSetMemberCountBonusPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t bonus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGGuildWarZoneMapIndexPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGGuildWarZoneMapIndexPacket) */ {
 public:
  inline GGGuildWarZoneMapIndexPacket() : GGGuildWarZoneMapIndexPacket(nullptr) {}
  ~GGGuildWarZoneMapIndexPacket() override;
  explicit PROTOBUF_CONSTEXPR GGGuildWarZoneMapIndexPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGGuildWarZoneMapIndexPacket(const GGGuildWarZoneMapIndexPacket& from);
  GGGuildWarZoneMapIndexPacket(GGGuildWarZoneMapIndexPacket&& from) noexcept
    : GGGuildWarZoneMapIndexPacket() {
    *this = ::std::move(from);
  }

  inline GGGuildWarZoneMapIndexPacket& operator=(const GGGuildWarZoneMapIndexPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGGuildWarZoneMapIndexPacket& operator=(GGGuildWarZoneMapIndexPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGGuildWarZoneMapIndexPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGGuildWarZoneMapIndexPacket* internal_default_instance() {
    return reinterpret_cast<const GGGuildWarZoneMapIndexPacket*>(
               &_GGGuildWarZoneMapIndexPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GGGuildWarZoneMapIndexPacket& a, GGGuildWarZoneMapIndexPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGGuildWarZoneMapIndexPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGGuildWarZoneMapIndexPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGGuildWarZoneMapIndexPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGGuildWarZoneMapIndexPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGGuildWarZoneMapIndexPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGGuildWarZoneMapIndexPacket& from) {
    GGGuildWarZoneMapIndexPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGGuildWarZoneMapIndexPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGGuildWarZoneMapIndexPacket";
  }
  protected:
  explicit GGGuildWarZoneMapIndexPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildId1FieldNumber = 1,
    kGuildId2FieldNumber = 2,
    kMapIndexFieldNumber = 3,
  };
  // uint32 guild_id1 = 1;
  void clear_guild_id1();
  uint32_t guild_id1() const;
  void set_guild_id1(uint32_t value);
  private:
  uint32_t _internal_guild_id1() const;
  void _internal_set_guild_id1(uint32_t value);
  public:

  // uint32 guild_id2 = 2;
  void clear_guild_id2();
  uint32_t guild_id2() const;
  void set_guild_id2(uint32_t value);
  private:
  uint32_t _internal_guild_id2() const;
  void _internal_set_guild_id2(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGGuildWarZoneMapIndexPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id1_;
    uint32_t guild_id2_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GGGuildChangeNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GGGuildChangeNamePacket) */ {
 public:
  inline GGGuildChangeNamePacket() : GGGuildChangeNamePacket(nullptr) {}
  ~GGGuildChangeNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GGGuildChangeNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GGGuildChangeNamePacket(const GGGuildChangeNamePacket& from);
  GGGuildChangeNamePacket(GGGuildChangeNamePacket&& from) noexcept
    : GGGuildChangeNamePacket() {
    *this = ::std::move(from);
  }

  inline GGGuildChangeNamePacket& operator=(const GGGuildChangeNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GGGuildChangeNamePacket& operator=(GGGuildChangeNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GGGuildChangeNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GGGuildChangeNamePacket* internal_default_instance() {
    return reinterpret_cast<const GGGuildChangeNamePacket*>(
               &_GGGuildChangeNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GGGuildChangeNamePacket& a, GGGuildChangeNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GGGuildChangeNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GGGuildChangeNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GGGuildChangeNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GGGuildChangeNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GGGuildChangeNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GGGuildChangeNamePacket& from) {
    GGGuildChangeNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GGGuildChangeNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GGGuildChangeNamePacket";
  }
  protected:
  explicit GGGuildChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GGGuildChangeNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gg_5fpackets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GGSetupPacket

// uint32 port = 1;
inline void GGSetupPacket::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t GGSetupPacket::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t GGSetupPacket::port() const {
  // @@protoc_insertion_point(field_get:network.GGSetupPacket.port)
  return _internal_port();
}
inline void GGSetupPacket::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void GGSetupPacket::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.GGSetupPacket.port)
}

// uint32 listen_port = 2;
inline void GGSetupPacket::clear_listen_port() {
  _impl_.listen_port_ = 0u;
}
inline uint32_t GGSetupPacket::_internal_listen_port() const {
  return _impl_.listen_port_;
}
inline uint32_t GGSetupPacket::listen_port() const {
  // @@protoc_insertion_point(field_get:network.GGSetupPacket.listen_port)
  return _internal_listen_port();
}
inline void GGSetupPacket::_internal_set_listen_port(uint32_t value) {
  
  _impl_.listen_port_ = value;
}
inline void GGSetupPacket::set_listen_port(uint32_t value) {
  _internal_set_listen_port(value);
  // @@protoc_insertion_point(field_set:network.GGSetupPacket.listen_port)
}

// uint32 channel = 3;
inline void GGSetupPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGSetupPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGSetupPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGSetupPacket.channel)
  return _internal_channel();
}
inline void GGSetupPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGSetupPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGSetupPacket.channel)
}

// bool processor_core = 4;
inline void GGSetupPacket::clear_processor_core() {
  _impl_.processor_core_ = false;
}
inline bool GGSetupPacket::_internal_processor_core() const {
  return _impl_.processor_core_;
}
inline bool GGSetupPacket::processor_core() const {
  // @@protoc_insertion_point(field_get:network.GGSetupPacket.processor_core)
  return _internal_processor_core();
}
inline void GGSetupPacket::_internal_set_processor_core(bool value) {
  
  _impl_.processor_core_ = value;
}
inline void GGSetupPacket::set_processor_core(bool value) {
  _internal_set_processor_core(value);
  // @@protoc_insertion_point(field_set:network.GGSetupPacket.processor_core)
}

// -------------------------------------------------------------------

// GGLoginPacket

// bytes name = 1;
inline void GGLoginPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGLoginPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGLoginPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.name)
}
inline std::string* GGLoginPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGLoginPacket.name)
  return _s;
}
inline const std::string& GGLoginPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGLoginPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGLoginPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGLoginPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGLoginPacket.name)
  return _impl_.name_.Release();
}
inline void GGLoginPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGLoginPacket.name)
}

// uint32 pid = 2;
inline void GGLoginPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGLoginPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGLoginPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.pid)
  return _internal_pid();
}
inline void GGLoginPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGLoginPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.pid)
}

// uint32 empire = 3;
inline void GGLoginPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GGLoginPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GGLoginPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.empire)
  return _internal_empire();
}
inline void GGLoginPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GGLoginPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.empire)
}

// uint32 map_index = 4;
inline void GGLoginPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGLoginPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGLoginPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.map_index)
  return _internal_map_index();
}
inline void GGLoginPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGLoginPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.map_index)
}

// uint32 channel = 5;
inline void GGLoginPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGLoginPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGLoginPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.channel)
  return _internal_channel();
}
inline void GGLoginPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGLoginPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.channel)
}

// uint32 language = 6;
inline void GGLoginPacket::clear_language() {
  _impl_.language_ = 0u;
}
inline uint32_t GGLoginPacket::_internal_language() const {
  return _impl_.language_;
}
inline uint32_t GGLoginPacket::language() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.language)
  return _internal_language();
}
inline void GGLoginPacket::_internal_set_language(uint32_t value) {
  
  _impl_.language_ = value;
}
inline void GGLoginPacket::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.language)
}

// bool is_in_dungeon = 7;
inline void GGLoginPacket::clear_is_in_dungeon() {
  _impl_.is_in_dungeon_ = false;
}
inline bool GGLoginPacket::_internal_is_in_dungeon() const {
  return _impl_.is_in_dungeon_;
}
inline bool GGLoginPacket::is_in_dungeon() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.is_in_dungeon)
  return _internal_is_in_dungeon();
}
inline void GGLoginPacket::_internal_set_is_in_dungeon(bool value) {
  
  _impl_.is_in_dungeon_ = value;
}
inline void GGLoginPacket::set_is_in_dungeon(bool value) {
  _internal_set_is_in_dungeon(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.is_in_dungeon)
}

// uint32 race = 8;
inline void GGLoginPacket::clear_race() {
  _impl_.race_ = 0u;
}
inline uint32_t GGLoginPacket::_internal_race() const {
  return _impl_.race_;
}
inline uint32_t GGLoginPacket::race() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.race)
  return _internal_race();
}
inline void GGLoginPacket::_internal_set_race(uint32_t value) {
  
  _impl_.race_ = value;
}
inline void GGLoginPacket::set_race(uint32_t value) {
  _internal_set_race(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.race)
}

// bool temp_login = 9;
inline void GGLoginPacket::clear_temp_login() {
  _impl_.temp_login_ = false;
}
inline bool GGLoginPacket::_internal_temp_login() const {
  return _impl_.temp_login_;
}
inline bool GGLoginPacket::temp_login() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPacket.temp_login)
  return _internal_temp_login();
}
inline void GGLoginPacket::_internal_set_temp_login(bool value) {
  
  _impl_.temp_login_ = value;
}
inline void GGLoginPacket::set_temp_login(bool value) {
  _internal_set_temp_login(value);
  // @@protoc_insertion_point(field_set:network.GGLoginPacket.temp_login)
}

// -------------------------------------------------------------------

// GGLogoutPacket

// bytes name = 1;
inline void GGLogoutPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGLogoutPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGLogoutPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGLogoutPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGLogoutPacket.name)
}
inline std::string* GGLogoutPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGLogoutPacket.name)
  return _s;
}
inline const std::string& GGLogoutPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGLogoutPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGLogoutPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGLogoutPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGLogoutPacket.name)
  return _impl_.name_.Release();
}
inline void GGLogoutPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGLogoutPacket.name)
}

// uint32 pid = 2;
inline void GGLogoutPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGLogoutPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGLogoutPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGLogoutPacket.pid)
  return _internal_pid();
}
inline void GGLogoutPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGLogoutPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGLogoutPacket.pid)
}

// -------------------------------------------------------------------

// GGRelayPacket

// bytes name = 1;
inline void GGRelayPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGRelayPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGRelayPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGRelayPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGRelayPacket.name)
}
inline std::string* GGRelayPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGRelayPacket.name)
  return _s;
}
inline const std::string& GGRelayPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGRelayPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGRelayPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGRelayPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGRelayPacket.name)
  return _impl_.name_.Release();
}
inline void GGRelayPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGRelayPacket.name)
}

// uint32 pid = 2;
inline void GGRelayPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGRelayPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGRelayPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGRelayPacket.pid)
  return _internal_pid();
}
inline void GGRelayPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGRelayPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGRelayPacket.pid)
}

// uint32 relay_header = 3;
inline void GGRelayPacket::clear_relay_header() {
  _impl_.relay_header_ = 0u;
}
inline uint32_t GGRelayPacket::_internal_relay_header() const {
  return _impl_.relay_header_;
}
inline uint32_t GGRelayPacket::relay_header() const {
  // @@protoc_insertion_point(field_get:network.GGRelayPacket.relay_header)
  return _internal_relay_header();
}
inline void GGRelayPacket::_internal_set_relay_header(uint32_t value) {
  
  _impl_.relay_header_ = value;
}
inline void GGRelayPacket::set_relay_header(uint32_t value) {
  _internal_set_relay_header(value);
  // @@protoc_insertion_point(field_set:network.GGRelayPacket.relay_header)
}

// bytes relay = 4;
inline void GGRelayPacket::clear_relay() {
  _impl_.relay_.ClearToEmpty();
}
inline const std::string& GGRelayPacket::relay() const {
  // @@protoc_insertion_point(field_get:network.GGRelayPacket.relay)
  return _internal_relay();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGRelayPacket::set_relay(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relay_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGRelayPacket.relay)
}
inline std::string* GGRelayPacket::mutable_relay() {
  std::string* _s = _internal_mutable_relay();
  // @@protoc_insertion_point(field_mutable:network.GGRelayPacket.relay)
  return _s;
}
inline const std::string& GGRelayPacket::_internal_relay() const {
  return _impl_.relay_.Get();
}
inline void GGRelayPacket::_internal_set_relay(const std::string& value) {
  
  _impl_.relay_.Set(value, GetArenaForAllocation());
}
inline std::string* GGRelayPacket::_internal_mutable_relay() {
  
  return _impl_.relay_.Mutable(GetArenaForAllocation());
}
inline std::string* GGRelayPacket::release_relay() {
  // @@protoc_insertion_point(field_release:network.GGRelayPacket.relay)
  return _impl_.relay_.Release();
}
inline void GGRelayPacket::set_allocated_relay(std::string* relay) {
  if (relay != nullptr) {
    
  } else {
    
  }
  _impl_.relay_.SetAllocated(relay, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relay_.IsDefault()) {
    _impl_.relay_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGRelayPacket.relay)
}

// -------------------------------------------------------------------

// GGPlayerPacket

// sint32 language = 1;
inline void GGPlayerPacket::clear_language() {
  _impl_.language_ = 0;
}
inline int32_t GGPlayerPacket::_internal_language() const {
  return _impl_.language_;
}
inline int32_t GGPlayerPacket::language() const {
  // @@protoc_insertion_point(field_get:network.GGPlayerPacket.language)
  return _internal_language();
}
inline void GGPlayerPacket::_internal_set_language(int32_t value) {
  
  _impl_.language_ = value;
}
inline void GGPlayerPacket::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.GGPlayerPacket.language)
}

// uint32 empire = 2;
inline void GGPlayerPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GGPlayerPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GGPlayerPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GGPlayerPacket.empire)
  return _internal_empire();
}
inline void GGPlayerPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GGPlayerPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GGPlayerPacket.empire)
}

// uint32 pid = 3;
inline void GGPlayerPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGPlayerPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGPlayerPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGPlayerPacket.pid)
  return _internal_pid();
}
inline void GGPlayerPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGPlayerPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGPlayerPacket.pid)
}

// uint32 relay_header = 4;
inline void GGPlayerPacket::clear_relay_header() {
  _impl_.relay_header_ = 0u;
}
inline uint32_t GGPlayerPacket::_internal_relay_header() const {
  return _impl_.relay_header_;
}
inline uint32_t GGPlayerPacket::relay_header() const {
  // @@protoc_insertion_point(field_get:network.GGPlayerPacket.relay_header)
  return _internal_relay_header();
}
inline void GGPlayerPacket::_internal_set_relay_header(uint32_t value) {
  
  _impl_.relay_header_ = value;
}
inline void GGPlayerPacket::set_relay_header(uint32_t value) {
  _internal_set_relay_header(value);
  // @@protoc_insertion_point(field_set:network.GGPlayerPacket.relay_header)
}

// bytes relay = 5;
inline void GGPlayerPacket::clear_relay() {
  _impl_.relay_.ClearToEmpty();
}
inline const std::string& GGPlayerPacket::relay() const {
  // @@protoc_insertion_point(field_get:network.GGPlayerPacket.relay)
  return _internal_relay();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGPlayerPacket::set_relay(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relay_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGPlayerPacket.relay)
}
inline std::string* GGPlayerPacket::mutable_relay() {
  std::string* _s = _internal_mutable_relay();
  // @@protoc_insertion_point(field_mutable:network.GGPlayerPacket.relay)
  return _s;
}
inline const std::string& GGPlayerPacket::_internal_relay() const {
  return _impl_.relay_.Get();
}
inline void GGPlayerPacket::_internal_set_relay(const std::string& value) {
  
  _impl_.relay_.Set(value, GetArenaForAllocation());
}
inline std::string* GGPlayerPacket::_internal_mutable_relay() {
  
  return _impl_.relay_.Mutable(GetArenaForAllocation());
}
inline std::string* GGPlayerPacket::release_relay() {
  // @@protoc_insertion_point(field_release:network.GGPlayerPacket.relay)
  return _impl_.relay_.Release();
}
inline void GGPlayerPacket::set_allocated_relay(std::string* relay) {
  if (relay != nullptr) {
    
  } else {
    
  }
  _impl_.relay_.SetAllocated(relay, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relay_.IsDefault()) {
    _impl_.relay_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGPlayerPacket.relay)
}

// -------------------------------------------------------------------

// GGDisconnectPacket

// bytes login = 1;
inline void GGDisconnectPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GGDisconnectPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GGDisconnectPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGDisconnectPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGDisconnectPacket.login)
}
inline std::string* GGDisconnectPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GGDisconnectPacket.login)
  return _s;
}
inline const std::string& GGDisconnectPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GGDisconnectPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GGDisconnectPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GGDisconnectPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GGDisconnectPacket.login)
  return _impl_.login_.Release();
}
inline void GGDisconnectPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGDisconnectPacket.login)
}

// -------------------------------------------------------------------

// GGLoginPingPacket

// bytes login = 1;
inline void GGLoginPingPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GGLoginPingPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GGLoginPingPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGLoginPingPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGLoginPingPacket.login)
}
inline std::string* GGLoginPingPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GGLoginPingPacket.login)
  return _s;
}
inline const std::string& GGLoginPingPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GGLoginPingPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GGLoginPingPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GGLoginPingPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GGLoginPingPacket.login)
  return _impl_.login_.Release();
}
inline void GGLoginPingPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGLoginPingPacket.login)
}

// -------------------------------------------------------------------

// GGGiveItemPacket

// .network.TItemData item = 1;
inline bool GGGiveItemPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GGGiveItemPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& GGGiveItemPacket::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GGGiveItemPacket::item() const {
  // @@protoc_insertion_point(field_get:network.GGGiveItemPacket.item)
  return _internal_item();
}
inline void GGGiveItemPacket::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GGGiveItemPacket.item)
}
inline ::network::TItemData* GGGiveItemPacket::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GGGiveItemPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GGGiveItemPacket.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* GGGiveItemPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* GGGiveItemPacket::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GGGiveItemPacket.item)
  return _msg;
}
inline void GGGiveItemPacket::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GGGiveItemPacket.item)
}

// bool no_refund = 2;
inline void GGGiveItemPacket::clear_no_refund() {
  _impl_.no_refund_ = false;
}
inline bool GGGiveItemPacket::_internal_no_refund() const {
  return _impl_.no_refund_;
}
inline bool GGGiveItemPacket::no_refund() const {
  // @@protoc_insertion_point(field_get:network.GGGiveItemPacket.no_refund)
  return _internal_no_refund();
}
inline void GGGiveItemPacket::_internal_set_no_refund(bool value) {
  
  _impl_.no_refund_ = value;
}
inline void GGGiveItemPacket::set_no_refund(bool value) {
  _internal_set_no_refund(value);
  // @@protoc_insertion_point(field_set:network.GGGiveItemPacket.no_refund)
}

// -------------------------------------------------------------------

// GGGiveGoldPacket

// uint32 pid = 1;
inline void GGGiveGoldPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGGiveGoldPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGGiveGoldPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGGiveGoldPacket.pid)
  return _internal_pid();
}
inline void GGGiveGoldPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGGiveGoldPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGGiveGoldPacket.pid)
}

// int64 gold = 2;
inline void GGGiveGoldPacket::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t GGGiveGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t GGGiveGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GGGiveGoldPacket.gold)
  return _internal_gold();
}
inline void GGGiveGoldPacket::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void GGGiveGoldPacket::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GGGiveGoldPacket.gold)
}

// -------------------------------------------------------------------

// GGShoutPacket

// uint32 empire = 1;
inline void GGShoutPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GGShoutPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GGShoutPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GGShoutPacket.empire)
  return _internal_empire();
}
inline void GGShoutPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GGShoutPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GGShoutPacket.empire)
}

// bytes text = 2;
inline void GGShoutPacket::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& GGShoutPacket::text() const {
  // @@protoc_insertion_point(field_get:network.GGShoutPacket.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGShoutPacket::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGShoutPacket.text)
}
inline std::string* GGShoutPacket::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:network.GGShoutPacket.text)
  return _s;
}
inline const std::string& GGShoutPacket::_internal_text() const {
  return _impl_.text_.Get();
}
inline void GGShoutPacket::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* GGShoutPacket::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* GGShoutPacket::release_text() {
  // @@protoc_insertion_point(field_release:network.GGShoutPacket.text)
  return _impl_.text_.Release();
}
inline void GGShoutPacket::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGShoutPacket.text)
}

// -------------------------------------------------------------------

// GGNoticePacket

// bytes message = 1;
inline void GGNoticePacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GGNoticePacket::message() const {
  // @@protoc_insertion_point(field_get:network.GGNoticePacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGNoticePacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGNoticePacket.message)
}
inline std::string* GGNoticePacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GGNoticePacket.message)
  return _s;
}
inline const std::string& GGNoticePacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GGNoticePacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GGNoticePacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GGNoticePacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GGNoticePacket.message)
  return _impl_.message_.Release();
}
inline void GGNoticePacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGNoticePacket.message)
}

// bool big_font = 2;
inline void GGNoticePacket::clear_big_font() {
  _impl_.big_font_ = false;
}
inline bool GGNoticePacket::_internal_big_font() const {
  return _impl_.big_font_;
}
inline bool GGNoticePacket::big_font() const {
  // @@protoc_insertion_point(field_get:network.GGNoticePacket.big_font)
  return _internal_big_font();
}
inline void GGNoticePacket::_internal_set_big_font(bool value) {
  
  _impl_.big_font_ = value;
}
inline void GGNoticePacket::set_big_font(bool value) {
  _internal_set_big_font(value);
  // @@protoc_insertion_point(field_set:network.GGNoticePacket.big_font)
}

// int32 lang_id = 3;
inline void GGNoticePacket::clear_lang_id() {
  _impl_.lang_id_ = 0;
}
inline int32_t GGNoticePacket::_internal_lang_id() const {
  return _impl_.lang_id_;
}
inline int32_t GGNoticePacket::lang_id() const {
  // @@protoc_insertion_point(field_get:network.GGNoticePacket.lang_id)
  return _internal_lang_id();
}
inline void GGNoticePacket::_internal_set_lang_id(int32_t value) {
  
  _impl_.lang_id_ = value;
}
inline void GGNoticePacket::set_lang_id(int32_t value) {
  _internal_set_lang_id(value);
  // @@protoc_insertion_point(field_set:network.GGNoticePacket.lang_id)
}

// uint32 channel = 4;
inline void GGNoticePacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGNoticePacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGNoticePacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGNoticePacket.channel)
  return _internal_channel();
}
inline void GGNoticePacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGNoticePacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGNoticePacket.channel)
}

// uint32 empire = 5;
inline void GGNoticePacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GGNoticePacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GGNoticePacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GGNoticePacket.empire)
  return _internal_empire();
}
inline void GGNoticePacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GGNoticePacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GGNoticePacket.empire)
}

// -------------------------------------------------------------------

// GGSuccessNoticePacket

// int32 lang_id = 1;
inline void GGSuccessNoticePacket::clear_lang_id() {
  _impl_.lang_id_ = 0;
}
inline int32_t GGSuccessNoticePacket::_internal_lang_id() const {
  return _impl_.lang_id_;
}
inline int32_t GGSuccessNoticePacket::lang_id() const {
  // @@protoc_insertion_point(field_get:network.GGSuccessNoticePacket.lang_id)
  return _internal_lang_id();
}
inline void GGSuccessNoticePacket::_internal_set_lang_id(int32_t value) {
  
  _impl_.lang_id_ = value;
}
inline void GGSuccessNoticePacket::set_lang_id(int32_t value) {
  _internal_set_lang_id(value);
  // @@protoc_insertion_point(field_set:network.GGSuccessNoticePacket.lang_id)
}

// bytes message = 2;
inline void GGSuccessNoticePacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GGSuccessNoticePacket::message() const {
  // @@protoc_insertion_point(field_get:network.GGSuccessNoticePacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGSuccessNoticePacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGSuccessNoticePacket.message)
}
inline std::string* GGSuccessNoticePacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GGSuccessNoticePacket.message)
  return _s;
}
inline const std::string& GGSuccessNoticePacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GGSuccessNoticePacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GGSuccessNoticePacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GGSuccessNoticePacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GGSuccessNoticePacket.message)
  return _impl_.message_.Release();
}
inline void GGSuccessNoticePacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGSuccessNoticePacket.message)
}

// -------------------------------------------------------------------

// GGMessengerRequestPacket

// bytes requestor = 1;
inline void GGMessengerRequestPacket::clear_requestor() {
  _impl_.requestor_.ClearToEmpty();
}
inline const std::string& GGMessengerRequestPacket::requestor() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerRequestPacket.requestor)
  return _internal_requestor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerRequestPacket::set_requestor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerRequestPacket.requestor)
}
inline std::string* GGMessengerRequestPacket::mutable_requestor() {
  std::string* _s = _internal_mutable_requestor();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerRequestPacket.requestor)
  return _s;
}
inline const std::string& GGMessengerRequestPacket::_internal_requestor() const {
  return _impl_.requestor_.Get();
}
inline void GGMessengerRequestPacket::_internal_set_requestor(const std::string& value) {
  
  _impl_.requestor_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerRequestPacket::_internal_mutable_requestor() {
  
  return _impl_.requestor_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerRequestPacket::release_requestor() {
  // @@protoc_insertion_point(field_release:network.GGMessengerRequestPacket.requestor)
  return _impl_.requestor_.Release();
}
inline void GGMessengerRequestPacket::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  _impl_.requestor_.SetAllocated(requestor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestor_.IsDefault()) {
    _impl_.requestor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerRequestPacket.requestor)
}

// uint32 target_pid = 2;
inline void GGMessengerRequestPacket::clear_target_pid() {
  _impl_.target_pid_ = 0u;
}
inline uint32_t GGMessengerRequestPacket::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline uint32_t GGMessengerRequestPacket::target_pid() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerRequestPacket.target_pid)
  return _internal_target_pid();
}
inline void GGMessengerRequestPacket::_internal_set_target_pid(uint32_t value) {
  
  _impl_.target_pid_ = value;
}
inline void GGMessengerRequestPacket::set_target_pid(uint32_t value) {
  _internal_set_target_pid(value);
  // @@protoc_insertion_point(field_set:network.GGMessengerRequestPacket.target_pid)
}

// -------------------------------------------------------------------

// GGMessengerRequestFailPacket

// bytes requestor = 1;
inline void GGMessengerRequestFailPacket::clear_requestor() {
  _impl_.requestor_.ClearToEmpty();
}
inline const std::string& GGMessengerRequestFailPacket::requestor() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerRequestFailPacket.requestor)
  return _internal_requestor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerRequestFailPacket::set_requestor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerRequestFailPacket.requestor)
}
inline std::string* GGMessengerRequestFailPacket::mutable_requestor() {
  std::string* _s = _internal_mutable_requestor();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerRequestFailPacket.requestor)
  return _s;
}
inline const std::string& GGMessengerRequestFailPacket::_internal_requestor() const {
  return _impl_.requestor_.Get();
}
inline void GGMessengerRequestFailPacket::_internal_set_requestor(const std::string& value) {
  
  _impl_.requestor_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerRequestFailPacket::_internal_mutable_requestor() {
  
  return _impl_.requestor_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerRequestFailPacket::release_requestor() {
  // @@protoc_insertion_point(field_release:network.GGMessengerRequestFailPacket.requestor)
  return _impl_.requestor_.Release();
}
inline void GGMessengerRequestFailPacket::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  _impl_.requestor_.SetAllocated(requestor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestor_.IsDefault()) {
    _impl_.requestor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerRequestFailPacket.requestor)
}

// uint32 target_pid = 2;
inline void GGMessengerRequestFailPacket::clear_target_pid() {
  _impl_.target_pid_ = 0u;
}
inline uint32_t GGMessengerRequestFailPacket::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline uint32_t GGMessengerRequestFailPacket::target_pid() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerRequestFailPacket.target_pid)
  return _internal_target_pid();
}
inline void GGMessengerRequestFailPacket::_internal_set_target_pid(uint32_t value) {
  
  _impl_.target_pid_ = value;
}
inline void GGMessengerRequestFailPacket::set_target_pid(uint32_t value) {
  _internal_set_target_pid(value);
  // @@protoc_insertion_point(field_set:network.GGMessengerRequestFailPacket.target_pid)
}

// -------------------------------------------------------------------

// GGMessengerAddPacket

// bytes account = 1;
inline void GGMessengerAddPacket::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& GGMessengerAddPacket::account() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerAddPacket.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerAddPacket::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerAddPacket.account)
}
inline std::string* GGMessengerAddPacket::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerAddPacket.account)
  return _s;
}
inline const std::string& GGMessengerAddPacket::_internal_account() const {
  return _impl_.account_.Get();
}
inline void GGMessengerAddPacket::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerAddPacket::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerAddPacket::release_account() {
  // @@protoc_insertion_point(field_release:network.GGMessengerAddPacket.account)
  return _impl_.account_.Release();
}
inline void GGMessengerAddPacket::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerAddPacket.account)
}

// bytes companion = 2;
inline void GGMessengerAddPacket::clear_companion() {
  _impl_.companion_.ClearToEmpty();
}
inline const std::string& GGMessengerAddPacket::companion() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerAddPacket.companion)
  return _internal_companion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerAddPacket::set_companion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.companion_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerAddPacket.companion)
}
inline std::string* GGMessengerAddPacket::mutable_companion() {
  std::string* _s = _internal_mutable_companion();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerAddPacket.companion)
  return _s;
}
inline const std::string& GGMessengerAddPacket::_internal_companion() const {
  return _impl_.companion_.Get();
}
inline void GGMessengerAddPacket::_internal_set_companion(const std::string& value) {
  
  _impl_.companion_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerAddPacket::_internal_mutable_companion() {
  
  return _impl_.companion_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerAddPacket::release_companion() {
  // @@protoc_insertion_point(field_release:network.GGMessengerAddPacket.companion)
  return _impl_.companion_.Release();
}
inline void GGMessengerAddPacket::set_allocated_companion(std::string* companion) {
  if (companion != nullptr) {
    
  } else {
    
  }
  _impl_.companion_.SetAllocated(companion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.companion_.IsDefault()) {
    _impl_.companion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerAddPacket.companion)
}

// -------------------------------------------------------------------

// GGMessengerRemovePacket

// bytes account = 1;
inline void GGMessengerRemovePacket::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& GGMessengerRemovePacket::account() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerRemovePacket.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerRemovePacket::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerRemovePacket.account)
}
inline std::string* GGMessengerRemovePacket::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerRemovePacket.account)
  return _s;
}
inline const std::string& GGMessengerRemovePacket::_internal_account() const {
  return _impl_.account_.Get();
}
inline void GGMessengerRemovePacket::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerRemovePacket::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerRemovePacket::release_account() {
  // @@protoc_insertion_point(field_release:network.GGMessengerRemovePacket.account)
  return _impl_.account_.Release();
}
inline void GGMessengerRemovePacket::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerRemovePacket.account)
}

// bytes companion = 2;
inline void GGMessengerRemovePacket::clear_companion() {
  _impl_.companion_.ClearToEmpty();
}
inline const std::string& GGMessengerRemovePacket::companion() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerRemovePacket.companion)
  return _internal_companion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerRemovePacket::set_companion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.companion_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerRemovePacket.companion)
}
inline std::string* GGMessengerRemovePacket::mutable_companion() {
  std::string* _s = _internal_mutable_companion();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerRemovePacket.companion)
  return _s;
}
inline const std::string& GGMessengerRemovePacket::_internal_companion() const {
  return _impl_.companion_.Get();
}
inline void GGMessengerRemovePacket::_internal_set_companion(const std::string& value) {
  
  _impl_.companion_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerRemovePacket::_internal_mutable_companion() {
  
  return _impl_.companion_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerRemovePacket::release_companion() {
  // @@protoc_insertion_point(field_release:network.GGMessengerRemovePacket.companion)
  return _impl_.companion_.Release();
}
inline void GGMessengerRemovePacket::set_allocated_companion(std::string* companion) {
  if (companion != nullptr) {
    
  } else {
    
  }
  _impl_.companion_.SetAllocated(companion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.companion_.IsDefault()) {
    _impl_.companion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerRemovePacket.companion)
}

// -------------------------------------------------------------------

// GGMessengerBlockAddPacket

// bytes account = 1;
inline void GGMessengerBlockAddPacket::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& GGMessengerBlockAddPacket::account() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerBlockAddPacket.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerBlockAddPacket::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerBlockAddPacket.account)
}
inline std::string* GGMessengerBlockAddPacket::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerBlockAddPacket.account)
  return _s;
}
inline const std::string& GGMessengerBlockAddPacket::_internal_account() const {
  return _impl_.account_.Get();
}
inline void GGMessengerBlockAddPacket::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerBlockAddPacket::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerBlockAddPacket::release_account() {
  // @@protoc_insertion_point(field_release:network.GGMessengerBlockAddPacket.account)
  return _impl_.account_.Release();
}
inline void GGMessengerBlockAddPacket::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerBlockAddPacket.account)
}

// bytes companion = 2;
inline void GGMessengerBlockAddPacket::clear_companion() {
  _impl_.companion_.ClearToEmpty();
}
inline const std::string& GGMessengerBlockAddPacket::companion() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerBlockAddPacket.companion)
  return _internal_companion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerBlockAddPacket::set_companion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.companion_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerBlockAddPacket.companion)
}
inline std::string* GGMessengerBlockAddPacket::mutable_companion() {
  std::string* _s = _internal_mutable_companion();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerBlockAddPacket.companion)
  return _s;
}
inline const std::string& GGMessengerBlockAddPacket::_internal_companion() const {
  return _impl_.companion_.Get();
}
inline void GGMessengerBlockAddPacket::_internal_set_companion(const std::string& value) {
  
  _impl_.companion_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerBlockAddPacket::_internal_mutable_companion() {
  
  return _impl_.companion_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerBlockAddPacket::release_companion() {
  // @@protoc_insertion_point(field_release:network.GGMessengerBlockAddPacket.companion)
  return _impl_.companion_.Release();
}
inline void GGMessengerBlockAddPacket::set_allocated_companion(std::string* companion) {
  if (companion != nullptr) {
    
  } else {
    
  }
  _impl_.companion_.SetAllocated(companion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.companion_.IsDefault()) {
    _impl_.companion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerBlockAddPacket.companion)
}

// -------------------------------------------------------------------

// GGMessengerBlockRemovePacket

// bytes account = 1;
inline void GGMessengerBlockRemovePacket::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& GGMessengerBlockRemovePacket::account() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerBlockRemovePacket.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerBlockRemovePacket::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerBlockRemovePacket.account)
}
inline std::string* GGMessengerBlockRemovePacket::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerBlockRemovePacket.account)
  return _s;
}
inline const std::string& GGMessengerBlockRemovePacket::_internal_account() const {
  return _impl_.account_.Get();
}
inline void GGMessengerBlockRemovePacket::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerBlockRemovePacket::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerBlockRemovePacket::release_account() {
  // @@protoc_insertion_point(field_release:network.GGMessengerBlockRemovePacket.account)
  return _impl_.account_.Release();
}
inline void GGMessengerBlockRemovePacket::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerBlockRemovePacket.account)
}

// bytes companion = 2;
inline void GGMessengerBlockRemovePacket::clear_companion() {
  _impl_.companion_.ClearToEmpty();
}
inline const std::string& GGMessengerBlockRemovePacket::companion() const {
  // @@protoc_insertion_point(field_get:network.GGMessengerBlockRemovePacket.companion)
  return _internal_companion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGMessengerBlockRemovePacket::set_companion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.companion_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGMessengerBlockRemovePacket.companion)
}
inline std::string* GGMessengerBlockRemovePacket::mutable_companion() {
  std::string* _s = _internal_mutable_companion();
  // @@protoc_insertion_point(field_mutable:network.GGMessengerBlockRemovePacket.companion)
  return _s;
}
inline const std::string& GGMessengerBlockRemovePacket::_internal_companion() const {
  return _impl_.companion_.Get();
}
inline void GGMessengerBlockRemovePacket::_internal_set_companion(const std::string& value) {
  
  _impl_.companion_.Set(value, GetArenaForAllocation());
}
inline std::string* GGMessengerBlockRemovePacket::_internal_mutable_companion() {
  
  return _impl_.companion_.Mutable(GetArenaForAllocation());
}
inline std::string* GGMessengerBlockRemovePacket::release_companion() {
  // @@protoc_insertion_point(field_release:network.GGMessengerBlockRemovePacket.companion)
  return _impl_.companion_.Release();
}
inline void GGMessengerBlockRemovePacket::set_allocated_companion(std::string* companion) {
  if (companion != nullptr) {
    
  } else {
    
  }
  _impl_.companion_.SetAllocated(companion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.companion_.IsDefault()) {
    _impl_.companion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGMessengerBlockRemovePacket.companion)
}

// -------------------------------------------------------------------

// GGFindPositionPacket

// uint32 from_pid = 1;
inline void GGFindPositionPacket::clear_from_pid() {
  _impl_.from_pid_ = 0u;
}
inline uint32_t GGFindPositionPacket::_internal_from_pid() const {
  return _impl_.from_pid_;
}
inline uint32_t GGFindPositionPacket::from_pid() const {
  // @@protoc_insertion_point(field_get:network.GGFindPositionPacket.from_pid)
  return _internal_from_pid();
}
inline void GGFindPositionPacket::_internal_set_from_pid(uint32_t value) {
  
  _impl_.from_pid_ = value;
}
inline void GGFindPositionPacket::set_from_pid(uint32_t value) {
  _internal_set_from_pid(value);
  // @@protoc_insertion_point(field_set:network.GGFindPositionPacket.from_pid)
}

// uint32 target_pid = 2;
inline void GGFindPositionPacket::clear_target_pid() {
  _impl_.target_pid_ = 0u;
}
inline uint32_t GGFindPositionPacket::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline uint32_t GGFindPositionPacket::target_pid() const {
  // @@protoc_insertion_point(field_get:network.GGFindPositionPacket.target_pid)
  return _internal_target_pid();
}
inline void GGFindPositionPacket::_internal_set_target_pid(uint32_t value) {
  
  _impl_.target_pid_ = value;
}
inline void GGFindPositionPacket::set_target_pid(uint32_t value) {
  _internal_set_target_pid(value);
  // @@protoc_insertion_point(field_set:network.GGFindPositionPacket.target_pid)
}

// bool is_gm = 3;
inline void GGFindPositionPacket::clear_is_gm() {
  _impl_.is_gm_ = false;
}
inline bool GGFindPositionPacket::_internal_is_gm() const {
  return _impl_.is_gm_;
}
inline bool GGFindPositionPacket::is_gm() const {
  // @@protoc_insertion_point(field_get:network.GGFindPositionPacket.is_gm)
  return _internal_is_gm();
}
inline void GGFindPositionPacket::_internal_set_is_gm(bool value) {
  
  _impl_.is_gm_ = value;
}
inline void GGFindPositionPacket::set_is_gm(bool value) {
  _internal_set_is_gm(value);
  // @@protoc_insertion_point(field_set:network.GGFindPositionPacket.is_gm)
}

// -------------------------------------------------------------------

// GGWarpCharacterPacket

// uint32 pid = 1;
inline void GGWarpCharacterPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGWarpCharacterPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGWarpCharacterPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGWarpCharacterPacket.pid)
  return _internal_pid();
}
inline void GGWarpCharacterPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGWarpCharacterPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGWarpCharacterPacket.pid)
}

// int32 x = 2;
inline void GGWarpCharacterPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GGWarpCharacterPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GGWarpCharacterPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GGWarpCharacterPacket.x)
  return _internal_x();
}
inline void GGWarpCharacterPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GGWarpCharacterPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GGWarpCharacterPacket.x)
}

// int32 y = 3;
inline void GGWarpCharacterPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GGWarpCharacterPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GGWarpCharacterPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GGWarpCharacterPacket.y)
  return _internal_y();
}
inline void GGWarpCharacterPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GGWarpCharacterPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GGWarpCharacterPacket.y)
}

// uint32 map_index = 4;
inline void GGWarpCharacterPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGWarpCharacterPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGWarpCharacterPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGWarpCharacterPacket.map_index)
  return _internal_map_index();
}
inline void GGWarpCharacterPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGWarpCharacterPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGWarpCharacterPacket.map_index)
}

// uint32 target_pid = 5;
inline void GGWarpCharacterPacket::clear_target_pid() {
  _impl_.target_pid_ = 0u;
}
inline uint32_t GGWarpCharacterPacket::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline uint32_t GGWarpCharacterPacket::target_pid() const {
  // @@protoc_insertion_point(field_get:network.GGWarpCharacterPacket.target_pid)
  return _internal_target_pid();
}
inline void GGWarpCharacterPacket::_internal_set_target_pid(uint32_t value) {
  
  _impl_.target_pid_ = value;
}
inline void GGWarpCharacterPacket::set_target_pid(uint32_t value) {
  _internal_set_target_pid(value);
  // @@protoc_insertion_point(field_set:network.GGWarpCharacterPacket.target_pid)
}

// -------------------------------------------------------------------

// GGXmasWarpSantaPacket

// uint32 channel = 1;
inline void GGXmasWarpSantaPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGXmasWarpSantaPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGXmasWarpSantaPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGXmasWarpSantaPacket.channel)
  return _internal_channel();
}
inline void GGXmasWarpSantaPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGXmasWarpSantaPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGXmasWarpSantaPacket.channel)
}

// uint32 map_index = 2;
inline void GGXmasWarpSantaPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGXmasWarpSantaPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGXmasWarpSantaPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGXmasWarpSantaPacket.map_index)
  return _internal_map_index();
}
inline void GGXmasWarpSantaPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGXmasWarpSantaPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGXmasWarpSantaPacket.map_index)
}

// -------------------------------------------------------------------

// GGXmasWarpSantaReplyPacket

// uint32 channel = 1;
inline void GGXmasWarpSantaReplyPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGXmasWarpSantaReplyPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGXmasWarpSantaReplyPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGXmasWarpSantaReplyPacket.channel)
  return _internal_channel();
}
inline void GGXmasWarpSantaReplyPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGXmasWarpSantaReplyPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGXmasWarpSantaReplyPacket.channel)
}

// -------------------------------------------------------------------

// GGBlockChatPacket

// bytes name = 1;
inline void GGBlockChatPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGBlockChatPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGBlockChatPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGBlockChatPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGBlockChatPacket.name)
}
inline std::string* GGBlockChatPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGBlockChatPacket.name)
  return _s;
}
inline const std::string& GGBlockChatPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGBlockChatPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGBlockChatPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGBlockChatPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGBlockChatPacket.name)
  return _impl_.name_.Release();
}
inline void GGBlockChatPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGBlockChatPacket.name)
}

// int32 block_duration = 2;
inline void GGBlockChatPacket::clear_block_duration() {
  _impl_.block_duration_ = 0;
}
inline int32_t GGBlockChatPacket::_internal_block_duration() const {
  return _impl_.block_duration_;
}
inline int32_t GGBlockChatPacket::block_duration() const {
  // @@protoc_insertion_point(field_get:network.GGBlockChatPacket.block_duration)
  return _internal_block_duration();
}
inline void GGBlockChatPacket::_internal_set_block_duration(int32_t value) {
  
  _impl_.block_duration_ = value;
}
inline void GGBlockChatPacket::set_block_duration(int32_t value) {
  _internal_set_block_duration(value);
  // @@protoc_insertion_point(field_set:network.GGBlockChatPacket.block_duration)
}

// -------------------------------------------------------------------

// GGCastleSiegePacket

// uint32 empire = 1;
inline void GGCastleSiegePacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GGCastleSiegePacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GGCastleSiegePacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GGCastleSiegePacket.empire)
  return _internal_empire();
}
inline void GGCastleSiegePacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GGCastleSiegePacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GGCastleSiegePacket.empire)
}

// uint32 tower_count = 2;
inline void GGCastleSiegePacket::clear_tower_count() {
  _impl_.tower_count_ = 0u;
}
inline uint32_t GGCastleSiegePacket::_internal_tower_count() const {
  return _impl_.tower_count_;
}
inline uint32_t GGCastleSiegePacket::tower_count() const {
  // @@protoc_insertion_point(field_get:network.GGCastleSiegePacket.tower_count)
  return _internal_tower_count();
}
inline void GGCastleSiegePacket::_internal_set_tower_count(uint32_t value) {
  
  _impl_.tower_count_ = value;
}
inline void GGCastleSiegePacket::set_tower_count(uint32_t value) {
  _internal_set_tower_count(value);
  // @@protoc_insertion_point(field_set:network.GGCastleSiegePacket.tower_count)
}

// -------------------------------------------------------------------

// GGPCBangUpdatePacket

// uint32 pc_bang_id = 1;
inline void GGPCBangUpdatePacket::clear_pc_bang_id() {
  _impl_.pc_bang_id_ = 0u;
}
inline uint32_t GGPCBangUpdatePacket::_internal_pc_bang_id() const {
  return _impl_.pc_bang_id_;
}
inline uint32_t GGPCBangUpdatePacket::pc_bang_id() const {
  // @@protoc_insertion_point(field_get:network.GGPCBangUpdatePacket.pc_bang_id)
  return _internal_pc_bang_id();
}
inline void GGPCBangUpdatePacket::_internal_set_pc_bang_id(uint32_t value) {
  
  _impl_.pc_bang_id_ = value;
}
inline void GGPCBangUpdatePacket::set_pc_bang_id(uint32_t value) {
  _internal_set_pc_bang_id(value);
  // @@protoc_insertion_point(field_set:network.GGPCBangUpdatePacket.pc_bang_id)
}

// -------------------------------------------------------------------

// GGWhisperManagerAddPacket

// bytes sender_name = 1;
inline void GGWhisperManagerAddPacket::clear_sender_name() {
  _impl_.sender_name_.ClearToEmpty();
}
inline const std::string& GGWhisperManagerAddPacket::sender_name() const {
  // @@protoc_insertion_point(field_get:network.GGWhisperManagerAddPacket.sender_name)
  return _internal_sender_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGWhisperManagerAddPacket::set_sender_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGWhisperManagerAddPacket.sender_name)
}
inline std::string* GGWhisperManagerAddPacket::mutable_sender_name() {
  std::string* _s = _internal_mutable_sender_name();
  // @@protoc_insertion_point(field_mutable:network.GGWhisperManagerAddPacket.sender_name)
  return _s;
}
inline const std::string& GGWhisperManagerAddPacket::_internal_sender_name() const {
  return _impl_.sender_name_.Get();
}
inline void GGWhisperManagerAddPacket::_internal_set_sender_name(const std::string& value) {
  
  _impl_.sender_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGWhisperManagerAddPacket::_internal_mutable_sender_name() {
  
  return _impl_.sender_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGWhisperManagerAddPacket::release_sender_name() {
  // @@protoc_insertion_point(field_release:network.GGWhisperManagerAddPacket.sender_name)
  return _impl_.sender_name_.Release();
}
inline void GGWhisperManagerAddPacket::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  _impl_.sender_name_.SetAllocated(sender_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_name_.IsDefault()) {
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGWhisperManagerAddPacket.sender_name)
}

// uint32 sender_pid = 2;
inline void GGWhisperManagerAddPacket::clear_sender_pid() {
  _impl_.sender_pid_ = 0u;
}
inline uint32_t GGWhisperManagerAddPacket::_internal_sender_pid() const {
  return _impl_.sender_pid_;
}
inline uint32_t GGWhisperManagerAddPacket::sender_pid() const {
  // @@protoc_insertion_point(field_get:network.GGWhisperManagerAddPacket.sender_pid)
  return _internal_sender_pid();
}
inline void GGWhisperManagerAddPacket::_internal_set_sender_pid(uint32_t value) {
  
  _impl_.sender_pid_ = value;
}
inline void GGWhisperManagerAddPacket::set_sender_pid(uint32_t value) {
  _internal_set_sender_pid(value);
  // @@protoc_insertion_point(field_set:network.GGWhisperManagerAddPacket.sender_pid)
}

// bytes receiver_name = 3;
inline void GGWhisperManagerAddPacket::clear_receiver_name() {
  _impl_.receiver_name_.ClearToEmpty();
}
inline const std::string& GGWhisperManagerAddPacket::receiver_name() const {
  // @@protoc_insertion_point(field_get:network.GGWhisperManagerAddPacket.receiver_name)
  return _internal_receiver_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGWhisperManagerAddPacket::set_receiver_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGWhisperManagerAddPacket.receiver_name)
}
inline std::string* GGWhisperManagerAddPacket::mutable_receiver_name() {
  std::string* _s = _internal_mutable_receiver_name();
  // @@protoc_insertion_point(field_mutable:network.GGWhisperManagerAddPacket.receiver_name)
  return _s;
}
inline const std::string& GGWhisperManagerAddPacket::_internal_receiver_name() const {
  return _impl_.receiver_name_.Get();
}
inline void GGWhisperManagerAddPacket::_internal_set_receiver_name(const std::string& value) {
  
  _impl_.receiver_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGWhisperManagerAddPacket::_internal_mutable_receiver_name() {
  
  return _impl_.receiver_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGWhisperManagerAddPacket::release_receiver_name() {
  // @@protoc_insertion_point(field_release:network.GGWhisperManagerAddPacket.receiver_name)
  return _impl_.receiver_name_.Release();
}
inline void GGWhisperManagerAddPacket::set_allocated_receiver_name(std::string* receiver_name) {
  if (receiver_name != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_name_.SetAllocated(receiver_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_name_.IsDefault()) {
    _impl_.receiver_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGWhisperManagerAddPacket.receiver_name)
}

// uint32 receiver_pid = 4;
inline void GGWhisperManagerAddPacket::clear_receiver_pid() {
  _impl_.receiver_pid_ = 0u;
}
inline uint32_t GGWhisperManagerAddPacket::_internal_receiver_pid() const {
  return _impl_.receiver_pid_;
}
inline uint32_t GGWhisperManagerAddPacket::receiver_pid() const {
  // @@protoc_insertion_point(field_get:network.GGWhisperManagerAddPacket.receiver_pid)
  return _internal_receiver_pid();
}
inline void GGWhisperManagerAddPacket::_internal_set_receiver_pid(uint32_t value) {
  
  _impl_.receiver_pid_ = value;
}
inline void GGWhisperManagerAddPacket::set_receiver_pid(uint32_t value) {
  _internal_set_receiver_pid(value);
  // @@protoc_insertion_point(field_set:network.GGWhisperManagerAddPacket.receiver_pid)
}

// bytes message = 5;
inline void GGWhisperManagerAddPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GGWhisperManagerAddPacket::message() const {
  // @@protoc_insertion_point(field_get:network.GGWhisperManagerAddPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGWhisperManagerAddPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGWhisperManagerAddPacket.message)
}
inline std::string* GGWhisperManagerAddPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GGWhisperManagerAddPacket.message)
  return _s;
}
inline const std::string& GGWhisperManagerAddPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GGWhisperManagerAddPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GGWhisperManagerAddPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GGWhisperManagerAddPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GGWhisperManagerAddPacket.message)
  return _impl_.message_.Release();
}
inline void GGWhisperManagerAddPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGWhisperManagerAddPacket.message)
}

// -------------------------------------------------------------------

// GGTeamlerStatusPacket

// bytes name = 1;
inline void GGTeamlerStatusPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGTeamlerStatusPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGTeamlerStatusPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGTeamlerStatusPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGTeamlerStatusPacket.name)
}
inline std::string* GGTeamlerStatusPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGTeamlerStatusPacket.name)
  return _s;
}
inline const std::string& GGTeamlerStatusPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGTeamlerStatusPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGTeamlerStatusPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGTeamlerStatusPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGTeamlerStatusPacket.name)
  return _impl_.name_.Release();
}
inline void GGTeamlerStatusPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGTeamlerStatusPacket.name)
}

// bool is_online = 2;
inline void GGTeamlerStatusPacket::clear_is_online() {
  _impl_.is_online_ = false;
}
inline bool GGTeamlerStatusPacket::_internal_is_online() const {
  return _impl_.is_online_;
}
inline bool GGTeamlerStatusPacket::is_online() const {
  // @@protoc_insertion_point(field_get:network.GGTeamlerStatusPacket.is_online)
  return _internal_is_online();
}
inline void GGTeamlerStatusPacket::_internal_set_is_online(bool value) {
  
  _impl_.is_online_ = value;
}
inline void GGTeamlerStatusPacket::set_is_online(bool value) {
  _internal_set_is_online(value);
  // @@protoc_insertion_point(field_set:network.GGTeamlerStatusPacket.is_online)
}

// int32 language = 3;
inline void GGTeamlerStatusPacket::clear_language() {
  _impl_.language_ = 0;
}
inline int32_t GGTeamlerStatusPacket::_internal_language() const {
  return _impl_.language_;
}
inline int32_t GGTeamlerStatusPacket::language() const {
  // @@protoc_insertion_point(field_get:network.GGTeamlerStatusPacket.language)
  return _internal_language();
}
inline void GGTeamlerStatusPacket::_internal_set_language(int32_t value) {
  
  _impl_.language_ = value;
}
inline void GGTeamlerStatusPacket::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.GGTeamlerStatusPacket.language)
}

// -------------------------------------------------------------------

// GGRequestDungeonWarpPacket

// uint32 type = 1;
inline void GGRequestDungeonWarpPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GGRequestDungeonWarpPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GGRequestDungeonWarpPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GGRequestDungeonWarpPacket.type)
  return _internal_type();
}
inline void GGRequestDungeonWarpPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GGRequestDungeonWarpPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GGRequestDungeonWarpPacket.type)
}

// uint32 player_id = 2;
inline void GGRequestDungeonWarpPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGRequestDungeonWarpPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGRequestDungeonWarpPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGRequestDungeonWarpPacket.player_id)
  return _internal_player_id();
}
inline void GGRequestDungeonWarpPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGRequestDungeonWarpPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGRequestDungeonWarpPacket.player_id)
}

// uint32 map_index = 3;
inline void GGRequestDungeonWarpPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGRequestDungeonWarpPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGRequestDungeonWarpPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGRequestDungeonWarpPacket.map_index)
  return _internal_map_index();
}
inline void GGRequestDungeonWarpPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGRequestDungeonWarpPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGRequestDungeonWarpPacket.map_index)
}

// uint32 dest_x = 4;
inline void GGRequestDungeonWarpPacket::clear_dest_x() {
  _impl_.dest_x_ = 0u;
}
inline uint32_t GGRequestDungeonWarpPacket::_internal_dest_x() const {
  return _impl_.dest_x_;
}
inline uint32_t GGRequestDungeonWarpPacket::dest_x() const {
  // @@protoc_insertion_point(field_get:network.GGRequestDungeonWarpPacket.dest_x)
  return _internal_dest_x();
}
inline void GGRequestDungeonWarpPacket::_internal_set_dest_x(uint32_t value) {
  
  _impl_.dest_x_ = value;
}
inline void GGRequestDungeonWarpPacket::set_dest_x(uint32_t value) {
  _internal_set_dest_x(value);
  // @@protoc_insertion_point(field_set:network.GGRequestDungeonWarpPacket.dest_x)
}

// uint32 dest_y = 5;
inline void GGRequestDungeonWarpPacket::clear_dest_y() {
  _impl_.dest_y_ = 0u;
}
inline uint32_t GGRequestDungeonWarpPacket::_internal_dest_y() const {
  return _impl_.dest_y_;
}
inline uint32_t GGRequestDungeonWarpPacket::dest_y() const {
  // @@protoc_insertion_point(field_get:network.GGRequestDungeonWarpPacket.dest_y)
  return _internal_dest_y();
}
inline void GGRequestDungeonWarpPacket::_internal_set_dest_y(uint32_t value) {
  
  _impl_.dest_y_ = value;
}
inline void GGRequestDungeonWarpPacket::set_dest_y(uint32_t value) {
  _internal_set_dest_y(value);
  // @@protoc_insertion_point(field_set:network.GGRequestDungeonWarpPacket.dest_y)
}

// -------------------------------------------------------------------

// GGAnswerDungeonWarpPacket

// uint32 type = 1;
inline void GGAnswerDungeonWarpPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GGAnswerDungeonWarpPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GGAnswerDungeonWarpPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GGAnswerDungeonWarpPacket.type)
  return _internal_type();
}
inline void GGAnswerDungeonWarpPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GGAnswerDungeonWarpPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GGAnswerDungeonWarpPacket.type)
}

// uint32 player_id = 2;
inline void GGAnswerDungeonWarpPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAnswerDungeonWarpPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAnswerDungeonWarpPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAnswerDungeonWarpPacket.player_id)
  return _internal_player_id();
}
inline void GGAnswerDungeonWarpPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAnswerDungeonWarpPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAnswerDungeonWarpPacket.player_id)
}

// uint32 map_index = 3;
inline void GGAnswerDungeonWarpPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGAnswerDungeonWarpPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGAnswerDungeonWarpPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGAnswerDungeonWarpPacket.map_index)
  return _internal_map_index();
}
inline void GGAnswerDungeonWarpPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGAnswerDungeonWarpPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGAnswerDungeonWarpPacket.map_index)
}

// uint32 dest_x = 4;
inline void GGAnswerDungeonWarpPacket::clear_dest_x() {
  _impl_.dest_x_ = 0u;
}
inline uint32_t GGAnswerDungeonWarpPacket::_internal_dest_x() const {
  return _impl_.dest_x_;
}
inline uint32_t GGAnswerDungeonWarpPacket::dest_x() const {
  // @@protoc_insertion_point(field_get:network.GGAnswerDungeonWarpPacket.dest_x)
  return _internal_dest_x();
}
inline void GGAnswerDungeonWarpPacket::_internal_set_dest_x(uint32_t value) {
  
  _impl_.dest_x_ = value;
}
inline void GGAnswerDungeonWarpPacket::set_dest_x(uint32_t value) {
  _internal_set_dest_x(value);
  // @@protoc_insertion_point(field_set:network.GGAnswerDungeonWarpPacket.dest_x)
}

// uint32 dest_y = 5;
inline void GGAnswerDungeonWarpPacket::clear_dest_y() {
  _impl_.dest_y_ = 0u;
}
inline uint32_t GGAnswerDungeonWarpPacket::_internal_dest_y() const {
  return _impl_.dest_y_;
}
inline uint32_t GGAnswerDungeonWarpPacket::dest_y() const {
  // @@protoc_insertion_point(field_get:network.GGAnswerDungeonWarpPacket.dest_y)
  return _internal_dest_y();
}
inline void GGAnswerDungeonWarpPacket::_internal_set_dest_y(uint32_t value) {
  
  _impl_.dest_y_ = value;
}
inline void GGAnswerDungeonWarpPacket::set_dest_y(uint32_t value) {
  _internal_set_dest_y(value);
  // @@protoc_insertion_point(field_set:network.GGAnswerDungeonWarpPacket.dest_y)
}

// -------------------------------------------------------------------

// GGDungeonSetFlagPacket

// uint32 pid = 1;
inline void GGDungeonSetFlagPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGDungeonSetFlagPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGDungeonSetFlagPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGDungeonSetFlagPacket.pid)
  return _internal_pid();
}
inline void GGDungeonSetFlagPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGDungeonSetFlagPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGDungeonSetFlagPacket.pid)
}

// bytes flag_name = 2;
inline void GGDungeonSetFlagPacket::clear_flag_name() {
  _impl_.flag_name_.ClearToEmpty();
}
inline const std::string& GGDungeonSetFlagPacket::flag_name() const {
  // @@protoc_insertion_point(field_get:network.GGDungeonSetFlagPacket.flag_name)
  return _internal_flag_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGDungeonSetFlagPacket::set_flag_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGDungeonSetFlagPacket.flag_name)
}
inline std::string* GGDungeonSetFlagPacket::mutable_flag_name() {
  std::string* _s = _internal_mutable_flag_name();
  // @@protoc_insertion_point(field_mutable:network.GGDungeonSetFlagPacket.flag_name)
  return _s;
}
inline const std::string& GGDungeonSetFlagPacket::_internal_flag_name() const {
  return _impl_.flag_name_.Get();
}
inline void GGDungeonSetFlagPacket::_internal_set_flag_name(const std::string& value) {
  
  _impl_.flag_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGDungeonSetFlagPacket::_internal_mutable_flag_name() {
  
  return _impl_.flag_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGDungeonSetFlagPacket::release_flag_name() {
  // @@protoc_insertion_point(field_release:network.GGDungeonSetFlagPacket.flag_name)
  return _impl_.flag_name_.Release();
}
inline void GGDungeonSetFlagPacket::set_allocated_flag_name(std::string* flag_name) {
  if (flag_name != nullptr) {
    
  } else {
    
  }
  _impl_.flag_name_.SetAllocated(flag_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_name_.IsDefault()) {
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGDungeonSetFlagPacket.flag_name)
}

// int32 flag_value = 3;
inline void GGDungeonSetFlagPacket::clear_flag_value() {
  _impl_.flag_value_ = 0;
}
inline int32_t GGDungeonSetFlagPacket::_internal_flag_value() const {
  return _impl_.flag_value_;
}
inline int32_t GGDungeonSetFlagPacket::flag_value() const {
  // @@protoc_insertion_point(field_get:network.GGDungeonSetFlagPacket.flag_value)
  return _internal_flag_value();
}
inline void GGDungeonSetFlagPacket::_internal_set_flag_value(int32_t value) {
  
  _impl_.flag_value_ = value;
}
inline void GGDungeonSetFlagPacket::set_flag_value(int32_t value) {
  _internal_set_flag_value(value);
  // @@protoc_insertion_point(field_set:network.GGDungeonSetFlagPacket.flag_value)
}

// -------------------------------------------------------------------

// GGExecReloadCommandPacket

// bytes argument = 1;
inline void GGExecReloadCommandPacket::clear_argument() {
  _impl_.argument_.ClearToEmpty();
}
inline const std::string& GGExecReloadCommandPacket::argument() const {
  // @@protoc_insertion_point(field_get:network.GGExecReloadCommandPacket.argument)
  return _internal_argument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGExecReloadCommandPacket::set_argument(ArgT0&& arg0, ArgT... args) {
 
 _impl_.argument_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGExecReloadCommandPacket.argument)
}
inline std::string* GGExecReloadCommandPacket::mutable_argument() {
  std::string* _s = _internal_mutable_argument();
  // @@protoc_insertion_point(field_mutable:network.GGExecReloadCommandPacket.argument)
  return _s;
}
inline const std::string& GGExecReloadCommandPacket::_internal_argument() const {
  return _impl_.argument_.Get();
}
inline void GGExecReloadCommandPacket::_internal_set_argument(const std::string& value) {
  
  _impl_.argument_.Set(value, GetArenaForAllocation());
}
inline std::string* GGExecReloadCommandPacket::_internal_mutable_argument() {
  
  return _impl_.argument_.Mutable(GetArenaForAllocation());
}
inline std::string* GGExecReloadCommandPacket::release_argument() {
  // @@protoc_insertion_point(field_release:network.GGExecReloadCommandPacket.argument)
  return _impl_.argument_.Release();
}
inline void GGExecReloadCommandPacket::set_allocated_argument(std::string* argument) {
  if (argument != nullptr) {
    
  } else {
    
  }
  _impl_.argument_.SetAllocated(argument, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.argument_.IsDefault()) {
    _impl_.argument_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGExecReloadCommandPacket.argument)
}

// -------------------------------------------------------------------

// GGRecvShutdownPacket

// int32 start_sec = 1;
inline void GGRecvShutdownPacket::clear_start_sec() {
  _impl_.start_sec_ = 0;
}
inline int32_t GGRecvShutdownPacket::_internal_start_sec() const {
  return _impl_.start_sec_;
}
inline int32_t GGRecvShutdownPacket::start_sec() const {
  // @@protoc_insertion_point(field_get:network.GGRecvShutdownPacket.start_sec)
  return _internal_start_sec();
}
inline void GGRecvShutdownPacket::_internal_set_start_sec(int32_t value) {
  
  _impl_.start_sec_ = value;
}
inline void GGRecvShutdownPacket::set_start_sec(int32_t value) {
  _internal_set_start_sec(value);
  // @@protoc_insertion_point(field_set:network.GGRecvShutdownPacket.start_sec)
}

// bool maintenance = 2;
inline void GGRecvShutdownPacket::clear_maintenance() {
  _impl_.maintenance_ = false;
}
inline bool GGRecvShutdownPacket::_internal_maintenance() const {
  return _impl_.maintenance_;
}
inline bool GGRecvShutdownPacket::maintenance() const {
  // @@protoc_insertion_point(field_get:network.GGRecvShutdownPacket.maintenance)
  return _internal_maintenance();
}
inline void GGRecvShutdownPacket::_internal_set_maintenance(bool value) {
  
  _impl_.maintenance_ = value;
}
inline void GGRecvShutdownPacket::set_maintenance(bool value) {
  _internal_set_maintenance(value);
  // @@protoc_insertion_point(field_set:network.GGRecvShutdownPacket.maintenance)
}

// int32 maintenance_duration = 3;
inline void GGRecvShutdownPacket::clear_maintenance_duration() {
  _impl_.maintenance_duration_ = 0;
}
inline int32_t GGRecvShutdownPacket::_internal_maintenance_duration() const {
  return _impl_.maintenance_duration_;
}
inline int32_t GGRecvShutdownPacket::maintenance_duration() const {
  // @@protoc_insertion_point(field_get:network.GGRecvShutdownPacket.maintenance_duration)
  return _internal_maintenance_duration();
}
inline void GGRecvShutdownPacket::_internal_set_maintenance_duration(int32_t value) {
  
  _impl_.maintenance_duration_ = value;
}
inline void GGRecvShutdownPacket::set_maintenance_duration(int32_t value) {
  _internal_set_maintenance_duration(value);
  // @@protoc_insertion_point(field_set:network.GGRecvShutdownPacket.maintenance_duration)
}

// -------------------------------------------------------------------

// GGTransferPacket

// bytes name = 1;
inline void GGTransferPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGTransferPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGTransferPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGTransferPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGTransferPacket.name)
}
inline std::string* GGTransferPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGTransferPacket.name)
  return _s;
}
inline const std::string& GGTransferPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGTransferPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGTransferPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGTransferPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGTransferPacket.name)
  return _impl_.name_.Release();
}
inline void GGTransferPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGTransferPacket.name)
}

// int32 x = 2;
inline void GGTransferPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GGTransferPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GGTransferPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GGTransferPacket.x)
  return _internal_x();
}
inline void GGTransferPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GGTransferPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GGTransferPacket.x)
}

// int32 y = 3;
inline void GGTransferPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GGTransferPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GGTransferPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GGTransferPacket.y)
  return _internal_y();
}
inline void GGTransferPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GGTransferPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GGTransferPacket.y)
}

// -------------------------------------------------------------------

// GGForceItemDeletePacket

// uint32 item_id = 1;
inline void GGForceItemDeletePacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GGForceItemDeletePacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GGForceItemDeletePacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GGForceItemDeletePacket.item_id)
  return _internal_item_id();
}
inline void GGForceItemDeletePacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GGForceItemDeletePacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GGForceItemDeletePacket.item_id)
}

// -------------------------------------------------------------------

// GGTeamChatPacket

// bytes text = 1;
inline void GGTeamChatPacket::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& GGTeamChatPacket::text() const {
  // @@protoc_insertion_point(field_get:network.GGTeamChatPacket.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGTeamChatPacket::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGTeamChatPacket.text)
}
inline std::string* GGTeamChatPacket::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:network.GGTeamChatPacket.text)
  return _s;
}
inline const std::string& GGTeamChatPacket::_internal_text() const {
  return _impl_.text_.Get();
}
inline void GGTeamChatPacket::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* GGTeamChatPacket::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* GGTeamChatPacket::release_text() {
  // @@protoc_insertion_point(field_release:network.GGTeamChatPacket.text)
  return _impl_.text_.Release();
}
inline void GGTeamChatPacket::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGTeamChatPacket.text)
}

// -------------------------------------------------------------------

// GGCombatZoneRankingPacket

// repeated .network.TCombatZoneRankingPlayer weekly = 1;
inline int GGCombatZoneRankingPacket::_internal_weekly_size() const {
  return _impl_.weekly_.size();
}
inline int GGCombatZoneRankingPacket::weekly_size() const {
  return _internal_weekly_size();
}
inline ::network::TCombatZoneRankingPlayer* GGCombatZoneRankingPacket::mutable_weekly(int index) {
  // @@protoc_insertion_point(field_mutable:network.GGCombatZoneRankingPacket.weekly)
  return _impl_.weekly_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >*
GGCombatZoneRankingPacket::mutable_weekly() {
  // @@protoc_insertion_point(field_mutable_list:network.GGCombatZoneRankingPacket.weekly)
  return &_impl_.weekly_;
}
inline const ::network::TCombatZoneRankingPlayer& GGCombatZoneRankingPacket::_internal_weekly(int index) const {
  return _impl_.weekly_.Get(index);
}
inline const ::network::TCombatZoneRankingPlayer& GGCombatZoneRankingPacket::weekly(int index) const {
  // @@protoc_insertion_point(field_get:network.GGCombatZoneRankingPacket.weekly)
  return _internal_weekly(index);
}
inline ::network::TCombatZoneRankingPlayer* GGCombatZoneRankingPacket::_internal_add_weekly() {
  return _impl_.weekly_.Add();
}
inline ::network::TCombatZoneRankingPlayer* GGCombatZoneRankingPacket::add_weekly() {
  ::network::TCombatZoneRankingPlayer* _add = _internal_add_weekly();
  // @@protoc_insertion_point(field_add:network.GGCombatZoneRankingPacket.weekly)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >&
GGCombatZoneRankingPacket::weekly() const {
  // @@protoc_insertion_point(field_list:network.GGCombatZoneRankingPacket.weekly)
  return _impl_.weekly_;
}

// repeated .network.TCombatZoneRankingPlayer general = 2;
inline int GGCombatZoneRankingPacket::_internal_general_size() const {
  return _impl_.general_.size();
}
inline int GGCombatZoneRankingPacket::general_size() const {
  return _internal_general_size();
}
inline ::network::TCombatZoneRankingPlayer* GGCombatZoneRankingPacket::mutable_general(int index) {
  // @@protoc_insertion_point(field_mutable:network.GGCombatZoneRankingPacket.general)
  return _impl_.general_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >*
GGCombatZoneRankingPacket::mutable_general() {
  // @@protoc_insertion_point(field_mutable_list:network.GGCombatZoneRankingPacket.general)
  return &_impl_.general_;
}
inline const ::network::TCombatZoneRankingPlayer& GGCombatZoneRankingPacket::_internal_general(int index) const {
  return _impl_.general_.Get(index);
}
inline const ::network::TCombatZoneRankingPlayer& GGCombatZoneRankingPacket::general(int index) const {
  // @@protoc_insertion_point(field_get:network.GGCombatZoneRankingPacket.general)
  return _internal_general(index);
}
inline ::network::TCombatZoneRankingPlayer* GGCombatZoneRankingPacket::_internal_add_general() {
  return _impl_.general_.Add();
}
inline ::network::TCombatZoneRankingPlayer* GGCombatZoneRankingPacket::add_general() {
  ::network::TCombatZoneRankingPlayer* _add = _internal_add_general();
  // @@protoc_insertion_point(field_add:network.GGCombatZoneRankingPacket.general)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >&
GGCombatZoneRankingPacket::general() const {
  // @@protoc_insertion_point(field_list:network.GGCombatZoneRankingPacket.general)
  return _impl_.general_;
}

// -------------------------------------------------------------------

// GGUpdateRightsPacket

// bytes name = 1;
inline void GGUpdateRightsPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGUpdateRightsPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGUpdateRightsPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGUpdateRightsPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGUpdateRightsPacket.name)
}
inline std::string* GGUpdateRightsPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGUpdateRightsPacket.name)
  return _s;
}
inline const std::string& GGUpdateRightsPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGUpdateRightsPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGUpdateRightsPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGUpdateRightsPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGUpdateRightsPacket.name)
  return _impl_.name_.Release();
}
inline void GGUpdateRightsPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGUpdateRightsPacket.name)
}

// uint32 gm_level = 2;
inline void GGUpdateRightsPacket::clear_gm_level() {
  _impl_.gm_level_ = 0u;
}
inline uint32_t GGUpdateRightsPacket::_internal_gm_level() const {
  return _impl_.gm_level_;
}
inline uint32_t GGUpdateRightsPacket::gm_level() const {
  // @@protoc_insertion_point(field_get:network.GGUpdateRightsPacket.gm_level)
  return _internal_gm_level();
}
inline void GGUpdateRightsPacket::_internal_set_gm_level(uint32_t value) {
  
  _impl_.gm_level_ = value;
}
inline void GGUpdateRightsPacket::set_gm_level(uint32_t value) {
  _internal_set_gm_level(value);
  // @@protoc_insertion_point(field_set:network.GGUpdateRightsPacket.gm_level)
}

// -------------------------------------------------------------------

// GGFlushPlayerPacket

// uint32 pid = 1;
inline void GGFlushPlayerPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGFlushPlayerPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGFlushPlayerPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGFlushPlayerPacket.pid)
  return _internal_pid();
}
inline void GGFlushPlayerPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGFlushPlayerPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGFlushPlayerPacket.pid)
}

// -------------------------------------------------------------------

// GGHomepageCommandPacket

// bytes command = 1;
inline void GGHomepageCommandPacket::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& GGHomepageCommandPacket::command() const {
  // @@protoc_insertion_point(field_get:network.GGHomepageCommandPacket.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGHomepageCommandPacket::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGHomepageCommandPacket.command)
}
inline std::string* GGHomepageCommandPacket::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:network.GGHomepageCommandPacket.command)
  return _s;
}
inline const std::string& GGHomepageCommandPacket::_internal_command() const {
  return _impl_.command_.Get();
}
inline void GGHomepageCommandPacket::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* GGHomepageCommandPacket::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* GGHomepageCommandPacket::release_command() {
  // @@protoc_insertion_point(field_release:network.GGHomepageCommandPacket.command)
  return _impl_.command_.Release();
}
inline void GGHomepageCommandPacket::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGHomepageCommandPacket.command)
}

// -------------------------------------------------------------------

// GGPullOfflineMessagesPacket

// uint32 pid = 1;
inline void GGPullOfflineMessagesPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGPullOfflineMessagesPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGPullOfflineMessagesPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGPullOfflineMessagesPacket.pid)
  return _internal_pid();
}
inline void GGPullOfflineMessagesPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGPullOfflineMessagesPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGPullOfflineMessagesPacket.pid)
}

// -------------------------------------------------------------------

// GGDmgRankingUpdatePacket_Entry

// bytes name = 1;
inline void GGDmgRankingUpdatePacket_Entry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGDmgRankingUpdatePacket_Entry::name() const {
  // @@protoc_insertion_point(field_get:network.GGDmgRankingUpdatePacket.Entry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGDmgRankingUpdatePacket_Entry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGDmgRankingUpdatePacket.Entry.name)
}
inline std::string* GGDmgRankingUpdatePacket_Entry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGDmgRankingUpdatePacket.Entry.name)
  return _s;
}
inline const std::string& GGDmgRankingUpdatePacket_Entry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGDmgRankingUpdatePacket_Entry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGDmgRankingUpdatePacket_Entry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGDmgRankingUpdatePacket_Entry::release_name() {
  // @@protoc_insertion_point(field_release:network.GGDmgRankingUpdatePacket.Entry.name)
  return _impl_.name_.Release();
}
inline void GGDmgRankingUpdatePacket_Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGDmgRankingUpdatePacket.Entry.name)
}

// int32 dmg = 2;
inline void GGDmgRankingUpdatePacket_Entry::clear_dmg() {
  _impl_.dmg_ = 0;
}
inline int32_t GGDmgRankingUpdatePacket_Entry::_internal_dmg() const {
  return _impl_.dmg_;
}
inline int32_t GGDmgRankingUpdatePacket_Entry::dmg() const {
  // @@protoc_insertion_point(field_get:network.GGDmgRankingUpdatePacket.Entry.dmg)
  return _internal_dmg();
}
inline void GGDmgRankingUpdatePacket_Entry::_internal_set_dmg(int32_t value) {
  
  _impl_.dmg_ = value;
}
inline void GGDmgRankingUpdatePacket_Entry::set_dmg(int32_t value) {
  _internal_set_dmg(value);
  // @@protoc_insertion_point(field_set:network.GGDmgRankingUpdatePacket.Entry.dmg)
}

// -------------------------------------------------------------------

// GGDmgRankingUpdatePacket

// uint32 type = 1;
inline void GGDmgRankingUpdatePacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GGDmgRankingUpdatePacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GGDmgRankingUpdatePacket::type() const {
  // @@protoc_insertion_point(field_get:network.GGDmgRankingUpdatePacket.type)
  return _internal_type();
}
inline void GGDmgRankingUpdatePacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GGDmgRankingUpdatePacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GGDmgRankingUpdatePacket.type)
}

// .network.GGDmgRankingUpdatePacket.Entry data = 2;
inline bool GGDmgRankingUpdatePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GGDmgRankingUpdatePacket::has_data() const {
  return _internal_has_data();
}
inline void GGDmgRankingUpdatePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::network::GGDmgRankingUpdatePacket_Entry& GGDmgRankingUpdatePacket::_internal_data() const {
  const ::network::GGDmgRankingUpdatePacket_Entry* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::GGDmgRankingUpdatePacket_Entry&>(
      ::network::_GGDmgRankingUpdatePacket_Entry_default_instance_);
}
inline const ::network::GGDmgRankingUpdatePacket_Entry& GGDmgRankingUpdatePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GGDmgRankingUpdatePacket.data)
  return _internal_data();
}
inline void GGDmgRankingUpdatePacket::unsafe_arena_set_allocated_data(
    ::network::GGDmgRankingUpdatePacket_Entry* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GGDmgRankingUpdatePacket.data)
}
inline ::network::GGDmgRankingUpdatePacket_Entry* GGDmgRankingUpdatePacket::release_data() {
  
  ::network::GGDmgRankingUpdatePacket_Entry* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::GGDmgRankingUpdatePacket_Entry* GGDmgRankingUpdatePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GGDmgRankingUpdatePacket.data)
  
  ::network::GGDmgRankingUpdatePacket_Entry* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::GGDmgRankingUpdatePacket_Entry* GGDmgRankingUpdatePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::GGDmgRankingUpdatePacket_Entry>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::GGDmgRankingUpdatePacket_Entry* GGDmgRankingUpdatePacket::mutable_data() {
  ::network::GGDmgRankingUpdatePacket_Entry* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GGDmgRankingUpdatePacket.data)
  return _msg;
}
inline void GGDmgRankingUpdatePacket::set_allocated_data(::network::GGDmgRankingUpdatePacket_Entry* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GGDmgRankingUpdatePacket.data)
}

// -------------------------------------------------------------------

// GGLocaleUpdateLastUsagePacket

// bytes lang_base = 1;
inline void GGLocaleUpdateLastUsagePacket::clear_lang_base() {
  _impl_.lang_base_.ClearToEmpty();
}
inline const std::string& GGLocaleUpdateLastUsagePacket::lang_base() const {
  // @@protoc_insertion_point(field_get:network.GGLocaleUpdateLastUsagePacket.lang_base)
  return _internal_lang_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGLocaleUpdateLastUsagePacket::set_lang_base(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lang_base_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGLocaleUpdateLastUsagePacket.lang_base)
}
inline std::string* GGLocaleUpdateLastUsagePacket::mutable_lang_base() {
  std::string* _s = _internal_mutable_lang_base();
  // @@protoc_insertion_point(field_mutable:network.GGLocaleUpdateLastUsagePacket.lang_base)
  return _s;
}
inline const std::string& GGLocaleUpdateLastUsagePacket::_internal_lang_base() const {
  return _impl_.lang_base_.Get();
}
inline void GGLocaleUpdateLastUsagePacket::_internal_set_lang_base(const std::string& value) {
  
  _impl_.lang_base_.Set(value, GetArenaForAllocation());
}
inline std::string* GGLocaleUpdateLastUsagePacket::_internal_mutable_lang_base() {
  
  return _impl_.lang_base_.Mutable(GetArenaForAllocation());
}
inline std::string* GGLocaleUpdateLastUsagePacket::release_lang_base() {
  // @@protoc_insertion_point(field_release:network.GGLocaleUpdateLastUsagePacket.lang_base)
  return _impl_.lang_base_.Release();
}
inline void GGLocaleUpdateLastUsagePacket::set_allocated_lang_base(std::string* lang_base) {
  if (lang_base != nullptr) {
    
  } else {
    
  }
  _impl_.lang_base_.SetAllocated(lang_base, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lang_base_.IsDefault()) {
    _impl_.lang_base_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGLocaleUpdateLastUsagePacket.lang_base)
}

// -------------------------------------------------------------------

// GGReloadCommandPacket

// bytes argument = 1;
inline void GGReloadCommandPacket::clear_argument() {
  _impl_.argument_.ClearToEmpty();
}
inline const std::string& GGReloadCommandPacket::argument() const {
  // @@protoc_insertion_point(field_get:network.GGReloadCommandPacket.argument)
  return _internal_argument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGReloadCommandPacket::set_argument(ArgT0&& arg0, ArgT... args) {
 
 _impl_.argument_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGReloadCommandPacket.argument)
}
inline std::string* GGReloadCommandPacket::mutable_argument() {
  std::string* _s = _internal_mutable_argument();
  // @@protoc_insertion_point(field_mutable:network.GGReloadCommandPacket.argument)
  return _s;
}
inline const std::string& GGReloadCommandPacket::_internal_argument() const {
  return _impl_.argument_.Get();
}
inline void GGReloadCommandPacket::_internal_set_argument(const std::string& value) {
  
  _impl_.argument_.Set(value, GetArenaForAllocation());
}
inline std::string* GGReloadCommandPacket::_internal_mutable_argument() {
  
  return _impl_.argument_.Mutable(GetArenaForAllocation());
}
inline std::string* GGReloadCommandPacket::release_argument() {
  // @@protoc_insertion_point(field_release:network.GGReloadCommandPacket.argument)
  return _impl_.argument_.Release();
}
inline void GGReloadCommandPacket::set_allocated_argument(std::string* argument) {
  if (argument != nullptr) {
    
  } else {
    
  }
  _impl_.argument_.SetAllocated(argument, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.argument_.IsDefault()) {
    _impl_.argument_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGReloadCommandPacket.argument)
}

// -------------------------------------------------------------------

// GGAuctionInsertItemPacket

// .network.TShopItemTable item = 1;
inline bool GGAuctionInsertItemPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GGAuctionInsertItemPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TShopItemTable& GGAuctionInsertItemPacket::_internal_item() const {
  const ::network::TShopItemTable* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TShopItemTable&>(
      ::network::_TShopItemTable_default_instance_);
}
inline const ::network::TShopItemTable& GGAuctionInsertItemPacket::item() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionInsertItemPacket.item)
  return _internal_item();
}
inline void GGAuctionInsertItemPacket::unsafe_arena_set_allocated_item(
    ::network::TShopItemTable* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GGAuctionInsertItemPacket.item)
}
inline ::network::TShopItemTable* GGAuctionInsertItemPacket::release_item() {
  
  ::network::TShopItemTable* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TShopItemTable* GGAuctionInsertItemPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GGAuctionInsertItemPacket.item)
  
  ::network::TShopItemTable* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TShopItemTable* GGAuctionInsertItemPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TShopItemTable>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TShopItemTable* GGAuctionInsertItemPacket::mutable_item() {
  ::network::TShopItemTable* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionInsertItemPacket.item)
  return _msg;
}
inline void GGAuctionInsertItemPacket::set_allocated_item(::network::TShopItemTable* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionInsertItemPacket.item)
}

// -------------------------------------------------------------------

// GGAuctionTakeItemPacket

// uint32 owner_id = 1;
inline void GGAuctionTakeItemPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionTakeItemPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionTakeItemPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionTakeItemPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionTakeItemPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionTakeItemPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionTakeItemPacket.owner_id)
}

// uint32 item_id = 2;
inline void GGAuctionTakeItemPacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GGAuctionTakeItemPacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GGAuctionTakeItemPacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionTakeItemPacket.item_id)
  return _internal_item_id();
}
inline void GGAuctionTakeItemPacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GGAuctionTakeItemPacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionTakeItemPacket.item_id)
}

// uint32 inventory_pos = 3;
inline void GGAuctionTakeItemPacket::clear_inventory_pos() {
  _impl_.inventory_pos_ = 0u;
}
inline uint32_t GGAuctionTakeItemPacket::_internal_inventory_pos() const {
  return _impl_.inventory_pos_;
}
inline uint32_t GGAuctionTakeItemPacket::inventory_pos() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionTakeItemPacket.inventory_pos)
  return _internal_inventory_pos();
}
inline void GGAuctionTakeItemPacket::_internal_set_inventory_pos(uint32_t value) {
  
  _impl_.inventory_pos_ = value;
}
inline void GGAuctionTakeItemPacket::set_inventory_pos(uint32_t value) {
  _internal_set_inventory_pos(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionTakeItemPacket.inventory_pos)
}

// -------------------------------------------------------------------

// GGAuctionBuyItemPacket

// uint32 pid = 1;
inline void GGAuctionBuyItemPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGAuctionBuyItemPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGAuctionBuyItemPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionBuyItemPacket.pid)
  return _internal_pid();
}
inline void GGAuctionBuyItemPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGAuctionBuyItemPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionBuyItemPacket.pid)
}

// string player_name = 2;
inline void GGAuctionBuyItemPacket::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& GGAuctionBuyItemPacket::player_name() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionBuyItemPacket.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGAuctionBuyItemPacket::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGAuctionBuyItemPacket.player_name)
}
inline std::string* GGAuctionBuyItemPacket::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionBuyItemPacket.player_name)
  return _s;
}
inline const std::string& GGAuctionBuyItemPacket::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void GGAuctionBuyItemPacket::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGAuctionBuyItemPacket::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGAuctionBuyItemPacket::release_player_name() {
  // @@protoc_insertion_point(field_release:network.GGAuctionBuyItemPacket.player_name)
  return _impl_.player_name_.Release();
}
inline void GGAuctionBuyItemPacket::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionBuyItemPacket.player_name)
}

// uint32 item_id = 3;
inline void GGAuctionBuyItemPacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GGAuctionBuyItemPacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GGAuctionBuyItemPacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionBuyItemPacket.item_id)
  return _internal_item_id();
}
inline void GGAuctionBuyItemPacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GGAuctionBuyItemPacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionBuyItemPacket.item_id)
}

// uint64 paid_gold = 4;
inline void GGAuctionBuyItemPacket::clear_paid_gold() {
  _impl_.paid_gold_ = uint64_t{0u};
}
inline uint64_t GGAuctionBuyItemPacket::_internal_paid_gold() const {
  return _impl_.paid_gold_;
}
inline uint64_t GGAuctionBuyItemPacket::paid_gold() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionBuyItemPacket.paid_gold)
  return _internal_paid_gold();
}
inline void GGAuctionBuyItemPacket::_internal_set_paid_gold(uint64_t value) {
  
  _impl_.paid_gold_ = value;
}
inline void GGAuctionBuyItemPacket::set_paid_gold(uint64_t value) {
  _internal_set_paid_gold(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionBuyItemPacket.paid_gold)
}

// -------------------------------------------------------------------

// GGAuctionTakeGoldPacket

// uint32 owner_id = 1;
inline void GGAuctionTakeGoldPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionTakeGoldPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionTakeGoldPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionTakeGoldPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionTakeGoldPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionTakeGoldPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionTakeGoldPacket.owner_id)
}

// uint64 gold = 2;
inline void GGAuctionTakeGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GGAuctionTakeGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GGAuctionTakeGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionTakeGoldPacket.gold)
  return _internal_gold();
}
inline void GGAuctionTakeGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GGAuctionTakeGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionTakeGoldPacket.gold)
}

// -------------------------------------------------------------------

// GGAuctionSearchItemsPacket

// uint32 pid = 1;
inline void GGAuctionSearchItemsPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGAuctionSearchItemsPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGAuctionSearchItemsPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionSearchItemsPacket.pid)
  return _internal_pid();
}
inline void GGAuctionSearchItemsPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGAuctionSearchItemsPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionSearchItemsPacket.pid)
}

// uint32 page = 2;
inline void GGAuctionSearchItemsPacket::clear_page() {
  _impl_.page_ = 0u;
}
inline uint32_t GGAuctionSearchItemsPacket::_internal_page() const {
  return _impl_.page_;
}
inline uint32_t GGAuctionSearchItemsPacket::page() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionSearchItemsPacket.page)
  return _internal_page();
}
inline void GGAuctionSearchItemsPacket::_internal_set_page(uint32_t value) {
  
  _impl_.page_ = value;
}
inline void GGAuctionSearchItemsPacket::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionSearchItemsPacket.page)
}

// uint32 language = 3;
inline void GGAuctionSearchItemsPacket::clear_language() {
  _impl_.language_ = 0u;
}
inline uint32_t GGAuctionSearchItemsPacket::_internal_language() const {
  return _impl_.language_;
}
inline uint32_t GGAuctionSearchItemsPacket::language() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionSearchItemsPacket.language)
  return _internal_language();
}
inline void GGAuctionSearchItemsPacket::_internal_set_language(uint32_t value) {
  
  _impl_.language_ = value;
}
inline void GGAuctionSearchItemsPacket::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionSearchItemsPacket.language)
}

// .network.TDataAuctionSearch options = 4;
inline bool GGAuctionSearchItemsPacket::_internal_has_options() const {
  return this != internal_default_instance() && _impl_.options_ != nullptr;
}
inline bool GGAuctionSearchItemsPacket::has_options() const {
  return _internal_has_options();
}
inline const ::network::TDataAuctionSearch& GGAuctionSearchItemsPacket::_internal_options() const {
  const ::network::TDataAuctionSearch* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TDataAuctionSearch&>(
      ::network::_TDataAuctionSearch_default_instance_);
}
inline const ::network::TDataAuctionSearch& GGAuctionSearchItemsPacket::options() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionSearchItemsPacket.options)
  return _internal_options();
}
inline void GGAuctionSearchItemsPacket::unsafe_arena_set_allocated_options(
    ::network::TDataAuctionSearch* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GGAuctionSearchItemsPacket.options)
}
inline ::network::TDataAuctionSearch* GGAuctionSearchItemsPacket::release_options() {
  
  ::network::TDataAuctionSearch* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TDataAuctionSearch* GGAuctionSearchItemsPacket::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:network.GGAuctionSearchItemsPacket.options)
  
  ::network::TDataAuctionSearch* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::network::TDataAuctionSearch* GGAuctionSearchItemsPacket::_internal_mutable_options() {
  
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TDataAuctionSearch>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::network::TDataAuctionSearch* GGAuctionSearchItemsPacket::mutable_options() {
  ::network::TDataAuctionSearch* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionSearchItemsPacket.options)
  return _msg;
}
inline void GGAuctionSearchItemsPacket::set_allocated_options(::network::TDataAuctionSearch* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionSearchItemsPacket.options)
}

// -------------------------------------------------------------------

// GGAuctionExtendedSearchItemsPacket

// uint32 pid = 1;
inline void GGAuctionExtendedSearchItemsPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionExtendedSearchItemsPacket.pid)
  return _internal_pid();
}
inline void GGAuctionExtendedSearchItemsPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGAuctionExtendedSearchItemsPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionExtendedSearchItemsPacket.pid)
}

// uint32 page = 2;
inline void GGAuctionExtendedSearchItemsPacket::clear_page() {
  _impl_.page_ = 0u;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::_internal_page() const {
  return _impl_.page_;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::page() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionExtendedSearchItemsPacket.page)
  return _internal_page();
}
inline void GGAuctionExtendedSearchItemsPacket::_internal_set_page(uint32_t value) {
  
  _impl_.page_ = value;
}
inline void GGAuctionExtendedSearchItemsPacket::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionExtendedSearchItemsPacket.page)
}

// uint32 language = 3;
inline void GGAuctionExtendedSearchItemsPacket::clear_language() {
  _impl_.language_ = 0u;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::_internal_language() const {
  return _impl_.language_;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::language() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionExtendedSearchItemsPacket.language)
  return _internal_language();
}
inline void GGAuctionExtendedSearchItemsPacket::_internal_set_language(uint32_t value) {
  
  _impl_.language_ = value;
}
inline void GGAuctionExtendedSearchItemsPacket::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionExtendedSearchItemsPacket.language)
}

// .network.TExtendedDataAuctionSearch options = 4;
inline bool GGAuctionExtendedSearchItemsPacket::_internal_has_options() const {
  return this != internal_default_instance() && _impl_.options_ != nullptr;
}
inline bool GGAuctionExtendedSearchItemsPacket::has_options() const {
  return _internal_has_options();
}
inline const ::network::TExtendedDataAuctionSearch& GGAuctionExtendedSearchItemsPacket::_internal_options() const {
  const ::network::TExtendedDataAuctionSearch* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TExtendedDataAuctionSearch&>(
      ::network::_TExtendedDataAuctionSearch_default_instance_);
}
inline const ::network::TExtendedDataAuctionSearch& GGAuctionExtendedSearchItemsPacket::options() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionExtendedSearchItemsPacket.options)
  return _internal_options();
}
inline void GGAuctionExtendedSearchItemsPacket::unsafe_arena_set_allocated_options(
    ::network::TExtendedDataAuctionSearch* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GGAuctionExtendedSearchItemsPacket.options)
}
inline ::network::TExtendedDataAuctionSearch* GGAuctionExtendedSearchItemsPacket::release_options() {
  
  ::network::TExtendedDataAuctionSearch* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TExtendedDataAuctionSearch* GGAuctionExtendedSearchItemsPacket::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:network.GGAuctionExtendedSearchItemsPacket.options)
  
  ::network::TExtendedDataAuctionSearch* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::network::TExtendedDataAuctionSearch* GGAuctionExtendedSearchItemsPacket::_internal_mutable_options() {
  
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TExtendedDataAuctionSearch>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::network::TExtendedDataAuctionSearch* GGAuctionExtendedSearchItemsPacket::mutable_options() {
  ::network::TExtendedDataAuctionSearch* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionExtendedSearchItemsPacket.options)
  return _msg;
}
inline void GGAuctionExtendedSearchItemsPacket::set_allocated_options(::network::TExtendedDataAuctionSearch* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionExtendedSearchItemsPacket.options)
}

// uint32 map_index = 5;
inline void GGAuctionExtendedSearchItemsPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionExtendedSearchItemsPacket.map_index)
  return _internal_map_index();
}
inline void GGAuctionExtendedSearchItemsPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGAuctionExtendedSearchItemsPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionExtendedSearchItemsPacket.map_index)
}

// uint32 channel = 6;
inline void GGAuctionExtendedSearchItemsPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGAuctionExtendedSearchItemsPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionExtendedSearchItemsPacket.channel)
  return _internal_channel();
}
inline void GGAuctionExtendedSearchItemsPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGAuctionExtendedSearchItemsPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionExtendedSearchItemsPacket.channel)
}

// -------------------------------------------------------------------

// GGAuctionMarkShopPacket

// uint32 pid = 1;
inline void GGAuctionMarkShopPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGAuctionMarkShopPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGAuctionMarkShopPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionMarkShopPacket.pid)
  return _internal_pid();
}
inline void GGAuctionMarkShopPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGAuctionMarkShopPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionMarkShopPacket.pid)
}

// uint32 item_id = 2;
inline void GGAuctionMarkShopPacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GGAuctionMarkShopPacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GGAuctionMarkShopPacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionMarkShopPacket.item_id)
  return _internal_item_id();
}
inline void GGAuctionMarkShopPacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GGAuctionMarkShopPacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionMarkShopPacket.item_id)
}

// -------------------------------------------------------------------

// GGAuctionAnswerMarkShopPacket

// uint32 pid = 1;
inline void GGAuctionAnswerMarkShopPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGAuctionAnswerMarkShopPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGAuctionAnswerMarkShopPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionAnswerMarkShopPacket.pid)
  return _internal_pid();
}
inline void GGAuctionAnswerMarkShopPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGAuctionAnswerMarkShopPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionAnswerMarkShopPacket.pid)
}

// uint32 owner_id = 2;
inline void GGAuctionAnswerMarkShopPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionAnswerMarkShopPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionAnswerMarkShopPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionAnswerMarkShopPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionAnswerMarkShopPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionAnswerMarkShopPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionAnswerMarkShopPacket.owner_id)
}

// -------------------------------------------------------------------

// GGAuctionShopRequestShowPacket

// uint32 pid = 1;
inline void GGAuctionShopRequestShowPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGAuctionShopRequestShowPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGAuctionShopRequestShowPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopRequestShowPacket.pid)
  return _internal_pid();
}
inline void GGAuctionShopRequestShowPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGAuctionShopRequestShowPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopRequestShowPacket.pid)
}

// -------------------------------------------------------------------

// GGAuctionShopOpenPacket

// uint32 owner_id = 1;
inline void GGAuctionShopOpenPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionShopOpenPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionShopOpenPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionShopOpenPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.owner_id)
}

// string owner_name = 2;
inline void GGAuctionShopOpenPacket::clear_owner_name() {
  _impl_.owner_name_.ClearToEmpty();
}
inline const std::string& GGAuctionShopOpenPacket::owner_name() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.owner_name)
  return _internal_owner_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGAuctionShopOpenPacket::set_owner_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.owner_name)
}
inline std::string* GGAuctionShopOpenPacket::mutable_owner_name() {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionShopOpenPacket.owner_name)
  return _s;
}
inline const std::string& GGAuctionShopOpenPacket::_internal_owner_name() const {
  return _impl_.owner_name_.Get();
}
inline void GGAuctionShopOpenPacket::_internal_set_owner_name(const std::string& value) {
  
  _impl_.owner_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGAuctionShopOpenPacket::_internal_mutable_owner_name() {
  
  return _impl_.owner_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGAuctionShopOpenPacket::release_owner_name() {
  // @@protoc_insertion_point(field_release:network.GGAuctionShopOpenPacket.owner_name)
  return _impl_.owner_name_.Release();
}
inline void GGAuctionShopOpenPacket::set_allocated_owner_name(std::string* owner_name) {
  if (owner_name != nullptr) {
    
  } else {
    
  }
  _impl_.owner_name_.SetAllocated(owner_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_name_.IsDefault()) {
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionShopOpenPacket.owner_name)
}

// bytes name = 3;
inline void GGAuctionShopOpenPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGAuctionShopOpenPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGAuctionShopOpenPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.name)
}
inline std::string* GGAuctionShopOpenPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionShopOpenPacket.name)
  return _s;
}
inline const std::string& GGAuctionShopOpenPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGAuctionShopOpenPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGAuctionShopOpenPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGAuctionShopOpenPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGAuctionShopOpenPacket.name)
  return _impl_.name_.Release();
}
inline void GGAuctionShopOpenPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionShopOpenPacket.name)
}

// uint32 style = 4;
inline void GGAuctionShopOpenPacket::clear_style() {
  _impl_.style_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_style() const {
  return _impl_.style_;
}
inline uint32_t GGAuctionShopOpenPacket::style() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.style)
  return _internal_style();
}
inline void GGAuctionShopOpenPacket::_internal_set_style(uint32_t value) {
  
  _impl_.style_ = value;
}
inline void GGAuctionShopOpenPacket::set_style(uint32_t value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.style)
}

// uint32 vnum = 5;
inline void GGAuctionShopOpenPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GGAuctionShopOpenPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.vnum)
  return _internal_vnum();
}
inline void GGAuctionShopOpenPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GGAuctionShopOpenPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.vnum)
}

// float color_red = 6;
inline void GGAuctionShopOpenPacket::clear_color_red() {
  _impl_.color_red_ = 0;
}
inline float GGAuctionShopOpenPacket::_internal_color_red() const {
  return _impl_.color_red_;
}
inline float GGAuctionShopOpenPacket::color_red() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.color_red)
  return _internal_color_red();
}
inline void GGAuctionShopOpenPacket::_internal_set_color_red(float value) {
  
  _impl_.color_red_ = value;
}
inline void GGAuctionShopOpenPacket::set_color_red(float value) {
  _internal_set_color_red(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.color_red)
}

// float color_green = 7;
inline void GGAuctionShopOpenPacket::clear_color_green() {
  _impl_.color_green_ = 0;
}
inline float GGAuctionShopOpenPacket::_internal_color_green() const {
  return _impl_.color_green_;
}
inline float GGAuctionShopOpenPacket::color_green() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.color_green)
  return _internal_color_green();
}
inline void GGAuctionShopOpenPacket::_internal_set_color_green(float value) {
  
  _impl_.color_green_ = value;
}
inline void GGAuctionShopOpenPacket::set_color_green(float value) {
  _internal_set_color_green(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.color_green)
}

// float color_blue = 8;
inline void GGAuctionShopOpenPacket::clear_color_blue() {
  _impl_.color_blue_ = 0;
}
inline float GGAuctionShopOpenPacket::_internal_color_blue() const {
  return _impl_.color_blue_;
}
inline float GGAuctionShopOpenPacket::color_blue() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.color_blue)
  return _internal_color_blue();
}
inline void GGAuctionShopOpenPacket::_internal_set_color_blue(float value) {
  
  _impl_.color_blue_ = value;
}
inline void GGAuctionShopOpenPacket::set_color_blue(float value) {
  _internal_set_color_blue(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.color_blue)
}

// uint32 channel = 9;
inline void GGAuctionShopOpenPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGAuctionShopOpenPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.channel)
  return _internal_channel();
}
inline void GGAuctionShopOpenPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGAuctionShopOpenPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.channel)
}

// uint32 map_index = 10;
inline void GGAuctionShopOpenPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGAuctionShopOpenPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.map_index)
  return _internal_map_index();
}
inline void GGAuctionShopOpenPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGAuctionShopOpenPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.map_index)
}

// uint32 x = 11;
inline void GGAuctionShopOpenPacket::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t GGAuctionShopOpenPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.x)
  return _internal_x();
}
inline void GGAuctionShopOpenPacket::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void GGAuctionShopOpenPacket::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.x)
}

// uint32 y = 12;
inline void GGAuctionShopOpenPacket::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t GGAuctionShopOpenPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.y)
  return _internal_y();
}
inline void GGAuctionShopOpenPacket::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void GGAuctionShopOpenPacket::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.y)
}

// uint32 timeout = 13;
inline void GGAuctionShopOpenPacket::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline uint32_t GGAuctionShopOpenPacket::_internal_timeout() const {
  return _impl_.timeout_;
}
inline uint32_t GGAuctionShopOpenPacket::timeout() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.timeout)
  return _internal_timeout();
}
inline void GGAuctionShopOpenPacket::_internal_set_timeout(uint32_t value) {
  
  _impl_.timeout_ = value;
}
inline void GGAuctionShopOpenPacket::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopOpenPacket.timeout)
}

// repeated .network.TItemData items = 14;
inline int GGAuctionShopOpenPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GGAuctionShopOpenPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* GGAuctionShopOpenPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.GGAuctionShopOpenPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
GGAuctionShopOpenPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.GGAuctionShopOpenPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& GGAuctionShopOpenPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& GGAuctionShopOpenPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopOpenPacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* GGAuctionShopOpenPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* GGAuctionShopOpenPacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.GGAuctionShopOpenPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
GGAuctionShopOpenPacket::items() const {
  // @@protoc_insertion_point(field_list:network.GGAuctionShopOpenPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GGAuctionShopTakeGoldPacket

// uint32 owner_id = 1;
inline void GGAuctionShopTakeGoldPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionShopTakeGoldPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionShopTakeGoldPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopTakeGoldPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionShopTakeGoldPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionShopTakeGoldPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopTakeGoldPacket.owner_id)
}

// uint64 gold = 2;
inline void GGAuctionShopTakeGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GGAuctionShopTakeGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GGAuctionShopTakeGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopTakeGoldPacket.gold)
  return _internal_gold();
}
inline void GGAuctionShopTakeGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GGAuctionShopTakeGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopTakeGoldPacket.gold)
}

// -------------------------------------------------------------------

// GGAuctionShopSpawnPacket

// bytes name = 1;
inline void GGAuctionShopSpawnPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGAuctionShopSpawnPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGAuctionShopSpawnPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.name)
}
inline std::string* GGAuctionShopSpawnPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionShopSpawnPacket.name)
  return _s;
}
inline const std::string& GGAuctionShopSpawnPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGAuctionShopSpawnPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGAuctionShopSpawnPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGAuctionShopSpawnPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGAuctionShopSpawnPacket.name)
  return _impl_.name_.Release();
}
inline void GGAuctionShopSpawnPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionShopSpawnPacket.name)
}

// bytes owner_name = 2;
inline void GGAuctionShopSpawnPacket::clear_owner_name() {
  _impl_.owner_name_.ClearToEmpty();
}
inline const std::string& GGAuctionShopSpawnPacket::owner_name() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.owner_name)
  return _internal_owner_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGAuctionShopSpawnPacket::set_owner_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.owner_name)
}
inline std::string* GGAuctionShopSpawnPacket::mutable_owner_name() {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:network.GGAuctionShopSpawnPacket.owner_name)
  return _s;
}
inline const std::string& GGAuctionShopSpawnPacket::_internal_owner_name() const {
  return _impl_.owner_name_.Get();
}
inline void GGAuctionShopSpawnPacket::_internal_set_owner_name(const std::string& value) {
  
  _impl_.owner_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGAuctionShopSpawnPacket::_internal_mutable_owner_name() {
  
  return _impl_.owner_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGAuctionShopSpawnPacket::release_owner_name() {
  // @@protoc_insertion_point(field_release:network.GGAuctionShopSpawnPacket.owner_name)
  return _impl_.owner_name_.Release();
}
inline void GGAuctionShopSpawnPacket::set_allocated_owner_name(std::string* owner_name) {
  if (owner_name != nullptr) {
    
  } else {
    
  }
  _impl_.owner_name_.SetAllocated(owner_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_name_.IsDefault()) {
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGAuctionShopSpawnPacket.owner_name)
}

// uint32 owner_id = 3;
inline void GGAuctionShopSpawnPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionShopSpawnPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionShopSpawnPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionShopSpawnPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionShopSpawnPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.owner_id)
}

// uint32 vnum = 4;
inline void GGAuctionShopSpawnPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GGAuctionShopSpawnPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GGAuctionShopSpawnPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.vnum)
  return _internal_vnum();
}
inline void GGAuctionShopSpawnPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GGAuctionShopSpawnPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.vnum)
}

// uint32 style = 5;
inline void GGAuctionShopSpawnPacket::clear_style() {
  _impl_.style_ = 0u;
}
inline uint32_t GGAuctionShopSpawnPacket::_internal_style() const {
  return _impl_.style_;
}
inline uint32_t GGAuctionShopSpawnPacket::style() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.style)
  return _internal_style();
}
inline void GGAuctionShopSpawnPacket::_internal_set_style(uint32_t value) {
  
  _impl_.style_ = value;
}
inline void GGAuctionShopSpawnPacket::set_style(uint32_t value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.style)
}

// float color_red = 6;
inline void GGAuctionShopSpawnPacket::clear_color_red() {
  _impl_.color_red_ = 0;
}
inline float GGAuctionShopSpawnPacket::_internal_color_red() const {
  return _impl_.color_red_;
}
inline float GGAuctionShopSpawnPacket::color_red() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.color_red)
  return _internal_color_red();
}
inline void GGAuctionShopSpawnPacket::_internal_set_color_red(float value) {
  
  _impl_.color_red_ = value;
}
inline void GGAuctionShopSpawnPacket::set_color_red(float value) {
  _internal_set_color_red(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.color_red)
}

// float color_green = 7;
inline void GGAuctionShopSpawnPacket::clear_color_green() {
  _impl_.color_green_ = 0;
}
inline float GGAuctionShopSpawnPacket::_internal_color_green() const {
  return _impl_.color_green_;
}
inline float GGAuctionShopSpawnPacket::color_green() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.color_green)
  return _internal_color_green();
}
inline void GGAuctionShopSpawnPacket::_internal_set_color_green(float value) {
  
  _impl_.color_green_ = value;
}
inline void GGAuctionShopSpawnPacket::set_color_green(float value) {
  _internal_set_color_green(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.color_green)
}

// float color_blue = 8;
inline void GGAuctionShopSpawnPacket::clear_color_blue() {
  _impl_.color_blue_ = 0;
}
inline float GGAuctionShopSpawnPacket::_internal_color_blue() const {
  return _impl_.color_blue_;
}
inline float GGAuctionShopSpawnPacket::color_blue() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.color_blue)
  return _internal_color_blue();
}
inline void GGAuctionShopSpawnPacket::_internal_set_color_blue(float value) {
  
  _impl_.color_blue_ = value;
}
inline void GGAuctionShopSpawnPacket::set_color_blue(float value) {
  _internal_set_color_blue(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.color_blue)
}

// uint32 map_index = 9;
inline void GGAuctionShopSpawnPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGAuctionShopSpawnPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGAuctionShopSpawnPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.map_index)
  return _internal_map_index();
}
inline void GGAuctionShopSpawnPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGAuctionShopSpawnPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.map_index)
}

// uint32 x = 10;
inline void GGAuctionShopSpawnPacket::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t GGAuctionShopSpawnPacket::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t GGAuctionShopSpawnPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.x)
  return _internal_x();
}
inline void GGAuctionShopSpawnPacket::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void GGAuctionShopSpawnPacket::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.x)
}

// uint32 y = 11;
inline void GGAuctionShopSpawnPacket::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t GGAuctionShopSpawnPacket::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t GGAuctionShopSpawnPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopSpawnPacket.y)
  return _internal_y();
}
inline void GGAuctionShopSpawnPacket::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void GGAuctionShopSpawnPacket::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopSpawnPacket.y)
}

// -------------------------------------------------------------------

// GGAuctionShopDespawnPacket

// uint32 owner_id = 1;
inline void GGAuctionShopDespawnPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionShopDespawnPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionShopDespawnPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopDespawnPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionShopDespawnPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionShopDespawnPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopDespawnPacket.owner_id)
}

// -------------------------------------------------------------------

// GGAuctionShopViewPacket

// uint32 player_id = 1;
inline void GGAuctionShopViewPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAuctionShopViewPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAuctionShopViewPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopViewPacket.player_id)
  return _internal_player_id();
}
inline void GGAuctionShopViewPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAuctionShopViewPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopViewPacket.player_id)
}

// uint32 owner_id = 2;
inline void GGAuctionShopViewPacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GGAuctionShopViewPacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GGAuctionShopViewPacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopViewPacket.owner_id)
  return _internal_owner_id();
}
inline void GGAuctionShopViewPacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GGAuctionShopViewPacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopViewPacket.owner_id)
}

// -------------------------------------------------------------------

// GGAuctionShopViewCancelPacket

// uint32 player_id = 1;
inline void GGAuctionShopViewCancelPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAuctionShopViewCancelPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAuctionShopViewCancelPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopViewCancelPacket.player_id)
  return _internal_player_id();
}
inline void GGAuctionShopViewCancelPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAuctionShopViewCancelPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopViewCancelPacket.player_id)
}

// -------------------------------------------------------------------

// GGAuctionShopRequestHistoryPacket

// uint32 player_id = 1;
inline void GGAuctionShopRequestHistoryPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAuctionShopRequestHistoryPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAuctionShopRequestHistoryPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopRequestHistoryPacket.player_id)
  return _internal_player_id();
}
inline void GGAuctionShopRequestHistoryPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAuctionShopRequestHistoryPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopRequestHistoryPacket.player_id)
}

// -------------------------------------------------------------------

// GGAuctionShopRenewPacket

// uint32 player_id = 1;
inline void GGAuctionShopRenewPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAuctionShopRenewPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAuctionShopRenewPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopRenewPacket.player_id)
  return _internal_player_id();
}
inline void GGAuctionShopRenewPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAuctionShopRenewPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopRenewPacket.player_id)
}

// uint32 timeout = 2;
inline void GGAuctionShopRenewPacket::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline uint32_t GGAuctionShopRenewPacket::_internal_timeout() const {
  return _impl_.timeout_;
}
inline uint32_t GGAuctionShopRenewPacket::timeout() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopRenewPacket.timeout)
  return _internal_timeout();
}
inline void GGAuctionShopRenewPacket::_internal_set_timeout(uint32_t value) {
  
  _impl_.timeout_ = value;
}
inline void GGAuctionShopRenewPacket::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopRenewPacket.timeout)
}

// -------------------------------------------------------------------

// GGAuctionShopClosePacket

// uint32 player_id = 1;
inline void GGAuctionShopClosePacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAuctionShopClosePacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAuctionShopClosePacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopClosePacket.player_id)
  return _internal_player_id();
}
inline void GGAuctionShopClosePacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAuctionShopClosePacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopClosePacket.player_id)
}

// uint32 map_index = 2;
inline void GGAuctionShopClosePacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGAuctionShopClosePacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGAuctionShopClosePacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopClosePacket.map_index)
  return _internal_map_index();
}
inline void GGAuctionShopClosePacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGAuctionShopClosePacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopClosePacket.map_index)
}

// uint32 channel = 3;
inline void GGAuctionShopClosePacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GGAuctionShopClosePacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GGAuctionShopClosePacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionShopClosePacket.channel)
  return _internal_channel();
}
inline void GGAuctionShopClosePacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GGAuctionShopClosePacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionShopClosePacket.channel)
}

// -------------------------------------------------------------------

// GGAuctionRequestAveragePricePacket

// uint32 player_id = 1;
inline void GGAuctionRequestAveragePricePacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GGAuctionRequestAveragePricePacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GGAuctionRequestAveragePricePacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionRequestAveragePricePacket.player_id)
  return _internal_player_id();
}
inline void GGAuctionRequestAveragePricePacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GGAuctionRequestAveragePricePacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionRequestAveragePricePacket.player_id)
}

// uint32 requestor = 2;
inline void GGAuctionRequestAveragePricePacket::clear_requestor() {
  _impl_.requestor_ = 0u;
}
inline uint32_t GGAuctionRequestAveragePricePacket::_internal_requestor() const {
  return _impl_.requestor_;
}
inline uint32_t GGAuctionRequestAveragePricePacket::requestor() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionRequestAveragePricePacket.requestor)
  return _internal_requestor();
}
inline void GGAuctionRequestAveragePricePacket::_internal_set_requestor(uint32_t value) {
  
  _impl_.requestor_ = value;
}
inline void GGAuctionRequestAveragePricePacket::set_requestor(uint32_t value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionRequestAveragePricePacket.requestor)
}

// uint32 vnum = 3;
inline void GGAuctionRequestAveragePricePacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GGAuctionRequestAveragePricePacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GGAuctionRequestAveragePricePacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionRequestAveragePricePacket.vnum)
  return _internal_vnum();
}
inline void GGAuctionRequestAveragePricePacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GGAuctionRequestAveragePricePacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionRequestAveragePricePacket.vnum)
}

// uint32 count = 4;
inline void GGAuctionRequestAveragePricePacket::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t GGAuctionRequestAveragePricePacket::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t GGAuctionRequestAveragePricePacket::count() const {
  // @@protoc_insertion_point(field_get:network.GGAuctionRequestAveragePricePacket.count)
  return _internal_count();
}
inline void GGAuctionRequestAveragePricePacket::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void GGAuctionRequestAveragePricePacket::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.GGAuctionRequestAveragePricePacket.count)
}

// -------------------------------------------------------------------

// GGEventManagerOpenRegistrationPacket

// uint32 event_index = 1;
inline void GGEventManagerOpenRegistrationPacket::clear_event_index() {
  _impl_.event_index_ = 0u;
}
inline uint32_t GGEventManagerOpenRegistrationPacket::_internal_event_index() const {
  return _impl_.event_index_;
}
inline uint32_t GGEventManagerOpenRegistrationPacket::event_index() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerOpenRegistrationPacket.event_index)
  return _internal_event_index();
}
inline void GGEventManagerOpenRegistrationPacket::_internal_set_event_index(uint32_t value) {
  
  _impl_.event_index_ = value;
}
inline void GGEventManagerOpenRegistrationPacket::set_event_index(uint32_t value) {
  _internal_set_event_index(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerOpenRegistrationPacket.event_index)
}

// -------------------------------------------------------------------

// GGEventManagerCloseRegistrationPacket

// bool clear_event_index = 1;
inline void GGEventManagerCloseRegistrationPacket::clear_clear_event_index() {
  _impl_.clear_event_index_ = false;
}
inline bool GGEventManagerCloseRegistrationPacket::_internal_clear_event_index() const {
  return _impl_.clear_event_index_;
}
inline bool GGEventManagerCloseRegistrationPacket::clear_event_index() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerCloseRegistrationPacket.clear_event_index)
  return _internal_clear_event_index();
}
inline void GGEventManagerCloseRegistrationPacket::_internal_set_clear_event_index(bool value) {
  
  _impl_.clear_event_index_ = value;
}
inline void GGEventManagerCloseRegistrationPacket::set_clear_event_index(bool value) {
  _internal_set_clear_event_index(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerCloseRegistrationPacket.clear_event_index)
}

// -------------------------------------------------------------------

// GGEventManagerIgnorePlayerPacket

// uint32 pid = 1;
inline void GGEventManagerIgnorePlayerPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GGEventManagerIgnorePlayerPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GGEventManagerIgnorePlayerPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerIgnorePlayerPacket.pid)
  return _internal_pid();
}
inline void GGEventManagerIgnorePlayerPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GGEventManagerIgnorePlayerPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerIgnorePlayerPacket.pid)
}

// -------------------------------------------------------------------

// GGEventManagerOpenAnnouncementPacket

// uint32 type = 1;
inline void GGEventManagerOpenAnnouncementPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GGEventManagerOpenAnnouncementPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GGEventManagerOpenAnnouncementPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerOpenAnnouncementPacket.type)
  return _internal_type();
}
inline void GGEventManagerOpenAnnouncementPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GGEventManagerOpenAnnouncementPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerOpenAnnouncementPacket.type)
}

// uint32 tm_stamp = 2;
inline void GGEventManagerOpenAnnouncementPacket::clear_tm_stamp() {
  _impl_.tm_stamp_ = 0u;
}
inline uint32_t GGEventManagerOpenAnnouncementPacket::_internal_tm_stamp() const {
  return _impl_.tm_stamp_;
}
inline uint32_t GGEventManagerOpenAnnouncementPacket::tm_stamp() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerOpenAnnouncementPacket.tm_stamp)
  return _internal_tm_stamp();
}
inline void GGEventManagerOpenAnnouncementPacket::_internal_set_tm_stamp(uint32_t value) {
  
  _impl_.tm_stamp_ = value;
}
inline void GGEventManagerOpenAnnouncementPacket::set_tm_stamp(uint32_t value) {
  _internal_set_tm_stamp(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerOpenAnnouncementPacket.tm_stamp)
}

// -------------------------------------------------------------------

// GGEventManagerTagTeamRegisterPacket

// uint32 pid1 = 1;
inline void GGEventManagerTagTeamRegisterPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GGEventManagerTagTeamRegisterPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GGEventManagerTagTeamRegisterPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamRegisterPacket.pid1)
  return _internal_pid1();
}
inline void GGEventManagerTagTeamRegisterPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GGEventManagerTagTeamRegisterPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerTagTeamRegisterPacket.pid1)
}

// uint32 pid2 = 2;
inline void GGEventManagerTagTeamRegisterPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GGEventManagerTagTeamRegisterPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GGEventManagerTagTeamRegisterPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamRegisterPacket.pid2)
  return _internal_pid2();
}
inline void GGEventManagerTagTeamRegisterPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GGEventManagerTagTeamRegisterPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerTagTeamRegisterPacket.pid2)
}

// uint32 groupidx = 3;
inline void GGEventManagerTagTeamRegisterPacket::clear_groupidx() {
  _impl_.groupidx_ = 0u;
}
inline uint32_t GGEventManagerTagTeamRegisterPacket::_internal_groupidx() const {
  return _impl_.groupidx_;
}
inline uint32_t GGEventManagerTagTeamRegisterPacket::groupidx() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamRegisterPacket.groupidx)
  return _internal_groupidx();
}
inline void GGEventManagerTagTeamRegisterPacket::_internal_set_groupidx(uint32_t value) {
  
  _impl_.groupidx_ = value;
}
inline void GGEventManagerTagTeamRegisterPacket::set_groupidx(uint32_t value) {
  _internal_set_groupidx(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerTagTeamRegisterPacket.groupidx)
}

// -------------------------------------------------------------------

// GGEventManagerTagTeamUnregisterPacket

// uint32 pid1 = 1;
inline void GGEventManagerTagTeamUnregisterPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GGEventManagerTagTeamUnregisterPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GGEventManagerTagTeamUnregisterPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamUnregisterPacket.pid1)
  return _internal_pid1();
}
inline void GGEventManagerTagTeamUnregisterPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GGEventManagerTagTeamUnregisterPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerTagTeamUnregisterPacket.pid1)
}

// uint32 pid2 = 2;
inline void GGEventManagerTagTeamUnregisterPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GGEventManagerTagTeamUnregisterPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GGEventManagerTagTeamUnregisterPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamUnregisterPacket.pid2)
  return _internal_pid2();
}
inline void GGEventManagerTagTeamUnregisterPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GGEventManagerTagTeamUnregisterPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerTagTeamUnregisterPacket.pid2)
}

// uint32 groupidx = 3;
inline void GGEventManagerTagTeamUnregisterPacket::clear_groupidx() {
  _impl_.groupidx_ = 0u;
}
inline uint32_t GGEventManagerTagTeamUnregisterPacket::_internal_groupidx() const {
  return _impl_.groupidx_;
}
inline uint32_t GGEventManagerTagTeamUnregisterPacket::groupidx() const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamUnregisterPacket.groupidx)
  return _internal_groupidx();
}
inline void GGEventManagerTagTeamUnregisterPacket::_internal_set_groupidx(uint32_t value) {
  
  _impl_.groupidx_ = value;
}
inline void GGEventManagerTagTeamUnregisterPacket::set_groupidx(uint32_t value) {
  _internal_set_groupidx(value);
  // @@protoc_insertion_point(field_set:network.GGEventManagerTagTeamUnregisterPacket.groupidx)
}

// -------------------------------------------------------------------

// GGEventManagerTagTeamCreatePacket

// repeated .network.TEventManagerTagTeam teams = 1;
inline int GGEventManagerTagTeamCreatePacket::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int GGEventManagerTagTeamCreatePacket::teams_size() const {
  return _internal_teams_size();
}
inline ::network::TEventManagerTagTeam* GGEventManagerTagTeamCreatePacket::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:network.GGEventManagerTagTeamCreatePacket.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEventManagerTagTeam >*
GGEventManagerTagTeamCreatePacket::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:network.GGEventManagerTagTeamCreatePacket.teams)
  return &_impl_.teams_;
}
inline const ::network::TEventManagerTagTeam& GGEventManagerTagTeamCreatePacket::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::network::TEventManagerTagTeam& GGEventManagerTagTeamCreatePacket::teams(int index) const {
  // @@protoc_insertion_point(field_get:network.GGEventManagerTagTeamCreatePacket.teams)
  return _internal_teams(index);
}
inline ::network::TEventManagerTagTeam* GGEventManagerTagTeamCreatePacket::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::network::TEventManagerTagTeam* GGEventManagerTagTeamCreatePacket::add_teams() {
  ::network::TEventManagerTagTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:network.GGEventManagerTagTeamCreatePacket.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEventManagerTagTeam >&
GGEventManagerTagTeamCreatePacket::teams() const {
  // @@protoc_insertion_point(field_list:network.GGEventManagerTagTeamCreatePacket.teams)
  return _impl_.teams_;
}

// -------------------------------------------------------------------

// GGGuildChatPacket

// uint32 guild_id = 1;
inline void GGGuildChatPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GGGuildChatPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GGGuildChatPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GGGuildChatPacket.guild_id)
  return _internal_guild_id();
}
inline void GGGuildChatPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GGGuildChatPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GGGuildChatPacket.guild_id)
}

// bytes message = 2;
inline void GGGuildChatPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GGGuildChatPacket::message() const {
  // @@protoc_insertion_point(field_get:network.GGGuildChatPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGGuildChatPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGGuildChatPacket.message)
}
inline std::string* GGGuildChatPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GGGuildChatPacket.message)
  return _s;
}
inline const std::string& GGGuildChatPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GGGuildChatPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GGGuildChatPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GGGuildChatPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GGGuildChatPacket.message)
  return _impl_.message_.Release();
}
inline void GGGuildChatPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGGuildChatPacket.message)
}

// -------------------------------------------------------------------

// GGGuildSetMemberCountBonusPacket

// uint32 guild_id = 1;
inline void GGGuildSetMemberCountBonusPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GGGuildSetMemberCountBonusPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GGGuildSetMemberCountBonusPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GGGuildSetMemberCountBonusPacket.guild_id)
  return _internal_guild_id();
}
inline void GGGuildSetMemberCountBonusPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GGGuildSetMemberCountBonusPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GGGuildSetMemberCountBonusPacket.guild_id)
}

// int32 bonus = 2;
inline void GGGuildSetMemberCountBonusPacket::clear_bonus() {
  _impl_.bonus_ = 0;
}
inline int32_t GGGuildSetMemberCountBonusPacket::_internal_bonus() const {
  return _impl_.bonus_;
}
inline int32_t GGGuildSetMemberCountBonusPacket::bonus() const {
  // @@protoc_insertion_point(field_get:network.GGGuildSetMemberCountBonusPacket.bonus)
  return _internal_bonus();
}
inline void GGGuildSetMemberCountBonusPacket::_internal_set_bonus(int32_t value) {
  
  _impl_.bonus_ = value;
}
inline void GGGuildSetMemberCountBonusPacket::set_bonus(int32_t value) {
  _internal_set_bonus(value);
  // @@protoc_insertion_point(field_set:network.GGGuildSetMemberCountBonusPacket.bonus)
}

// -------------------------------------------------------------------

// GGGuildWarZoneMapIndexPacket

// uint32 guild_id1 = 1;
inline void GGGuildWarZoneMapIndexPacket::clear_guild_id1() {
  _impl_.guild_id1_ = 0u;
}
inline uint32_t GGGuildWarZoneMapIndexPacket::_internal_guild_id1() const {
  return _impl_.guild_id1_;
}
inline uint32_t GGGuildWarZoneMapIndexPacket::guild_id1() const {
  // @@protoc_insertion_point(field_get:network.GGGuildWarZoneMapIndexPacket.guild_id1)
  return _internal_guild_id1();
}
inline void GGGuildWarZoneMapIndexPacket::_internal_set_guild_id1(uint32_t value) {
  
  _impl_.guild_id1_ = value;
}
inline void GGGuildWarZoneMapIndexPacket::set_guild_id1(uint32_t value) {
  _internal_set_guild_id1(value);
  // @@protoc_insertion_point(field_set:network.GGGuildWarZoneMapIndexPacket.guild_id1)
}

// uint32 guild_id2 = 2;
inline void GGGuildWarZoneMapIndexPacket::clear_guild_id2() {
  _impl_.guild_id2_ = 0u;
}
inline uint32_t GGGuildWarZoneMapIndexPacket::_internal_guild_id2() const {
  return _impl_.guild_id2_;
}
inline uint32_t GGGuildWarZoneMapIndexPacket::guild_id2() const {
  // @@protoc_insertion_point(field_get:network.GGGuildWarZoneMapIndexPacket.guild_id2)
  return _internal_guild_id2();
}
inline void GGGuildWarZoneMapIndexPacket::_internal_set_guild_id2(uint32_t value) {
  
  _impl_.guild_id2_ = value;
}
inline void GGGuildWarZoneMapIndexPacket::set_guild_id2(uint32_t value) {
  _internal_set_guild_id2(value);
  // @@protoc_insertion_point(field_set:network.GGGuildWarZoneMapIndexPacket.guild_id2)
}

// uint32 map_index = 3;
inline void GGGuildWarZoneMapIndexPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GGGuildWarZoneMapIndexPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GGGuildWarZoneMapIndexPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GGGuildWarZoneMapIndexPacket.map_index)
  return _internal_map_index();
}
inline void GGGuildWarZoneMapIndexPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GGGuildWarZoneMapIndexPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GGGuildWarZoneMapIndexPacket.map_index)
}

// -------------------------------------------------------------------

// GGGuildChangeNamePacket

// uint32 guild_id = 1;
inline void GGGuildChangeNamePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GGGuildChangeNamePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GGGuildChangeNamePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GGGuildChangeNamePacket.guild_id)
  return _internal_guild_id();
}
inline void GGGuildChangeNamePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GGGuildChangeNamePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GGGuildChangeNamePacket.guild_id)
}

// bytes name = 2;
inline void GGGuildChangeNamePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GGGuildChangeNamePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GGGuildChangeNamePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GGGuildChangeNamePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GGGuildChangeNamePacket.name)
}
inline std::string* GGGuildChangeNamePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GGGuildChangeNamePacket.name)
  return _s;
}
inline const std::string& GGGuildChangeNamePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GGGuildChangeNamePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GGGuildChangeNamePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GGGuildChangeNamePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GGGuildChangeNamePacket.name)
  return _impl_.name_.Release();
}
inline void GGGuildChangeNamePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GGGuildChangeNamePacket.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gg_5fpackets_2eproto
