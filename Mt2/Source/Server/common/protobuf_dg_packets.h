// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dg_packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dg_5fpackets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dg_5fpackets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf_data.h"
#include "protobuf_data_item.h"
#include "protobuf_data_player.h"
#include "protobuf_data_pet.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dg_5fpackets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dg_5fpackets_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dg_5fpackets_2eproto;
namespace network {
class DGAddBlockCountryIPPacket;
struct DGAddBlockCountryIPPacketDefaultTypeInternal;
extern DGAddBlockCountryIPPacketDefaultTypeInternal _DGAddBlockCountryIPPacket_default_instance_;
class DGAffectLoadPacket;
struct DGAffectLoadPacketDefaultTypeInternal;
extern DGAffectLoadPacketDefaultTypeInternal _DGAffectLoadPacket_default_instance_;
class DGAuctionDeletePlayer;
struct DGAuctionDeletePlayerDefaultTypeInternal;
extern DGAuctionDeletePlayerDefaultTypeInternal _DGAuctionDeletePlayer_default_instance_;
class DGAuthLoginPacket;
struct DGAuthLoginPacketDefaultTypeInternal;
extern DGAuthLoginPacketDefaultTypeInternal _DGAuthLoginPacket_default_instance_;
class DGBillingCheckPacket;
struct DGBillingCheckPacketDefaultTypeInternal;
extern DGBillingCheckPacketDefaultTypeInternal _DGBillingCheckPacket_default_instance_;
class DGBillingExpirePacket;
struct DGBillingExpirePacketDefaultTypeInternal;
extern DGBillingExpirePacketDefaultTypeInternal _DGBillingExpirePacket_default_instance_;
class DGBillingLoginPacket;
struct DGBillingLoginPacketDefaultTypeInternal;
extern DGBillingLoginPacketDefaultTypeInternal _DGBillingLoginPacket_default_instance_;
class DGBillingRepairPacket;
struct DGBillingRepairPacketDefaultTypeInternal;
extern DGBillingRepairPacketDefaultTypeInternal _DGBillingRepairPacket_default_instance_;
class DGBlockExceptionPacket;
struct DGBlockExceptionPacketDefaultTypeInternal;
extern DGBlockExceptionPacketDefaultTypeInternal _DGBlockExceptionPacket_default_instance_;
class DGBootPacket;
struct DGBootPacketDefaultTypeInternal;
extern DGBootPacketDefaultTypeInternal _DGBootPacket_default_instance_;
class DGChangeCharacterPrivPacket;
struct DGChangeCharacterPrivPacketDefaultTypeInternal;
extern DGChangeCharacterPrivPacketDefaultTypeInternal _DGChangeCharacterPrivPacket_default_instance_;
class DGChangeEmpirePrivPacket;
struct DGChangeEmpirePrivPacketDefaultTypeInternal;
extern DGChangeEmpirePrivPacketDefaultTypeInternal _DGChangeEmpirePrivPacket_default_instance_;
class DGChangeGuildPrivPacket;
struct DGChangeGuildPrivPacketDefaultTypeInternal;
extern DGChangeGuildPrivPacketDefaultTypeInternal _DGChangeGuildPrivPacket_default_instance_;
class DGChangeNamePacket;
struct DGChangeNamePacketDefaultTypeInternal;
extern DGChangeNamePacketDefaultTypeInternal _DGChangeNamePacket_default_instance_;
class DGChannelSwitchPacket;
struct DGChannelSwitchPacketDefaultTypeInternal;
extern DGChannelSwitchPacketDefaultTypeInternal _DGChannelSwitchPacket_default_instance_;
class DGCreateObjectPacket;
struct DGCreateObjectPacketDefaultTypeInternal;
extern DGCreateObjectPacketDefaultTypeInternal _DGCreateObjectPacket_default_instance_;
class DGDeleteObjectPacket;
struct DGDeleteObjectPacketDefaultTypeInternal;
extern DGDeleteObjectPacketDefaultTypeInternal _DGDeleteObjectPacket_default_instance_;
class DGDetailLogPacket;
struct DGDetailLogPacketDefaultTypeInternal;
extern DGDetailLogPacketDefaultTypeInternal _DGDetailLogPacket_default_instance_;
class DGEmpireSelectPacket;
struct DGEmpireSelectPacketDefaultTypeInternal;
extern DGEmpireSelectPacketDefaultTypeInternal _DGEmpireSelectPacket_default_instance_;
class DGEquipmentPageLoadPacket;
struct DGEquipmentPageLoadPacketDefaultTypeInternal;
extern DGEquipmentPageLoadPacketDefaultTypeInternal _DGEquipmentPageLoadPacket_default_instance_;
class DGGuildAddMemberPacket;
struct DGGuildAddMemberPacketDefaultTypeInternal;
extern DGGuildAddMemberPacketDefaultTypeInternal _DGGuildAddMemberPacket_default_instance_;
class DGGuildChangeGradePacket;
struct DGGuildChangeGradePacketDefaultTypeInternal;
extern DGGuildChangeGradePacketDefaultTypeInternal _DGGuildChangeGradePacket_default_instance_;
class DGGuildChangeMasterPacket;
struct DGGuildChangeMasterPacketDefaultTypeInternal;
extern DGGuildChangeMasterPacketDefaultTypeInternal _DGGuildChangeMasterPacket_default_instance_;
class DGGuildChangeMemberDataPacket;
struct DGGuildChangeMemberDataPacketDefaultTypeInternal;
extern DGGuildChangeMemberDataPacketDefaultTypeInternal _DGGuildChangeMemberDataPacket_default_instance_;
class DGGuildDisbandPacket;
struct DGGuildDisbandPacketDefaultTypeInternal;
extern DGGuildDisbandPacketDefaultTypeInternal _DGGuildDisbandPacket_default_instance_;
class DGGuildDungeonCDPacket;
struct DGGuildDungeonCDPacketDefaultTypeInternal;
extern DGGuildDungeonCDPacketDefaultTypeInternal _DGGuildDungeonCDPacket_default_instance_;
class DGGuildDungeonPacket;
struct DGGuildDungeonPacketDefaultTypeInternal;
extern DGGuildDungeonPacketDefaultTypeInternal _DGGuildDungeonPacket_default_instance_;
class DGGuildExpUpdatePacket;
struct DGGuildExpUpdatePacketDefaultTypeInternal;
extern DGGuildExpUpdatePacketDefaultTypeInternal _DGGuildExpUpdatePacket_default_instance_;
class DGGuildLadderPacket;
struct DGGuildLadderPacketDefaultTypeInternal;
extern DGGuildLadderPacketDefaultTypeInternal _DGGuildLadderPacket_default_instance_;
class DGGuildLoadPacket;
struct DGGuildLoadPacketDefaultTypeInternal;
extern DGGuildLoadPacketDefaultTypeInternal _DGGuildLoadPacket_default_instance_;
class DGGuildMoneyChangePacket;
struct DGGuildMoneyChangePacketDefaultTypeInternal;
extern DGGuildMoneyChangePacketDefaultTypeInternal _DGGuildMoneyChangePacket_default_instance_;
class DGGuildMoneyWithdrawPacket;
struct DGGuildMoneyWithdrawPacketDefaultTypeInternal;
extern DGGuildMoneyWithdrawPacketDefaultTypeInternal _DGGuildMoneyWithdrawPacket_default_instance_;
class DGGuildRemoveMemberPacket;
struct DGGuildRemoveMemberPacketDefaultTypeInternal;
extern DGGuildRemoveMemberPacketDefaultTypeInternal _DGGuildRemoveMemberPacket_default_instance_;
class DGGuildSafeboxPacket;
struct DGGuildSafeboxPacketDefaultTypeInternal;
extern DGGuildSafeboxPacketDefaultTypeInternal _DGGuildSafeboxPacket_default_instance_;
class DGGuildSkillUpdatePacket;
struct DGGuildSkillUpdatePacketDefaultTypeInternal;
extern DGGuildSkillUpdatePacketDefaultTypeInternal _DGGuildSkillUpdatePacket_default_instance_;
class DGGuildSkillUsableChangePacket;
struct DGGuildSkillUsableChangePacketDefaultTypeInternal;
extern DGGuildSkillUsableChangePacketDefaultTypeInternal _DGGuildSkillUsableChangePacket_default_instance_;
class DGGuildWarBetPacket;
struct DGGuildWarBetPacketDefaultTypeInternal;
extern DGGuildWarBetPacketDefaultTypeInternal _DGGuildWarBetPacket_default_instance_;
class DGGuildWarPacket;
struct DGGuildWarPacketDefaultTypeInternal;
extern DGGuildWarPacketDefaultTypeInternal _DGGuildWarPacket_default_instance_;
class DGGuildWarReserveAddPacket;
struct DGGuildWarReserveAddPacketDefaultTypeInternal;
extern DGGuildWarReserveAddPacketDefaultTypeInternal _DGGuildWarReserveAddPacket_default_instance_;
class DGGuildWarReserveDeletePacket;
struct DGGuildWarReserveDeletePacketDefaultTypeInternal;
extern DGGuildWarReserveDeletePacketDefaultTypeInternal _DGGuildWarReserveDeletePacket_default_instance_;
class DGGuildWarScorePacket;
struct DGGuildWarScorePacketDefaultTypeInternal;
extern DGGuildWarScorePacketDefaultTypeInternal _DGGuildWarScorePacket_default_instance_;
class DGItemAwardInformerPacket;
struct DGItemAwardInformerPacketDefaultTypeInternal;
extern DGItemAwardInformerPacketDefaultTypeInternal _DGItemAwardInformerPacket_default_instance_;
class DGItemLoadPacket;
struct DGItemLoadPacketDefaultTypeInternal;
extern DGItemLoadPacketDefaultTypeInternal _DGItemLoadPacket_default_instance_;
class DGItemOfflineRestorePacket;
struct DGItemOfflineRestorePacketDefaultTypeInternal;
extern DGItemOfflineRestorePacketDefaultTypeInternal _DGItemOfflineRestorePacket_default_instance_;
class DGItemRefundLoadPacket;
struct DGItemRefundLoadPacketDefaultTypeInternal;
extern DGItemRefundLoadPacketDefaultTypeInternal _DGItemRefundLoadPacket_default_instance_;
class DGItemRefundLoadPacket_RefundItem;
struct DGItemRefundLoadPacket_RefundItemDefaultTypeInternal;
extern DGItemRefundLoadPacket_RefundItemDefaultTypeInternal _DGItemRefundLoadPacket_RefundItem_default_instance_;
class DGLoginAlreadyPacket;
struct DGLoginAlreadyPacketDefaultTypeInternal;
extern DGLoginAlreadyPacketDefaultTypeInternal _DGLoginAlreadyPacket_default_instance_;
class DGLoginSuccessPacket;
struct DGLoginSuccessPacketDefaultTypeInternal;
extern DGLoginSuccessPacketDefaultTypeInternal _DGLoginSuccessPacket_default_instance_;
class DGMaintenancePacket;
struct DGMaintenancePacketDefaultTypeInternal;
extern DGMaintenancePacketDefaultTypeInternal _DGMaintenancePacket_default_instance_;
class DGMapLocationsPacket;
struct DGMapLocationsPacketDefaultTypeInternal;
extern DGMapLocationsPacketDefaultTypeInternal _DGMapLocationsPacket_default_instance_;
class DGMarriageAddPacket;
struct DGMarriageAddPacketDefaultTypeInternal;
extern DGMarriageAddPacketDefaultTypeInternal _DGMarriageAddPacket_default_instance_;
class DGMarriageRemovePacket;
struct DGMarriageRemovePacketDefaultTypeInternal;
extern DGMarriageRemovePacketDefaultTypeInternal _DGMarriageRemovePacket_default_instance_;
class DGMarriageUpdatePacket;
struct DGMarriageUpdatePacketDefaultTypeInternal;
extern DGMarriageUpdatePacketDefaultTypeInternal _DGMarriageUpdatePacket_default_instance_;
class DGMoneyLogPacket;
struct DGMoneyLogPacketDefaultTypeInternal;
extern DGMoneyLogPacketDefaultTypeInternal _DGMoneyLogPacket_default_instance_;
class DGMyShopPricelistPacket;
struct DGMyShopPricelistPacketDefaultTypeInternal;
extern DGMyShopPricelistPacketDefaultTypeInternal _DGMyShopPricelistPacket_default_instance_;
class DGNoticePacket;
struct DGNoticePacketDefaultTypeInternal;
extern DGNoticePacketDefaultTypeInternal _DGNoticePacket_default_instance_;
class DGOfflineMessagesLoadPacket;
struct DGOfflineMessagesLoadPacketDefaultTypeInternal;
extern DGOfflineMessagesLoadPacketDefaultTypeInternal _DGOfflineMessagesLoadPacket_default_instance_;
class DGP2PInfoPacket;
struct DGP2PInfoPacketDefaultTypeInternal;
extern DGP2PInfoPacketDefaultTypeInternal _DGP2PInfoPacket_default_instance_;
class DGPartyAddPacket;
struct DGPartyAddPacketDefaultTypeInternal;
extern DGPartyAddPacketDefaultTypeInternal _DGPartyAddPacket_default_instance_;
class DGPartyCreatePacket;
struct DGPartyCreatePacketDefaultTypeInternal;
extern DGPartyCreatePacketDefaultTypeInternal _DGPartyCreatePacket_default_instance_;
class DGPartyDeletePacket;
struct DGPartyDeletePacketDefaultTypeInternal;
extern DGPartyDeletePacketDefaultTypeInternal _DGPartyDeletePacket_default_instance_;
class DGPartyRemovePacket;
struct DGPartyRemovePacketDefaultTypeInternal;
extern DGPartyRemovePacketDefaultTypeInternal _DGPartyRemovePacket_default_instance_;
class DGPartySetMemberLevelPacket;
struct DGPartySetMemberLevelPacketDefaultTypeInternal;
extern DGPartySetMemberLevelPacketDefaultTypeInternal _DGPartySetMemberLevelPacket_default_instance_;
class DGPartyStateChangePacket;
struct DGPartyStateChangePacketDefaultTypeInternal;
extern DGPartyStateChangePacketDefaultTypeInternal _DGPartyStateChangePacket_default_instance_;
class DGPetLoadPacket;
struct DGPetLoadPacketDefaultTypeInternal;
extern DGPetLoadPacketDefaultTypeInternal _DGPetLoadPacket_default_instance_;
class DGPlayerCreateSuccessPacket;
struct DGPlayerCreateSuccessPacketDefaultTypeInternal;
extern DGPlayerCreateSuccessPacketDefaultTypeInternal _DGPlayerCreateSuccessPacket_default_instance_;
class DGPlayerDeleteSuccessPacket;
struct DGPlayerDeleteSuccessPacketDefaultTypeInternal;
extern DGPlayerDeleteSuccessPacketDefaultTypeInternal _DGPlayerDeleteSuccessPacket_default_instance_;
class DGPlayerLoadPacket;
struct DGPlayerLoadPacketDefaultTypeInternal;
extern DGPlayerLoadPacketDefaultTypeInternal _DGPlayerLoadPacket_default_instance_;
class DGPlayerSkillLoadPacket;
struct DGPlayerSkillLoadPacketDefaultTypeInternal;
extern DGPlayerSkillLoadPacketDefaultTypeInternal _DGPlayerSkillLoadPacket_default_instance_;
class DGQuestLoadPacket;
struct DGQuestLoadPacketDefaultTypeInternal;
extern DGQuestLoadPacketDefaultTypeInternal _DGQuestLoadPacket_default_instance_;
class DGReloadAdminPacket;
struct DGReloadAdminPacketDefaultTypeInternal;
extern DGReloadAdminPacketDefaultTypeInternal _DGReloadAdminPacket_default_instance_;
class DGReloadMobProtoPacket;
struct DGReloadMobProtoPacketDefaultTypeInternal;
extern DGReloadMobProtoPacketDefaultTypeInternal _DGReloadMobProtoPacket_default_instance_;
class DGReloadProtoPacket;
struct DGReloadProtoPacketDefaultTypeInternal;
extern DGReloadProtoPacketDefaultTypeInternal _DGReloadProtoPacket_default_instance_;
class DGReloadShopTablePacket;
struct DGReloadShopTablePacketDefaultTypeInternal;
extern DGReloadShopTablePacketDefaultTypeInternal _DGReloadShopTablePacket_default_instance_;
class DGReloadXmasRewardsPacket;
struct DGReloadXmasRewardsPacketDefaultTypeInternal;
extern DGReloadXmasRewardsPacketDefaultTypeInternal _DGReloadXmasRewardsPacket_default_instance_;
class DGRespondChannelStatusPacket;
struct DGRespondChannelStatusPacketDefaultTypeInternal;
extern DGRespondChannelStatusPacketDefaultTypeInternal _DGRespondChannelStatusPacket_default_instance_;
class DGSafeboxChangePasswordAnswerPacket;
struct DGSafeboxChangePasswordAnswerPacketDefaultTypeInternal;
extern DGSafeboxChangePasswordAnswerPacketDefaultTypeInternal _DGSafeboxChangePasswordAnswerPacket_default_instance_;
class DGSafeboxChangeSizePacket;
struct DGSafeboxChangeSizePacketDefaultTypeInternal;
extern DGSafeboxChangeSizePacketDefaultTypeInternal _DGSafeboxChangeSizePacket_default_instance_;
class DGSafeboxLoadPacket;
struct DGSafeboxLoadPacketDefaultTypeInternal;
extern DGSafeboxLoadPacketDefaultTypeInternal _DGSafeboxLoadPacket_default_instance_;
class DGSetAveragePricesPacket;
struct DGSetAveragePricesPacketDefaultTypeInternal;
extern DGSetAveragePricesPacketDefaultTypeInternal _DGSetAveragePricesPacket_default_instance_;
class DGSetAveragePricesPacket_Element;
struct DGSetAveragePricesPacket_ElementDefaultTypeInternal;
extern DGSetAveragePricesPacket_ElementDefaultTypeInternal _DGSetAveragePricesPacket_Element_default_instance_;
class DGSetEventFlagPacket;
struct DGSetEventFlagPacketDefaultTypeInternal;
extern DGSetEventFlagPacketDefaultTypeInternal _DGSetEventFlagPacket_default_instance_;
class DGSkillColorLoadPacket;
struct DGSkillColorLoadPacketDefaultTypeInternal;
extern DGSkillColorLoadPacketDefaultTypeInternal _DGSkillColorLoadPacket_default_instance_;
class DGSkillColorLoadPacket_SkillColor;
struct DGSkillColorLoadPacket_SkillColorDefaultTypeInternal;
extern DGSkillColorLoadPacket_SkillColorDefaultTypeInternal _DGSkillColorLoadPacket_SkillColor_default_instance_;
class DGSpareItemIDRangePacket;
struct DGSpareItemIDRangePacketDefaultTypeInternal;
extern DGSpareItemIDRangePacketDefaultTypeInternal _DGSpareItemIDRangePacket_default_instance_;
class DGSpawnMobTimedPacket;
struct DGSpawnMobTimedPacketDefaultTypeInternal;
extern DGSpawnMobTimedPacketDefaultTypeInternal _DGSpawnMobTimedPacket_default_instance_;
class DGTimePacket;
struct DGTimePacketDefaultTypeInternal;
extern DGTimePacketDefaultTypeInternal _DGTimePacket_default_instance_;
class DGUpdateHorseNamePacket;
struct DGUpdateHorseNamePacketDefaultTypeInternal;
extern DGUpdateHorseNamePacketDefaultTypeInternal _DGUpdateHorseNamePacket_default_instance_;
class DGUpdateLandPacket;
struct DGUpdateLandPacketDefaultTypeInternal;
extern DGUpdateLandPacketDefaultTypeInternal _DGUpdateLandPacket_default_instance_;
class DGVCardPacket;
struct DGVCardPacketDefaultTypeInternal;
extern DGVCardPacketDefaultTypeInternal _DGVCardPacket_default_instance_;
class DGWeddingEndPacket;
struct DGWeddingEndPacketDefaultTypeInternal;
extern DGWeddingEndPacketDefaultTypeInternal _DGWeddingEndPacket_default_instance_;
class DGWeddingReadyPacket;
struct DGWeddingReadyPacketDefaultTypeInternal;
extern DGWeddingReadyPacketDefaultTypeInternal _DGWeddingReadyPacket_default_instance_;
class DGWeddingRequestPacket;
struct DGWeddingRequestPacketDefaultTypeInternal;
extern DGWeddingRequestPacketDefaultTypeInternal _DGWeddingRequestPacket_default_instance_;
class DGWeddingStartPacket;
struct DGWeddingStartPacketDefaultTypeInternal;
extern DGWeddingStartPacketDefaultTypeInternal _DGWeddingStartPacket_default_instance_;
class DGWhisperPlayerExistResultPacket;
struct DGWhisperPlayerExistResultPacketDefaultTypeInternal;
extern DGWhisperPlayerExistResultPacketDefaultTypeInternal _DGWhisperPlayerExistResultPacket_default_instance_;
class DGWhisperPlayerMessageOfflinePacket;
struct DGWhisperPlayerMessageOfflinePacketDefaultTypeInternal;
extern DGWhisperPlayerMessageOfflinePacketDefaultTypeInternal _DGWhisperPlayerMessageOfflinePacket_default_instance_;
class DGWhitelistIPPacket;
struct DGWhitelistIPPacketDefaultTypeInternal;
extern DGWhitelistIPPacketDefaultTypeInternal _DGWhitelistIPPacket_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::DGAddBlockCountryIPPacket* Arena::CreateMaybeMessage<::network::DGAddBlockCountryIPPacket>(Arena*);
template<> ::network::DGAffectLoadPacket* Arena::CreateMaybeMessage<::network::DGAffectLoadPacket>(Arena*);
template<> ::network::DGAuctionDeletePlayer* Arena::CreateMaybeMessage<::network::DGAuctionDeletePlayer>(Arena*);
template<> ::network::DGAuthLoginPacket* Arena::CreateMaybeMessage<::network::DGAuthLoginPacket>(Arena*);
template<> ::network::DGBillingCheckPacket* Arena::CreateMaybeMessage<::network::DGBillingCheckPacket>(Arena*);
template<> ::network::DGBillingExpirePacket* Arena::CreateMaybeMessage<::network::DGBillingExpirePacket>(Arena*);
template<> ::network::DGBillingLoginPacket* Arena::CreateMaybeMessage<::network::DGBillingLoginPacket>(Arena*);
template<> ::network::DGBillingRepairPacket* Arena::CreateMaybeMessage<::network::DGBillingRepairPacket>(Arena*);
template<> ::network::DGBlockExceptionPacket* Arena::CreateMaybeMessage<::network::DGBlockExceptionPacket>(Arena*);
template<> ::network::DGBootPacket* Arena::CreateMaybeMessage<::network::DGBootPacket>(Arena*);
template<> ::network::DGChangeCharacterPrivPacket* Arena::CreateMaybeMessage<::network::DGChangeCharacterPrivPacket>(Arena*);
template<> ::network::DGChangeEmpirePrivPacket* Arena::CreateMaybeMessage<::network::DGChangeEmpirePrivPacket>(Arena*);
template<> ::network::DGChangeGuildPrivPacket* Arena::CreateMaybeMessage<::network::DGChangeGuildPrivPacket>(Arena*);
template<> ::network::DGChangeNamePacket* Arena::CreateMaybeMessage<::network::DGChangeNamePacket>(Arena*);
template<> ::network::DGChannelSwitchPacket* Arena::CreateMaybeMessage<::network::DGChannelSwitchPacket>(Arena*);
template<> ::network::DGCreateObjectPacket* Arena::CreateMaybeMessage<::network::DGCreateObjectPacket>(Arena*);
template<> ::network::DGDeleteObjectPacket* Arena::CreateMaybeMessage<::network::DGDeleteObjectPacket>(Arena*);
template<> ::network::DGDetailLogPacket* Arena::CreateMaybeMessage<::network::DGDetailLogPacket>(Arena*);
template<> ::network::DGEmpireSelectPacket* Arena::CreateMaybeMessage<::network::DGEmpireSelectPacket>(Arena*);
template<> ::network::DGEquipmentPageLoadPacket* Arena::CreateMaybeMessage<::network::DGEquipmentPageLoadPacket>(Arena*);
template<> ::network::DGGuildAddMemberPacket* Arena::CreateMaybeMessage<::network::DGGuildAddMemberPacket>(Arena*);
template<> ::network::DGGuildChangeGradePacket* Arena::CreateMaybeMessage<::network::DGGuildChangeGradePacket>(Arena*);
template<> ::network::DGGuildChangeMasterPacket* Arena::CreateMaybeMessage<::network::DGGuildChangeMasterPacket>(Arena*);
template<> ::network::DGGuildChangeMemberDataPacket* Arena::CreateMaybeMessage<::network::DGGuildChangeMemberDataPacket>(Arena*);
template<> ::network::DGGuildDisbandPacket* Arena::CreateMaybeMessage<::network::DGGuildDisbandPacket>(Arena*);
template<> ::network::DGGuildDungeonCDPacket* Arena::CreateMaybeMessage<::network::DGGuildDungeonCDPacket>(Arena*);
template<> ::network::DGGuildDungeonPacket* Arena::CreateMaybeMessage<::network::DGGuildDungeonPacket>(Arena*);
template<> ::network::DGGuildExpUpdatePacket* Arena::CreateMaybeMessage<::network::DGGuildExpUpdatePacket>(Arena*);
template<> ::network::DGGuildLadderPacket* Arena::CreateMaybeMessage<::network::DGGuildLadderPacket>(Arena*);
template<> ::network::DGGuildLoadPacket* Arena::CreateMaybeMessage<::network::DGGuildLoadPacket>(Arena*);
template<> ::network::DGGuildMoneyChangePacket* Arena::CreateMaybeMessage<::network::DGGuildMoneyChangePacket>(Arena*);
template<> ::network::DGGuildMoneyWithdrawPacket* Arena::CreateMaybeMessage<::network::DGGuildMoneyWithdrawPacket>(Arena*);
template<> ::network::DGGuildRemoveMemberPacket* Arena::CreateMaybeMessage<::network::DGGuildRemoveMemberPacket>(Arena*);
template<> ::network::DGGuildSafeboxPacket* Arena::CreateMaybeMessage<::network::DGGuildSafeboxPacket>(Arena*);
template<> ::network::DGGuildSkillUpdatePacket* Arena::CreateMaybeMessage<::network::DGGuildSkillUpdatePacket>(Arena*);
template<> ::network::DGGuildSkillUsableChangePacket* Arena::CreateMaybeMessage<::network::DGGuildSkillUsableChangePacket>(Arena*);
template<> ::network::DGGuildWarBetPacket* Arena::CreateMaybeMessage<::network::DGGuildWarBetPacket>(Arena*);
template<> ::network::DGGuildWarPacket* Arena::CreateMaybeMessage<::network::DGGuildWarPacket>(Arena*);
template<> ::network::DGGuildWarReserveAddPacket* Arena::CreateMaybeMessage<::network::DGGuildWarReserveAddPacket>(Arena*);
template<> ::network::DGGuildWarReserveDeletePacket* Arena::CreateMaybeMessage<::network::DGGuildWarReserveDeletePacket>(Arena*);
template<> ::network::DGGuildWarScorePacket* Arena::CreateMaybeMessage<::network::DGGuildWarScorePacket>(Arena*);
template<> ::network::DGItemAwardInformerPacket* Arena::CreateMaybeMessage<::network::DGItemAwardInformerPacket>(Arena*);
template<> ::network::DGItemLoadPacket* Arena::CreateMaybeMessage<::network::DGItemLoadPacket>(Arena*);
template<> ::network::DGItemOfflineRestorePacket* Arena::CreateMaybeMessage<::network::DGItemOfflineRestorePacket>(Arena*);
template<> ::network::DGItemRefundLoadPacket* Arena::CreateMaybeMessage<::network::DGItemRefundLoadPacket>(Arena*);
template<> ::network::DGItemRefundLoadPacket_RefundItem* Arena::CreateMaybeMessage<::network::DGItemRefundLoadPacket_RefundItem>(Arena*);
template<> ::network::DGLoginAlreadyPacket* Arena::CreateMaybeMessage<::network::DGLoginAlreadyPacket>(Arena*);
template<> ::network::DGLoginSuccessPacket* Arena::CreateMaybeMessage<::network::DGLoginSuccessPacket>(Arena*);
template<> ::network::DGMaintenancePacket* Arena::CreateMaybeMessage<::network::DGMaintenancePacket>(Arena*);
template<> ::network::DGMapLocationsPacket* Arena::CreateMaybeMessage<::network::DGMapLocationsPacket>(Arena*);
template<> ::network::DGMarriageAddPacket* Arena::CreateMaybeMessage<::network::DGMarriageAddPacket>(Arena*);
template<> ::network::DGMarriageRemovePacket* Arena::CreateMaybeMessage<::network::DGMarriageRemovePacket>(Arena*);
template<> ::network::DGMarriageUpdatePacket* Arena::CreateMaybeMessage<::network::DGMarriageUpdatePacket>(Arena*);
template<> ::network::DGMoneyLogPacket* Arena::CreateMaybeMessage<::network::DGMoneyLogPacket>(Arena*);
template<> ::network::DGMyShopPricelistPacket* Arena::CreateMaybeMessage<::network::DGMyShopPricelistPacket>(Arena*);
template<> ::network::DGNoticePacket* Arena::CreateMaybeMessage<::network::DGNoticePacket>(Arena*);
template<> ::network::DGOfflineMessagesLoadPacket* Arena::CreateMaybeMessage<::network::DGOfflineMessagesLoadPacket>(Arena*);
template<> ::network::DGP2PInfoPacket* Arena::CreateMaybeMessage<::network::DGP2PInfoPacket>(Arena*);
template<> ::network::DGPartyAddPacket* Arena::CreateMaybeMessage<::network::DGPartyAddPacket>(Arena*);
template<> ::network::DGPartyCreatePacket* Arena::CreateMaybeMessage<::network::DGPartyCreatePacket>(Arena*);
template<> ::network::DGPartyDeletePacket* Arena::CreateMaybeMessage<::network::DGPartyDeletePacket>(Arena*);
template<> ::network::DGPartyRemovePacket* Arena::CreateMaybeMessage<::network::DGPartyRemovePacket>(Arena*);
template<> ::network::DGPartySetMemberLevelPacket* Arena::CreateMaybeMessage<::network::DGPartySetMemberLevelPacket>(Arena*);
template<> ::network::DGPartyStateChangePacket* Arena::CreateMaybeMessage<::network::DGPartyStateChangePacket>(Arena*);
template<> ::network::DGPetLoadPacket* Arena::CreateMaybeMessage<::network::DGPetLoadPacket>(Arena*);
template<> ::network::DGPlayerCreateSuccessPacket* Arena::CreateMaybeMessage<::network::DGPlayerCreateSuccessPacket>(Arena*);
template<> ::network::DGPlayerDeleteSuccessPacket* Arena::CreateMaybeMessage<::network::DGPlayerDeleteSuccessPacket>(Arena*);
template<> ::network::DGPlayerLoadPacket* Arena::CreateMaybeMessage<::network::DGPlayerLoadPacket>(Arena*);
template<> ::network::DGPlayerSkillLoadPacket* Arena::CreateMaybeMessage<::network::DGPlayerSkillLoadPacket>(Arena*);
template<> ::network::DGQuestLoadPacket* Arena::CreateMaybeMessage<::network::DGQuestLoadPacket>(Arena*);
template<> ::network::DGReloadAdminPacket* Arena::CreateMaybeMessage<::network::DGReloadAdminPacket>(Arena*);
template<> ::network::DGReloadMobProtoPacket* Arena::CreateMaybeMessage<::network::DGReloadMobProtoPacket>(Arena*);
template<> ::network::DGReloadProtoPacket* Arena::CreateMaybeMessage<::network::DGReloadProtoPacket>(Arena*);
template<> ::network::DGReloadShopTablePacket* Arena::CreateMaybeMessage<::network::DGReloadShopTablePacket>(Arena*);
template<> ::network::DGReloadXmasRewardsPacket* Arena::CreateMaybeMessage<::network::DGReloadXmasRewardsPacket>(Arena*);
template<> ::network::DGRespondChannelStatusPacket* Arena::CreateMaybeMessage<::network::DGRespondChannelStatusPacket>(Arena*);
template<> ::network::DGSafeboxChangePasswordAnswerPacket* Arena::CreateMaybeMessage<::network::DGSafeboxChangePasswordAnswerPacket>(Arena*);
template<> ::network::DGSafeboxChangeSizePacket* Arena::CreateMaybeMessage<::network::DGSafeboxChangeSizePacket>(Arena*);
template<> ::network::DGSafeboxLoadPacket* Arena::CreateMaybeMessage<::network::DGSafeboxLoadPacket>(Arena*);
template<> ::network::DGSetAveragePricesPacket* Arena::CreateMaybeMessage<::network::DGSetAveragePricesPacket>(Arena*);
template<> ::network::DGSetAveragePricesPacket_Element* Arena::CreateMaybeMessage<::network::DGSetAveragePricesPacket_Element>(Arena*);
template<> ::network::DGSetEventFlagPacket* Arena::CreateMaybeMessage<::network::DGSetEventFlagPacket>(Arena*);
template<> ::network::DGSkillColorLoadPacket* Arena::CreateMaybeMessage<::network::DGSkillColorLoadPacket>(Arena*);
template<> ::network::DGSkillColorLoadPacket_SkillColor* Arena::CreateMaybeMessage<::network::DGSkillColorLoadPacket_SkillColor>(Arena*);
template<> ::network::DGSpareItemIDRangePacket* Arena::CreateMaybeMessage<::network::DGSpareItemIDRangePacket>(Arena*);
template<> ::network::DGSpawnMobTimedPacket* Arena::CreateMaybeMessage<::network::DGSpawnMobTimedPacket>(Arena*);
template<> ::network::DGTimePacket* Arena::CreateMaybeMessage<::network::DGTimePacket>(Arena*);
template<> ::network::DGUpdateHorseNamePacket* Arena::CreateMaybeMessage<::network::DGUpdateHorseNamePacket>(Arena*);
template<> ::network::DGUpdateLandPacket* Arena::CreateMaybeMessage<::network::DGUpdateLandPacket>(Arena*);
template<> ::network::DGVCardPacket* Arena::CreateMaybeMessage<::network::DGVCardPacket>(Arena*);
template<> ::network::DGWeddingEndPacket* Arena::CreateMaybeMessage<::network::DGWeddingEndPacket>(Arena*);
template<> ::network::DGWeddingReadyPacket* Arena::CreateMaybeMessage<::network::DGWeddingReadyPacket>(Arena*);
template<> ::network::DGWeddingRequestPacket* Arena::CreateMaybeMessage<::network::DGWeddingRequestPacket>(Arena*);
template<> ::network::DGWeddingStartPacket* Arena::CreateMaybeMessage<::network::DGWeddingStartPacket>(Arena*);
template<> ::network::DGWhisperPlayerExistResultPacket* Arena::CreateMaybeMessage<::network::DGWhisperPlayerExistResultPacket>(Arena*);
template<> ::network::DGWhisperPlayerMessageOfflinePacket* Arena::CreateMaybeMessage<::network::DGWhisperPlayerMessageOfflinePacket>(Arena*);
template<> ::network::DGWhitelistIPPacket* Arena::CreateMaybeMessage<::network::DGWhitelistIPPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class DGBootPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGBootPacket) */ {
 public:
  inline DGBootPacket() : DGBootPacket(nullptr) {}
  ~DGBootPacket() override;
  explicit PROTOBUF_CONSTEXPR DGBootPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGBootPacket(const DGBootPacket& from);
  DGBootPacket(DGBootPacket&& from) noexcept
    : DGBootPacket() {
    *this = ::std::move(from);
  }

  inline DGBootPacket& operator=(const DGBootPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGBootPacket& operator=(DGBootPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGBootPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGBootPacket* internal_default_instance() {
    return reinterpret_cast<const DGBootPacket*>(
               &_DGBootPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DGBootPacket& a, DGBootPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGBootPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGBootPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGBootPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGBootPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGBootPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGBootPacket& from) {
    DGBootPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGBootPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGBootPacket";
  }
  protected:
  explicit DGBootPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobsFieldNumber = 1,
    kItemsFieldNumber = 2,
    kShopsFieldNumber = 3,
    kSkillsFieldNumber = 4,
    kRefinesFieldNumber = 5,
    kAttrsFieldNumber = 6,
    kRareAttrsFieldNumber = 7,
    kCostumeAttrsFieldNumber = 8,
    kLandsFieldNumber = 9,
    kObjectProtosFieldNumber = 10,
    kObjectsFieldNumber = 11,
    kGuildSafeboxesFieldNumber = 12,
    kHorseUpgradesFieldNumber = 13,
    kHorseBoniFieldNumber = 14,
    kGayaShopsFieldNumber = 16,
    kAttrtreesFieldNumber = 17,
    kRunesFieldNumber = 18,
    kRunePointsFieldNumber = 19,
    kXmasRewardsFieldNumber = 20,
    kSoulProtosFieldNumber = 21,
    kAdminsFieldNumber = 24,
    kAdminConfigsFieldNumber = 25,
    kPetSkillsFieldNumber = 27,
    kPetEvolvesFieldNumber = 28,
    kPetAttrsFieldNumber = 29,
    kCrystalProtosFieldNumber = 30,
    kItemIdRangeFieldNumber = 22,
    kItemIdRangeSpareFieldNumber = 23,
    kCurrentTimeFieldNumber = 26,
  };
  // repeated .network.TMobTable mobs = 1;
  int mobs_size() const;
  private:
  int _internal_mobs_size() const;
  public:
  void clear_mobs();
  ::network::TMobTable* mutable_mobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
      mutable_mobs();
  private:
  const ::network::TMobTable& _internal_mobs(int index) const;
  ::network::TMobTable* _internal_add_mobs();
  public:
  const ::network::TMobTable& mobs(int index) const;
  ::network::TMobTable* add_mobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
      mobs() const;

  // repeated .network.TItemTable items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemTable* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >*
      mutable_items();
  private:
  const ::network::TItemTable& _internal_items(int index) const;
  ::network::TItemTable* _internal_add_items();
  public:
  const ::network::TItemTable& items(int index) const;
  ::network::TItemTable* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >&
      items() const;

  // repeated .network.TShopTable shops = 3;
  int shops_size() const;
  private:
  int _internal_shops_size() const;
  public:
  void clear_shops();
  ::network::TShopTable* mutable_shops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >*
      mutable_shops();
  private:
  const ::network::TShopTable& _internal_shops(int index) const;
  ::network::TShopTable* _internal_add_shops();
  public:
  const ::network::TShopTable& shops(int index) const;
  ::network::TShopTable* add_shops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >&
      shops() const;

  // repeated .network.TSkillTable skills = 4;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::network::TSkillTable* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >*
      mutable_skills();
  private:
  const ::network::TSkillTable& _internal_skills(int index) const;
  ::network::TSkillTable* _internal_add_skills();
  public:
  const ::network::TSkillTable& skills(int index) const;
  ::network::TSkillTable* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >&
      skills() const;

  // repeated .network.TRefineTable refines = 5;
  int refines_size() const;
  private:
  int _internal_refines_size() const;
  public:
  void clear_refines();
  ::network::TRefineTable* mutable_refines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineTable >*
      mutable_refines();
  private:
  const ::network::TRefineTable& _internal_refines(int index) const;
  ::network::TRefineTable* _internal_add_refines();
  public:
  const ::network::TRefineTable& refines(int index) const;
  ::network::TRefineTable* add_refines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineTable >&
      refines() const;

  // repeated .network.TItemAttrTable attrs = 6;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  ::network::TItemAttrTable* mutable_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >*
      mutable_attrs();
  private:
  const ::network::TItemAttrTable& _internal_attrs(int index) const;
  ::network::TItemAttrTable* _internal_add_attrs();
  public:
  const ::network::TItemAttrTable& attrs(int index) const;
  ::network::TItemAttrTable* add_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >&
      attrs() const;

  // repeated .network.TItemAttrTable rare_attrs = 7;
  int rare_attrs_size() const;
  private:
  int _internal_rare_attrs_size() const;
  public:
  void clear_rare_attrs();
  ::network::TItemAttrTable* mutable_rare_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >*
      mutable_rare_attrs();
  private:
  const ::network::TItemAttrTable& _internal_rare_attrs(int index) const;
  ::network::TItemAttrTable* _internal_add_rare_attrs();
  public:
  const ::network::TItemAttrTable& rare_attrs(int index) const;
  ::network::TItemAttrTable* add_rare_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >&
      rare_attrs() const;

  // repeated .network.TItemAttrTable costume_attrs = 8;
  int costume_attrs_size() const;
  private:
  int _internal_costume_attrs_size() const;
  public:
  void clear_costume_attrs();
  ::network::TItemAttrTable* mutable_costume_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >*
      mutable_costume_attrs();
  private:
  const ::network::TItemAttrTable& _internal_costume_attrs(int index) const;
  ::network::TItemAttrTable* _internal_add_costume_attrs();
  public:
  const ::network::TItemAttrTable& costume_attrs(int index) const;
  ::network::TItemAttrTable* add_costume_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >&
      costume_attrs() const;

  // repeated .network.TBuildingLand lands = 9;
  int lands_size() const;
  private:
  int _internal_lands_size() const;
  public:
  void clear_lands();
  ::network::TBuildingLand* mutable_lands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >*
      mutable_lands();
  private:
  const ::network::TBuildingLand& _internal_lands(int index) const;
  ::network::TBuildingLand* _internal_add_lands();
  public:
  const ::network::TBuildingLand& lands(int index) const;
  ::network::TBuildingLand* add_lands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >&
      lands() const;

  // repeated .network.TBuildingObjectProto object_protos = 10;
  int object_protos_size() const;
  private:
  int _internal_object_protos_size() const;
  public:
  void clear_object_protos();
  ::network::TBuildingObjectProto* mutable_object_protos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectProto >*
      mutable_object_protos();
  private:
  const ::network::TBuildingObjectProto& _internal_object_protos(int index) const;
  ::network::TBuildingObjectProto* _internal_add_object_protos();
  public:
  const ::network::TBuildingObjectProto& object_protos(int index) const;
  ::network::TBuildingObjectProto* add_object_protos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectProto >&
      object_protos() const;

  // repeated .network.TBuildingObject objects = 11;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::network::TBuildingObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObject >*
      mutable_objects();
  private:
  const ::network::TBuildingObject& _internal_objects(int index) const;
  ::network::TBuildingObject* _internal_add_objects();
  public:
  const ::network::TBuildingObject& objects(int index) const;
  ::network::TBuildingObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObject >&
      objects() const;

  // repeated .network.TGuildSafeboxInitial guild_safeboxes = 12;
  int guild_safeboxes_size() const;
  private:
  int _internal_guild_safeboxes_size() const;
  public:
  void clear_guild_safeboxes();
  ::network::TGuildSafeboxInitial* mutable_guild_safeboxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxInitial >*
      mutable_guild_safeboxes();
  private:
  const ::network::TGuildSafeboxInitial& _internal_guild_safeboxes(int index) const;
  ::network::TGuildSafeboxInitial* _internal_add_guild_safeboxes();
  public:
  const ::network::TGuildSafeboxInitial& guild_safeboxes(int index) const;
  ::network::TGuildSafeboxInitial* add_guild_safeboxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxInitial >&
      guild_safeboxes() const;

  // repeated .network.THorseUpgradeProto horse_upgrades = 13;
  int horse_upgrades_size() const;
  private:
  int _internal_horse_upgrades_size() const;
  public:
  void clear_horse_upgrades();
  ::network::THorseUpgradeProto* mutable_horse_upgrades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseUpgradeProto >*
      mutable_horse_upgrades();
  private:
  const ::network::THorseUpgradeProto& _internal_horse_upgrades(int index) const;
  ::network::THorseUpgradeProto* _internal_add_horse_upgrades();
  public:
  const ::network::THorseUpgradeProto& horse_upgrades(int index) const;
  ::network::THorseUpgradeProto* add_horse_upgrades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseUpgradeProto >&
      horse_upgrades() const;

  // repeated .network.THorseBonusProto horse_boni = 14;
  int horse_boni_size() const;
  private:
  int _internal_horse_boni_size() const;
  public:
  void clear_horse_boni();
  ::network::THorseBonusProto* mutable_horse_boni(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseBonusProto >*
      mutable_horse_boni();
  private:
  const ::network::THorseBonusProto& _internal_horse_boni(int index) const;
  ::network::THorseBonusProto* _internal_add_horse_boni();
  public:
  const ::network::THorseBonusProto& horse_boni(int index) const;
  ::network::THorseBonusProto* add_horse_boni();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseBonusProto >&
      horse_boni() const;

  // repeated .network.TGayaShopData gaya_shops = 16;
  int gaya_shops_size() const;
  private:
  int _internal_gaya_shops_size() const;
  public:
  void clear_gaya_shops();
  ::network::TGayaShopData* mutable_gaya_shops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >*
      mutable_gaya_shops();
  private:
  const ::network::TGayaShopData& _internal_gaya_shops(int index) const;
  ::network::TGayaShopData* _internal_add_gaya_shops();
  public:
  const ::network::TGayaShopData& gaya_shops(int index) const;
  ::network::TGayaShopData* add_gaya_shops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >&
      gaya_shops() const;

  // repeated .network.TAttrtreeProto attrtrees = 17;
  int attrtrees_size() const;
  private:
  int _internal_attrtrees_size() const;
  public:
  void clear_attrtrees();
  ::network::TAttrtreeProto* mutable_attrtrees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAttrtreeProto >*
      mutable_attrtrees();
  private:
  const ::network::TAttrtreeProto& _internal_attrtrees(int index) const;
  ::network::TAttrtreeProto* _internal_add_attrtrees();
  public:
  const ::network::TAttrtreeProto& attrtrees(int index) const;
  ::network::TAttrtreeProto* add_attrtrees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAttrtreeProto >&
      attrtrees() const;

  // repeated .network.TRuneProtoTable runes = 18;
  int runes_size() const;
  private:
  int _internal_runes_size() const;
  public:
  void clear_runes();
  ::network::TRuneProtoTable* mutable_runes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRuneProtoTable >*
      mutable_runes();
  private:
  const ::network::TRuneProtoTable& _internal_runes(int index) const;
  ::network::TRuneProtoTable* _internal_add_runes();
  public:
  const ::network::TRuneProtoTable& runes(int index) const;
  ::network::TRuneProtoTable* add_runes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRuneProtoTable >&
      runes() const;

  // repeated .network.TRunePointProtoTable rune_points = 19;
  int rune_points_size() const;
  private:
  int _internal_rune_points_size() const;
  public:
  void clear_rune_points();
  ::network::TRunePointProtoTable* mutable_rune_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRunePointProtoTable >*
      mutable_rune_points();
  private:
  const ::network::TRunePointProtoTable& _internal_rune_points(int index) const;
  ::network::TRunePointProtoTable* _internal_add_rune_points();
  public:
  const ::network::TRunePointProtoTable& rune_points(int index) const;
  ::network::TRunePointProtoTable* add_rune_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRunePointProtoTable >&
      rune_points() const;

  // repeated .network.TXmasRewards xmas_rewards = 20;
  int xmas_rewards_size() const;
  private:
  int _internal_xmas_rewards_size() const;
  public:
  void clear_xmas_rewards();
  ::network::TXmasRewards* mutable_xmas_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >*
      mutable_xmas_rewards();
  private:
  const ::network::TXmasRewards& _internal_xmas_rewards(int index) const;
  ::network::TXmasRewards* _internal_add_xmas_rewards();
  public:
  const ::network::TXmasRewards& xmas_rewards(int index) const;
  ::network::TXmasRewards* add_xmas_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >&
      xmas_rewards() const;

  // repeated .network.TSoulProtoTable soul_protos = 21;
  int soul_protos_size() const;
  private:
  int _internal_soul_protos_size() const;
  public:
  void clear_soul_protos();
  ::network::TSoulProtoTable* mutable_soul_protos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >*
      mutable_soul_protos();
  private:
  const ::network::TSoulProtoTable& _internal_soul_protos(int index) const;
  ::network::TSoulProtoTable* _internal_add_soul_protos();
  public:
  const ::network::TSoulProtoTable& soul_protos(int index) const;
  ::network::TSoulProtoTable* add_soul_protos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >&
      soul_protos() const;

  // repeated .network.TAdminInfo admins = 24;
  int admins_size() const;
  private:
  int _internal_admins_size() const;
  public:
  void clear_admins();
  ::network::TAdminInfo* mutable_admins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >*
      mutable_admins();
  private:
  const ::network::TAdminInfo& _internal_admins(int index) const;
  ::network::TAdminInfo* _internal_add_admins();
  public:
  const ::network::TAdminInfo& admins(int index) const;
  ::network::TAdminInfo* add_admins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >&
      admins() const;

  // repeated uint32 admin_configs = 25;
  int admin_configs_size() const;
  private:
  int _internal_admin_configs_size() const;
  public:
  void clear_admin_configs();
  private:
  uint32_t _internal_admin_configs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_admin_configs() const;
  void _internal_add_admin_configs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_admin_configs();
  public:
  uint32_t admin_configs(int index) const;
  void set_admin_configs(int index, uint32_t value);
  void add_admin_configs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      admin_configs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_admin_configs();

  // repeated .network.TPetAdvancedSkillProto pet_skills = 27;
  int pet_skills_size() const;
  private:
  int _internal_pet_skills_size() const;
  public:
  void clear_pet_skills();
  ::network::TPetAdvancedSkillProto* mutable_pet_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >*
      mutable_pet_skills();
  private:
  const ::network::TPetAdvancedSkillProto& _internal_pet_skills(int index) const;
  ::network::TPetAdvancedSkillProto* _internal_add_pet_skills();
  public:
  const ::network::TPetAdvancedSkillProto& pet_skills(int index) const;
  ::network::TPetAdvancedSkillProto* add_pet_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >&
      pet_skills() const;

  // repeated .network.TPetAdvancedEvolveProto pet_evolves = 28;
  int pet_evolves_size() const;
  private:
  int _internal_pet_evolves_size() const;
  public:
  void clear_pet_evolves();
  ::network::TPetAdvancedEvolveProto* mutable_pet_evolves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >*
      mutable_pet_evolves();
  private:
  const ::network::TPetAdvancedEvolveProto& _internal_pet_evolves(int index) const;
  ::network::TPetAdvancedEvolveProto* _internal_add_pet_evolves();
  public:
  const ::network::TPetAdvancedEvolveProto& pet_evolves(int index) const;
  ::network::TPetAdvancedEvolveProto* add_pet_evolves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >&
      pet_evolves() const;

  // repeated .network.TPetAdvancedAttrProto pet_attrs = 29;
  int pet_attrs_size() const;
  private:
  int _internal_pet_attrs_size() const;
  public:
  void clear_pet_attrs();
  ::network::TPetAdvancedAttrProto* mutable_pet_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >*
      mutable_pet_attrs();
  private:
  const ::network::TPetAdvancedAttrProto& _internal_pet_attrs(int index) const;
  ::network::TPetAdvancedAttrProto* _internal_add_pet_attrs();
  public:
  const ::network::TPetAdvancedAttrProto& pet_attrs(int index) const;
  ::network::TPetAdvancedAttrProto* add_pet_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >&
      pet_attrs() const;

  // repeated .network.TCrystalProto crystal_protos = 30;
  int crystal_protos_size() const;
  private:
  int _internal_crystal_protos_size() const;
  public:
  void clear_crystal_protos();
  ::network::TCrystalProto* mutable_crystal_protos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCrystalProto >*
      mutable_crystal_protos();
  private:
  const ::network::TCrystalProto& _internal_crystal_protos(int index) const;
  ::network::TCrystalProto* _internal_add_crystal_protos();
  public:
  const ::network::TCrystalProto& crystal_protos(int index) const;
  ::network::TCrystalProto* add_crystal_protos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCrystalProto >&
      crystal_protos() const;

  // .network.TItemIDRangeTable item_id_range = 22;
  bool has_item_id_range() const;
  private:
  bool _internal_has_item_id_range() const;
  public:
  void clear_item_id_range();
  const ::network::TItemIDRangeTable& item_id_range() const;
  PROTOBUF_NODISCARD ::network::TItemIDRangeTable* release_item_id_range();
  ::network::TItemIDRangeTable* mutable_item_id_range();
  void set_allocated_item_id_range(::network::TItemIDRangeTable* item_id_range);
  private:
  const ::network::TItemIDRangeTable& _internal_item_id_range() const;
  ::network::TItemIDRangeTable* _internal_mutable_item_id_range();
  public:
  void unsafe_arena_set_allocated_item_id_range(
      ::network::TItemIDRangeTable* item_id_range);
  ::network::TItemIDRangeTable* unsafe_arena_release_item_id_range();

  // .network.TItemIDRangeTable item_id_range_spare = 23;
  bool has_item_id_range_spare() const;
  private:
  bool _internal_has_item_id_range_spare() const;
  public:
  void clear_item_id_range_spare();
  const ::network::TItemIDRangeTable& item_id_range_spare() const;
  PROTOBUF_NODISCARD ::network::TItemIDRangeTable* release_item_id_range_spare();
  ::network::TItemIDRangeTable* mutable_item_id_range_spare();
  void set_allocated_item_id_range_spare(::network::TItemIDRangeTable* item_id_range_spare);
  private:
  const ::network::TItemIDRangeTable& _internal_item_id_range_spare() const;
  ::network::TItemIDRangeTable* _internal_mutable_item_id_range_spare();
  public:
  void unsafe_arena_set_allocated_item_id_range_spare(
      ::network::TItemIDRangeTable* item_id_range_spare);
  ::network::TItemIDRangeTable* unsafe_arena_release_item_id_range_spare();

  // uint32 current_time = 26;
  void clear_current_time();
  uint32_t current_time() const;
  void set_current_time(uint32_t value);
  private:
  uint32_t _internal_current_time() const;
  void _internal_set_current_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGBootPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable > mobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable > shops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable > skills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineTable > refines_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable > attrs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable > rare_attrs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable > costume_attrs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand > lands_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectProto > object_protos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObject > objects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxInitial > guild_safeboxes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseUpgradeProto > horse_upgrades_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseBonusProto > horse_boni_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData > gaya_shops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAttrtreeProto > attrtrees_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRuneProtoTable > runes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRunePointProtoTable > rune_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards > xmas_rewards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable > soul_protos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo > admins_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > admin_configs_;
    mutable std::atomic<int> _admin_configs_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto > pet_skills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto > pet_evolves_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto > pet_attrs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCrystalProto > crystal_protos_;
    ::network::TItemIDRangeTable* item_id_range_;
    ::network::TItemIDRangeTable* item_id_range_spare_;
    uint32_t current_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMapLocationsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMapLocationsPacket) */ {
 public:
  inline DGMapLocationsPacket() : DGMapLocationsPacket(nullptr) {}
  ~DGMapLocationsPacket() override;
  explicit PROTOBUF_CONSTEXPR DGMapLocationsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMapLocationsPacket(const DGMapLocationsPacket& from);
  DGMapLocationsPacket(DGMapLocationsPacket&& from) noexcept
    : DGMapLocationsPacket() {
    *this = ::std::move(from);
  }

  inline DGMapLocationsPacket& operator=(const DGMapLocationsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMapLocationsPacket& operator=(DGMapLocationsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMapLocationsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMapLocationsPacket* internal_default_instance() {
    return reinterpret_cast<const DGMapLocationsPacket*>(
               &_DGMapLocationsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DGMapLocationsPacket& a, DGMapLocationsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMapLocationsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMapLocationsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMapLocationsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMapLocationsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMapLocationsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMapLocationsPacket& from) {
    DGMapLocationsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMapLocationsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMapLocationsPacket";
  }
  protected:
  explicit DGMapLocationsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 1,
  };
  // repeated .network.TMapLocation maps = 1;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  ::network::TMapLocation* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMapLocation >*
      mutable_maps();
  private:
  const ::network::TMapLocation& _internal_maps(int index) const;
  ::network::TMapLocation* _internal_add_maps();
  public:
  const ::network::TMapLocation& maps(int index) const;
  ::network::TMapLocation* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMapLocation >&
      maps() const;

  // @@protoc_insertion_point(class_scope:network.DGMapLocationsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMapLocation > maps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGLoginSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGLoginSuccessPacket) */ {
 public:
  inline DGLoginSuccessPacket() : DGLoginSuccessPacket(nullptr) {}
  ~DGLoginSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR DGLoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGLoginSuccessPacket(const DGLoginSuccessPacket& from);
  DGLoginSuccessPacket(DGLoginSuccessPacket&& from) noexcept
    : DGLoginSuccessPacket() {
    *this = ::std::move(from);
  }

  inline DGLoginSuccessPacket& operator=(const DGLoginSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGLoginSuccessPacket& operator=(DGLoginSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGLoginSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGLoginSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const DGLoginSuccessPacket*>(
               &_DGLoginSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DGLoginSuccessPacket& a, DGLoginSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGLoginSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGLoginSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGLoginSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGLoginSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGLoginSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGLoginSuccessPacket& from) {
    DGLoginSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGLoginSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGLoginSuccessPacket";
  }
  protected:
  explicit DGLoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountInfoFieldNumber = 1,
  };
  // .network.TAccountTable account_info = 1;
  bool has_account_info() const;
  private:
  bool _internal_has_account_info() const;
  public:
  void clear_account_info();
  const ::network::TAccountTable& account_info() const;
  PROTOBUF_NODISCARD ::network::TAccountTable* release_account_info();
  ::network::TAccountTable* mutable_account_info();
  void set_allocated_account_info(::network::TAccountTable* account_info);
  private:
  const ::network::TAccountTable& _internal_account_info() const;
  ::network::TAccountTable* _internal_mutable_account_info();
  public:
  void unsafe_arena_set_allocated_account_info(
      ::network::TAccountTable* account_info);
  ::network::TAccountTable* unsafe_arena_release_account_info();

  // @@protoc_insertion_point(class_scope:network.DGLoginSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TAccountTable* account_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPlayerCreateSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPlayerCreateSuccessPacket) */ {
 public:
  inline DGPlayerCreateSuccessPacket() : DGPlayerCreateSuccessPacket(nullptr) {}
  ~DGPlayerCreateSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPlayerCreateSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPlayerCreateSuccessPacket(const DGPlayerCreateSuccessPacket& from);
  DGPlayerCreateSuccessPacket(DGPlayerCreateSuccessPacket&& from) noexcept
    : DGPlayerCreateSuccessPacket() {
    *this = ::std::move(from);
  }

  inline DGPlayerCreateSuccessPacket& operator=(const DGPlayerCreateSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPlayerCreateSuccessPacket& operator=(DGPlayerCreateSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPlayerCreateSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPlayerCreateSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const DGPlayerCreateSuccessPacket*>(
               &_DGPlayerCreateSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DGPlayerCreateSuccessPacket& a, DGPlayerCreateSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPlayerCreateSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPlayerCreateSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPlayerCreateSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPlayerCreateSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPlayerCreateSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPlayerCreateSuccessPacket& from) {
    DGPlayerCreateSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPlayerCreateSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPlayerCreateSuccessPacket";
  }
  protected:
  explicit DGPlayerCreateSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kAccountIndexFieldNumber = 1,
  };
  // .network.TSimplePlayer player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::network::TSimplePlayer& player() const;
  PROTOBUF_NODISCARD ::network::TSimplePlayer* release_player();
  ::network::TSimplePlayer* mutable_player();
  void set_allocated_player(::network::TSimplePlayer* player);
  private:
  const ::network::TSimplePlayer& _internal_player() const;
  ::network::TSimplePlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::network::TSimplePlayer* player);
  ::network::TSimplePlayer* unsafe_arena_release_player();

  // uint32 account_index = 1;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPlayerCreateSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TSimplePlayer* player_;
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPlayerDeleteSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPlayerDeleteSuccessPacket) */ {
 public:
  inline DGPlayerDeleteSuccessPacket() : DGPlayerDeleteSuccessPacket(nullptr) {}
  ~DGPlayerDeleteSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPlayerDeleteSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPlayerDeleteSuccessPacket(const DGPlayerDeleteSuccessPacket& from);
  DGPlayerDeleteSuccessPacket(DGPlayerDeleteSuccessPacket&& from) noexcept
    : DGPlayerDeleteSuccessPacket() {
    *this = ::std::move(from);
  }

  inline DGPlayerDeleteSuccessPacket& operator=(const DGPlayerDeleteSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPlayerDeleteSuccessPacket& operator=(DGPlayerDeleteSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPlayerDeleteSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPlayerDeleteSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const DGPlayerDeleteSuccessPacket*>(
               &_DGPlayerDeleteSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DGPlayerDeleteSuccessPacket& a, DGPlayerDeleteSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPlayerDeleteSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPlayerDeleteSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPlayerDeleteSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPlayerDeleteSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPlayerDeleteSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPlayerDeleteSuccessPacket& from) {
    DGPlayerDeleteSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPlayerDeleteSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPlayerDeleteSuccessPacket";
  }
  protected:
  explicit DGPlayerDeleteSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIndexFieldNumber = 1,
  };
  // uint32 account_index = 1;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPlayerDeleteSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPlayerLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPlayerLoadPacket) */ {
 public:
  inline DGPlayerLoadPacket() : DGPlayerLoadPacket(nullptr) {}
  ~DGPlayerLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPlayerLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPlayerLoadPacket(const DGPlayerLoadPacket& from);
  DGPlayerLoadPacket(DGPlayerLoadPacket&& from) noexcept
    : DGPlayerLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGPlayerLoadPacket& operator=(const DGPlayerLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPlayerLoadPacket& operator=(DGPlayerLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPlayerLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPlayerLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGPlayerLoadPacket*>(
               &_DGPlayerLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DGPlayerLoadPacket& a, DGPlayerLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPlayerLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPlayerLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPlayerLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPlayerLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPlayerLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPlayerLoadPacket& from) {
    DGPlayerLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPlayerLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPlayerLoadPacket";
  }
  protected:
  explicit DGPlayerLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .TPlayerTable player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::TPlayerTable& player() const;
  PROTOBUF_NODISCARD ::TPlayerTable* release_player();
  ::TPlayerTable* mutable_player();
  void set_allocated_player(::TPlayerTable* player);
  private:
  const ::TPlayerTable& _internal_player() const;
  ::TPlayerTable* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::TPlayerTable* player);
  ::TPlayerTable* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:network.DGPlayerLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TPlayerTable* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPlayerSkillLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPlayerSkillLoadPacket) */ {
 public:
  inline DGPlayerSkillLoadPacket() : DGPlayerSkillLoadPacket(nullptr) {}
  ~DGPlayerSkillLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPlayerSkillLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPlayerSkillLoadPacket(const DGPlayerSkillLoadPacket& from);
  DGPlayerSkillLoadPacket(DGPlayerSkillLoadPacket&& from) noexcept
    : DGPlayerSkillLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGPlayerSkillLoadPacket& operator=(const DGPlayerSkillLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPlayerSkillLoadPacket& operator=(DGPlayerSkillLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPlayerSkillLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPlayerSkillLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGPlayerSkillLoadPacket*>(
               &_DGPlayerSkillLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DGPlayerSkillLoadPacket& a, DGPlayerSkillLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPlayerSkillLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPlayerSkillLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPlayerSkillLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPlayerSkillLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPlayerSkillLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPlayerSkillLoadPacket& from) {
    DGPlayerSkillLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPlayerSkillLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPlayerSkillLoadPacket";
  }
  protected:
  explicit DGPlayerSkillLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .TPlayerSkill skills = 2;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::TPlayerSkill* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >*
      mutable_skills();
  private:
  const ::TPlayerSkill& _internal_skills(int index) const;
  ::TPlayerSkill* _internal_add_skills();
  public:
  const ::TPlayerSkill& skills(int index) const;
  ::TPlayerSkill* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >&
      skills() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPlayerSkillLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill > skills_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGItemLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGItemLoadPacket) */ {
 public:
  inline DGItemLoadPacket() : DGItemLoadPacket(nullptr) {}
  ~DGItemLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGItemLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGItemLoadPacket(const DGItemLoadPacket& from);
  DGItemLoadPacket(DGItemLoadPacket&& from) noexcept
    : DGItemLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGItemLoadPacket& operator=(const DGItemLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGItemLoadPacket& operator=(DGItemLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGItemLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGItemLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGItemLoadPacket*>(
               &_DGItemLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DGItemLoadPacket& a, DGItemLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGItemLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGItemLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGItemLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGItemLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGItemLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGItemLoadPacket& from) {
    DGItemLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGItemLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGItemLoadPacket";
  }
  protected:
  explicit DGItemLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .network.TItemData items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGItemLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPetLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPetLoadPacket) */ {
 public:
  inline DGPetLoadPacket() : DGPetLoadPacket(nullptr) {}
  ~DGPetLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPetLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPetLoadPacket(const DGPetLoadPacket& from);
  DGPetLoadPacket(DGPetLoadPacket&& from) noexcept
    : DGPetLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGPetLoadPacket& operator=(const DGPetLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPetLoadPacket& operator=(DGPetLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPetLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPetLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGPetLoadPacket*>(
               &_DGPetLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DGPetLoadPacket& a, DGPetLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPetLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPetLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPetLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPetLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPetLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPetLoadPacket& from) {
    DGPetLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPetLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPetLoadPacket";
  }
  protected:
  explicit DGPetLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetsFieldNumber = 1,
  };
  // repeated .network.TPetAdvancedTable pets = 1;
  int pets_size() const;
  private:
  int _internal_pets_size() const;
  public:
  void clear_pets();
  ::network::TPetAdvancedTable* mutable_pets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedTable >*
      mutable_pets();
  private:
  const ::network::TPetAdvancedTable& _internal_pets(int index) const;
  ::network::TPetAdvancedTable* _internal_add_pets();
  public:
  const ::network::TPetAdvancedTable& pets(int index) const;
  ::network::TPetAdvancedTable* add_pets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedTable >&
      pets() const;

  // @@protoc_insertion_point(class_scope:network.DGPetLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedTable > pets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGQuestLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGQuestLoadPacket) */ {
 public:
  inline DGQuestLoadPacket() : DGQuestLoadPacket(nullptr) {}
  ~DGQuestLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGQuestLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGQuestLoadPacket(const DGQuestLoadPacket& from);
  DGQuestLoadPacket(DGQuestLoadPacket&& from) noexcept
    : DGQuestLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGQuestLoadPacket& operator=(const DGQuestLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGQuestLoadPacket& operator=(DGQuestLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGQuestLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGQuestLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGQuestLoadPacket*>(
               &_DGQuestLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DGQuestLoadPacket& a, DGQuestLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGQuestLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGQuestLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGQuestLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGQuestLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGQuestLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGQuestLoadPacket& from) {
    DGQuestLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGQuestLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGQuestLoadPacket";
  }
  protected:
  explicit DGQuestLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestsFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .TQuestTable quests = 2;
  int quests_size() const;
  private:
  int _internal_quests_size() const;
  public:
  void clear_quests();
  ::TQuestTable* mutable_quests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >*
      mutable_quests();
  private:
  const ::TQuestTable& _internal_quests(int index) const;
  ::TQuestTable* _internal_add_quests();
  public:
  const ::TQuestTable& quests(int index) const;
  ::TQuestTable* add_quests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >&
      quests() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGQuestLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable > quests_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGAffectLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGAffectLoadPacket) */ {
 public:
  inline DGAffectLoadPacket() : DGAffectLoadPacket(nullptr) {}
  ~DGAffectLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGAffectLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGAffectLoadPacket(const DGAffectLoadPacket& from);
  DGAffectLoadPacket(DGAffectLoadPacket&& from) noexcept
    : DGAffectLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGAffectLoadPacket& operator=(const DGAffectLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGAffectLoadPacket& operator=(DGAffectLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGAffectLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGAffectLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGAffectLoadPacket*>(
               &_DGAffectLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DGAffectLoadPacket& a, DGAffectLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGAffectLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGAffectLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGAffectLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGAffectLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGAffectLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGAffectLoadPacket& from) {
    DGAffectLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGAffectLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGAffectLoadPacket";
  }
  protected:
  explicit DGAffectLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffectsFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .TPacketAffectElement affects = 2;
  int affects_size() const;
  private:
  int _internal_affects_size() const;
  public:
  void clear_affects();
  ::TPacketAffectElement* mutable_affects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPacketAffectElement >*
      mutable_affects();
  private:
  const ::TPacketAffectElement& _internal_affects(int index) const;
  ::TPacketAffectElement* _internal_add_affects();
  public:
  const ::TPacketAffectElement& affects(int index) const;
  ::TPacketAffectElement* add_affects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPacketAffectElement >&
      affects() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGAffectLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPacketAffectElement > affects_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSafeboxLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSafeboxLoadPacket) */ {
 public:
  inline DGSafeboxLoadPacket() : DGSafeboxLoadPacket(nullptr) {}
  ~DGSafeboxLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSafeboxLoadPacket(const DGSafeboxLoadPacket& from);
  DGSafeboxLoadPacket(DGSafeboxLoadPacket&& from) noexcept
    : DGSafeboxLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGSafeboxLoadPacket& operator=(const DGSafeboxLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSafeboxLoadPacket& operator=(DGSafeboxLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSafeboxLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSafeboxLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGSafeboxLoadPacket*>(
               &_DGSafeboxLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DGSafeboxLoadPacket& a, DGSafeboxLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSafeboxLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSafeboxLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSafeboxLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSafeboxLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSafeboxLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSafeboxLoadPacket& from) {
    DGSafeboxLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSafeboxLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSafeboxLoadPacket";
  }
  protected:
  explicit DGSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kAccountIdFieldNumber = 1,
    kSizeFieldNumber = 2,
    kGoldFieldNumber = 3,
    kIsMallFieldNumber = 4,
  };
  // repeated .network.TItemData items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // int64 gold = 3;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // bool is_mall = 4;
  void clear_is_mall();
  bool is_mall() const;
  void set_is_mall(bool value);
  private:
  bool _internal_is_mall() const;
  void _internal_set_is_mall(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGSafeboxLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    uint32_t account_id_;
    uint32_t size_;
    int64_t gold_;
    bool is_mall_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSafeboxChangeSizePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSafeboxChangeSizePacket) */ {
 public:
  inline DGSafeboxChangeSizePacket() : DGSafeboxChangeSizePacket(nullptr) {}
  ~DGSafeboxChangeSizePacket() override;
  explicit PROTOBUF_CONSTEXPR DGSafeboxChangeSizePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSafeboxChangeSizePacket(const DGSafeboxChangeSizePacket& from);
  DGSafeboxChangeSizePacket(DGSafeboxChangeSizePacket&& from) noexcept
    : DGSafeboxChangeSizePacket() {
    *this = ::std::move(from);
  }

  inline DGSafeboxChangeSizePacket& operator=(const DGSafeboxChangeSizePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSafeboxChangeSizePacket& operator=(DGSafeboxChangeSizePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSafeboxChangeSizePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSafeboxChangeSizePacket* internal_default_instance() {
    return reinterpret_cast<const DGSafeboxChangeSizePacket*>(
               &_DGSafeboxChangeSizePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DGSafeboxChangeSizePacket& a, DGSafeboxChangeSizePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSafeboxChangeSizePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSafeboxChangeSizePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSafeboxChangeSizePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSafeboxChangeSizePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSafeboxChangeSizePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSafeboxChangeSizePacket& from) {
    DGSafeboxChangeSizePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSafeboxChangeSizePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSafeboxChangeSizePacket";
  }
  protected:
  explicit DGSafeboxChangeSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint32 size = 1;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGSafeboxChangeSizePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSafeboxChangePasswordAnswerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSafeboxChangePasswordAnswerPacket) */ {
 public:
  inline DGSafeboxChangePasswordAnswerPacket() : DGSafeboxChangePasswordAnswerPacket(nullptr) {}
  ~DGSafeboxChangePasswordAnswerPacket() override;
  explicit PROTOBUF_CONSTEXPR DGSafeboxChangePasswordAnswerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSafeboxChangePasswordAnswerPacket(const DGSafeboxChangePasswordAnswerPacket& from);
  DGSafeboxChangePasswordAnswerPacket(DGSafeboxChangePasswordAnswerPacket&& from) noexcept
    : DGSafeboxChangePasswordAnswerPacket() {
    *this = ::std::move(from);
  }

  inline DGSafeboxChangePasswordAnswerPacket& operator=(const DGSafeboxChangePasswordAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSafeboxChangePasswordAnswerPacket& operator=(DGSafeboxChangePasswordAnswerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSafeboxChangePasswordAnswerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSafeboxChangePasswordAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const DGSafeboxChangePasswordAnswerPacket*>(
               &_DGSafeboxChangePasswordAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DGSafeboxChangePasswordAnswerPacket& a, DGSafeboxChangePasswordAnswerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSafeboxChangePasswordAnswerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSafeboxChangePasswordAnswerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSafeboxChangePasswordAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSafeboxChangePasswordAnswerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSafeboxChangePasswordAnswerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSafeboxChangePasswordAnswerPacket& from) {
    DGSafeboxChangePasswordAnswerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSafeboxChangePasswordAnswerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSafeboxChangePasswordAnswerPacket";
  }
  protected:
  explicit DGSafeboxChangePasswordAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGSafeboxChangePasswordAnswerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGEmpireSelectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGEmpireSelectPacket) */ {
 public:
  inline DGEmpireSelectPacket() : DGEmpireSelectPacket(nullptr) {}
  ~DGEmpireSelectPacket() override;
  explicit PROTOBUF_CONSTEXPR DGEmpireSelectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGEmpireSelectPacket(const DGEmpireSelectPacket& from);
  DGEmpireSelectPacket(DGEmpireSelectPacket&& from) noexcept
    : DGEmpireSelectPacket() {
    *this = ::std::move(from);
  }

  inline DGEmpireSelectPacket& operator=(const DGEmpireSelectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGEmpireSelectPacket& operator=(DGEmpireSelectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGEmpireSelectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGEmpireSelectPacket* internal_default_instance() {
    return reinterpret_cast<const DGEmpireSelectPacket*>(
               &_DGEmpireSelectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DGEmpireSelectPacket& a, DGEmpireSelectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGEmpireSelectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGEmpireSelectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGEmpireSelectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGEmpireSelectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGEmpireSelectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGEmpireSelectPacket& from) {
    DGEmpireSelectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGEmpireSelectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGEmpireSelectPacket";
  }
  protected:
  explicit DGEmpireSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmpireFieldNumber = 1,
  };
  // uint32 empire = 1;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGEmpireSelectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t empire_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGP2PInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGP2PInfoPacket) */ {
 public:
  inline DGP2PInfoPacket() : DGP2PInfoPacket(nullptr) {}
  ~DGP2PInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR DGP2PInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGP2PInfoPacket(const DGP2PInfoPacket& from);
  DGP2PInfoPacket(DGP2PInfoPacket&& from) noexcept
    : DGP2PInfoPacket() {
    *this = ::std::move(from);
  }

  inline DGP2PInfoPacket& operator=(const DGP2PInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGP2PInfoPacket& operator=(DGP2PInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGP2PInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGP2PInfoPacket* internal_default_instance() {
    return reinterpret_cast<const DGP2PInfoPacket*>(
               &_DGP2PInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DGP2PInfoPacket& a, DGP2PInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGP2PInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGP2PInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGP2PInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGP2PInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGP2PInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGP2PInfoPacket& from) {
    DGP2PInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGP2PInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGP2PInfoPacket";
  }
  protected:
  explicit DGP2PInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
    kListenPortFieldNumber = 3,
    kChannelFieldNumber = 4,
    kProcessorCoreFieldNumber = 5,
  };
  // bytes host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 listen_port = 3;
  void clear_listen_port();
  uint32_t listen_port() const;
  void set_listen_port(uint32_t value);
  private:
  uint32_t _internal_listen_port() const;
  void _internal_set_listen_port(uint32_t value);
  public:

  // uint32 channel = 4;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // bool processor_core = 5;
  void clear_processor_core();
  bool processor_core() const;
  void set_processor_core(bool value);
  private:
  bool _internal_processor_core() const;
  void _internal_set_processor_core(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGP2PInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    uint32_t port_;
    uint32_t listen_port_;
    uint32_t channel_;
    bool processor_core_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGLoginAlreadyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGLoginAlreadyPacket) */ {
 public:
  inline DGLoginAlreadyPacket() : DGLoginAlreadyPacket(nullptr) {}
  ~DGLoginAlreadyPacket() override;
  explicit PROTOBUF_CONSTEXPR DGLoginAlreadyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGLoginAlreadyPacket(const DGLoginAlreadyPacket& from);
  DGLoginAlreadyPacket(DGLoginAlreadyPacket&& from) noexcept
    : DGLoginAlreadyPacket() {
    *this = ::std::move(from);
  }

  inline DGLoginAlreadyPacket& operator=(const DGLoginAlreadyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGLoginAlreadyPacket& operator=(DGLoginAlreadyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGLoginAlreadyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGLoginAlreadyPacket* internal_default_instance() {
    return reinterpret_cast<const DGLoginAlreadyPacket*>(
               &_DGLoginAlreadyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DGLoginAlreadyPacket& a, DGLoginAlreadyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGLoginAlreadyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGLoginAlreadyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGLoginAlreadyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGLoginAlreadyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGLoginAlreadyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGLoginAlreadyPacket& from) {
    DGLoginAlreadyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGLoginAlreadyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGLoginAlreadyPacket";
  }
  protected:
  explicit DGLoginAlreadyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:network.DGLoginAlreadyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGTimePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGTimePacket) */ {
 public:
  inline DGTimePacket() : DGTimePacket(nullptr) {}
  ~DGTimePacket() override;
  explicit PROTOBUF_CONSTEXPR DGTimePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGTimePacket(const DGTimePacket& from);
  DGTimePacket(DGTimePacket&& from) noexcept
    : DGTimePacket() {
    *this = ::std::move(from);
  }

  inline DGTimePacket& operator=(const DGTimePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGTimePacket& operator=(DGTimePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGTimePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGTimePacket* internal_default_instance() {
    return reinterpret_cast<const DGTimePacket*>(
               &_DGTimePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DGTimePacket& a, DGTimePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGTimePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGTimePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGTimePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGTimePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGTimePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGTimePacket& from) {
    DGTimePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGTimePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGTimePacket";
  }
  protected:
  explicit DGTimePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint32 time = 1;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGTimePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGReloadShopTablePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGReloadShopTablePacket) */ {
 public:
  inline DGReloadShopTablePacket() : DGReloadShopTablePacket(nullptr) {}
  ~DGReloadShopTablePacket() override;
  explicit PROTOBUF_CONSTEXPR DGReloadShopTablePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGReloadShopTablePacket(const DGReloadShopTablePacket& from);
  DGReloadShopTablePacket(DGReloadShopTablePacket&& from) noexcept
    : DGReloadShopTablePacket() {
    *this = ::std::move(from);
  }

  inline DGReloadShopTablePacket& operator=(const DGReloadShopTablePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGReloadShopTablePacket& operator=(DGReloadShopTablePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGReloadShopTablePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGReloadShopTablePacket* internal_default_instance() {
    return reinterpret_cast<const DGReloadShopTablePacket*>(
               &_DGReloadShopTablePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DGReloadShopTablePacket& a, DGReloadShopTablePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGReloadShopTablePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGReloadShopTablePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGReloadShopTablePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGReloadShopTablePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGReloadShopTablePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGReloadShopTablePacket& from) {
    DGReloadShopTablePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGReloadShopTablePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGReloadShopTablePacket";
  }
  protected:
  explicit DGReloadShopTablePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopsFieldNumber = 1,
  };
  // repeated .network.TShopTable shops = 1;
  int shops_size() const;
  private:
  int _internal_shops_size() const;
  public:
  void clear_shops();
  ::network::TShopTable* mutable_shops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >*
      mutable_shops();
  private:
  const ::network::TShopTable& _internal_shops(int index) const;
  ::network::TShopTable* _internal_add_shops();
  public:
  const ::network::TShopTable& shops(int index) const;
  ::network::TShopTable* add_shops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >&
      shops() const;

  // @@protoc_insertion_point(class_scope:network.DGReloadShopTablePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable > shops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGReloadMobProtoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGReloadMobProtoPacket) */ {
 public:
  inline DGReloadMobProtoPacket() : DGReloadMobProtoPacket(nullptr) {}
  ~DGReloadMobProtoPacket() override;
  explicit PROTOBUF_CONSTEXPR DGReloadMobProtoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGReloadMobProtoPacket(const DGReloadMobProtoPacket& from);
  DGReloadMobProtoPacket(DGReloadMobProtoPacket&& from) noexcept
    : DGReloadMobProtoPacket() {
    *this = ::std::move(from);
  }

  inline DGReloadMobProtoPacket& operator=(const DGReloadMobProtoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGReloadMobProtoPacket& operator=(DGReloadMobProtoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGReloadMobProtoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGReloadMobProtoPacket* internal_default_instance() {
    return reinterpret_cast<const DGReloadMobProtoPacket*>(
               &_DGReloadMobProtoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DGReloadMobProtoPacket& a, DGReloadMobProtoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGReloadMobProtoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGReloadMobProtoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGReloadMobProtoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGReloadMobProtoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGReloadMobProtoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGReloadMobProtoPacket& from) {
    DGReloadMobProtoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGReloadMobProtoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGReloadMobProtoPacket";
  }
  protected:
  explicit DGReloadMobProtoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobsFieldNumber = 1,
  };
  // repeated .network.TMobTable mobs = 1;
  int mobs_size() const;
  private:
  int _internal_mobs_size() const;
  public:
  void clear_mobs();
  ::network::TMobTable* mutable_mobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
      mutable_mobs();
  private:
  const ::network::TMobTable& _internal_mobs(int index) const;
  ::network::TMobTable* _internal_add_mobs();
  public:
  const ::network::TMobTable& mobs(int index) const;
  ::network::TMobTable* add_mobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
      mobs() const;

  // @@protoc_insertion_point(class_scope:network.DGReloadMobProtoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable > mobs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGReloadProtoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGReloadProtoPacket) */ {
 public:
  inline DGReloadProtoPacket() : DGReloadProtoPacket(nullptr) {}
  ~DGReloadProtoPacket() override;
  explicit PROTOBUF_CONSTEXPR DGReloadProtoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGReloadProtoPacket(const DGReloadProtoPacket& from);
  DGReloadProtoPacket(DGReloadProtoPacket&& from) noexcept
    : DGReloadProtoPacket() {
    *this = ::std::move(from);
  }

  inline DGReloadProtoPacket& operator=(const DGReloadProtoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGReloadProtoPacket& operator=(DGReloadProtoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGReloadProtoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGReloadProtoPacket* internal_default_instance() {
    return reinterpret_cast<const DGReloadProtoPacket*>(
               &_DGReloadProtoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DGReloadProtoPacket& a, DGReloadProtoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGReloadProtoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGReloadProtoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGReloadProtoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGReloadProtoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGReloadProtoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGReloadProtoPacket& from) {
    DGReloadProtoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGReloadProtoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGReloadProtoPacket";
  }
  protected:
  explicit DGReloadProtoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 1,
    kItemsFieldNumber = 2,
    kMobsFieldNumber = 3,
    kShopsFieldNumber = 4,
    kSoulProtosFieldNumber = 5,
    kPetSkillsFieldNumber = 6,
    kPetEvolvesFieldNumber = 7,
    kPetAttrsFieldNumber = 8,
  };
  // repeated .network.TSkillTable skills = 1;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::network::TSkillTable* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >*
      mutable_skills();
  private:
  const ::network::TSkillTable& _internal_skills(int index) const;
  ::network::TSkillTable* _internal_add_skills();
  public:
  const ::network::TSkillTable& skills(int index) const;
  ::network::TSkillTable* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >&
      skills() const;

  // repeated .network.TItemTable items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemTable* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >*
      mutable_items();
  private:
  const ::network::TItemTable& _internal_items(int index) const;
  ::network::TItemTable* _internal_add_items();
  public:
  const ::network::TItemTable& items(int index) const;
  ::network::TItemTable* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >&
      items() const;

  // repeated .network.TMobTable mobs = 3;
  int mobs_size() const;
  private:
  int _internal_mobs_size() const;
  public:
  void clear_mobs();
  ::network::TMobTable* mutable_mobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
      mutable_mobs();
  private:
  const ::network::TMobTable& _internal_mobs(int index) const;
  ::network::TMobTable* _internal_add_mobs();
  public:
  const ::network::TMobTable& mobs(int index) const;
  ::network::TMobTable* add_mobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
      mobs() const;

  // repeated .network.TShopTable shops = 4;
  int shops_size() const;
  private:
  int _internal_shops_size() const;
  public:
  void clear_shops();
  ::network::TShopTable* mutable_shops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >*
      mutable_shops();
  private:
  const ::network::TShopTable& _internal_shops(int index) const;
  ::network::TShopTable* _internal_add_shops();
  public:
  const ::network::TShopTable& shops(int index) const;
  ::network::TShopTable* add_shops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >&
      shops() const;

  // repeated .network.TSoulProtoTable soul_protos = 5;
  int soul_protos_size() const;
  private:
  int _internal_soul_protos_size() const;
  public:
  void clear_soul_protos();
  ::network::TSoulProtoTable* mutable_soul_protos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >*
      mutable_soul_protos();
  private:
  const ::network::TSoulProtoTable& _internal_soul_protos(int index) const;
  ::network::TSoulProtoTable* _internal_add_soul_protos();
  public:
  const ::network::TSoulProtoTable& soul_protos(int index) const;
  ::network::TSoulProtoTable* add_soul_protos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >&
      soul_protos() const;

  // repeated .network.TPetAdvancedSkillProto pet_skills = 6;
  int pet_skills_size() const;
  private:
  int _internal_pet_skills_size() const;
  public:
  void clear_pet_skills();
  ::network::TPetAdvancedSkillProto* mutable_pet_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >*
      mutable_pet_skills();
  private:
  const ::network::TPetAdvancedSkillProto& _internal_pet_skills(int index) const;
  ::network::TPetAdvancedSkillProto* _internal_add_pet_skills();
  public:
  const ::network::TPetAdvancedSkillProto& pet_skills(int index) const;
  ::network::TPetAdvancedSkillProto* add_pet_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >&
      pet_skills() const;

  // repeated .network.TPetAdvancedEvolveProto pet_evolves = 7;
  int pet_evolves_size() const;
  private:
  int _internal_pet_evolves_size() const;
  public:
  void clear_pet_evolves();
  ::network::TPetAdvancedEvolveProto* mutable_pet_evolves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >*
      mutable_pet_evolves();
  private:
  const ::network::TPetAdvancedEvolveProto& _internal_pet_evolves(int index) const;
  ::network::TPetAdvancedEvolveProto* _internal_add_pet_evolves();
  public:
  const ::network::TPetAdvancedEvolveProto& pet_evolves(int index) const;
  ::network::TPetAdvancedEvolveProto* add_pet_evolves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >&
      pet_evolves() const;

  // repeated .network.TPetAdvancedAttrProto pet_attrs = 8;
  int pet_attrs_size() const;
  private:
  int _internal_pet_attrs_size() const;
  public:
  void clear_pet_attrs();
  ::network::TPetAdvancedAttrProto* mutable_pet_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >*
      mutable_pet_attrs();
  private:
  const ::network::TPetAdvancedAttrProto& _internal_pet_attrs(int index) const;
  ::network::TPetAdvancedAttrProto* _internal_add_pet_attrs();
  public:
  const ::network::TPetAdvancedAttrProto& pet_attrs(int index) const;
  ::network::TPetAdvancedAttrProto* add_pet_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >&
      pet_attrs() const;

  // @@protoc_insertion_point(class_scope:network.DGReloadProtoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable > skills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable > mobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable > shops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable > soul_protos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto > pet_skills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto > pet_evolves_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto > pet_attrs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGChangeNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGChangeNamePacket) */ {
 public:
  inline DGChangeNamePacket() : DGChangeNamePacket(nullptr) {}
  ~DGChangeNamePacket() override;
  explicit PROTOBUF_CONSTEXPR DGChangeNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGChangeNamePacket(const DGChangeNamePacket& from);
  DGChangeNamePacket(DGChangeNamePacket&& from) noexcept
    : DGChangeNamePacket() {
    *this = ::std::move(from);
  }

  inline DGChangeNamePacket& operator=(const DGChangeNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGChangeNamePacket& operator=(DGChangeNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGChangeNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGChangeNamePacket* internal_default_instance() {
    return reinterpret_cast<const DGChangeNamePacket*>(
               &_DGChangeNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DGChangeNamePacket& a, DGChangeNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGChangeNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGChangeNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGChangeNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGChangeNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGChangeNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGChangeNamePacket& from) {
    DGChangeNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGChangeNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGChangeNamePacket";
  }
  protected:
  explicit DGChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGChangeNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGAuthLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGAuthLoginPacket) */ {
 public:
  inline DGAuthLoginPacket() : DGAuthLoginPacket(nullptr) {}
  ~DGAuthLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR DGAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGAuthLoginPacket(const DGAuthLoginPacket& from);
  DGAuthLoginPacket(DGAuthLoginPacket&& from) noexcept
    : DGAuthLoginPacket() {
    *this = ::std::move(from);
  }

  inline DGAuthLoginPacket& operator=(const DGAuthLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGAuthLoginPacket& operator=(DGAuthLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGAuthLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGAuthLoginPacket* internal_default_instance() {
    return reinterpret_cast<const DGAuthLoginPacket*>(
               &_DGAuthLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DGAuthLoginPacket& a, DGAuthLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGAuthLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGAuthLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGAuthLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGAuthLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGAuthLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGAuthLoginPacket& from) {
    DGAuthLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGAuthLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGAuthLoginPacket";
  }
  protected:
  explicit DGAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGAuthLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGChangeEmpirePrivPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGChangeEmpirePrivPacket) */ {
 public:
  inline DGChangeEmpirePrivPacket() : DGChangeEmpirePrivPacket(nullptr) {}
  ~DGChangeEmpirePrivPacket() override;
  explicit PROTOBUF_CONSTEXPR DGChangeEmpirePrivPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGChangeEmpirePrivPacket(const DGChangeEmpirePrivPacket& from);
  DGChangeEmpirePrivPacket(DGChangeEmpirePrivPacket&& from) noexcept
    : DGChangeEmpirePrivPacket() {
    *this = ::std::move(from);
  }

  inline DGChangeEmpirePrivPacket& operator=(const DGChangeEmpirePrivPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGChangeEmpirePrivPacket& operator=(DGChangeEmpirePrivPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGChangeEmpirePrivPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGChangeEmpirePrivPacket* internal_default_instance() {
    return reinterpret_cast<const DGChangeEmpirePrivPacket*>(
               &_DGChangeEmpirePrivPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DGChangeEmpirePrivPacket& a, DGChangeEmpirePrivPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGChangeEmpirePrivPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGChangeEmpirePrivPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGChangeEmpirePrivPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGChangeEmpirePrivPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGChangeEmpirePrivPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGChangeEmpirePrivPacket& from) {
    DGChangeEmpirePrivPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGChangeEmpirePrivPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGChangeEmpirePrivPacket";
  }
  protected:
  explicit DGChangeEmpirePrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kEmpireFieldNumber = 3,
    kLogFieldNumber = 4,
    kEndTimeSecFieldNumber = 5,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // uint32 empire = 3;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // bool log = 4;
  void clear_log();
  bool log() const;
  void set_log(bool value);
  private:
  bool _internal_log() const;
  void _internal_set_log(bool value);
  public:

  // uint32 end_time_sec = 5;
  void clear_end_time_sec();
  uint32_t end_time_sec() const;
  void set_end_time_sec(uint32_t value);
  private:
  uint32_t _internal_end_time_sec() const;
  void _internal_set_end_time_sec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGChangeEmpirePrivPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    uint32_t empire_;
    bool log_;
    uint32_t end_time_sec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGChangeGuildPrivPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGChangeGuildPrivPacket) */ {
 public:
  inline DGChangeGuildPrivPacket() : DGChangeGuildPrivPacket(nullptr) {}
  ~DGChangeGuildPrivPacket() override;
  explicit PROTOBUF_CONSTEXPR DGChangeGuildPrivPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGChangeGuildPrivPacket(const DGChangeGuildPrivPacket& from);
  DGChangeGuildPrivPacket(DGChangeGuildPrivPacket&& from) noexcept
    : DGChangeGuildPrivPacket() {
    *this = ::std::move(from);
  }

  inline DGChangeGuildPrivPacket& operator=(const DGChangeGuildPrivPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGChangeGuildPrivPacket& operator=(DGChangeGuildPrivPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGChangeGuildPrivPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGChangeGuildPrivPacket* internal_default_instance() {
    return reinterpret_cast<const DGChangeGuildPrivPacket*>(
               &_DGChangeGuildPrivPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DGChangeGuildPrivPacket& a, DGChangeGuildPrivPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGChangeGuildPrivPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGChangeGuildPrivPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGChangeGuildPrivPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGChangeGuildPrivPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGChangeGuildPrivPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGChangeGuildPrivPacket& from) {
    DGChangeGuildPrivPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGChangeGuildPrivPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGChangeGuildPrivPacket";
  }
  protected:
  explicit DGChangeGuildPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kGuildIdFieldNumber = 3,
    kLogFieldNumber = 4,
    kEndTimeSecFieldNumber = 5,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // uint32 guild_id = 3;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // bool log = 4;
  void clear_log();
  bool log() const;
  void set_log(bool value);
  private:
  bool _internal_log() const;
  void _internal_set_log(bool value);
  public:

  // uint32 end_time_sec = 5;
  void clear_end_time_sec();
  uint32_t end_time_sec() const;
  void set_end_time_sec(uint32_t value);
  private:
  uint32_t _internal_end_time_sec() const;
  void _internal_set_end_time_sec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGChangeGuildPrivPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    uint32_t guild_id_;
    bool log_;
    uint32_t end_time_sec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGChangeCharacterPrivPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGChangeCharacterPrivPacket) */ {
 public:
  inline DGChangeCharacterPrivPacket() : DGChangeCharacterPrivPacket(nullptr) {}
  ~DGChangeCharacterPrivPacket() override;
  explicit PROTOBUF_CONSTEXPR DGChangeCharacterPrivPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGChangeCharacterPrivPacket(const DGChangeCharacterPrivPacket& from);
  DGChangeCharacterPrivPacket(DGChangeCharacterPrivPacket&& from) noexcept
    : DGChangeCharacterPrivPacket() {
    *this = ::std::move(from);
  }

  inline DGChangeCharacterPrivPacket& operator=(const DGChangeCharacterPrivPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGChangeCharacterPrivPacket& operator=(DGChangeCharacterPrivPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGChangeCharacterPrivPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGChangeCharacterPrivPacket* internal_default_instance() {
    return reinterpret_cast<const DGChangeCharacterPrivPacket*>(
               &_DGChangeCharacterPrivPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DGChangeCharacterPrivPacket& a, DGChangeCharacterPrivPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGChangeCharacterPrivPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGChangeCharacterPrivPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGChangeCharacterPrivPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGChangeCharacterPrivPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGChangeCharacterPrivPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGChangeCharacterPrivPacket& from) {
    DGChangeCharacterPrivPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGChangeCharacterPrivPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGChangeCharacterPrivPacket";
  }
  protected:
  explicit DGChangeCharacterPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kPidFieldNumber = 3,
    kLogFieldNumber = 4,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // uint32 pid = 3;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // bool log = 4;
  void clear_log();
  bool log() const;
  void set_log(bool value);
  private:
  bool _internal_log() const;
  void _internal_set_log(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGChangeCharacterPrivPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    uint32_t pid_;
    bool log_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMoneyLogPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMoneyLogPacket) */ {
 public:
  inline DGMoneyLogPacket() : DGMoneyLogPacket(nullptr) {}
  ~DGMoneyLogPacket() override;
  explicit PROTOBUF_CONSTEXPR DGMoneyLogPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMoneyLogPacket(const DGMoneyLogPacket& from);
  DGMoneyLogPacket(DGMoneyLogPacket&& from) noexcept
    : DGMoneyLogPacket() {
    *this = ::std::move(from);
  }

  inline DGMoneyLogPacket& operator=(const DGMoneyLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMoneyLogPacket& operator=(DGMoneyLogPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMoneyLogPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMoneyLogPacket* internal_default_instance() {
    return reinterpret_cast<const DGMoneyLogPacket*>(
               &_DGMoneyLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DGMoneyLogPacket& a, DGMoneyLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMoneyLogPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMoneyLogPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMoneyLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMoneyLogPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMoneyLogPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMoneyLogPacket& from) {
    DGMoneyLogPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMoneyLogPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMoneyLogPacket";
  }
  protected:
  explicit DGMoneyLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVnumFieldNumber = 2,
    kGoldFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint64 gold = 3;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGMoneyLogPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t vnum_;
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSetEventFlagPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSetEventFlagPacket) */ {
 public:
  inline DGSetEventFlagPacket() : DGSetEventFlagPacket(nullptr) {}
  ~DGSetEventFlagPacket() override;
  explicit PROTOBUF_CONSTEXPR DGSetEventFlagPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSetEventFlagPacket(const DGSetEventFlagPacket& from);
  DGSetEventFlagPacket(DGSetEventFlagPacket&& from) noexcept
    : DGSetEventFlagPacket() {
    *this = ::std::move(from);
  }

  inline DGSetEventFlagPacket& operator=(const DGSetEventFlagPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSetEventFlagPacket& operator=(DGSetEventFlagPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSetEventFlagPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSetEventFlagPacket* internal_default_instance() {
    return reinterpret_cast<const DGSetEventFlagPacket*>(
               &_DGSetEventFlagPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DGSetEventFlagPacket& a, DGSetEventFlagPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSetEventFlagPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSetEventFlagPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSetEventFlagPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSetEventFlagPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSetEventFlagPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSetEventFlagPacket& from) {
    DGSetEventFlagPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSetEventFlagPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSetEventFlagPacket";
  }
  protected:
  explicit DGSetEventFlagPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes flag_name = 1;
  void clear_flag_name();
  const std::string& flag_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag_name();
  PROTOBUF_NODISCARD std::string* release_flag_name();
  void set_allocated_flag_name(std::string* flag_name);
  private:
  const std::string& _internal_flag_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag_name(const std::string& value);
  std::string* _internal_mutable_flag_name();
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGSetEventFlagPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_name_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGVCardPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGVCardPacket) */ {
 public:
  inline DGVCardPacket() : DGVCardPacket(nullptr) {}
  ~DGVCardPacket() override;
  explicit PROTOBUF_CONSTEXPR DGVCardPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGVCardPacket(const DGVCardPacket& from);
  DGVCardPacket(DGVCardPacket&& from) noexcept
    : DGVCardPacket() {
    *this = ::std::move(from);
  }

  inline DGVCardPacket& operator=(const DGVCardPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGVCardPacket& operator=(DGVCardPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGVCardPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGVCardPacket* internal_default_instance() {
    return reinterpret_cast<const DGVCardPacket*>(
               &_DGVCardPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DGVCardPacket& a, DGVCardPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGVCardPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGVCardPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGVCardPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGVCardPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGVCardPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGVCardPacket& from) {
    DGVCardPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGVCardPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGVCardPacket";
  }
  protected:
  explicit DGVCardPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellCharacterFieldNumber = 2,
    kSellAccountFieldNumber = 3,
    kBuyCharacterFieldNumber = 4,
    kBuyAccountFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // bytes sell_character = 2;
  void clear_sell_character();
  const std::string& sell_character() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_character(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_character();
  PROTOBUF_NODISCARD std::string* release_sell_character();
  void set_allocated_sell_character(std::string* sell_character);
  private:
  const std::string& _internal_sell_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_character(const std::string& value);
  std::string* _internal_mutable_sell_character();
  public:

  // bytes sell_account = 3;
  void clear_sell_account();
  const std::string& sell_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_account();
  PROTOBUF_NODISCARD std::string* release_sell_account();
  void set_allocated_sell_account(std::string* sell_account);
  private:
  const std::string& _internal_sell_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_account(const std::string& value);
  std::string* _internal_mutable_sell_account();
  public:

  // bytes buy_character = 4;
  void clear_buy_character();
  const std::string& buy_character() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_character(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_character();
  PROTOBUF_NODISCARD std::string* release_buy_character();
  void set_allocated_buy_character(std::string* buy_character);
  private:
  const std::string& _internal_buy_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_character(const std::string& value);
  std::string* _internal_mutable_buy_character();
  public:

  // bytes buy_account = 5;
  void clear_buy_account();
  const std::string& buy_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_account();
  PROTOBUF_NODISCARD std::string* release_buy_account();
  void set_allocated_buy_account(std::string* buy_account);
  private:
  const std::string& _internal_buy_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_account(const std::string& value);
  std::string* _internal_mutable_buy_account();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGVCardPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_character_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_character_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_account_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGNoticePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGNoticePacket) */ {
 public:
  inline DGNoticePacket() : DGNoticePacket(nullptr) {}
  ~DGNoticePacket() override;
  explicit PROTOBUF_CONSTEXPR DGNoticePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGNoticePacket(const DGNoticePacket& from);
  DGNoticePacket(DGNoticePacket&& from) noexcept
    : DGNoticePacket() {
    *this = ::std::move(from);
  }

  inline DGNoticePacket& operator=(const DGNoticePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGNoticePacket& operator=(DGNoticePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGNoticePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGNoticePacket* internal_default_instance() {
    return reinterpret_cast<const DGNoticePacket*>(
               &_DGNoticePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DGNoticePacket& a, DGNoticePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGNoticePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGNoticePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGNoticePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGNoticePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGNoticePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGNoticePacket& from) {
    DGNoticePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGNoticePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGNoticePacket";
  }
  protected:
  explicit DGNoticePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticeFieldNumber = 1,
  };
  // bytes notice = 1;
  void clear_notice();
  const std::string& notice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notice();
  PROTOBUF_NODISCARD std::string* release_notice();
  void set_allocated_notice(std::string* notice);
  private:
  const std::string& _internal_notice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notice(const std::string& value);
  std::string* _internal_mutable_notice();
  public:

  // @@protoc_insertion_point(class_scope:network.DGNoticePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGAddBlockCountryIPPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGAddBlockCountryIPPacket) */ {
 public:
  inline DGAddBlockCountryIPPacket() : DGAddBlockCountryIPPacket(nullptr) {}
  ~DGAddBlockCountryIPPacket() override;
  explicit PROTOBUF_CONSTEXPR DGAddBlockCountryIPPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGAddBlockCountryIPPacket(const DGAddBlockCountryIPPacket& from);
  DGAddBlockCountryIPPacket(DGAddBlockCountryIPPacket&& from) noexcept
    : DGAddBlockCountryIPPacket() {
    *this = ::std::move(from);
  }

  inline DGAddBlockCountryIPPacket& operator=(const DGAddBlockCountryIPPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGAddBlockCountryIPPacket& operator=(DGAddBlockCountryIPPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGAddBlockCountryIPPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGAddBlockCountryIPPacket* internal_default_instance() {
    return reinterpret_cast<const DGAddBlockCountryIPPacket*>(
               &_DGAddBlockCountryIPPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DGAddBlockCountryIPPacket& a, DGAddBlockCountryIPPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGAddBlockCountryIPPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGAddBlockCountryIPPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGAddBlockCountryIPPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGAddBlockCountryIPPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGAddBlockCountryIPPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGAddBlockCountryIPPacket& from) {
    DGAddBlockCountryIPPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGAddBlockCountryIPPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGAddBlockCountryIPPacket";
  }
  protected:
  explicit DGAddBlockCountryIPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFromFieldNumber = 1,
    kIpToFieldNumber = 2,
  };
  // uint32 ip_from = 1;
  void clear_ip_from();
  uint32_t ip_from() const;
  void set_ip_from(uint32_t value);
  private:
  uint32_t _internal_ip_from() const;
  void _internal_set_ip_from(uint32_t value);
  public:

  // uint32 ip_to = 2;
  void clear_ip_to();
  uint32_t ip_to() const;
  void set_ip_to(uint32_t value);
  private:
  uint32_t _internal_ip_to() const;
  void _internal_set_ip_to(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGAddBlockCountryIPPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t ip_from_;
    uint32_t ip_to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGBlockExceptionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGBlockExceptionPacket) */ {
 public:
  inline DGBlockExceptionPacket() : DGBlockExceptionPacket(nullptr) {}
  ~DGBlockExceptionPacket() override;
  explicit PROTOBUF_CONSTEXPR DGBlockExceptionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGBlockExceptionPacket(const DGBlockExceptionPacket& from);
  DGBlockExceptionPacket(DGBlockExceptionPacket&& from) noexcept
    : DGBlockExceptionPacket() {
    *this = ::std::move(from);
  }

  inline DGBlockExceptionPacket& operator=(const DGBlockExceptionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGBlockExceptionPacket& operator=(DGBlockExceptionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGBlockExceptionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGBlockExceptionPacket* internal_default_instance() {
    return reinterpret_cast<const DGBlockExceptionPacket*>(
               &_DGBlockExceptionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DGBlockExceptionPacket& a, DGBlockExceptionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGBlockExceptionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGBlockExceptionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGBlockExceptionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGBlockExceptionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGBlockExceptionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGBlockExceptionPacket& from) {
    DGBlockExceptionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGBlockExceptionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGBlockExceptionPacket";
  }
  protected:
  explicit DGBlockExceptionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 cmd = 1;
  void clear_cmd();
  uint32_t cmd() const;
  void set_cmd(uint32_t value);
  private:
  uint32_t _internal_cmd() const;
  void _internal_set_cmd(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGBlockExceptionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMyShopPricelistPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMyShopPricelistPacket) */ {
 public:
  inline DGMyShopPricelistPacket() : DGMyShopPricelistPacket(nullptr) {}
  ~DGMyShopPricelistPacket() override;
  explicit PROTOBUF_CONSTEXPR DGMyShopPricelistPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMyShopPricelistPacket(const DGMyShopPricelistPacket& from);
  DGMyShopPricelistPacket(DGMyShopPricelistPacket&& from) noexcept
    : DGMyShopPricelistPacket() {
    *this = ::std::move(from);
  }

  inline DGMyShopPricelistPacket& operator=(const DGMyShopPricelistPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMyShopPricelistPacket& operator=(DGMyShopPricelistPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMyShopPricelistPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMyShopPricelistPacket* internal_default_instance() {
    return reinterpret_cast<const DGMyShopPricelistPacket*>(
               &_DGMyShopPricelistPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DGMyShopPricelistPacket& a, DGMyShopPricelistPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMyShopPricelistPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMyShopPricelistPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMyShopPricelistPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMyShopPricelistPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMyShopPricelistPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMyShopPricelistPacket& from) {
    DGMyShopPricelistPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMyShopPricelistPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMyShopPricelistPacket";
  }
  protected:
  explicit DGMyShopPricelistPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceInfoFieldNumber = 1,
  };
  // repeated .network.TItemPriceInfo price_info = 1;
  int price_info_size() const;
  private:
  int _internal_price_info_size() const;
  public:
  void clear_price_info();
  ::network::TItemPriceInfo* mutable_price_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >*
      mutable_price_info();
  private:
  const ::network::TItemPriceInfo& _internal_price_info(int index) const;
  ::network::TItemPriceInfo* _internal_add_price_info();
  public:
  const ::network::TItemPriceInfo& price_info(int index) const;
  ::network::TItemPriceInfo* add_price_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >&
      price_info() const;

  // @@protoc_insertion_point(class_scope:network.DGMyShopPricelistPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo > price_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGReloadAdminPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGReloadAdminPacket) */ {
 public:
  inline DGReloadAdminPacket() : DGReloadAdminPacket(nullptr) {}
  ~DGReloadAdminPacket() override;
  explicit PROTOBUF_CONSTEXPR DGReloadAdminPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGReloadAdminPacket(const DGReloadAdminPacket& from);
  DGReloadAdminPacket(DGReloadAdminPacket&& from) noexcept
    : DGReloadAdminPacket() {
    *this = ::std::move(from);
  }

  inline DGReloadAdminPacket& operator=(const DGReloadAdminPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGReloadAdminPacket& operator=(DGReloadAdminPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGReloadAdminPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGReloadAdminPacket* internal_default_instance() {
    return reinterpret_cast<const DGReloadAdminPacket*>(
               &_DGReloadAdminPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DGReloadAdminPacket& a, DGReloadAdminPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGReloadAdminPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGReloadAdminPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGReloadAdminPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGReloadAdminPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGReloadAdminPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGReloadAdminPacket& from) {
    DGReloadAdminPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGReloadAdminPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGReloadAdminPacket";
  }
  protected:
  explicit DGReloadAdminPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminsFieldNumber = 1,
    kAdminConfigsFieldNumber = 2,
  };
  // repeated .network.TAdminInfo admins = 1;
  int admins_size() const;
  private:
  int _internal_admins_size() const;
  public:
  void clear_admins();
  ::network::TAdminInfo* mutable_admins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >*
      mutable_admins();
  private:
  const ::network::TAdminInfo& _internal_admins(int index) const;
  ::network::TAdminInfo* _internal_add_admins();
  public:
  const ::network::TAdminInfo& admins(int index) const;
  ::network::TAdminInfo* add_admins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >&
      admins() const;

  // repeated uint32 admin_configs = 2;
  int admin_configs_size() const;
  private:
  int _internal_admin_configs_size() const;
  public:
  void clear_admin_configs();
  private:
  uint32_t _internal_admin_configs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_admin_configs() const;
  void _internal_add_admin_configs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_admin_configs();
  public:
  uint32_t admin_configs(int index) const;
  void set_admin_configs(int index, uint32_t value);
  void add_admin_configs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      admin_configs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_admin_configs();

  // @@protoc_insertion_point(class_scope:network.DGReloadAdminPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo > admins_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > admin_configs_;
    mutable std::atomic<int> _admin_configs_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGDetailLogPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGDetailLogPacket) */ {
 public:
  inline DGDetailLogPacket() : DGDetailLogPacket(nullptr) {}
  ~DGDetailLogPacket() override;
  explicit PROTOBUF_CONSTEXPR DGDetailLogPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGDetailLogPacket(const DGDetailLogPacket& from);
  DGDetailLogPacket(DGDetailLogPacket&& from) noexcept
    : DGDetailLogPacket() {
    *this = ::std::move(from);
  }

  inline DGDetailLogPacket& operator=(const DGDetailLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGDetailLogPacket& operator=(DGDetailLogPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGDetailLogPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGDetailLogPacket* internal_default_instance() {
    return reinterpret_cast<const DGDetailLogPacket*>(
               &_DGDetailLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DGDetailLogPacket& a, DGDetailLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGDetailLogPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGDetailLogPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGDetailLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGDetailLogPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGDetailLogPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGDetailLogPacket& from) {
    DGDetailLogPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGDetailLogPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGDetailLogPacket";
  }
  protected:
  explicit DGDetailLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGDetailLogPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGItemAwardInformerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGItemAwardInformerPacket) */ {
 public:
  inline DGItemAwardInformerPacket() : DGItemAwardInformerPacket(nullptr) {}
  ~DGItemAwardInformerPacket() override;
  explicit PROTOBUF_CONSTEXPR DGItemAwardInformerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGItemAwardInformerPacket(const DGItemAwardInformerPacket& from);
  DGItemAwardInformerPacket(DGItemAwardInformerPacket&& from) noexcept
    : DGItemAwardInformerPacket() {
    *this = ::std::move(from);
  }

  inline DGItemAwardInformerPacket& operator=(const DGItemAwardInformerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGItemAwardInformerPacket& operator=(DGItemAwardInformerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGItemAwardInformerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGItemAwardInformerPacket* internal_default_instance() {
    return reinterpret_cast<const DGItemAwardInformerPacket*>(
               &_DGItemAwardInformerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DGItemAwardInformerPacket& a, DGItemAwardInformerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGItemAwardInformerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGItemAwardInformerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGItemAwardInformerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGItemAwardInformerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGItemAwardInformerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGItemAwardInformerPacket& from) {
    DGItemAwardInformerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGItemAwardInformerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGItemAwardInformerPacket";
  }
  protected:
  explicit DGItemAwardInformerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kCommandFieldNumber = 2,
    kVnumFieldNumber = 3,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes command = 2;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint32 vnum = 3;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGItemAwardInformerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    uint32_t vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGRespondChannelStatusPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGRespondChannelStatusPacket) */ {
 public:
  inline DGRespondChannelStatusPacket() : DGRespondChannelStatusPacket(nullptr) {}
  ~DGRespondChannelStatusPacket() override;
  explicit PROTOBUF_CONSTEXPR DGRespondChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGRespondChannelStatusPacket(const DGRespondChannelStatusPacket& from);
  DGRespondChannelStatusPacket(DGRespondChannelStatusPacket&& from) noexcept
    : DGRespondChannelStatusPacket() {
    *this = ::std::move(from);
  }

  inline DGRespondChannelStatusPacket& operator=(const DGRespondChannelStatusPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGRespondChannelStatusPacket& operator=(DGRespondChannelStatusPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGRespondChannelStatusPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGRespondChannelStatusPacket* internal_default_instance() {
    return reinterpret_cast<const DGRespondChannelStatusPacket*>(
               &_DGRespondChannelStatusPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DGRespondChannelStatusPacket& a, DGRespondChannelStatusPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGRespondChannelStatusPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGRespondChannelStatusPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGRespondChannelStatusPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGRespondChannelStatusPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGRespondChannelStatusPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGRespondChannelStatusPacket& from) {
    DGRespondChannelStatusPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGRespondChannelStatusPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGRespondChannelStatusPacket";
  }
  protected:
  explicit DGRespondChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .network.TChannelStatus states = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::network::TChannelStatus* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >*
      mutable_states();
  private:
  const ::network::TChannelStatus& _internal_states(int index) const;
  ::network::TChannelStatus* _internal_add_states();
  public:
  const ::network::TChannelStatus& states(int index) const;
  ::network::TChannelStatus* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >&
      states() const;

  // @@protoc_insertion_point(class_scope:network.DGRespondChannelStatusPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus > states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGChannelSwitchPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGChannelSwitchPacket) */ {
 public:
  inline DGChannelSwitchPacket() : DGChannelSwitchPacket(nullptr) {}
  ~DGChannelSwitchPacket() override;
  explicit PROTOBUF_CONSTEXPR DGChannelSwitchPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGChannelSwitchPacket(const DGChannelSwitchPacket& from);
  DGChannelSwitchPacket(DGChannelSwitchPacket&& from) noexcept
    : DGChannelSwitchPacket() {
    *this = ::std::move(from);
  }

  inline DGChannelSwitchPacket& operator=(const DGChannelSwitchPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGChannelSwitchPacket& operator=(DGChannelSwitchPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGChannelSwitchPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGChannelSwitchPacket* internal_default_instance() {
    return reinterpret_cast<const DGChannelSwitchPacket*>(
               &_DGChannelSwitchPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DGChannelSwitchPacket& a, DGChannelSwitchPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGChannelSwitchPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGChannelSwitchPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGChannelSwitchPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGChannelSwitchPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGChannelSwitchPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGChannelSwitchPacket& from) {
    DGChannelSwitchPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGChannelSwitchPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGChannelSwitchPacket";
  }
  protected:
  explicit DGChannelSwitchPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bytes ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGChannelSwitchPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSpareItemIDRangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSpareItemIDRangePacket) */ {
 public:
  inline DGSpareItemIDRangePacket() : DGSpareItemIDRangePacket(nullptr) {}
  ~DGSpareItemIDRangePacket() override;
  explicit PROTOBUF_CONSTEXPR DGSpareItemIDRangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSpareItemIDRangePacket(const DGSpareItemIDRangePacket& from);
  DGSpareItemIDRangePacket(DGSpareItemIDRangePacket&& from) noexcept
    : DGSpareItemIDRangePacket() {
    *this = ::std::move(from);
  }

  inline DGSpareItemIDRangePacket& operator=(const DGSpareItemIDRangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSpareItemIDRangePacket& operator=(DGSpareItemIDRangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSpareItemIDRangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSpareItemIDRangePacket* internal_default_instance() {
    return reinterpret_cast<const DGSpareItemIDRangePacket*>(
               &_DGSpareItemIDRangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DGSpareItemIDRangePacket& a, DGSpareItemIDRangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSpareItemIDRangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSpareItemIDRangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSpareItemIDRangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSpareItemIDRangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSpareItemIDRangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSpareItemIDRangePacket& from) {
    DGSpareItemIDRangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSpareItemIDRangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSpareItemIDRangePacket";
  }
  protected:
  explicit DGSpareItemIDRangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .network.TItemIDRangeTable data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TItemIDRangeTable& data() const;
  PROTOBUF_NODISCARD ::network::TItemIDRangeTable* release_data();
  ::network::TItemIDRangeTable* mutable_data();
  void set_allocated_data(::network::TItemIDRangeTable* data);
  private:
  const ::network::TItemIDRangeTable& _internal_data() const;
  ::network::TItemIDRangeTable* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TItemIDRangeTable* data);
  ::network::TItemIDRangeTable* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:network.DGSpareItemIDRangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemIDRangeTable* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGUpdateHorseNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGUpdateHorseNamePacket) */ {
 public:
  inline DGUpdateHorseNamePacket() : DGUpdateHorseNamePacket(nullptr) {}
  ~DGUpdateHorseNamePacket() override;
  explicit PROTOBUF_CONSTEXPR DGUpdateHorseNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGUpdateHorseNamePacket(const DGUpdateHorseNamePacket& from);
  DGUpdateHorseNamePacket(DGUpdateHorseNamePacket&& from) noexcept
    : DGUpdateHorseNamePacket() {
    *this = ::std::move(from);
  }

  inline DGUpdateHorseNamePacket& operator=(const DGUpdateHorseNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGUpdateHorseNamePacket& operator=(DGUpdateHorseNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGUpdateHorseNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGUpdateHorseNamePacket* internal_default_instance() {
    return reinterpret_cast<const DGUpdateHorseNamePacket*>(
               &_DGUpdateHorseNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DGUpdateHorseNamePacket& a, DGUpdateHorseNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGUpdateHorseNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGUpdateHorseNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGUpdateHorseNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGUpdateHorseNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGUpdateHorseNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGUpdateHorseNamePacket& from) {
    DGUpdateHorseNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGUpdateHorseNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGUpdateHorseNamePacket";
  }
  protected:
  explicit DGUpdateHorseNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorseNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes horse_name = 2;
  void clear_horse_name();
  const std::string& horse_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_horse_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_horse_name();
  PROTOBUF_NODISCARD std::string* release_horse_name();
  void set_allocated_horse_name(std::string* horse_name);
  private:
  const std::string& _internal_horse_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_horse_name(const std::string& value);
  std::string* _internal_mutable_horse_name();
  public:

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGUpdateHorseNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr horse_name_;
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSpawnMobTimedPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSpawnMobTimedPacket) */ {
 public:
  inline DGSpawnMobTimedPacket() : DGSpawnMobTimedPacket(nullptr) {}
  ~DGSpawnMobTimedPacket() override;
  explicit PROTOBUF_CONSTEXPR DGSpawnMobTimedPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSpawnMobTimedPacket(const DGSpawnMobTimedPacket& from);
  DGSpawnMobTimedPacket(DGSpawnMobTimedPacket&& from) noexcept
    : DGSpawnMobTimedPacket() {
    *this = ::std::move(from);
  }

  inline DGSpawnMobTimedPacket& operator=(const DGSpawnMobTimedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSpawnMobTimedPacket& operator=(DGSpawnMobTimedPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSpawnMobTimedPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSpawnMobTimedPacket* internal_default_instance() {
    return reinterpret_cast<const DGSpawnMobTimedPacket*>(
               &_DGSpawnMobTimedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DGSpawnMobTimedPacket& a, DGSpawnMobTimedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSpawnMobTimedPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSpawnMobTimedPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSpawnMobTimedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSpawnMobTimedPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSpawnMobTimedPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSpawnMobTimedPacket& from) {
    DGSpawnMobTimedPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSpawnMobTimedPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSpawnMobTimedPacket";
  }
  protected:
  explicit DGSpawnMobTimedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobVnumFieldNumber = 1,
    kMapIndexFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kChannelFieldNumber = 5,
    kTargetTimeFieldNumber = 6,
    kDespawnTimeFieldNumber = 7,
  };
  // uint32 mob_vnum = 1;
  void clear_mob_vnum();
  uint32_t mob_vnum() const;
  void set_mob_vnum(uint32_t value);
  private:
  uint32_t _internal_mob_vnum() const;
  void _internal_set_mob_vnum(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 channel = 5;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // int32 target_time = 6;
  void clear_target_time();
  int32_t target_time() const;
  void set_target_time(int32_t value);
  private:
  int32_t _internal_target_time() const;
  void _internal_set_target_time(int32_t value);
  public:

  // int32 despawn_time = 7;
  void clear_despawn_time();
  int32_t despawn_time() const;
  void set_despawn_time(int32_t value);
  private:
  int32_t _internal_despawn_time() const;
  void _internal_set_despawn_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGSpawnMobTimedPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t mob_vnum_;
    uint32_t map_index_;
    int32_t x_;
    int32_t y_;
    uint32_t channel_;
    int32_t target_time_;
    int32_t despawn_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGItemOfflineRestorePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGItemOfflineRestorePacket) */ {
 public:
  inline DGItemOfflineRestorePacket() : DGItemOfflineRestorePacket(nullptr) {}
  ~DGItemOfflineRestorePacket() override;
  explicit PROTOBUF_CONSTEXPR DGItemOfflineRestorePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGItemOfflineRestorePacket(const DGItemOfflineRestorePacket& from);
  DGItemOfflineRestorePacket(DGItemOfflineRestorePacket&& from) noexcept
    : DGItemOfflineRestorePacket() {
    *this = ::std::move(from);
  }

  inline DGItemOfflineRestorePacket& operator=(const DGItemOfflineRestorePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGItemOfflineRestorePacket& operator=(DGItemOfflineRestorePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGItemOfflineRestorePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGItemOfflineRestorePacket* internal_default_instance() {
    return reinterpret_cast<const DGItemOfflineRestorePacket*>(
               &_DGItemOfflineRestorePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(DGItemOfflineRestorePacket& a, DGItemOfflineRestorePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGItemOfflineRestorePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGItemOfflineRestorePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGItemOfflineRestorePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGItemOfflineRestorePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGItemOfflineRestorePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGItemOfflineRestorePacket& from) {
    DGItemOfflineRestorePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGItemOfflineRestorePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGItemOfflineRestorePacket";
  }
  protected:
  explicit DGItemOfflineRestorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .network.TItemData items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // @@protoc_insertion_point(class_scope:network.DGItemOfflineRestorePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGOfflineMessagesLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGOfflineMessagesLoadPacket) */ {
 public:
  inline DGOfflineMessagesLoadPacket() : DGOfflineMessagesLoadPacket(nullptr) {}
  ~DGOfflineMessagesLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGOfflineMessagesLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGOfflineMessagesLoadPacket(const DGOfflineMessagesLoadPacket& from);
  DGOfflineMessagesLoadPacket(DGOfflineMessagesLoadPacket&& from) noexcept
    : DGOfflineMessagesLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGOfflineMessagesLoadPacket& operator=(const DGOfflineMessagesLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGOfflineMessagesLoadPacket& operator=(DGOfflineMessagesLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGOfflineMessagesLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGOfflineMessagesLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGOfflineMessagesLoadPacket*>(
               &_DGOfflineMessagesLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DGOfflineMessagesLoadPacket& a, DGOfflineMessagesLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGOfflineMessagesLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGOfflineMessagesLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGOfflineMessagesLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGOfflineMessagesLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGOfflineMessagesLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGOfflineMessagesLoadPacket& from) {
    DGOfflineMessagesLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGOfflineMessagesLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGOfflineMessagesLoadPacket";
  }
  protected:
  explicit DGOfflineMessagesLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .network.TOfflineMessage messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::network::TOfflineMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TOfflineMessage >*
      mutable_messages();
  private:
  const ::network::TOfflineMessage& _internal_messages(int index) const;
  ::network::TOfflineMessage* _internal_add_messages();
  public:
  const ::network::TOfflineMessage& messages(int index) const;
  ::network::TOfflineMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TOfflineMessage >&
      messages() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGOfflineMessagesLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TOfflineMessage > messages_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGItemRefundLoadPacket_RefundItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGItemRefundLoadPacket.RefundItem) */ {
 public:
  inline DGItemRefundLoadPacket_RefundItem() : DGItemRefundLoadPacket_RefundItem(nullptr) {}
  ~DGItemRefundLoadPacket_RefundItem() override;
  explicit PROTOBUF_CONSTEXPR DGItemRefundLoadPacket_RefundItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGItemRefundLoadPacket_RefundItem(const DGItemRefundLoadPacket_RefundItem& from);
  DGItemRefundLoadPacket_RefundItem(DGItemRefundLoadPacket_RefundItem&& from) noexcept
    : DGItemRefundLoadPacket_RefundItem() {
    *this = ::std::move(from);
  }

  inline DGItemRefundLoadPacket_RefundItem& operator=(const DGItemRefundLoadPacket_RefundItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGItemRefundLoadPacket_RefundItem& operator=(DGItemRefundLoadPacket_RefundItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGItemRefundLoadPacket_RefundItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGItemRefundLoadPacket_RefundItem* internal_default_instance() {
    return reinterpret_cast<const DGItemRefundLoadPacket_RefundItem*>(
               &_DGItemRefundLoadPacket_RefundItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DGItemRefundLoadPacket_RefundItem& a, DGItemRefundLoadPacket_RefundItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DGItemRefundLoadPacket_RefundItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGItemRefundLoadPacket_RefundItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGItemRefundLoadPacket_RefundItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGItemRefundLoadPacket_RefundItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGItemRefundLoadPacket_RefundItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGItemRefundLoadPacket_RefundItem& from) {
    DGItemRefundLoadPacket_RefundItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGItemRefundLoadPacket_RefundItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGItemRefundLoadPacket.RefundItem";
  }
  protected:
  explicit DGItemRefundLoadPacket_RefundItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kIdFieldNumber = 1,
    kSocketSetFieldNumber = 2,
  };
  // .network.TItemData item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool socket_set = 2;
  void clear_socket_set();
  bool socket_set() const;
  void set_socket_set(bool value);
  private:
  bool _internal_socket_set() const;
  void _internal_set_socket_set(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGItemRefundLoadPacket.RefundItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* item_;
    uint32_t id_;
    bool socket_set_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGItemRefundLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGItemRefundLoadPacket) */ {
 public:
  inline DGItemRefundLoadPacket() : DGItemRefundLoadPacket(nullptr) {}
  ~DGItemRefundLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGItemRefundLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGItemRefundLoadPacket(const DGItemRefundLoadPacket& from);
  DGItemRefundLoadPacket(DGItemRefundLoadPacket&& from) noexcept
    : DGItemRefundLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGItemRefundLoadPacket& operator=(const DGItemRefundLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGItemRefundLoadPacket& operator=(DGItemRefundLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGItemRefundLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGItemRefundLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGItemRefundLoadPacket*>(
               &_DGItemRefundLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DGItemRefundLoadPacket& a, DGItemRefundLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGItemRefundLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGItemRefundLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGItemRefundLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGItemRefundLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGItemRefundLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGItemRefundLoadPacket& from) {
    DGItemRefundLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGItemRefundLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGItemRefundLoadPacket";
  }
  protected:
  explicit DGItemRefundLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DGItemRefundLoadPacket_RefundItem RefundItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .network.DGItemRefundLoadPacket.RefundItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::DGItemRefundLoadPacket_RefundItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGItemRefundLoadPacket_RefundItem >*
      mutable_items();
  private:
  const ::network::DGItemRefundLoadPacket_RefundItem& _internal_items(int index) const;
  ::network::DGItemRefundLoadPacket_RefundItem* _internal_add_items();
  public:
  const ::network::DGItemRefundLoadPacket_RefundItem& items(int index) const;
  ::network::DGItemRefundLoadPacket_RefundItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGItemRefundLoadPacket_RefundItem >&
      items() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGItemRefundLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGItemRefundLoadPacket_RefundItem > items_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWhisperPlayerExistResultPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWhisperPlayerExistResultPacket) */ {
 public:
  inline DGWhisperPlayerExistResultPacket() : DGWhisperPlayerExistResultPacket(nullptr) {}
  ~DGWhisperPlayerExistResultPacket() override;
  explicit PROTOBUF_CONSTEXPR DGWhisperPlayerExistResultPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWhisperPlayerExistResultPacket(const DGWhisperPlayerExistResultPacket& from);
  DGWhisperPlayerExistResultPacket(DGWhisperPlayerExistResultPacket&& from) noexcept
    : DGWhisperPlayerExistResultPacket() {
    *this = ::std::move(from);
  }

  inline DGWhisperPlayerExistResultPacket& operator=(const DGWhisperPlayerExistResultPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWhisperPlayerExistResultPacket& operator=(DGWhisperPlayerExistResultPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWhisperPlayerExistResultPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWhisperPlayerExistResultPacket* internal_default_instance() {
    return reinterpret_cast<const DGWhisperPlayerExistResultPacket*>(
               &_DGWhisperPlayerExistResultPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DGWhisperPlayerExistResultPacket& a, DGWhisperPlayerExistResultPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWhisperPlayerExistResultPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWhisperPlayerExistResultPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWhisperPlayerExistResultPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWhisperPlayerExistResultPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWhisperPlayerExistResultPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWhisperPlayerExistResultPacket& from) {
    DGWhisperPlayerExistResultPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWhisperPlayerExistResultPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWhisperPlayerExistResultPacket";
  }
  protected:
  explicit DGWhisperPlayerExistResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTargetNameFieldNumber = 3,
    kPidFieldNumber = 1,
    kIsExistFieldNumber = 4,
    kIsBlockedFieldNumber = 5,
    kReturnMoneyFieldNumber = 6,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes target_name = 3;
  void clear_target_name();
  const std::string& target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name();
  PROTOBUF_NODISCARD std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // bool is_exist = 4;
  void clear_is_exist();
  bool is_exist() const;
  void set_is_exist(bool value);
  private:
  bool _internal_is_exist() const;
  void _internal_set_is_exist(bool value);
  public:

  // bool is_blocked = 5;
  void clear_is_blocked();
  bool is_blocked() const;
  void set_is_blocked(bool value);
  private:
  bool _internal_is_blocked() const;
  void _internal_set_is_blocked(bool value);
  public:

  // bool return_money = 6;
  void clear_return_money();
  bool return_money() const;
  void set_return_money(bool value);
  private:
  bool _internal_return_money() const;
  void _internal_set_return_money(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGWhisperPlayerExistResultPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
    uint32_t pid_;
    bool is_exist_;
    bool is_blocked_;
    bool return_money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWhisperPlayerMessageOfflinePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWhisperPlayerMessageOfflinePacket) */ {
 public:
  inline DGWhisperPlayerMessageOfflinePacket() : DGWhisperPlayerMessageOfflinePacket(nullptr) {}
  ~DGWhisperPlayerMessageOfflinePacket() override;
  explicit PROTOBUF_CONSTEXPR DGWhisperPlayerMessageOfflinePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWhisperPlayerMessageOfflinePacket(const DGWhisperPlayerMessageOfflinePacket& from);
  DGWhisperPlayerMessageOfflinePacket(DGWhisperPlayerMessageOfflinePacket&& from) noexcept
    : DGWhisperPlayerMessageOfflinePacket() {
    *this = ::std::move(from);
  }

  inline DGWhisperPlayerMessageOfflinePacket& operator=(const DGWhisperPlayerMessageOfflinePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWhisperPlayerMessageOfflinePacket& operator=(DGWhisperPlayerMessageOfflinePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWhisperPlayerMessageOfflinePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWhisperPlayerMessageOfflinePacket* internal_default_instance() {
    return reinterpret_cast<const DGWhisperPlayerMessageOfflinePacket*>(
               &_DGWhisperPlayerMessageOfflinePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(DGWhisperPlayerMessageOfflinePacket& a, DGWhisperPlayerMessageOfflinePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWhisperPlayerMessageOfflinePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWhisperPlayerMessageOfflinePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWhisperPlayerMessageOfflinePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWhisperPlayerMessageOfflinePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWhisperPlayerMessageOfflinePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWhisperPlayerMessageOfflinePacket& from) {
    DGWhisperPlayerMessageOfflinePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWhisperPlayerMessageOfflinePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWhisperPlayerMessageOfflinePacket";
  }
  protected:
  explicit DGWhisperPlayerMessageOfflinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTargetNameFieldNumber = 4,
    kPidFieldNumber = 1,
    kTargetPidFieldNumber = 3,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes target_name = 4;
  void clear_target_name();
  const std::string& target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name();
  PROTOBUF_NODISCARD std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 target_pid = 3;
  void clear_target_pid();
  uint32_t target_pid() const;
  void set_target_pid(uint32_t value);
  private:
  uint32_t _internal_target_pid() const;
  void _internal_set_target_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGWhisperPlayerMessageOfflinePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
    uint32_t pid_;
    uint32_t target_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGReloadXmasRewardsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGReloadXmasRewardsPacket) */ {
 public:
  inline DGReloadXmasRewardsPacket() : DGReloadXmasRewardsPacket(nullptr) {}
  ~DGReloadXmasRewardsPacket() override;
  explicit PROTOBUF_CONSTEXPR DGReloadXmasRewardsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGReloadXmasRewardsPacket(const DGReloadXmasRewardsPacket& from);
  DGReloadXmasRewardsPacket(DGReloadXmasRewardsPacket&& from) noexcept
    : DGReloadXmasRewardsPacket() {
    *this = ::std::move(from);
  }

  inline DGReloadXmasRewardsPacket& operator=(const DGReloadXmasRewardsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGReloadXmasRewardsPacket& operator=(DGReloadXmasRewardsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGReloadXmasRewardsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGReloadXmasRewardsPacket* internal_default_instance() {
    return reinterpret_cast<const DGReloadXmasRewardsPacket*>(
               &_DGReloadXmasRewardsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(DGReloadXmasRewardsPacket& a, DGReloadXmasRewardsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGReloadXmasRewardsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGReloadXmasRewardsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGReloadXmasRewardsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGReloadXmasRewardsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGReloadXmasRewardsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGReloadXmasRewardsPacket& from) {
    DGReloadXmasRewardsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGReloadXmasRewardsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGReloadXmasRewardsPacket";
  }
  protected:
  explicit DGReloadXmasRewardsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 1,
  };
  // repeated .network.TXmasRewards rewards = 1;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::network::TXmasRewards* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >*
      mutable_rewards();
  private:
  const ::network::TXmasRewards& _internal_rewards(int index) const;
  ::network::TXmasRewards* _internal_add_rewards();
  public:
  const ::network::TXmasRewards& rewards(int index) const;
  ::network::TXmasRewards* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >&
      rewards() const;

  // @@protoc_insertion_point(class_scope:network.DGReloadXmasRewardsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards > rewards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSetAveragePricesPacket_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSetAveragePricesPacket.Element) */ {
 public:
  inline DGSetAveragePricesPacket_Element() : DGSetAveragePricesPacket_Element(nullptr) {}
  ~DGSetAveragePricesPacket_Element() override;
  explicit PROTOBUF_CONSTEXPR DGSetAveragePricesPacket_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSetAveragePricesPacket_Element(const DGSetAveragePricesPacket_Element& from);
  DGSetAveragePricesPacket_Element(DGSetAveragePricesPacket_Element&& from) noexcept
    : DGSetAveragePricesPacket_Element() {
    *this = ::std::move(from);
  }

  inline DGSetAveragePricesPacket_Element& operator=(const DGSetAveragePricesPacket_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSetAveragePricesPacket_Element& operator=(DGSetAveragePricesPacket_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSetAveragePricesPacket_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSetAveragePricesPacket_Element* internal_default_instance() {
    return reinterpret_cast<const DGSetAveragePricesPacket_Element*>(
               &_DGSetAveragePricesPacket_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DGSetAveragePricesPacket_Element& a, DGSetAveragePricesPacket_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSetAveragePricesPacket_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSetAveragePricesPacket_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSetAveragePricesPacket_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSetAveragePricesPacket_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSetAveragePricesPacket_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSetAveragePricesPacket_Element& from) {
    DGSetAveragePricesPacket_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSetAveragePricesPacket_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSetAveragePricesPacket.Element";
  }
  protected:
  explicit DGSetAveragePricesPacket_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kVnumFieldNumber = 1,
  };
  // uint64 price = 2;
  void clear_price();
  uint64_t price() const;
  void set_price(uint64_t value);
  private:
  uint64_t _internal_price() const;
  void _internal_set_price(uint64_t value);
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGSetAveragePricesPacket.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t price_;
    uint32_t vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSetAveragePricesPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSetAveragePricesPacket) */ {
 public:
  inline DGSetAveragePricesPacket() : DGSetAveragePricesPacket(nullptr) {}
  ~DGSetAveragePricesPacket() override;
  explicit PROTOBUF_CONSTEXPR DGSetAveragePricesPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSetAveragePricesPacket(const DGSetAveragePricesPacket& from);
  DGSetAveragePricesPacket(DGSetAveragePricesPacket&& from) noexcept
    : DGSetAveragePricesPacket() {
    *this = ::std::move(from);
  }

  inline DGSetAveragePricesPacket& operator=(const DGSetAveragePricesPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSetAveragePricesPacket& operator=(DGSetAveragePricesPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSetAveragePricesPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSetAveragePricesPacket* internal_default_instance() {
    return reinterpret_cast<const DGSetAveragePricesPacket*>(
               &_DGSetAveragePricesPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DGSetAveragePricesPacket& a, DGSetAveragePricesPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSetAveragePricesPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSetAveragePricesPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSetAveragePricesPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSetAveragePricesPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSetAveragePricesPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSetAveragePricesPacket& from) {
    DGSetAveragePricesPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSetAveragePricesPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSetAveragePricesPacket";
  }
  protected:
  explicit DGSetAveragePricesPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DGSetAveragePricesPacket_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kPricesFieldNumber = 1,
  };
  // repeated .network.DGSetAveragePricesPacket.Element prices = 1;
  int prices_size() const;
  private:
  int _internal_prices_size() const;
  public:
  void clear_prices();
  ::network::DGSetAveragePricesPacket_Element* mutable_prices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSetAveragePricesPacket_Element >*
      mutable_prices();
  private:
  const ::network::DGSetAveragePricesPacket_Element& _internal_prices(int index) const;
  ::network::DGSetAveragePricesPacket_Element* _internal_add_prices();
  public:
  const ::network::DGSetAveragePricesPacket_Element& prices(int index) const;
  ::network::DGSetAveragePricesPacket_Element* add_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSetAveragePricesPacket_Element >&
      prices() const;

  // @@protoc_insertion_point(class_scope:network.DGSetAveragePricesPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSetAveragePricesPacket_Element > prices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSkillColorLoadPacket_SkillColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSkillColorLoadPacket.SkillColor) */ {
 public:
  inline DGSkillColorLoadPacket_SkillColor() : DGSkillColorLoadPacket_SkillColor(nullptr) {}
  ~DGSkillColorLoadPacket_SkillColor() override;
  explicit PROTOBUF_CONSTEXPR DGSkillColorLoadPacket_SkillColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSkillColorLoadPacket_SkillColor(const DGSkillColorLoadPacket_SkillColor& from);
  DGSkillColorLoadPacket_SkillColor(DGSkillColorLoadPacket_SkillColor&& from) noexcept
    : DGSkillColorLoadPacket_SkillColor() {
    *this = ::std::move(from);
  }

  inline DGSkillColorLoadPacket_SkillColor& operator=(const DGSkillColorLoadPacket_SkillColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSkillColorLoadPacket_SkillColor& operator=(DGSkillColorLoadPacket_SkillColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSkillColorLoadPacket_SkillColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSkillColorLoadPacket_SkillColor* internal_default_instance() {
    return reinterpret_cast<const DGSkillColorLoadPacket_SkillColor*>(
               &_DGSkillColorLoadPacket_SkillColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DGSkillColorLoadPacket_SkillColor& a, DGSkillColorLoadPacket_SkillColor& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSkillColorLoadPacket_SkillColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSkillColorLoadPacket_SkillColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSkillColorLoadPacket_SkillColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSkillColorLoadPacket_SkillColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSkillColorLoadPacket_SkillColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSkillColorLoadPacket_SkillColor& from) {
    DGSkillColorLoadPacket_SkillColor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSkillColorLoadPacket_SkillColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSkillColorLoadPacket.SkillColor";
  }
  protected:
  explicit DGSkillColorLoadPacket_SkillColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 1,
  };
  // repeated uint32 colors = 1;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  private:
  uint32_t _internal_colors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_colors() const;
  void _internal_add_colors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_colors();
  public:
  uint32_t colors(int index) const;
  void set_colors(int index, uint32_t value);
  void add_colors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_colors();

  // @@protoc_insertion_point(class_scope:network.DGSkillColorLoadPacket.SkillColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > colors_;
    mutable std::atomic<int> _colors_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGSkillColorLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGSkillColorLoadPacket) */ {
 public:
  inline DGSkillColorLoadPacket() : DGSkillColorLoadPacket(nullptr) {}
  ~DGSkillColorLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGSkillColorLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGSkillColorLoadPacket(const DGSkillColorLoadPacket& from);
  DGSkillColorLoadPacket(DGSkillColorLoadPacket&& from) noexcept
    : DGSkillColorLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGSkillColorLoadPacket& operator=(const DGSkillColorLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGSkillColorLoadPacket& operator=(DGSkillColorLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGSkillColorLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGSkillColorLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGSkillColorLoadPacket*>(
               &_DGSkillColorLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DGSkillColorLoadPacket& a, DGSkillColorLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGSkillColorLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGSkillColorLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGSkillColorLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGSkillColorLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGSkillColorLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGSkillColorLoadPacket& from) {
    DGSkillColorLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGSkillColorLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGSkillColorLoadPacket";
  }
  protected:
  explicit DGSkillColorLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DGSkillColorLoadPacket_SkillColor SkillColor;

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 1,
  };
  // repeated .network.DGSkillColorLoadPacket.SkillColor colors = 1;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::network::DGSkillColorLoadPacket_SkillColor* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSkillColorLoadPacket_SkillColor >*
      mutable_colors();
  private:
  const ::network::DGSkillColorLoadPacket_SkillColor& _internal_colors(int index) const;
  ::network::DGSkillColorLoadPacket_SkillColor* _internal_add_colors();
  public:
  const ::network::DGSkillColorLoadPacket_SkillColor& colors(int index) const;
  ::network::DGSkillColorLoadPacket_SkillColor* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSkillColorLoadPacket_SkillColor >&
      colors() const;

  // @@protoc_insertion_point(class_scope:network.DGSkillColorLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSkillColorLoadPacket_SkillColor > colors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGEquipmentPageLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGEquipmentPageLoadPacket) */ {
 public:
  inline DGEquipmentPageLoadPacket() : DGEquipmentPageLoadPacket(nullptr) {}
  ~DGEquipmentPageLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGEquipmentPageLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGEquipmentPageLoadPacket(const DGEquipmentPageLoadPacket& from);
  DGEquipmentPageLoadPacket(DGEquipmentPageLoadPacket&& from) noexcept
    : DGEquipmentPageLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGEquipmentPageLoadPacket& operator=(const DGEquipmentPageLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGEquipmentPageLoadPacket& operator=(DGEquipmentPageLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGEquipmentPageLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGEquipmentPageLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGEquipmentPageLoadPacket*>(
               &_DGEquipmentPageLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DGEquipmentPageLoadPacket& a, DGEquipmentPageLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGEquipmentPageLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGEquipmentPageLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGEquipmentPageLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGEquipmentPageLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGEquipmentPageLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGEquipmentPageLoadPacket& from) {
    DGEquipmentPageLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGEquipmentPageLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGEquipmentPageLoadPacket";
  }
  protected:
  explicit DGEquipmentPageLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentsFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .network.TEquipmentChangerTable equipments = 2;
  int equipments_size() const;
  private:
  int _internal_equipments_size() const;
  public:
  void clear_equipments();
  ::network::TEquipmentChangerTable* mutable_equipments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >*
      mutable_equipments();
  private:
  const ::network::TEquipmentChangerTable& _internal_equipments(int index) const;
  ::network::TEquipmentChangerTable* _internal_add_equipments();
  public:
  const ::network::TEquipmentChangerTable& equipments(int index) const;
  ::network::TEquipmentChangerTable* add_equipments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >&
      equipments() const;

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGEquipmentPageLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable > equipments_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildDungeonPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildDungeonPacket) */ {
 public:
  inline DGGuildDungeonPacket() : DGGuildDungeonPacket(nullptr) {}
  ~DGGuildDungeonPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildDungeonPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildDungeonPacket(const DGGuildDungeonPacket& from);
  DGGuildDungeonPacket(DGGuildDungeonPacket&& from) noexcept
    : DGGuildDungeonPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildDungeonPacket& operator=(const DGGuildDungeonPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildDungeonPacket& operator=(DGGuildDungeonPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildDungeonPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildDungeonPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildDungeonPacket*>(
               &_DGGuildDungeonPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(DGGuildDungeonPacket& a, DGGuildDungeonPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildDungeonPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildDungeonPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildDungeonPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildDungeonPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildDungeonPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildDungeonPacket& from) {
    DGGuildDungeonPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildDungeonPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildDungeonPacket";
  }
  protected:
  explicit DGGuildDungeonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelFieldNumber = 2,
    kMapIndexFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 channel = 2;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildDungeonPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t channel_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildDungeonCDPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildDungeonCDPacket) */ {
 public:
  inline DGGuildDungeonCDPacket() : DGGuildDungeonCDPacket(nullptr) {}
  ~DGGuildDungeonCDPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildDungeonCDPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildDungeonCDPacket(const DGGuildDungeonCDPacket& from);
  DGGuildDungeonCDPacket(DGGuildDungeonCDPacket&& from) noexcept
    : DGGuildDungeonCDPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildDungeonCDPacket& operator=(const DGGuildDungeonCDPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildDungeonCDPacket& operator=(DGGuildDungeonCDPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildDungeonCDPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildDungeonCDPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildDungeonCDPacket*>(
               &_DGGuildDungeonCDPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(DGGuildDungeonCDPacket& a, DGGuildDungeonCDPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildDungeonCDPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildDungeonCDPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildDungeonCDPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildDungeonCDPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildDungeonCDPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildDungeonCDPacket& from) {
    DGGuildDungeonCDPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildDungeonCDPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildDungeonCDPacket";
  }
  protected:
  explicit DGGuildDungeonCDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 time = 2;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildDungeonCDPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMaintenancePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMaintenancePacket) */ {
 public:
  inline DGMaintenancePacket() : DGMaintenancePacket(nullptr) {}
  ~DGMaintenancePacket() override;
  explicit PROTOBUF_CONSTEXPR DGMaintenancePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMaintenancePacket(const DGMaintenancePacket& from);
  DGMaintenancePacket(DGMaintenancePacket&& from) noexcept
    : DGMaintenancePacket() {
    *this = ::std::move(from);
  }

  inline DGMaintenancePacket& operator=(const DGMaintenancePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMaintenancePacket& operator=(DGMaintenancePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMaintenancePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMaintenancePacket* internal_default_instance() {
    return reinterpret_cast<const DGMaintenancePacket*>(
               &_DGMaintenancePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DGMaintenancePacket& a, DGMaintenancePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMaintenancePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMaintenancePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMaintenancePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMaintenancePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMaintenancePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMaintenancePacket& from) {
    DGMaintenancePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMaintenancePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMaintenancePacket";
  }
  protected:
  explicit DGMaintenancePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShutdownTimerFieldNumber = 1,
    kMaintenanceFieldNumber = 2,
    kMaintenanceDurationFieldNumber = 3,
  };
  // int32 shutdown_timer = 1;
  void clear_shutdown_timer();
  int32_t shutdown_timer() const;
  void set_shutdown_timer(int32_t value);
  private:
  int32_t _internal_shutdown_timer() const;
  void _internal_set_shutdown_timer(int32_t value);
  public:

  // bool maintenance = 2;
  void clear_maintenance();
  bool maintenance() const;
  void set_maintenance(bool value);
  private:
  bool _internal_maintenance() const;
  void _internal_set_maintenance(bool value);
  public:

  // int32 maintenance_duration = 3;
  void clear_maintenance_duration();
  int32_t maintenance_duration() const;
  void set_maintenance_duration(int32_t value);
  private:
  int32_t _internal_maintenance_duration() const;
  void _internal_set_maintenance_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGMaintenancePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t shutdown_timer_;
    bool maintenance_;
    int32_t maintenance_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWhitelistIPPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWhitelistIPPacket) */ {
 public:
  inline DGWhitelistIPPacket() : DGWhitelistIPPacket(nullptr) {}
  ~DGWhitelistIPPacket() override;
  explicit PROTOBUF_CONSTEXPR DGWhitelistIPPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWhitelistIPPacket(const DGWhitelistIPPacket& from);
  DGWhitelistIPPacket(DGWhitelistIPPacket&& from) noexcept
    : DGWhitelistIPPacket() {
    *this = ::std::move(from);
  }

  inline DGWhitelistIPPacket& operator=(const DGWhitelistIPPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWhitelistIPPacket& operator=(DGWhitelistIPPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWhitelistIPPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWhitelistIPPacket* internal_default_instance() {
    return reinterpret_cast<const DGWhitelistIPPacket*>(
               &_DGWhitelistIPPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(DGWhitelistIPPacket& a, DGWhitelistIPPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWhitelistIPPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWhitelistIPPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWhitelistIPPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWhitelistIPPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWhitelistIPPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWhitelistIPPacket& from) {
    DGWhitelistIPPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWhitelistIPPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWhitelistIPPacket";
  }
  protected:
  explicit DGWhitelistIPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:network.DGWhitelistIPPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGAuctionDeletePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGAuctionDeletePlayer) */ {
 public:
  inline DGAuctionDeletePlayer() : DGAuctionDeletePlayer(nullptr) {}
  ~DGAuctionDeletePlayer() override;
  explicit PROTOBUF_CONSTEXPR DGAuctionDeletePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGAuctionDeletePlayer(const DGAuctionDeletePlayer& from);
  DGAuctionDeletePlayer(DGAuctionDeletePlayer&& from) noexcept
    : DGAuctionDeletePlayer() {
    *this = ::std::move(from);
  }

  inline DGAuctionDeletePlayer& operator=(const DGAuctionDeletePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGAuctionDeletePlayer& operator=(DGAuctionDeletePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGAuctionDeletePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGAuctionDeletePlayer* internal_default_instance() {
    return reinterpret_cast<const DGAuctionDeletePlayer*>(
               &_DGAuctionDeletePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(DGAuctionDeletePlayer& a, DGAuctionDeletePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DGAuctionDeletePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGAuctionDeletePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGAuctionDeletePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGAuctionDeletePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGAuctionDeletePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGAuctionDeletePlayer& from) {
    DGAuctionDeletePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGAuctionDeletePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGAuctionDeletePlayer";
  }
  protected:
  explicit DGAuctionDeletePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGAuctionDeletePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGCreateObjectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGCreateObjectPacket) */ {
 public:
  inline DGCreateObjectPacket() : DGCreateObjectPacket(nullptr) {}
  ~DGCreateObjectPacket() override;
  explicit PROTOBUF_CONSTEXPR DGCreateObjectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGCreateObjectPacket(const DGCreateObjectPacket& from);
  DGCreateObjectPacket(DGCreateObjectPacket&& from) noexcept
    : DGCreateObjectPacket() {
    *this = ::std::move(from);
  }

  inline DGCreateObjectPacket& operator=(const DGCreateObjectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGCreateObjectPacket& operator=(DGCreateObjectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGCreateObjectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGCreateObjectPacket* internal_default_instance() {
    return reinterpret_cast<const DGCreateObjectPacket*>(
               &_DGCreateObjectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(DGCreateObjectPacket& a, DGCreateObjectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGCreateObjectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGCreateObjectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGCreateObjectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGCreateObjectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGCreateObjectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGCreateObjectPacket& from) {
    DGCreateObjectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGCreateObjectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGCreateObjectPacket";
  }
  protected:
  explicit DGCreateObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // .network.TBuildingObject object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::network::TBuildingObject& object() const;
  PROTOBUF_NODISCARD ::network::TBuildingObject* release_object();
  ::network::TBuildingObject* mutable_object();
  void set_allocated_object(::network::TBuildingObject* object);
  private:
  const ::network::TBuildingObject& _internal_object() const;
  ::network::TBuildingObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::network::TBuildingObject* object);
  ::network::TBuildingObject* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:network.DGCreateObjectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TBuildingObject* object_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGDeleteObjectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGDeleteObjectPacket) */ {
 public:
  inline DGDeleteObjectPacket() : DGDeleteObjectPacket(nullptr) {}
  ~DGDeleteObjectPacket() override;
  explicit PROTOBUF_CONSTEXPR DGDeleteObjectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGDeleteObjectPacket(const DGDeleteObjectPacket& from);
  DGDeleteObjectPacket(DGDeleteObjectPacket&& from) noexcept
    : DGDeleteObjectPacket() {
    *this = ::std::move(from);
  }

  inline DGDeleteObjectPacket& operator=(const DGDeleteObjectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGDeleteObjectPacket& operator=(DGDeleteObjectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGDeleteObjectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGDeleteObjectPacket* internal_default_instance() {
    return reinterpret_cast<const DGDeleteObjectPacket*>(
               &_DGDeleteObjectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(DGDeleteObjectPacket& a, DGDeleteObjectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGDeleteObjectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGDeleteObjectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGDeleteObjectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGDeleteObjectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGDeleteObjectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGDeleteObjectPacket& from) {
    DGDeleteObjectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGDeleteObjectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGDeleteObjectPacket";
  }
  protected:
  explicit DGDeleteObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGDeleteObjectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGUpdateLandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGUpdateLandPacket) */ {
 public:
  inline DGUpdateLandPacket() : DGUpdateLandPacket(nullptr) {}
  ~DGUpdateLandPacket() override;
  explicit PROTOBUF_CONSTEXPR DGUpdateLandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGUpdateLandPacket(const DGUpdateLandPacket& from);
  DGUpdateLandPacket(DGUpdateLandPacket&& from) noexcept
    : DGUpdateLandPacket() {
    *this = ::std::move(from);
  }

  inline DGUpdateLandPacket& operator=(const DGUpdateLandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGUpdateLandPacket& operator=(DGUpdateLandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGUpdateLandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGUpdateLandPacket* internal_default_instance() {
    return reinterpret_cast<const DGUpdateLandPacket*>(
               &_DGUpdateLandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(DGUpdateLandPacket& a, DGUpdateLandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGUpdateLandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGUpdateLandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGUpdateLandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGUpdateLandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGUpdateLandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGUpdateLandPacket& from) {
    DGUpdateLandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGUpdateLandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGUpdateLandPacket";
  }
  protected:
  explicit DGUpdateLandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandFieldNumber = 1,
  };
  // .network.TBuildingLand land = 1;
  bool has_land() const;
  private:
  bool _internal_has_land() const;
  public:
  void clear_land();
  const ::network::TBuildingLand& land() const;
  PROTOBUF_NODISCARD ::network::TBuildingLand* release_land();
  ::network::TBuildingLand* mutable_land();
  void set_allocated_land(::network::TBuildingLand* land);
  private:
  const ::network::TBuildingLand& _internal_land() const;
  ::network::TBuildingLand* _internal_mutable_land();
  public:
  void unsafe_arena_set_allocated_land(
      ::network::TBuildingLand* land);
  ::network::TBuildingLand* unsafe_arena_release_land();

  // @@protoc_insertion_point(class_scope:network.DGUpdateLandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TBuildingLand* land_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMarriageAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMarriageAddPacket) */ {
 public:
  inline DGMarriageAddPacket() : DGMarriageAddPacket(nullptr) {}
  ~DGMarriageAddPacket() override;
  explicit PROTOBUF_CONSTEXPR DGMarriageAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMarriageAddPacket(const DGMarriageAddPacket& from);
  DGMarriageAddPacket(DGMarriageAddPacket&& from) noexcept
    : DGMarriageAddPacket() {
    *this = ::std::move(from);
  }

  inline DGMarriageAddPacket& operator=(const DGMarriageAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMarriageAddPacket& operator=(DGMarriageAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMarriageAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMarriageAddPacket* internal_default_instance() {
    return reinterpret_cast<const DGMarriageAddPacket*>(
               &_DGMarriageAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(DGMarriageAddPacket& a, DGMarriageAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMarriageAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMarriageAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMarriageAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMarriageAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMarriageAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMarriageAddPacket& from) {
    DGMarriageAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMarriageAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMarriageAddPacket";
  }
  protected:
  explicit DGMarriageAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kName1FieldNumber = 4,
    kName2FieldNumber = 5,
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kMarryTimeFieldNumber = 3,
  };
  // bytes name1 = 4;
  void clear_name1();
  const std::string& name1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name1();
  PROTOBUF_NODISCARD std::string* release_name1();
  void set_allocated_name1(std::string* name1);
  private:
  const std::string& _internal_name1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name1(const std::string& value);
  std::string* _internal_mutable_name1();
  public:

  // bytes name2 = 5;
  void clear_name2();
  const std::string& name2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name2();
  PROTOBUF_NODISCARD std::string* release_name2();
  void set_allocated_name2(std::string* name2);
  private:
  const std::string& _internal_name2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name2(const std::string& value);
  std::string* _internal_mutable_name2();
  public:

  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // uint32 marry_time = 3;
  void clear_marry_time();
  uint32_t marry_time() const;
  void set_marry_time(uint32_t value);
  private:
  uint32_t _internal_marry_time() const;
  void _internal_set_marry_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGMarriageAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name2_;
    uint32_t pid1_;
    uint32_t pid2_;
    uint32_t marry_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMarriageUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMarriageUpdatePacket) */ {
 public:
  inline DGMarriageUpdatePacket() : DGMarriageUpdatePacket(nullptr) {}
  ~DGMarriageUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR DGMarriageUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMarriageUpdatePacket(const DGMarriageUpdatePacket& from);
  DGMarriageUpdatePacket(DGMarriageUpdatePacket&& from) noexcept
    : DGMarriageUpdatePacket() {
    *this = ::std::move(from);
  }

  inline DGMarriageUpdatePacket& operator=(const DGMarriageUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMarriageUpdatePacket& operator=(DGMarriageUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMarriageUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMarriageUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const DGMarriageUpdatePacket*>(
               &_DGMarriageUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(DGMarriageUpdatePacket& a, DGMarriageUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMarriageUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMarriageUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMarriageUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMarriageUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMarriageUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMarriageUpdatePacket& from) {
    DGMarriageUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMarriageUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMarriageUpdatePacket";
  }
  protected:
  explicit DGMarriageUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kLovePointFieldNumber = 3,
    kMarriedFieldNumber = 4,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // int32 love_point = 3;
  void clear_love_point();
  int32_t love_point() const;
  void set_love_point(int32_t value);
  private:
  int32_t _internal_love_point() const;
  void _internal_set_love_point(int32_t value);
  public:

  // bool married = 4;
  void clear_married();
  bool married() const;
  void set_married(bool value);
  private:
  bool _internal_married() const;
  void _internal_set_married(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGMarriageUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    int32_t love_point_;
    bool married_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGMarriageRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGMarriageRemovePacket) */ {
 public:
  inline DGMarriageRemovePacket() : DGMarriageRemovePacket(nullptr) {}
  ~DGMarriageRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR DGMarriageRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGMarriageRemovePacket(const DGMarriageRemovePacket& from);
  DGMarriageRemovePacket(DGMarriageRemovePacket&& from) noexcept
    : DGMarriageRemovePacket() {
    *this = ::std::move(from);
  }

  inline DGMarriageRemovePacket& operator=(const DGMarriageRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGMarriageRemovePacket& operator=(DGMarriageRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGMarriageRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGMarriageRemovePacket* internal_default_instance() {
    return reinterpret_cast<const DGMarriageRemovePacket*>(
               &_DGMarriageRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(DGMarriageRemovePacket& a, DGMarriageRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGMarriageRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGMarriageRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGMarriageRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGMarriageRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGMarriageRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGMarriageRemovePacket& from) {
    DGMarriageRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGMarriageRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGMarriageRemovePacket";
  }
  protected:
  explicit DGMarriageRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGMarriageRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWeddingRequestPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWeddingRequestPacket) */ {
 public:
  inline DGWeddingRequestPacket() : DGWeddingRequestPacket(nullptr) {}
  ~DGWeddingRequestPacket() override;
  explicit PROTOBUF_CONSTEXPR DGWeddingRequestPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWeddingRequestPacket(const DGWeddingRequestPacket& from);
  DGWeddingRequestPacket(DGWeddingRequestPacket&& from) noexcept
    : DGWeddingRequestPacket() {
    *this = ::std::move(from);
  }

  inline DGWeddingRequestPacket& operator=(const DGWeddingRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWeddingRequestPacket& operator=(DGWeddingRequestPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWeddingRequestPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWeddingRequestPacket* internal_default_instance() {
    return reinterpret_cast<const DGWeddingRequestPacket*>(
               &_DGWeddingRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DGWeddingRequestPacket& a, DGWeddingRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWeddingRequestPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWeddingRequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWeddingRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWeddingRequestPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWeddingRequestPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWeddingRequestPacket& from) {
    DGWeddingRequestPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWeddingRequestPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWeddingRequestPacket";
  }
  protected:
  explicit DGWeddingRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGWeddingRequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWeddingReadyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWeddingReadyPacket) */ {
 public:
  inline DGWeddingReadyPacket() : DGWeddingReadyPacket(nullptr) {}
  ~DGWeddingReadyPacket() override;
  explicit PROTOBUF_CONSTEXPR DGWeddingReadyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWeddingReadyPacket(const DGWeddingReadyPacket& from);
  DGWeddingReadyPacket(DGWeddingReadyPacket&& from) noexcept
    : DGWeddingReadyPacket() {
    *this = ::std::move(from);
  }

  inline DGWeddingReadyPacket& operator=(const DGWeddingReadyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWeddingReadyPacket& operator=(DGWeddingReadyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWeddingReadyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWeddingReadyPacket* internal_default_instance() {
    return reinterpret_cast<const DGWeddingReadyPacket*>(
               &_DGWeddingReadyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(DGWeddingReadyPacket& a, DGWeddingReadyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWeddingReadyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWeddingReadyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWeddingReadyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWeddingReadyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWeddingReadyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWeddingReadyPacket& from) {
    DGWeddingReadyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWeddingReadyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWeddingReadyPacket";
  }
  protected:
  explicit DGWeddingReadyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kMapIndexFieldNumber = 3,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGWeddingReadyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWeddingStartPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWeddingStartPacket) */ {
 public:
  inline DGWeddingStartPacket() : DGWeddingStartPacket(nullptr) {}
  ~DGWeddingStartPacket() override;
  explicit PROTOBUF_CONSTEXPR DGWeddingStartPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWeddingStartPacket(const DGWeddingStartPacket& from);
  DGWeddingStartPacket(DGWeddingStartPacket&& from) noexcept
    : DGWeddingStartPacket() {
    *this = ::std::move(from);
  }

  inline DGWeddingStartPacket& operator=(const DGWeddingStartPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWeddingStartPacket& operator=(DGWeddingStartPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWeddingStartPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWeddingStartPacket* internal_default_instance() {
    return reinterpret_cast<const DGWeddingStartPacket*>(
               &_DGWeddingStartPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DGWeddingStartPacket& a, DGWeddingStartPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWeddingStartPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWeddingStartPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWeddingStartPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWeddingStartPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWeddingStartPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWeddingStartPacket& from) {
    DGWeddingStartPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWeddingStartPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWeddingStartPacket";
  }
  protected:
  explicit DGWeddingStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGWeddingStartPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGWeddingEndPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGWeddingEndPacket) */ {
 public:
  inline DGWeddingEndPacket() : DGWeddingEndPacket(nullptr) {}
  ~DGWeddingEndPacket() override;
  explicit PROTOBUF_CONSTEXPR DGWeddingEndPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGWeddingEndPacket(const DGWeddingEndPacket& from);
  DGWeddingEndPacket(DGWeddingEndPacket&& from) noexcept
    : DGWeddingEndPacket() {
    *this = ::std::move(from);
  }

  inline DGWeddingEndPacket& operator=(const DGWeddingEndPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGWeddingEndPacket& operator=(DGWeddingEndPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGWeddingEndPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGWeddingEndPacket* internal_default_instance() {
    return reinterpret_cast<const DGWeddingEndPacket*>(
               &_DGWeddingEndPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DGWeddingEndPacket& a, DGWeddingEndPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGWeddingEndPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGWeddingEndPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGWeddingEndPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGWeddingEndPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGWeddingEndPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGWeddingEndPacket& from) {
    DGWeddingEndPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGWeddingEndPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGWeddingEndPacket";
  }
  protected:
  explicit DGWeddingEndPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGWeddingEndPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGBillingRepairPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGBillingRepairPacket) */ {
 public:
  inline DGBillingRepairPacket() : DGBillingRepairPacket(nullptr) {}
  ~DGBillingRepairPacket() override;
  explicit PROTOBUF_CONSTEXPR DGBillingRepairPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGBillingRepairPacket(const DGBillingRepairPacket& from);
  DGBillingRepairPacket(DGBillingRepairPacket&& from) noexcept
    : DGBillingRepairPacket() {
    *this = ::std::move(from);
  }

  inline DGBillingRepairPacket& operator=(const DGBillingRepairPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGBillingRepairPacket& operator=(DGBillingRepairPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGBillingRepairPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGBillingRepairPacket* internal_default_instance() {
    return reinterpret_cast<const DGBillingRepairPacket*>(
               &_DGBillingRepairPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(DGBillingRepairPacket& a, DGBillingRepairPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGBillingRepairPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGBillingRepairPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGBillingRepairPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGBillingRepairPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGBillingRepairPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGBillingRepairPacket& from) {
    DGBillingRepairPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGBillingRepairPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGBillingRepairPacket";
  }
  protected:
  explicit DGBillingRepairPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeysFieldNumber = 1,
    kLoginsFieldNumber = 2,
    kHostsFieldNumber = 3,
  };
  // repeated uint32 login_keys = 1;
  int login_keys_size() const;
  private:
  int _internal_login_keys_size() const;
  public:
  void clear_login_keys();
  private:
  uint32_t _internal_login_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_login_keys() const;
  void _internal_add_login_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_login_keys();
  public:
  uint32_t login_keys(int index) const;
  void set_login_keys(int index, uint32_t value);
  void add_login_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      login_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_login_keys();

  // repeated bytes logins = 2;
  int logins_size() const;
  private:
  int _internal_logins_size() const;
  public:
  void clear_logins();
  const std::string& logins(int index) const;
  std::string* mutable_logins(int index);
  void set_logins(int index, const std::string& value);
  void set_logins(int index, std::string&& value);
  void set_logins(int index, const char* value);
  void set_logins(int index, const void* value, size_t size);
  std::string* add_logins();
  void add_logins(const std::string& value);
  void add_logins(std::string&& value);
  void add_logins(const char* value);
  void add_logins(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logins();
  private:
  const std::string& _internal_logins(int index) const;
  std::string* _internal_add_logins();
  public:

  // repeated bytes hosts = 3;
  int hosts_size() const;
  private:
  int _internal_hosts_size() const;
  public:
  void clear_hosts();
  const std::string& hosts(int index) const;
  std::string* mutable_hosts(int index);
  void set_hosts(int index, const std::string& value);
  void set_hosts(int index, std::string&& value);
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const void* value, size_t size);
  std::string* add_hosts();
  void add_hosts(const std::string& value);
  void add_hosts(std::string&& value);
  void add_hosts(const char* value);
  void add_hosts(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hosts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hosts();
  private:
  const std::string& _internal_hosts(int index) const;
  std::string* _internal_add_hosts();
  public:

  // @@protoc_insertion_point(class_scope:network.DGBillingRepairPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > login_keys_;
    mutable std::atomic<int> _login_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logins_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hosts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGBillingExpirePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGBillingExpirePacket) */ {
 public:
  inline DGBillingExpirePacket() : DGBillingExpirePacket(nullptr) {}
  ~DGBillingExpirePacket() override;
  explicit PROTOBUF_CONSTEXPR DGBillingExpirePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGBillingExpirePacket(const DGBillingExpirePacket& from);
  DGBillingExpirePacket(DGBillingExpirePacket&& from) noexcept
    : DGBillingExpirePacket() {
    *this = ::std::move(from);
  }

  inline DGBillingExpirePacket& operator=(const DGBillingExpirePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGBillingExpirePacket& operator=(DGBillingExpirePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGBillingExpirePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGBillingExpirePacket* internal_default_instance() {
    return reinterpret_cast<const DGBillingExpirePacket*>(
               &_DGBillingExpirePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(DGBillingExpirePacket& a, DGBillingExpirePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGBillingExpirePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGBillingExpirePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGBillingExpirePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGBillingExpirePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGBillingExpirePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGBillingExpirePacket& from) {
    DGBillingExpirePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGBillingExpirePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGBillingExpirePacket";
  }
  protected:
  explicit DGBillingExpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kBillTypeFieldNumber = 2,
    kRemainSecondsFieldNumber = 3,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 bill_type = 2;
  void clear_bill_type();
  uint32_t bill_type() const;
  void set_bill_type(uint32_t value);
  private:
  uint32_t _internal_bill_type() const;
  void _internal_set_bill_type(uint32_t value);
  public:

  // uint32 remain_seconds = 3;
  void clear_remain_seconds();
  uint32_t remain_seconds() const;
  void set_remain_seconds(uint32_t value);
  private:
  uint32_t _internal_remain_seconds() const;
  void _internal_set_remain_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGBillingExpirePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t bill_type_;
    uint32_t remain_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGBillingLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGBillingLoginPacket) */ {
 public:
  inline DGBillingLoginPacket() : DGBillingLoginPacket(nullptr) {}
  ~DGBillingLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR DGBillingLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGBillingLoginPacket(const DGBillingLoginPacket& from);
  DGBillingLoginPacket(DGBillingLoginPacket&& from) noexcept
    : DGBillingLoginPacket() {
    *this = ::std::move(from);
  }

  inline DGBillingLoginPacket& operator=(const DGBillingLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGBillingLoginPacket& operator=(DGBillingLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGBillingLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGBillingLoginPacket* internal_default_instance() {
    return reinterpret_cast<const DGBillingLoginPacket*>(
               &_DGBillingLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(DGBillingLoginPacket& a, DGBillingLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGBillingLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGBillingLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGBillingLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGBillingLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGBillingLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGBillingLoginPacket& from) {
    DGBillingLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGBillingLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGBillingLoginPacket";
  }
  protected:
  explicit DGBillingLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeysFieldNumber = 1,
    kLoginsFieldNumber = 2,
  };
  // repeated uint32 login_keys = 1;
  int login_keys_size() const;
  private:
  int _internal_login_keys_size() const;
  public:
  void clear_login_keys();
  private:
  uint32_t _internal_login_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_login_keys() const;
  void _internal_add_login_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_login_keys();
  public:
  uint32_t login_keys(int index) const;
  void set_login_keys(int index, uint32_t value);
  void add_login_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      login_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_login_keys();

  // repeated uint32 logins = 2;
  int logins_size() const;
  private:
  int _internal_logins_size() const;
  public:
  void clear_logins();
  private:
  uint32_t _internal_logins(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_logins() const;
  void _internal_add_logins(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_logins();
  public:
  uint32_t logins(int index) const;
  void set_logins(int index, uint32_t value);
  void add_logins(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      logins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_logins();

  // @@protoc_insertion_point(class_scope:network.DGBillingLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > login_keys_;
    mutable std::atomic<int> _login_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > logins_;
    mutable std::atomic<int> _logins_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGBillingCheckPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGBillingCheckPacket) */ {
 public:
  inline DGBillingCheckPacket() : DGBillingCheckPacket(nullptr) {}
  ~DGBillingCheckPacket() override;
  explicit PROTOBUF_CONSTEXPR DGBillingCheckPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGBillingCheckPacket(const DGBillingCheckPacket& from);
  DGBillingCheckPacket(DGBillingCheckPacket&& from) noexcept
    : DGBillingCheckPacket() {
    *this = ::std::move(from);
  }

  inline DGBillingCheckPacket& operator=(const DGBillingCheckPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGBillingCheckPacket& operator=(DGBillingCheckPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGBillingCheckPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGBillingCheckPacket* internal_default_instance() {
    return reinterpret_cast<const DGBillingCheckPacket*>(
               &_DGBillingCheckPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(DGBillingCheckPacket& a, DGBillingCheckPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGBillingCheckPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGBillingCheckPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGBillingCheckPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGBillingCheckPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGBillingCheckPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGBillingCheckPacket& from) {
    DGBillingCheckPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGBillingCheckPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGBillingCheckPacket";
  }
  protected:
  explicit DGBillingCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated uint32 keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  uint32_t _internal_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_keys() const;
  void _internal_add_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_keys();
  public:
  uint32_t keys(int index) const;
  void set_keys(int index, uint32_t value);
  void add_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_keys();

  // @@protoc_insertion_point(class_scope:network.DGBillingCheckPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > keys_;
    mutable std::atomic<int> _keys_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildLoadPacket) */ {
 public:
  inline DGGuildLoadPacket() : DGGuildLoadPacket(nullptr) {}
  ~DGGuildLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildLoadPacket(const DGGuildLoadPacket& from);
  DGGuildLoadPacket(DGGuildLoadPacket&& from) noexcept
    : DGGuildLoadPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildLoadPacket& operator=(const DGGuildLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildLoadPacket& operator=(DGGuildLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildLoadPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildLoadPacket*>(
               &_DGGuildLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(DGGuildLoadPacket& a, DGGuildLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildLoadPacket& from) {
    DGGuildLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildLoadPacket";
  }
  protected:
  explicit DGGuildLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildSkillUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildSkillUpdatePacket) */ {
 public:
  inline DGGuildSkillUpdatePacket() : DGGuildSkillUpdatePacket(nullptr) {}
  ~DGGuildSkillUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildSkillUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildSkillUpdatePacket(const DGGuildSkillUpdatePacket& from);
  DGGuildSkillUpdatePacket(DGGuildSkillUpdatePacket&& from) noexcept
    : DGGuildSkillUpdatePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildSkillUpdatePacket& operator=(const DGGuildSkillUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildSkillUpdatePacket& operator=(DGGuildSkillUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildSkillUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildSkillUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildSkillUpdatePacket*>(
               &_DGGuildSkillUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(DGGuildSkillUpdatePacket& a, DGGuildSkillUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildSkillUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildSkillUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildSkillUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildSkillUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildSkillUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildSkillUpdatePacket& from) {
    DGGuildSkillUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildSkillUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildSkillUpdatePacket";
  }
  protected:
  explicit DGGuildSkillUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillLevelsFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kSkillPointFieldNumber = 4,
    kSaveFieldNumber = 5,
  };
  // repeated uint32 skill_levels = 3;
  int skill_levels_size() const;
  private:
  int _internal_skill_levels_size() const;
  public:
  void clear_skill_levels();
  private:
  uint32_t _internal_skill_levels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_levels() const;
  void _internal_add_skill_levels(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_levels();
  public:
  uint32_t skill_levels(int index) const;
  void set_skill_levels(int index, uint32_t value);
  void add_skill_levels(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_levels();

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 amount = 2;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // uint32 skill_point = 4;
  void clear_skill_point();
  uint32_t skill_point() const;
  void set_skill_point(uint32_t value);
  private:
  uint32_t _internal_skill_point() const;
  void _internal_set_skill_point(uint32_t value);
  public:

  // uint32 save = 5;
  void clear_save();
  uint32_t save() const;
  void set_save(uint32_t value);
  private:
  uint32_t _internal_save() const;
  void _internal_set_save(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildSkillUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_levels_;
    mutable std::atomic<int> _skill_levels_cached_byte_size_;
    uint32_t guild_id_;
    int32_t amount_;
    uint32_t skill_point_;
    uint32_t save_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildExpUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildExpUpdatePacket) */ {
 public:
  inline DGGuildExpUpdatePacket() : DGGuildExpUpdatePacket(nullptr) {}
  ~DGGuildExpUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildExpUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildExpUpdatePacket(const DGGuildExpUpdatePacket& from);
  DGGuildExpUpdatePacket(DGGuildExpUpdatePacket&& from) noexcept
    : DGGuildExpUpdatePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildExpUpdatePacket& operator=(const DGGuildExpUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildExpUpdatePacket& operator=(DGGuildExpUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildExpUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildExpUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildExpUpdatePacket*>(
               &_DGGuildExpUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(DGGuildExpUpdatePacket& a, DGGuildExpUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildExpUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildExpUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildExpUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildExpUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildExpUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildExpUpdatePacket& from) {
    DGGuildExpUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildExpUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildExpUpdatePacket";
  }
  protected:
  explicit DGGuildExpUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 amount = 2;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildExpUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildAddMemberPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildAddMemberPacket) */ {
 public:
  inline DGGuildAddMemberPacket() : DGGuildAddMemberPacket(nullptr) {}
  ~DGGuildAddMemberPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildAddMemberPacket(const DGGuildAddMemberPacket& from);
  DGGuildAddMemberPacket(DGGuildAddMemberPacket&& from) noexcept
    : DGGuildAddMemberPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildAddMemberPacket& operator=(const DGGuildAddMemberPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildAddMemberPacket& operator=(DGGuildAddMemberPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildAddMemberPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildAddMemberPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildAddMemberPacket*>(
               &_DGGuildAddMemberPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DGGuildAddMemberPacket& a, DGGuildAddMemberPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildAddMemberPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildAddMemberPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildAddMemberPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildAddMemberPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildAddMemberPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildAddMemberPacket& from) {
    DGGuildAddMemberPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildAddMemberPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildAddMemberPacket";
  }
  protected:
  explicit DGGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 8,
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kGradeFieldNumber = 3,
    kIsGeneralFieldNumber = 4,
    kJobFieldNumber = 5,
    kLevelFieldNumber = 6,
    kOfferFieldNumber = 7,
  };
  // bytes name = 8;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 grade = 3;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // bool is_general = 4;
  void clear_is_general();
  bool is_general() const;
  void set_is_general(bool value);
  private:
  bool _internal_is_general() const;
  void _internal_set_is_general(bool value);
  public:

  // uint32 job = 5;
  void clear_job();
  uint32_t job() const;
  void set_job(uint32_t value);
  private:
  uint32_t _internal_job() const;
  void _internal_set_job(uint32_t value);
  public:

  // uint32 level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 offer = 7;
  void clear_offer();
  uint32_t offer() const;
  void set_offer(uint32_t value);
  private:
  uint32_t _internal_offer() const;
  void _internal_set_offer(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildAddMemberPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t guild_id_;
    uint32_t pid_;
    uint32_t grade_;
    bool is_general_;
    uint32_t job_;
    uint32_t level_;
    uint32_t offer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildRemoveMemberPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildRemoveMemberPacket) */ {
 public:
  inline DGGuildRemoveMemberPacket() : DGGuildRemoveMemberPacket(nullptr) {}
  ~DGGuildRemoveMemberPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildRemoveMemberPacket(const DGGuildRemoveMemberPacket& from);
  DGGuildRemoveMemberPacket(DGGuildRemoveMemberPacket&& from) noexcept
    : DGGuildRemoveMemberPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildRemoveMemberPacket& operator=(const DGGuildRemoveMemberPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildRemoveMemberPacket& operator=(DGGuildRemoveMemberPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildRemoveMemberPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildRemoveMemberPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildRemoveMemberPacket*>(
               &_DGGuildRemoveMemberPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(DGGuildRemoveMemberPacket& a, DGGuildRemoveMemberPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildRemoveMemberPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildRemoveMemberPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildRemoveMemberPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildRemoveMemberPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildRemoveMemberPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildRemoveMemberPacket& from) {
    DGGuildRemoveMemberPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildRemoveMemberPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildRemoveMemberPacket";
  }
  protected:
  explicit DGGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildRemoveMemberPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildChangeGradePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildChangeGradePacket) */ {
 public:
  inline DGGuildChangeGradePacket() : DGGuildChangeGradePacket(nullptr) {}
  ~DGGuildChangeGradePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildChangeGradePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildChangeGradePacket(const DGGuildChangeGradePacket& from);
  DGGuildChangeGradePacket(DGGuildChangeGradePacket&& from) noexcept
    : DGGuildChangeGradePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildChangeGradePacket& operator=(const DGGuildChangeGradePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildChangeGradePacket& operator=(DGGuildChangeGradePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildChangeGradePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildChangeGradePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildChangeGradePacket*>(
               &_DGGuildChangeGradePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(DGGuildChangeGradePacket& a, DGGuildChangeGradePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildChangeGradePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildChangeGradePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildChangeGradePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildChangeGradePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildChangeGradePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildChangeGradePacket& from) {
    DGGuildChangeGradePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildChangeGradePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildChangeGradePacket";
  }
  protected:
  explicit DGGuildChangeGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kGradeFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 grade = 2;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildChangeGradePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildChangeMemberDataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildChangeMemberDataPacket) */ {
 public:
  inline DGGuildChangeMemberDataPacket() : DGGuildChangeMemberDataPacket(nullptr) {}
  ~DGGuildChangeMemberDataPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildChangeMemberDataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildChangeMemberDataPacket(const DGGuildChangeMemberDataPacket& from);
  DGGuildChangeMemberDataPacket(DGGuildChangeMemberDataPacket&& from) noexcept
    : DGGuildChangeMemberDataPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildChangeMemberDataPacket& operator=(const DGGuildChangeMemberDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildChangeMemberDataPacket& operator=(DGGuildChangeMemberDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildChangeMemberDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildChangeMemberDataPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildChangeMemberDataPacket*>(
               &_DGGuildChangeMemberDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(DGGuildChangeMemberDataPacket& a, DGGuildChangeMemberDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildChangeMemberDataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildChangeMemberDataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildChangeMemberDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildChangeMemberDataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildChangeMemberDataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildChangeMemberDataPacket& from) {
    DGGuildChangeMemberDataPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildChangeMemberDataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildChangeMemberDataPacket";
  }
  protected:
  explicit DGGuildChangeMemberDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kOfferFieldNumber = 3,
    kLevelFieldNumber = 4,
    kGradeFieldNumber = 5,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 offer = 3;
  void clear_offer();
  uint32_t offer() const;
  void set_offer(uint32_t value);
  private:
  uint32_t _internal_offer() const;
  void _internal_set_offer(uint32_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 grade = 5;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildChangeMemberDataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t pid_;
    uint32_t offer_;
    uint32_t level_;
    uint32_t grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildDisbandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildDisbandPacket) */ {
 public:
  inline DGGuildDisbandPacket() : DGGuildDisbandPacket(nullptr) {}
  ~DGGuildDisbandPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildDisbandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildDisbandPacket(const DGGuildDisbandPacket& from);
  DGGuildDisbandPacket(DGGuildDisbandPacket&& from) noexcept
    : DGGuildDisbandPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildDisbandPacket& operator=(const DGGuildDisbandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildDisbandPacket& operator=(DGGuildDisbandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildDisbandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildDisbandPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildDisbandPacket*>(
               &_DGGuildDisbandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(DGGuildDisbandPacket& a, DGGuildDisbandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildDisbandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildDisbandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildDisbandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildDisbandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildDisbandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildDisbandPacket& from) {
    DGGuildDisbandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildDisbandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildDisbandPacket";
  }
  protected:
  explicit DGGuildDisbandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildDisbandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildLadderPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildLadderPacket) */ {
 public:
  inline DGGuildLadderPacket() : DGGuildLadderPacket(nullptr) {}
  ~DGGuildLadderPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildLadderPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildLadderPacket(const DGGuildLadderPacket& from);
  DGGuildLadderPacket(DGGuildLadderPacket&& from) noexcept
    : DGGuildLadderPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildLadderPacket& operator=(const DGGuildLadderPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildLadderPacket& operator=(DGGuildLadderPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildLadderPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildLadderPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildLadderPacket*>(
               &_DGGuildLadderPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(DGGuildLadderPacket& a, DGGuildLadderPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildLadderPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildLadderPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildLadderPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildLadderPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildLadderPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildLadderPacket& from) {
    DGGuildLadderPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildLadderPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildLadderPacket";
  }
  protected:
  explicit DGGuildLadderPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 3,
    kDrawsFieldNumber = 4,
    kLossesFieldNumber = 5,
    kGuildIdFieldNumber = 1,
    kLadderPointFieldNumber = 2,
  };
  // repeated int32 wins = 3;
  int wins_size() const;
  private:
  int _internal_wins_size() const;
  public:
  void clear_wins();
  private:
  int32_t _internal_wins(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_wins() const;
  void _internal_add_wins(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_wins();
  public:
  int32_t wins(int index) const;
  void set_wins(int index, int32_t value);
  void add_wins(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      wins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_wins();

  // repeated int32 draws = 4;
  int draws_size() const;
  private:
  int _internal_draws_size() const;
  public:
  void clear_draws();
  private:
  int32_t _internal_draws(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_draws() const;
  void _internal_add_draws(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_draws();
  public:
  int32_t draws(int index) const;
  void set_draws(int index, int32_t value);
  void add_draws(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      draws() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_draws();

  // repeated int32 losses = 5;
  int losses_size() const;
  private:
  int _internal_losses_size() const;
  public:
  void clear_losses();
  private:
  int32_t _internal_losses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_losses() const;
  void _internal_add_losses(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_losses();
  public:
  int32_t losses(int index) const;
  void set_losses(int index, int32_t value);
  void add_losses(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      losses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_losses();

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 ladder_point = 2;
  void clear_ladder_point();
  int32_t ladder_point() const;
  void set_ladder_point(int32_t value);
  private:
  int32_t _internal_ladder_point() const;
  void _internal_set_ladder_point(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildLadderPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > wins_;
    mutable std::atomic<int> _wins_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > draws_;
    mutable std::atomic<int> _draws_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > losses_;
    mutable std::atomic<int> _losses_cached_byte_size_;
    uint32_t guild_id_;
    int32_t ladder_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildWarPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildWarPacket) */ {
 public:
  inline DGGuildWarPacket() : DGGuildWarPacket(nullptr) {}
  ~DGGuildWarPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildWarPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildWarPacket(const DGGuildWarPacket& from);
  DGGuildWarPacket(DGGuildWarPacket&& from) noexcept
    : DGGuildWarPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildWarPacket& operator=(const DGGuildWarPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildWarPacket& operator=(DGGuildWarPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildWarPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildWarPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildWarPacket*>(
               &_DGGuildWarPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(DGGuildWarPacket& a, DGGuildWarPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildWarPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildWarPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildWarPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildWarPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildWarPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildWarPacket& from) {
    DGGuildWarPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildWarPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildWarPacket";
  }
  protected:
  explicit DGGuildWarPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWarFieldNumber = 2,
    kGuildFromFieldNumber = 3,
    kGuildToFieldNumber = 4,
    kWarPriceFieldNumber = 5,
    kInitialScoreFieldNumber = 6,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 war = 2;
  void clear_war();
  uint32_t war() const;
  void set_war(uint32_t value);
  private:
  uint32_t _internal_war() const;
  void _internal_set_war(uint32_t value);
  public:

  // uint32 guild_from = 3;
  void clear_guild_from();
  uint32_t guild_from() const;
  void set_guild_from(uint32_t value);
  private:
  uint32_t _internal_guild_from() const;
  void _internal_set_guild_from(uint32_t value);
  public:

  // uint32 guild_to = 4;
  void clear_guild_to();
  uint32_t guild_to() const;
  void set_guild_to(uint32_t value);
  private:
  uint32_t _internal_guild_to() const;
  void _internal_set_guild_to(uint32_t value);
  public:

  // int32 war_price = 5;
  void clear_war_price();
  int32_t war_price() const;
  void set_war_price(int32_t value);
  private:
  int32_t _internal_war_price() const;
  void _internal_set_war_price(int32_t value);
  public:

  // int32 initial_score = 6;
  void clear_initial_score();
  int32_t initial_score() const;
  void set_initial_score(int32_t value);
  private:
  int32_t _internal_initial_score() const;
  void _internal_set_initial_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildWarPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t war_;
    uint32_t guild_from_;
    uint32_t guild_to_;
    int32_t war_price_;
    int32_t initial_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildWarScorePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildWarScorePacket) */ {
 public:
  inline DGGuildWarScorePacket() : DGGuildWarScorePacket(nullptr) {}
  ~DGGuildWarScorePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildWarScorePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildWarScorePacket(const DGGuildWarScorePacket& from);
  DGGuildWarScorePacket(DGGuildWarScorePacket&& from) noexcept
    : DGGuildWarScorePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildWarScorePacket& operator=(const DGGuildWarScorePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildWarScorePacket& operator=(DGGuildWarScorePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildWarScorePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildWarScorePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildWarScorePacket*>(
               &_DGGuildWarScorePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(DGGuildWarScorePacket& a, DGGuildWarScorePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildWarScorePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildWarScorePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildWarScorePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildWarScorePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildWarScorePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildWarScorePacket& from) {
    DGGuildWarScorePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildWarScorePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildWarScorePacket";
  }
  protected:
  explicit DGGuildWarScorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildGainPointFieldNumber = 1,
    kGuildOpponentFieldNumber = 2,
    kScoreFieldNumber = 3,
    kBetScoreFieldNumber = 4,
  };
  // uint32 guild_gain_point = 1;
  void clear_guild_gain_point();
  uint32_t guild_gain_point() const;
  void set_guild_gain_point(uint32_t value);
  private:
  uint32_t _internal_guild_gain_point() const;
  void _internal_set_guild_gain_point(uint32_t value);
  public:

  // uint32 guild_opponent = 2;
  void clear_guild_opponent();
  uint32_t guild_opponent() const;
  void set_guild_opponent(uint32_t value);
  private:
  uint32_t _internal_guild_opponent() const;
  void _internal_set_guild_opponent(uint32_t value);
  public:

  // int32 score = 3;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // int32 bet_score = 4;
  void clear_bet_score();
  int32_t bet_score() const;
  void set_bet_score(int32_t value);
  private:
  int32_t _internal_bet_score() const;
  void _internal_set_bet_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildWarScorePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_gain_point_;
    uint32_t guild_opponent_;
    int32_t score_;
    int32_t bet_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildSkillUsableChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildSkillUsableChangePacket) */ {
 public:
  inline DGGuildSkillUsableChangePacket() : DGGuildSkillUsableChangePacket(nullptr) {}
  ~DGGuildSkillUsableChangePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildSkillUsableChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildSkillUsableChangePacket(const DGGuildSkillUsableChangePacket& from);
  DGGuildSkillUsableChangePacket(DGGuildSkillUsableChangePacket&& from) noexcept
    : DGGuildSkillUsableChangePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildSkillUsableChangePacket& operator=(const DGGuildSkillUsableChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildSkillUsableChangePacket& operator=(DGGuildSkillUsableChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildSkillUsableChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildSkillUsableChangePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildSkillUsableChangePacket*>(
               &_DGGuildSkillUsableChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(DGGuildSkillUsableChangePacket& a, DGGuildSkillUsableChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildSkillUsableChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildSkillUsableChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildSkillUsableChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildSkillUsableChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildSkillUsableChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildSkillUsableChangePacket& from) {
    DGGuildSkillUsableChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildSkillUsableChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildSkillUsableChangePacket";
  }
  protected:
  explicit DGGuildSkillUsableChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kSkillVnumFieldNumber = 2,
    kUsableFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 skill_vnum = 2;
  void clear_skill_vnum();
  uint32_t skill_vnum() const;
  void set_skill_vnum(uint32_t value);
  private:
  uint32_t _internal_skill_vnum() const;
  void _internal_set_skill_vnum(uint32_t value);
  public:

  // bool usable = 3;
  void clear_usable();
  bool usable() const;
  void set_usable(bool value);
  private:
  bool _internal_usable() const;
  void _internal_set_usable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildSkillUsableChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t skill_vnum_;
    bool usable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildMoneyChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildMoneyChangePacket) */ {
 public:
  inline DGGuildMoneyChangePacket() : DGGuildMoneyChangePacket(nullptr) {}
  ~DGGuildMoneyChangePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildMoneyChangePacket(const DGGuildMoneyChangePacket& from);
  DGGuildMoneyChangePacket(DGGuildMoneyChangePacket&& from) noexcept
    : DGGuildMoneyChangePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildMoneyChangePacket& operator=(const DGGuildMoneyChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildMoneyChangePacket& operator=(DGGuildMoneyChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildMoneyChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildMoneyChangePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildMoneyChangePacket*>(
               &_DGGuildMoneyChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(DGGuildMoneyChangePacket& a, DGGuildMoneyChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildMoneyChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildMoneyChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildMoneyChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildMoneyChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildMoneyChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildMoneyChangePacket& from) {
    DGGuildMoneyChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildMoneyChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildMoneyChangePacket";
  }
  protected:
  explicit DGGuildMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kTotalGoldFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 total_gold = 2;
  void clear_total_gold();
  int32_t total_gold() const;
  void set_total_gold(int32_t value);
  private:
  int32_t _internal_total_gold() const;
  void _internal_set_total_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildMoneyChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t total_gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildMoneyWithdrawPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildMoneyWithdrawPacket) */ {
 public:
  inline DGGuildMoneyWithdrawPacket() : DGGuildMoneyWithdrawPacket(nullptr) {}
  ~DGGuildMoneyWithdrawPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildMoneyWithdrawPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildMoneyWithdrawPacket(const DGGuildMoneyWithdrawPacket& from);
  DGGuildMoneyWithdrawPacket(DGGuildMoneyWithdrawPacket&& from) noexcept
    : DGGuildMoneyWithdrawPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildMoneyWithdrawPacket& operator=(const DGGuildMoneyWithdrawPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildMoneyWithdrawPacket& operator=(DGGuildMoneyWithdrawPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildMoneyWithdrawPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildMoneyWithdrawPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildMoneyWithdrawPacket*>(
               &_DGGuildMoneyWithdrawPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(DGGuildMoneyWithdrawPacket& a, DGGuildMoneyWithdrawPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildMoneyWithdrawPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildMoneyWithdrawPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildMoneyWithdrawPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildMoneyWithdrawPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildMoneyWithdrawPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildMoneyWithdrawPacket& from) {
    DGGuildMoneyWithdrawPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildMoneyWithdrawPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildMoneyWithdrawPacket";
  }
  protected:
  explicit DGGuildMoneyWithdrawPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChangeGoldFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 change_gold = 2;
  void clear_change_gold();
  int32_t change_gold() const;
  void set_change_gold(int32_t value);
  private:
  int32_t _internal_change_gold() const;
  void _internal_set_change_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildMoneyWithdrawPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t change_gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildWarReserveAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildWarReserveAddPacket) */ {
 public:
  inline DGGuildWarReserveAddPacket() : DGGuildWarReserveAddPacket(nullptr) {}
  ~DGGuildWarReserveAddPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildWarReserveAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildWarReserveAddPacket(const DGGuildWarReserveAddPacket& from);
  DGGuildWarReserveAddPacket(DGGuildWarReserveAddPacket&& from) noexcept
    : DGGuildWarReserveAddPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildWarReserveAddPacket& operator=(const DGGuildWarReserveAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildWarReserveAddPacket& operator=(DGGuildWarReserveAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildWarReserveAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildWarReserveAddPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildWarReserveAddPacket*>(
               &_DGGuildWarReserveAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(DGGuildWarReserveAddPacket& a, DGGuildWarReserveAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildWarReserveAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildWarReserveAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildWarReserveAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildWarReserveAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildWarReserveAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildWarReserveAddPacket& from) {
    DGGuildWarReserveAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildWarReserveAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildWarReserveAddPacket";
  }
  protected:
  explicit DGGuildWarReserveAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGuildFromFieldNumber = 2,
    kGuildToFieldNumber = 3,
    kTimeFieldNumber = 4,
    kTypeFieldNumber = 5,
    kWarPriceFieldNumber = 6,
    kInitialScoreFieldNumber = 7,
    kStartedFieldNumber = 8,
    kBetFromFieldNumber = 9,
    kBetToFieldNumber = 10,
    kPowerFromFieldNumber = 11,
    kPowerToFieldNumber = 12,
    kHandicapFieldNumber = 13,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 guild_from = 2;
  void clear_guild_from();
  uint32_t guild_from() const;
  void set_guild_from(uint32_t value);
  private:
  uint32_t _internal_guild_from() const;
  void _internal_set_guild_from(uint32_t value);
  public:

  // uint32 guild_to = 3;
  void clear_guild_to();
  uint32_t guild_to() const;
  void set_guild_to(uint32_t value);
  private:
  uint32_t _internal_guild_to() const;
  void _internal_set_guild_to(uint32_t value);
  public:

  // uint32 time = 4;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 type = 5;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 war_price = 6;
  void clear_war_price();
  int32_t war_price() const;
  void set_war_price(int32_t value);
  private:
  int32_t _internal_war_price() const;
  void _internal_set_war_price(int32_t value);
  public:

  // int32 initial_score = 7;
  void clear_initial_score();
  int32_t initial_score() const;
  void set_initial_score(int32_t value);
  private:
  int32_t _internal_initial_score() const;
  void _internal_set_initial_score(int32_t value);
  public:

  // bool started = 8;
  void clear_started();
  bool started() const;
  void set_started(bool value);
  private:
  bool _internal_started() const;
  void _internal_set_started(bool value);
  public:

  // uint32 bet_from = 9;
  void clear_bet_from();
  uint32_t bet_from() const;
  void set_bet_from(uint32_t value);
  private:
  uint32_t _internal_bet_from() const;
  void _internal_set_bet_from(uint32_t value);
  public:

  // uint32 bet_to = 10;
  void clear_bet_to();
  uint32_t bet_to() const;
  void set_bet_to(uint32_t value);
  private:
  uint32_t _internal_bet_to() const;
  void _internal_set_bet_to(uint32_t value);
  public:

  // int32 power_from = 11;
  void clear_power_from();
  int32_t power_from() const;
  void set_power_from(int32_t value);
  private:
  int32_t _internal_power_from() const;
  void _internal_set_power_from(int32_t value);
  public:

  // int32 power_to = 12;
  void clear_power_to();
  int32_t power_to() const;
  void set_power_to(int32_t value);
  private:
  int32_t _internal_power_to() const;
  void _internal_set_power_to(int32_t value);
  public:

  // int32 handicap = 13;
  void clear_handicap();
  int32_t handicap() const;
  void set_handicap(int32_t value);
  private:
  int32_t _internal_handicap() const;
  void _internal_set_handicap(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildWarReserveAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t guild_from_;
    uint32_t guild_to_;
    uint32_t time_;
    uint32_t type_;
    int32_t war_price_;
    int32_t initial_score_;
    bool started_;
    uint32_t bet_from_;
    uint32_t bet_to_;
    int32_t power_from_;
    int32_t power_to_;
    int32_t handicap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildWarReserveDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildWarReserveDeletePacket) */ {
 public:
  inline DGGuildWarReserveDeletePacket() : DGGuildWarReserveDeletePacket(nullptr) {}
  ~DGGuildWarReserveDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildWarReserveDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildWarReserveDeletePacket(const DGGuildWarReserveDeletePacket& from);
  DGGuildWarReserveDeletePacket(DGGuildWarReserveDeletePacket&& from) noexcept
    : DGGuildWarReserveDeletePacket() {
    *this = ::std::move(from);
  }

  inline DGGuildWarReserveDeletePacket& operator=(const DGGuildWarReserveDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildWarReserveDeletePacket& operator=(DGGuildWarReserveDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildWarReserveDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildWarReserveDeletePacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildWarReserveDeletePacket*>(
               &_DGGuildWarReserveDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(DGGuildWarReserveDeletePacket& a, DGGuildWarReserveDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildWarReserveDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildWarReserveDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildWarReserveDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildWarReserveDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildWarReserveDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildWarReserveDeletePacket& from) {
    DGGuildWarReserveDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildWarReserveDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildWarReserveDeletePacket";
  }
  protected:
  explicit DGGuildWarReserveDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildWarReserveDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildWarBetPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildWarBetPacket) */ {
 public:
  inline DGGuildWarBetPacket() : DGGuildWarBetPacket(nullptr) {}
  ~DGGuildWarBetPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildWarBetPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildWarBetPacket(const DGGuildWarBetPacket& from);
  DGGuildWarBetPacket(DGGuildWarBetPacket&& from) noexcept
    : DGGuildWarBetPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildWarBetPacket& operator=(const DGGuildWarBetPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildWarBetPacket& operator=(DGGuildWarBetPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildWarBetPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildWarBetPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildWarBetPacket*>(
               &_DGGuildWarBetPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(DGGuildWarBetPacket& a, DGGuildWarBetPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildWarBetPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildWarBetPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildWarBetPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildWarBetPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildWarBetPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildWarBetPacket& from) {
    DGGuildWarBetPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildWarBetPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildWarBetPacket";
  }
  protected:
  explicit DGGuildWarBetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kIdFieldNumber = 1,
    kGoldFieldNumber = 3,
    kGuildIdFieldNumber = 4,
  };
  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 gold = 3;
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // uint32 guild_id = 4;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildWarBetPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t id_;
    uint32_t gold_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildChangeMasterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildChangeMasterPacket) */ {
 public:
  inline DGGuildChangeMasterPacket() : DGGuildChangeMasterPacket(nullptr) {}
  ~DGGuildChangeMasterPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildChangeMasterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildChangeMasterPacket(const DGGuildChangeMasterPacket& from);
  DGGuildChangeMasterPacket(DGGuildChangeMasterPacket&& from) noexcept
    : DGGuildChangeMasterPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildChangeMasterPacket& operator=(const DGGuildChangeMasterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildChangeMasterPacket& operator=(DGGuildChangeMasterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildChangeMasterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildChangeMasterPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildChangeMasterPacket*>(
               &_DGGuildChangeMasterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(DGGuildChangeMasterPacket& a, DGGuildChangeMasterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildChangeMasterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildChangeMasterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildChangeMasterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildChangeMasterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildChangeMasterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildChangeMasterPacket& from) {
    DGGuildChangeMasterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildChangeMasterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildChangeMasterPacket";
  }
  protected:
  explicit DGGuildChangeMasterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildChangeMasterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGGuildSafeboxPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGGuildSafeboxPacket) */ {
 public:
  inline DGGuildSafeboxPacket() : DGGuildSafeboxPacket(nullptr) {}
  ~DGGuildSafeboxPacket() override;
  explicit PROTOBUF_CONSTEXPR DGGuildSafeboxPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGGuildSafeboxPacket(const DGGuildSafeboxPacket& from);
  DGGuildSafeboxPacket(DGGuildSafeboxPacket&& from) noexcept
    : DGGuildSafeboxPacket() {
    *this = ::std::move(from);
  }

  inline DGGuildSafeboxPacket& operator=(const DGGuildSafeboxPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGGuildSafeboxPacket& operator=(DGGuildSafeboxPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGGuildSafeboxPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGGuildSafeboxPacket* internal_default_instance() {
    return reinterpret_cast<const DGGuildSafeboxPacket*>(
               &_DGGuildSafeboxPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(DGGuildSafeboxPacket& a, DGGuildSafeboxPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGGuildSafeboxPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGGuildSafeboxPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGGuildSafeboxPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGGuildSafeboxPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGGuildSafeboxPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGGuildSafeboxPacket& from) {
    DGGuildSafeboxPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGGuildSafeboxPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGGuildSafeboxPacket";
  }
  protected:
  explicit DGGuildSafeboxPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 6,
    kItemFieldNumber = 3,
    kAddedLogFieldNumber = 7,
    kSubHeaderFieldNumber = 1,
    kGuildIdFieldNumber = 2,
    kGoldFieldNumber = 4,
    kSizeFieldNumber = 5,
  };
  // repeated .network.TItemData items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // .network.TItemData item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // .network.TGuildSafeboxLogTable added_log = 7;
  bool has_added_log() const;
  private:
  bool _internal_has_added_log() const;
  public:
  void clear_added_log();
  const ::network::TGuildSafeboxLogTable& added_log() const;
  PROTOBUF_NODISCARD ::network::TGuildSafeboxLogTable* release_added_log();
  ::network::TGuildSafeboxLogTable* mutable_added_log();
  void set_allocated_added_log(::network::TGuildSafeboxLogTable* added_log);
  private:
  const ::network::TGuildSafeboxLogTable& _internal_added_log() const;
  ::network::TGuildSafeboxLogTable* _internal_mutable_added_log();
  public:
  void unsafe_arena_set_allocated_added_log(
      ::network::TGuildSafeboxLogTable* added_log);
  ::network::TGuildSafeboxLogTable* unsafe_arena_release_added_log();

  // uint32 sub_header = 1;
  void clear_sub_header();
  uint32_t sub_header() const;
  void set_sub_header(uint32_t value);
  private:
  uint32_t _internal_sub_header() const;
  void _internal_set_sub_header(uint32_t value);
  public:

  // uint32 guild_id = 2;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint64 gold = 4;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // uint32 size = 5;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGGuildSafeboxPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    ::network::TItemData* item_;
    ::network::TGuildSafeboxLogTable* added_log_;
    uint32_t sub_header_;
    uint32_t guild_id_;
    uint64_t gold_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPartyCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPartyCreatePacket) */ {
 public:
  inline DGPartyCreatePacket() : DGPartyCreatePacket(nullptr) {}
  ~DGPartyCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR DGPartyCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPartyCreatePacket(const DGPartyCreatePacket& from);
  DGPartyCreatePacket(DGPartyCreatePacket&& from) noexcept
    : DGPartyCreatePacket() {
    *this = ::std::move(from);
  }

  inline DGPartyCreatePacket& operator=(const DGPartyCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPartyCreatePacket& operator=(DGPartyCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPartyCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPartyCreatePacket* internal_default_instance() {
    return reinterpret_cast<const DGPartyCreatePacket*>(
               &_DGPartyCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(DGPartyCreatePacket& a, DGPartyCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPartyCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPartyCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPartyCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPartyCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPartyCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPartyCreatePacket& from) {
    DGPartyCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPartyCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPartyCreatePacket";
  }
  protected:
  explicit DGPartyCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPartyCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPartyDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPartyDeletePacket) */ {
 public:
  inline DGPartyDeletePacket() : DGPartyDeletePacket(nullptr) {}
  ~DGPartyDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR DGPartyDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPartyDeletePacket(const DGPartyDeletePacket& from);
  DGPartyDeletePacket(DGPartyDeletePacket&& from) noexcept
    : DGPartyDeletePacket() {
    *this = ::std::move(from);
  }

  inline DGPartyDeletePacket& operator=(const DGPartyDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPartyDeletePacket& operator=(DGPartyDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPartyDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPartyDeletePacket* internal_default_instance() {
    return reinterpret_cast<const DGPartyDeletePacket*>(
               &_DGPartyDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(DGPartyDeletePacket& a, DGPartyDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPartyDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPartyDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPartyDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPartyDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPartyDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPartyDeletePacket& from) {
    DGPartyDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPartyDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPartyDeletePacket";
  }
  protected:
  explicit DGPartyDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPartyDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPartyAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPartyAddPacket) */ {
 public:
  inline DGPartyAddPacket() : DGPartyAddPacket(nullptr) {}
  ~DGPartyAddPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPartyAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPartyAddPacket(const DGPartyAddPacket& from);
  DGPartyAddPacket(DGPartyAddPacket&& from) noexcept
    : DGPartyAddPacket() {
    *this = ::std::move(from);
  }

  inline DGPartyAddPacket& operator=(const DGPartyAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPartyAddPacket& operator=(DGPartyAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPartyAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPartyAddPacket* internal_default_instance() {
    return reinterpret_cast<const DGPartyAddPacket*>(
               &_DGPartyAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(DGPartyAddPacket& a, DGPartyAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPartyAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPartyAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPartyAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPartyAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPartyAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPartyAddPacket& from) {
    DGPartyAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPartyAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPartyAddPacket";
  }
  protected:
  explicit DGPartyAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 state = 3;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPartyAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    uint32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPartyRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPartyRemovePacket) */ {
 public:
  inline DGPartyRemovePacket() : DGPartyRemovePacket(nullptr) {}
  ~DGPartyRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR DGPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPartyRemovePacket(const DGPartyRemovePacket& from);
  DGPartyRemovePacket(DGPartyRemovePacket&& from) noexcept
    : DGPartyRemovePacket() {
    *this = ::std::move(from);
  }

  inline DGPartyRemovePacket& operator=(const DGPartyRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPartyRemovePacket& operator=(DGPartyRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPartyRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPartyRemovePacket* internal_default_instance() {
    return reinterpret_cast<const DGPartyRemovePacket*>(
               &_DGPartyRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(DGPartyRemovePacket& a, DGPartyRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPartyRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPartyRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPartyRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPartyRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPartyRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPartyRemovePacket& from) {
    DGPartyRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPartyRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPartyRemovePacket";
  }
  protected:
  explicit DGPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPartyRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPartyStateChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPartyStateChangePacket) */ {
 public:
  inline DGPartyStateChangePacket() : DGPartyStateChangePacket(nullptr) {}
  ~DGPartyStateChangePacket() override;
  explicit PROTOBUF_CONSTEXPR DGPartyStateChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPartyStateChangePacket(const DGPartyStateChangePacket& from);
  DGPartyStateChangePacket(DGPartyStateChangePacket&& from) noexcept
    : DGPartyStateChangePacket() {
    *this = ::std::move(from);
  }

  inline DGPartyStateChangePacket& operator=(const DGPartyStateChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPartyStateChangePacket& operator=(DGPartyStateChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPartyStateChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPartyStateChangePacket* internal_default_instance() {
    return reinterpret_cast<const DGPartyStateChangePacket*>(
               &_DGPartyStateChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(DGPartyStateChangePacket& a, DGPartyStateChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPartyStateChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPartyStateChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPartyStateChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPartyStateChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPartyStateChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPartyStateChangePacket& from) {
    DGPartyStateChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPartyStateChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPartyStateChangePacket";
  }
  protected:
  explicit DGPartyStateChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
    kRoleFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 role = 3;
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // bool flag = 4;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPartyStateChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    uint32_t role_;
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DGPartySetMemberLevelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.DGPartySetMemberLevelPacket) */ {
 public:
  inline DGPartySetMemberLevelPacket() : DGPartySetMemberLevelPacket(nullptr) {}
  ~DGPartySetMemberLevelPacket() override;
  explicit PROTOBUF_CONSTEXPR DGPartySetMemberLevelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DGPartySetMemberLevelPacket(const DGPartySetMemberLevelPacket& from);
  DGPartySetMemberLevelPacket(DGPartySetMemberLevelPacket&& from) noexcept
    : DGPartySetMemberLevelPacket() {
    *this = ::std::move(from);
  }

  inline DGPartySetMemberLevelPacket& operator=(const DGPartySetMemberLevelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DGPartySetMemberLevelPacket& operator=(DGPartySetMemberLevelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DGPartySetMemberLevelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DGPartySetMemberLevelPacket* internal_default_instance() {
    return reinterpret_cast<const DGPartySetMemberLevelPacket*>(
               &_DGPartySetMemberLevelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(DGPartySetMemberLevelPacket& a, DGPartySetMemberLevelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DGPartySetMemberLevelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DGPartySetMemberLevelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DGPartySetMemberLevelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DGPartySetMemberLevelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DGPartySetMemberLevelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DGPartySetMemberLevelPacket& from) {
    DGPartySetMemberLevelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DGPartySetMemberLevelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.DGPartySetMemberLevelPacket";
  }
  protected:
  explicit DGPartySetMemberLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.DGPartySetMemberLevelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dg_5fpackets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DGBootPacket

// repeated .network.TMobTable mobs = 1;
inline int DGBootPacket::_internal_mobs_size() const {
  return _impl_.mobs_.size();
}
inline int DGBootPacket::mobs_size() const {
  return _internal_mobs_size();
}
inline ::network::TMobTable* DGBootPacket::mutable_mobs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.mobs)
  return _impl_.mobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
DGBootPacket::mutable_mobs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.mobs)
  return &_impl_.mobs_;
}
inline const ::network::TMobTable& DGBootPacket::_internal_mobs(int index) const {
  return _impl_.mobs_.Get(index);
}
inline const ::network::TMobTable& DGBootPacket::mobs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.mobs)
  return _internal_mobs(index);
}
inline ::network::TMobTable* DGBootPacket::_internal_add_mobs() {
  return _impl_.mobs_.Add();
}
inline ::network::TMobTable* DGBootPacket::add_mobs() {
  ::network::TMobTable* _add = _internal_add_mobs();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.mobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
DGBootPacket::mobs() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.mobs)
  return _impl_.mobs_;
}

// repeated .network.TItemTable items = 2;
inline int DGBootPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGBootPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemTable* DGBootPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >*
DGBootPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemTable& DGBootPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemTable& DGBootPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.items)
  return _internal_items(index);
}
inline ::network::TItemTable* DGBootPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemTable* DGBootPacket::add_items() {
  ::network::TItemTable* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >&
DGBootPacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.items)
  return _impl_.items_;
}

// repeated .network.TShopTable shops = 3;
inline int DGBootPacket::_internal_shops_size() const {
  return _impl_.shops_.size();
}
inline int DGBootPacket::shops_size() const {
  return _internal_shops_size();
}
inline ::network::TShopTable* DGBootPacket::mutable_shops(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.shops)
  return _impl_.shops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >*
DGBootPacket::mutable_shops() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.shops)
  return &_impl_.shops_;
}
inline const ::network::TShopTable& DGBootPacket::_internal_shops(int index) const {
  return _impl_.shops_.Get(index);
}
inline const ::network::TShopTable& DGBootPacket::shops(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.shops)
  return _internal_shops(index);
}
inline ::network::TShopTable* DGBootPacket::_internal_add_shops() {
  return _impl_.shops_.Add();
}
inline ::network::TShopTable* DGBootPacket::add_shops() {
  ::network::TShopTable* _add = _internal_add_shops();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.shops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >&
DGBootPacket::shops() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.shops)
  return _impl_.shops_;
}

// repeated .network.TSkillTable skills = 4;
inline int DGBootPacket::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int DGBootPacket::skills_size() const {
  return _internal_skills_size();
}
inline ::network::TSkillTable* DGBootPacket::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >*
DGBootPacket::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.skills)
  return &_impl_.skills_;
}
inline const ::network::TSkillTable& DGBootPacket::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::network::TSkillTable& DGBootPacket::skills(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.skills)
  return _internal_skills(index);
}
inline ::network::TSkillTable* DGBootPacket::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::network::TSkillTable* DGBootPacket::add_skills() {
  ::network::TSkillTable* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >&
DGBootPacket::skills() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.skills)
  return _impl_.skills_;
}

// repeated .network.TRefineTable refines = 5;
inline int DGBootPacket::_internal_refines_size() const {
  return _impl_.refines_.size();
}
inline int DGBootPacket::refines_size() const {
  return _internal_refines_size();
}
inline ::network::TRefineTable* DGBootPacket::mutable_refines(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.refines)
  return _impl_.refines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineTable >*
DGBootPacket::mutable_refines() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.refines)
  return &_impl_.refines_;
}
inline const ::network::TRefineTable& DGBootPacket::_internal_refines(int index) const {
  return _impl_.refines_.Get(index);
}
inline const ::network::TRefineTable& DGBootPacket::refines(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.refines)
  return _internal_refines(index);
}
inline ::network::TRefineTable* DGBootPacket::_internal_add_refines() {
  return _impl_.refines_.Add();
}
inline ::network::TRefineTable* DGBootPacket::add_refines() {
  ::network::TRefineTable* _add = _internal_add_refines();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.refines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineTable >&
DGBootPacket::refines() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.refines)
  return _impl_.refines_;
}

// repeated .network.TItemAttrTable attrs = 6;
inline int DGBootPacket::_internal_attrs_size() const {
  return _impl_.attrs_.size();
}
inline int DGBootPacket::attrs_size() const {
  return _internal_attrs_size();
}
inline ::network::TItemAttrTable* DGBootPacket::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.attrs)
  return _impl_.attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >*
DGBootPacket::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.attrs)
  return &_impl_.attrs_;
}
inline const ::network::TItemAttrTable& DGBootPacket::_internal_attrs(int index) const {
  return _impl_.attrs_.Get(index);
}
inline const ::network::TItemAttrTable& DGBootPacket::attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.attrs)
  return _internal_attrs(index);
}
inline ::network::TItemAttrTable* DGBootPacket::_internal_add_attrs() {
  return _impl_.attrs_.Add();
}
inline ::network::TItemAttrTable* DGBootPacket::add_attrs() {
  ::network::TItemAttrTable* _add = _internal_add_attrs();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >&
DGBootPacket::attrs() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.attrs)
  return _impl_.attrs_;
}

// repeated .network.TItemAttrTable rare_attrs = 7;
inline int DGBootPacket::_internal_rare_attrs_size() const {
  return _impl_.rare_attrs_.size();
}
inline int DGBootPacket::rare_attrs_size() const {
  return _internal_rare_attrs_size();
}
inline ::network::TItemAttrTable* DGBootPacket::mutable_rare_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.rare_attrs)
  return _impl_.rare_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >*
DGBootPacket::mutable_rare_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.rare_attrs)
  return &_impl_.rare_attrs_;
}
inline const ::network::TItemAttrTable& DGBootPacket::_internal_rare_attrs(int index) const {
  return _impl_.rare_attrs_.Get(index);
}
inline const ::network::TItemAttrTable& DGBootPacket::rare_attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.rare_attrs)
  return _internal_rare_attrs(index);
}
inline ::network::TItemAttrTable* DGBootPacket::_internal_add_rare_attrs() {
  return _impl_.rare_attrs_.Add();
}
inline ::network::TItemAttrTable* DGBootPacket::add_rare_attrs() {
  ::network::TItemAttrTable* _add = _internal_add_rare_attrs();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.rare_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >&
DGBootPacket::rare_attrs() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.rare_attrs)
  return _impl_.rare_attrs_;
}

// repeated .network.TItemAttrTable costume_attrs = 8;
inline int DGBootPacket::_internal_costume_attrs_size() const {
  return _impl_.costume_attrs_.size();
}
inline int DGBootPacket::costume_attrs_size() const {
  return _internal_costume_attrs_size();
}
inline ::network::TItemAttrTable* DGBootPacket::mutable_costume_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.costume_attrs)
  return _impl_.costume_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >*
DGBootPacket::mutable_costume_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.costume_attrs)
  return &_impl_.costume_attrs_;
}
inline const ::network::TItemAttrTable& DGBootPacket::_internal_costume_attrs(int index) const {
  return _impl_.costume_attrs_.Get(index);
}
inline const ::network::TItemAttrTable& DGBootPacket::costume_attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.costume_attrs)
  return _internal_costume_attrs(index);
}
inline ::network::TItemAttrTable* DGBootPacket::_internal_add_costume_attrs() {
  return _impl_.costume_attrs_.Add();
}
inline ::network::TItemAttrTable* DGBootPacket::add_costume_attrs() {
  ::network::TItemAttrTable* _add = _internal_add_costume_attrs();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.costume_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttrTable >&
DGBootPacket::costume_attrs() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.costume_attrs)
  return _impl_.costume_attrs_;
}

// repeated .network.TBuildingLand lands = 9;
inline int DGBootPacket::_internal_lands_size() const {
  return _impl_.lands_.size();
}
inline int DGBootPacket::lands_size() const {
  return _internal_lands_size();
}
inline ::network::TBuildingLand* DGBootPacket::mutable_lands(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.lands)
  return _impl_.lands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >*
DGBootPacket::mutable_lands() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.lands)
  return &_impl_.lands_;
}
inline const ::network::TBuildingLand& DGBootPacket::_internal_lands(int index) const {
  return _impl_.lands_.Get(index);
}
inline const ::network::TBuildingLand& DGBootPacket::lands(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.lands)
  return _internal_lands(index);
}
inline ::network::TBuildingLand* DGBootPacket::_internal_add_lands() {
  return _impl_.lands_.Add();
}
inline ::network::TBuildingLand* DGBootPacket::add_lands() {
  ::network::TBuildingLand* _add = _internal_add_lands();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.lands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >&
DGBootPacket::lands() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.lands)
  return _impl_.lands_;
}

// repeated .network.TBuildingObjectProto object_protos = 10;
inline int DGBootPacket::_internal_object_protos_size() const {
  return _impl_.object_protos_.size();
}
inline int DGBootPacket::object_protos_size() const {
  return _internal_object_protos_size();
}
inline ::network::TBuildingObjectProto* DGBootPacket::mutable_object_protos(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.object_protos)
  return _impl_.object_protos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectProto >*
DGBootPacket::mutable_object_protos() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.object_protos)
  return &_impl_.object_protos_;
}
inline const ::network::TBuildingObjectProto& DGBootPacket::_internal_object_protos(int index) const {
  return _impl_.object_protos_.Get(index);
}
inline const ::network::TBuildingObjectProto& DGBootPacket::object_protos(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.object_protos)
  return _internal_object_protos(index);
}
inline ::network::TBuildingObjectProto* DGBootPacket::_internal_add_object_protos() {
  return _impl_.object_protos_.Add();
}
inline ::network::TBuildingObjectProto* DGBootPacket::add_object_protos() {
  ::network::TBuildingObjectProto* _add = _internal_add_object_protos();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.object_protos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectProto >&
DGBootPacket::object_protos() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.object_protos)
  return _impl_.object_protos_;
}

// repeated .network.TBuildingObject objects = 11;
inline int DGBootPacket::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int DGBootPacket::objects_size() const {
  return _internal_objects_size();
}
inline ::network::TBuildingObject* DGBootPacket::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObject >*
DGBootPacket::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.objects)
  return &_impl_.objects_;
}
inline const ::network::TBuildingObject& DGBootPacket::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::network::TBuildingObject& DGBootPacket::objects(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.objects)
  return _internal_objects(index);
}
inline ::network::TBuildingObject* DGBootPacket::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::network::TBuildingObject* DGBootPacket::add_objects() {
  ::network::TBuildingObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObject >&
DGBootPacket::objects() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.objects)
  return _impl_.objects_;
}

// repeated .network.TGuildSafeboxInitial guild_safeboxes = 12;
inline int DGBootPacket::_internal_guild_safeboxes_size() const {
  return _impl_.guild_safeboxes_.size();
}
inline int DGBootPacket::guild_safeboxes_size() const {
  return _internal_guild_safeboxes_size();
}
inline ::network::TGuildSafeboxInitial* DGBootPacket::mutable_guild_safeboxes(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.guild_safeboxes)
  return _impl_.guild_safeboxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxInitial >*
DGBootPacket::mutable_guild_safeboxes() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.guild_safeboxes)
  return &_impl_.guild_safeboxes_;
}
inline const ::network::TGuildSafeboxInitial& DGBootPacket::_internal_guild_safeboxes(int index) const {
  return _impl_.guild_safeboxes_.Get(index);
}
inline const ::network::TGuildSafeboxInitial& DGBootPacket::guild_safeboxes(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.guild_safeboxes)
  return _internal_guild_safeboxes(index);
}
inline ::network::TGuildSafeboxInitial* DGBootPacket::_internal_add_guild_safeboxes() {
  return _impl_.guild_safeboxes_.Add();
}
inline ::network::TGuildSafeboxInitial* DGBootPacket::add_guild_safeboxes() {
  ::network::TGuildSafeboxInitial* _add = _internal_add_guild_safeboxes();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.guild_safeboxes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxInitial >&
DGBootPacket::guild_safeboxes() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.guild_safeboxes)
  return _impl_.guild_safeboxes_;
}

// repeated .network.THorseUpgradeProto horse_upgrades = 13;
inline int DGBootPacket::_internal_horse_upgrades_size() const {
  return _impl_.horse_upgrades_.size();
}
inline int DGBootPacket::horse_upgrades_size() const {
  return _internal_horse_upgrades_size();
}
inline ::network::THorseUpgradeProto* DGBootPacket::mutable_horse_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.horse_upgrades)
  return _impl_.horse_upgrades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseUpgradeProto >*
DGBootPacket::mutable_horse_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.horse_upgrades)
  return &_impl_.horse_upgrades_;
}
inline const ::network::THorseUpgradeProto& DGBootPacket::_internal_horse_upgrades(int index) const {
  return _impl_.horse_upgrades_.Get(index);
}
inline const ::network::THorseUpgradeProto& DGBootPacket::horse_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.horse_upgrades)
  return _internal_horse_upgrades(index);
}
inline ::network::THorseUpgradeProto* DGBootPacket::_internal_add_horse_upgrades() {
  return _impl_.horse_upgrades_.Add();
}
inline ::network::THorseUpgradeProto* DGBootPacket::add_horse_upgrades() {
  ::network::THorseUpgradeProto* _add = _internal_add_horse_upgrades();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.horse_upgrades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseUpgradeProto >&
DGBootPacket::horse_upgrades() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.horse_upgrades)
  return _impl_.horse_upgrades_;
}

// repeated .network.THorseBonusProto horse_boni = 14;
inline int DGBootPacket::_internal_horse_boni_size() const {
  return _impl_.horse_boni_.size();
}
inline int DGBootPacket::horse_boni_size() const {
  return _internal_horse_boni_size();
}
inline ::network::THorseBonusProto* DGBootPacket::mutable_horse_boni(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.horse_boni)
  return _impl_.horse_boni_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseBonusProto >*
DGBootPacket::mutable_horse_boni() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.horse_boni)
  return &_impl_.horse_boni_;
}
inline const ::network::THorseBonusProto& DGBootPacket::_internal_horse_boni(int index) const {
  return _impl_.horse_boni_.Get(index);
}
inline const ::network::THorseBonusProto& DGBootPacket::horse_boni(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.horse_boni)
  return _internal_horse_boni(index);
}
inline ::network::THorseBonusProto* DGBootPacket::_internal_add_horse_boni() {
  return _impl_.horse_boni_.Add();
}
inline ::network::THorseBonusProto* DGBootPacket::add_horse_boni() {
  ::network::THorseBonusProto* _add = _internal_add_horse_boni();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.horse_boni)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::THorseBonusProto >&
DGBootPacket::horse_boni() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.horse_boni)
  return _impl_.horse_boni_;
}

// repeated .network.TGayaShopData gaya_shops = 16;
inline int DGBootPacket::_internal_gaya_shops_size() const {
  return _impl_.gaya_shops_.size();
}
inline int DGBootPacket::gaya_shops_size() const {
  return _internal_gaya_shops_size();
}
inline ::network::TGayaShopData* DGBootPacket::mutable_gaya_shops(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.gaya_shops)
  return _impl_.gaya_shops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >*
DGBootPacket::mutable_gaya_shops() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.gaya_shops)
  return &_impl_.gaya_shops_;
}
inline const ::network::TGayaShopData& DGBootPacket::_internal_gaya_shops(int index) const {
  return _impl_.gaya_shops_.Get(index);
}
inline const ::network::TGayaShopData& DGBootPacket::gaya_shops(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.gaya_shops)
  return _internal_gaya_shops(index);
}
inline ::network::TGayaShopData* DGBootPacket::_internal_add_gaya_shops() {
  return _impl_.gaya_shops_.Add();
}
inline ::network::TGayaShopData* DGBootPacket::add_gaya_shops() {
  ::network::TGayaShopData* _add = _internal_add_gaya_shops();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.gaya_shops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >&
DGBootPacket::gaya_shops() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.gaya_shops)
  return _impl_.gaya_shops_;
}

// repeated .network.TAttrtreeProto attrtrees = 17;
inline int DGBootPacket::_internal_attrtrees_size() const {
  return _impl_.attrtrees_.size();
}
inline int DGBootPacket::attrtrees_size() const {
  return _internal_attrtrees_size();
}
inline ::network::TAttrtreeProto* DGBootPacket::mutable_attrtrees(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.attrtrees)
  return _impl_.attrtrees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAttrtreeProto >*
DGBootPacket::mutable_attrtrees() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.attrtrees)
  return &_impl_.attrtrees_;
}
inline const ::network::TAttrtreeProto& DGBootPacket::_internal_attrtrees(int index) const {
  return _impl_.attrtrees_.Get(index);
}
inline const ::network::TAttrtreeProto& DGBootPacket::attrtrees(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.attrtrees)
  return _internal_attrtrees(index);
}
inline ::network::TAttrtreeProto* DGBootPacket::_internal_add_attrtrees() {
  return _impl_.attrtrees_.Add();
}
inline ::network::TAttrtreeProto* DGBootPacket::add_attrtrees() {
  ::network::TAttrtreeProto* _add = _internal_add_attrtrees();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.attrtrees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAttrtreeProto >&
DGBootPacket::attrtrees() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.attrtrees)
  return _impl_.attrtrees_;
}

// repeated .network.TRuneProtoTable runes = 18;
inline int DGBootPacket::_internal_runes_size() const {
  return _impl_.runes_.size();
}
inline int DGBootPacket::runes_size() const {
  return _internal_runes_size();
}
inline ::network::TRuneProtoTable* DGBootPacket::mutable_runes(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.runes)
  return _impl_.runes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRuneProtoTable >*
DGBootPacket::mutable_runes() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.runes)
  return &_impl_.runes_;
}
inline const ::network::TRuneProtoTable& DGBootPacket::_internal_runes(int index) const {
  return _impl_.runes_.Get(index);
}
inline const ::network::TRuneProtoTable& DGBootPacket::runes(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.runes)
  return _internal_runes(index);
}
inline ::network::TRuneProtoTable* DGBootPacket::_internal_add_runes() {
  return _impl_.runes_.Add();
}
inline ::network::TRuneProtoTable* DGBootPacket::add_runes() {
  ::network::TRuneProtoTable* _add = _internal_add_runes();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.runes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRuneProtoTable >&
DGBootPacket::runes() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.runes)
  return _impl_.runes_;
}

// repeated .network.TRunePointProtoTable rune_points = 19;
inline int DGBootPacket::_internal_rune_points_size() const {
  return _impl_.rune_points_.size();
}
inline int DGBootPacket::rune_points_size() const {
  return _internal_rune_points_size();
}
inline ::network::TRunePointProtoTable* DGBootPacket::mutable_rune_points(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.rune_points)
  return _impl_.rune_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRunePointProtoTable >*
DGBootPacket::mutable_rune_points() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.rune_points)
  return &_impl_.rune_points_;
}
inline const ::network::TRunePointProtoTable& DGBootPacket::_internal_rune_points(int index) const {
  return _impl_.rune_points_.Get(index);
}
inline const ::network::TRunePointProtoTable& DGBootPacket::rune_points(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.rune_points)
  return _internal_rune_points(index);
}
inline ::network::TRunePointProtoTable* DGBootPacket::_internal_add_rune_points() {
  return _impl_.rune_points_.Add();
}
inline ::network::TRunePointProtoTable* DGBootPacket::add_rune_points() {
  ::network::TRunePointProtoTable* _add = _internal_add_rune_points();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.rune_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRunePointProtoTable >&
DGBootPacket::rune_points() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.rune_points)
  return _impl_.rune_points_;
}

// repeated .network.TXmasRewards xmas_rewards = 20;
inline int DGBootPacket::_internal_xmas_rewards_size() const {
  return _impl_.xmas_rewards_.size();
}
inline int DGBootPacket::xmas_rewards_size() const {
  return _internal_xmas_rewards_size();
}
inline ::network::TXmasRewards* DGBootPacket::mutable_xmas_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.xmas_rewards)
  return _impl_.xmas_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >*
DGBootPacket::mutable_xmas_rewards() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.xmas_rewards)
  return &_impl_.xmas_rewards_;
}
inline const ::network::TXmasRewards& DGBootPacket::_internal_xmas_rewards(int index) const {
  return _impl_.xmas_rewards_.Get(index);
}
inline const ::network::TXmasRewards& DGBootPacket::xmas_rewards(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.xmas_rewards)
  return _internal_xmas_rewards(index);
}
inline ::network::TXmasRewards* DGBootPacket::_internal_add_xmas_rewards() {
  return _impl_.xmas_rewards_.Add();
}
inline ::network::TXmasRewards* DGBootPacket::add_xmas_rewards() {
  ::network::TXmasRewards* _add = _internal_add_xmas_rewards();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.xmas_rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >&
DGBootPacket::xmas_rewards() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.xmas_rewards)
  return _impl_.xmas_rewards_;
}

// repeated .network.TSoulProtoTable soul_protos = 21;
inline int DGBootPacket::_internal_soul_protos_size() const {
  return _impl_.soul_protos_.size();
}
inline int DGBootPacket::soul_protos_size() const {
  return _internal_soul_protos_size();
}
inline ::network::TSoulProtoTable* DGBootPacket::mutable_soul_protos(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.soul_protos)
  return _impl_.soul_protos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >*
DGBootPacket::mutable_soul_protos() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.soul_protos)
  return &_impl_.soul_protos_;
}
inline const ::network::TSoulProtoTable& DGBootPacket::_internal_soul_protos(int index) const {
  return _impl_.soul_protos_.Get(index);
}
inline const ::network::TSoulProtoTable& DGBootPacket::soul_protos(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.soul_protos)
  return _internal_soul_protos(index);
}
inline ::network::TSoulProtoTable* DGBootPacket::_internal_add_soul_protos() {
  return _impl_.soul_protos_.Add();
}
inline ::network::TSoulProtoTable* DGBootPacket::add_soul_protos() {
  ::network::TSoulProtoTable* _add = _internal_add_soul_protos();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.soul_protos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >&
DGBootPacket::soul_protos() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.soul_protos)
  return _impl_.soul_protos_;
}

// .network.TItemIDRangeTable item_id_range = 22;
inline bool DGBootPacket::_internal_has_item_id_range() const {
  return this != internal_default_instance() && _impl_.item_id_range_ != nullptr;
}
inline bool DGBootPacket::has_item_id_range() const {
  return _internal_has_item_id_range();
}
inline const ::network::TItemIDRangeTable& DGBootPacket::_internal_item_id_range() const {
  const ::network::TItemIDRangeTable* p = _impl_.item_id_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemIDRangeTable&>(
      ::network::_TItemIDRangeTable_default_instance_);
}
inline const ::network::TItemIDRangeTable& DGBootPacket::item_id_range() const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.item_id_range)
  return _internal_item_id_range();
}
inline void DGBootPacket::unsafe_arena_set_allocated_item_id_range(
    ::network::TItemIDRangeTable* item_id_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_range_);
  }
  _impl_.item_id_range_ = item_id_range;
  if (item_id_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGBootPacket.item_id_range)
}
inline ::network::TItemIDRangeTable* DGBootPacket::release_item_id_range() {
  
  ::network::TItemIDRangeTable* temp = _impl_.item_id_range_;
  _impl_.item_id_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemIDRangeTable* DGBootPacket::unsafe_arena_release_item_id_range() {
  // @@protoc_insertion_point(field_release:network.DGBootPacket.item_id_range)
  
  ::network::TItemIDRangeTable* temp = _impl_.item_id_range_;
  _impl_.item_id_range_ = nullptr;
  return temp;
}
inline ::network::TItemIDRangeTable* DGBootPacket::_internal_mutable_item_id_range() {
  
  if (_impl_.item_id_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemIDRangeTable>(GetArenaForAllocation());
    _impl_.item_id_range_ = p;
  }
  return _impl_.item_id_range_;
}
inline ::network::TItemIDRangeTable* DGBootPacket::mutable_item_id_range() {
  ::network::TItemIDRangeTable* _msg = _internal_mutable_item_id_range();
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.item_id_range)
  return _msg;
}
inline void DGBootPacket::set_allocated_item_id_range(::network::TItemIDRangeTable* item_id_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_range_);
  }
  if (item_id_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_id_range));
    if (message_arena != submessage_arena) {
      item_id_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_id_range, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_id_range_ = item_id_range;
  // @@protoc_insertion_point(field_set_allocated:network.DGBootPacket.item_id_range)
}

// .network.TItemIDRangeTable item_id_range_spare = 23;
inline bool DGBootPacket::_internal_has_item_id_range_spare() const {
  return this != internal_default_instance() && _impl_.item_id_range_spare_ != nullptr;
}
inline bool DGBootPacket::has_item_id_range_spare() const {
  return _internal_has_item_id_range_spare();
}
inline const ::network::TItemIDRangeTable& DGBootPacket::_internal_item_id_range_spare() const {
  const ::network::TItemIDRangeTable* p = _impl_.item_id_range_spare_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemIDRangeTable&>(
      ::network::_TItemIDRangeTable_default_instance_);
}
inline const ::network::TItemIDRangeTable& DGBootPacket::item_id_range_spare() const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.item_id_range_spare)
  return _internal_item_id_range_spare();
}
inline void DGBootPacket::unsafe_arena_set_allocated_item_id_range_spare(
    ::network::TItemIDRangeTable* item_id_range_spare) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_range_spare_);
  }
  _impl_.item_id_range_spare_ = item_id_range_spare;
  if (item_id_range_spare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGBootPacket.item_id_range_spare)
}
inline ::network::TItemIDRangeTable* DGBootPacket::release_item_id_range_spare() {
  
  ::network::TItemIDRangeTable* temp = _impl_.item_id_range_spare_;
  _impl_.item_id_range_spare_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemIDRangeTable* DGBootPacket::unsafe_arena_release_item_id_range_spare() {
  // @@protoc_insertion_point(field_release:network.DGBootPacket.item_id_range_spare)
  
  ::network::TItemIDRangeTable* temp = _impl_.item_id_range_spare_;
  _impl_.item_id_range_spare_ = nullptr;
  return temp;
}
inline ::network::TItemIDRangeTable* DGBootPacket::_internal_mutable_item_id_range_spare() {
  
  if (_impl_.item_id_range_spare_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemIDRangeTable>(GetArenaForAllocation());
    _impl_.item_id_range_spare_ = p;
  }
  return _impl_.item_id_range_spare_;
}
inline ::network::TItemIDRangeTable* DGBootPacket::mutable_item_id_range_spare() {
  ::network::TItemIDRangeTable* _msg = _internal_mutable_item_id_range_spare();
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.item_id_range_spare)
  return _msg;
}
inline void DGBootPacket::set_allocated_item_id_range_spare(::network::TItemIDRangeTable* item_id_range_spare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_range_spare_);
  }
  if (item_id_range_spare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_id_range_spare));
    if (message_arena != submessage_arena) {
      item_id_range_spare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_id_range_spare, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_id_range_spare_ = item_id_range_spare;
  // @@protoc_insertion_point(field_set_allocated:network.DGBootPacket.item_id_range_spare)
}

// repeated .network.TAdminInfo admins = 24;
inline int DGBootPacket::_internal_admins_size() const {
  return _impl_.admins_.size();
}
inline int DGBootPacket::admins_size() const {
  return _internal_admins_size();
}
inline ::network::TAdminInfo* DGBootPacket::mutable_admins(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.admins)
  return _impl_.admins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >*
DGBootPacket::mutable_admins() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.admins)
  return &_impl_.admins_;
}
inline const ::network::TAdminInfo& DGBootPacket::_internal_admins(int index) const {
  return _impl_.admins_.Get(index);
}
inline const ::network::TAdminInfo& DGBootPacket::admins(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.admins)
  return _internal_admins(index);
}
inline ::network::TAdminInfo* DGBootPacket::_internal_add_admins() {
  return _impl_.admins_.Add();
}
inline ::network::TAdminInfo* DGBootPacket::add_admins() {
  ::network::TAdminInfo* _add = _internal_add_admins();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.admins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >&
DGBootPacket::admins() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.admins)
  return _impl_.admins_;
}

// repeated uint32 admin_configs = 25;
inline int DGBootPacket::_internal_admin_configs_size() const {
  return _impl_.admin_configs_.size();
}
inline int DGBootPacket::admin_configs_size() const {
  return _internal_admin_configs_size();
}
inline void DGBootPacket::clear_admin_configs() {
  _impl_.admin_configs_.Clear();
}
inline uint32_t DGBootPacket::_internal_admin_configs(int index) const {
  return _impl_.admin_configs_.Get(index);
}
inline uint32_t DGBootPacket::admin_configs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.admin_configs)
  return _internal_admin_configs(index);
}
inline void DGBootPacket::set_admin_configs(int index, uint32_t value) {
  _impl_.admin_configs_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGBootPacket.admin_configs)
}
inline void DGBootPacket::_internal_add_admin_configs(uint32_t value) {
  _impl_.admin_configs_.Add(value);
}
inline void DGBootPacket::add_admin_configs(uint32_t value) {
  _internal_add_admin_configs(value);
  // @@protoc_insertion_point(field_add:network.DGBootPacket.admin_configs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBootPacket::_internal_admin_configs() const {
  return _impl_.admin_configs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBootPacket::admin_configs() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.admin_configs)
  return _internal_admin_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBootPacket::_internal_mutable_admin_configs() {
  return &_impl_.admin_configs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBootPacket::mutable_admin_configs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.admin_configs)
  return _internal_mutable_admin_configs();
}

// uint32 current_time = 26;
inline void DGBootPacket::clear_current_time() {
  _impl_.current_time_ = 0u;
}
inline uint32_t DGBootPacket::_internal_current_time() const {
  return _impl_.current_time_;
}
inline uint32_t DGBootPacket::current_time() const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.current_time)
  return _internal_current_time();
}
inline void DGBootPacket::_internal_set_current_time(uint32_t value) {
  
  _impl_.current_time_ = value;
}
inline void DGBootPacket::set_current_time(uint32_t value) {
  _internal_set_current_time(value);
  // @@protoc_insertion_point(field_set:network.DGBootPacket.current_time)
}

// repeated .network.TPetAdvancedSkillProto pet_skills = 27;
inline int DGBootPacket::_internal_pet_skills_size() const {
  return _impl_.pet_skills_.size();
}
inline int DGBootPacket::pet_skills_size() const {
  return _internal_pet_skills_size();
}
inline ::network::TPetAdvancedSkillProto* DGBootPacket::mutable_pet_skills(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.pet_skills)
  return _impl_.pet_skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >*
DGBootPacket::mutable_pet_skills() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.pet_skills)
  return &_impl_.pet_skills_;
}
inline const ::network::TPetAdvancedSkillProto& DGBootPacket::_internal_pet_skills(int index) const {
  return _impl_.pet_skills_.Get(index);
}
inline const ::network::TPetAdvancedSkillProto& DGBootPacket::pet_skills(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.pet_skills)
  return _internal_pet_skills(index);
}
inline ::network::TPetAdvancedSkillProto* DGBootPacket::_internal_add_pet_skills() {
  return _impl_.pet_skills_.Add();
}
inline ::network::TPetAdvancedSkillProto* DGBootPacket::add_pet_skills() {
  ::network::TPetAdvancedSkillProto* _add = _internal_add_pet_skills();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.pet_skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >&
DGBootPacket::pet_skills() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.pet_skills)
  return _impl_.pet_skills_;
}

// repeated .network.TPetAdvancedEvolveProto pet_evolves = 28;
inline int DGBootPacket::_internal_pet_evolves_size() const {
  return _impl_.pet_evolves_.size();
}
inline int DGBootPacket::pet_evolves_size() const {
  return _internal_pet_evolves_size();
}
inline ::network::TPetAdvancedEvolveProto* DGBootPacket::mutable_pet_evolves(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.pet_evolves)
  return _impl_.pet_evolves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >*
DGBootPacket::mutable_pet_evolves() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.pet_evolves)
  return &_impl_.pet_evolves_;
}
inline const ::network::TPetAdvancedEvolveProto& DGBootPacket::_internal_pet_evolves(int index) const {
  return _impl_.pet_evolves_.Get(index);
}
inline const ::network::TPetAdvancedEvolveProto& DGBootPacket::pet_evolves(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.pet_evolves)
  return _internal_pet_evolves(index);
}
inline ::network::TPetAdvancedEvolveProto* DGBootPacket::_internal_add_pet_evolves() {
  return _impl_.pet_evolves_.Add();
}
inline ::network::TPetAdvancedEvolveProto* DGBootPacket::add_pet_evolves() {
  ::network::TPetAdvancedEvolveProto* _add = _internal_add_pet_evolves();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.pet_evolves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >&
DGBootPacket::pet_evolves() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.pet_evolves)
  return _impl_.pet_evolves_;
}

// repeated .network.TPetAdvancedAttrProto pet_attrs = 29;
inline int DGBootPacket::_internal_pet_attrs_size() const {
  return _impl_.pet_attrs_.size();
}
inline int DGBootPacket::pet_attrs_size() const {
  return _internal_pet_attrs_size();
}
inline ::network::TPetAdvancedAttrProto* DGBootPacket::mutable_pet_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.pet_attrs)
  return _impl_.pet_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >*
DGBootPacket::mutable_pet_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.pet_attrs)
  return &_impl_.pet_attrs_;
}
inline const ::network::TPetAdvancedAttrProto& DGBootPacket::_internal_pet_attrs(int index) const {
  return _impl_.pet_attrs_.Get(index);
}
inline const ::network::TPetAdvancedAttrProto& DGBootPacket::pet_attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.pet_attrs)
  return _internal_pet_attrs(index);
}
inline ::network::TPetAdvancedAttrProto* DGBootPacket::_internal_add_pet_attrs() {
  return _impl_.pet_attrs_.Add();
}
inline ::network::TPetAdvancedAttrProto* DGBootPacket::add_pet_attrs() {
  ::network::TPetAdvancedAttrProto* _add = _internal_add_pet_attrs();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.pet_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >&
DGBootPacket::pet_attrs() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.pet_attrs)
  return _impl_.pet_attrs_;
}

// repeated .network.TCrystalProto crystal_protos = 30;
inline int DGBootPacket::_internal_crystal_protos_size() const {
  return _impl_.crystal_protos_.size();
}
inline int DGBootPacket::crystal_protos_size() const {
  return _internal_crystal_protos_size();
}
inline ::network::TCrystalProto* DGBootPacket::mutable_crystal_protos(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBootPacket.crystal_protos)
  return _impl_.crystal_protos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCrystalProto >*
DGBootPacket::mutable_crystal_protos() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBootPacket.crystal_protos)
  return &_impl_.crystal_protos_;
}
inline const ::network::TCrystalProto& DGBootPacket::_internal_crystal_protos(int index) const {
  return _impl_.crystal_protos_.Get(index);
}
inline const ::network::TCrystalProto& DGBootPacket::crystal_protos(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBootPacket.crystal_protos)
  return _internal_crystal_protos(index);
}
inline ::network::TCrystalProto* DGBootPacket::_internal_add_crystal_protos() {
  return _impl_.crystal_protos_.Add();
}
inline ::network::TCrystalProto* DGBootPacket::add_crystal_protos() {
  ::network::TCrystalProto* _add = _internal_add_crystal_protos();
  // @@protoc_insertion_point(field_add:network.DGBootPacket.crystal_protos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCrystalProto >&
DGBootPacket::crystal_protos() const {
  // @@protoc_insertion_point(field_list:network.DGBootPacket.crystal_protos)
  return _impl_.crystal_protos_;
}

// -------------------------------------------------------------------

// DGMapLocationsPacket

// repeated .network.TMapLocation maps = 1;
inline int DGMapLocationsPacket::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int DGMapLocationsPacket::maps_size() const {
  return _internal_maps_size();
}
inline ::network::TMapLocation* DGMapLocationsPacket::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGMapLocationsPacket.maps)
  return _impl_.maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMapLocation >*
DGMapLocationsPacket::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:network.DGMapLocationsPacket.maps)
  return &_impl_.maps_;
}
inline const ::network::TMapLocation& DGMapLocationsPacket::_internal_maps(int index) const {
  return _impl_.maps_.Get(index);
}
inline const ::network::TMapLocation& DGMapLocationsPacket::maps(int index) const {
  // @@protoc_insertion_point(field_get:network.DGMapLocationsPacket.maps)
  return _internal_maps(index);
}
inline ::network::TMapLocation* DGMapLocationsPacket::_internal_add_maps() {
  return _impl_.maps_.Add();
}
inline ::network::TMapLocation* DGMapLocationsPacket::add_maps() {
  ::network::TMapLocation* _add = _internal_add_maps();
  // @@protoc_insertion_point(field_add:network.DGMapLocationsPacket.maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMapLocation >&
DGMapLocationsPacket::maps() const {
  // @@protoc_insertion_point(field_list:network.DGMapLocationsPacket.maps)
  return _impl_.maps_;
}

// -------------------------------------------------------------------

// DGLoginSuccessPacket

// .network.TAccountTable account_info = 1;
inline bool DGLoginSuccessPacket::_internal_has_account_info() const {
  return this != internal_default_instance() && _impl_.account_info_ != nullptr;
}
inline bool DGLoginSuccessPacket::has_account_info() const {
  return _internal_has_account_info();
}
inline const ::network::TAccountTable& DGLoginSuccessPacket::_internal_account_info() const {
  const ::network::TAccountTable* p = _impl_.account_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TAccountTable&>(
      ::network::_TAccountTable_default_instance_);
}
inline const ::network::TAccountTable& DGLoginSuccessPacket::account_info() const {
  // @@protoc_insertion_point(field_get:network.DGLoginSuccessPacket.account_info)
  return _internal_account_info();
}
inline void DGLoginSuccessPacket::unsafe_arena_set_allocated_account_info(
    ::network::TAccountTable* account_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_info_);
  }
  _impl_.account_info_ = account_info;
  if (account_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGLoginSuccessPacket.account_info)
}
inline ::network::TAccountTable* DGLoginSuccessPacket::release_account_info() {
  
  ::network::TAccountTable* temp = _impl_.account_info_;
  _impl_.account_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TAccountTable* DGLoginSuccessPacket::unsafe_arena_release_account_info() {
  // @@protoc_insertion_point(field_release:network.DGLoginSuccessPacket.account_info)
  
  ::network::TAccountTable* temp = _impl_.account_info_;
  _impl_.account_info_ = nullptr;
  return temp;
}
inline ::network::TAccountTable* DGLoginSuccessPacket::_internal_mutable_account_info() {
  
  if (_impl_.account_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TAccountTable>(GetArenaForAllocation());
    _impl_.account_info_ = p;
  }
  return _impl_.account_info_;
}
inline ::network::TAccountTable* DGLoginSuccessPacket::mutable_account_info() {
  ::network::TAccountTable* _msg = _internal_mutable_account_info();
  // @@protoc_insertion_point(field_mutable:network.DGLoginSuccessPacket.account_info)
  return _msg;
}
inline void DGLoginSuccessPacket::set_allocated_account_info(::network::TAccountTable* account_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_info_);
  }
  if (account_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_info));
    if (message_arena != submessage_arena) {
      account_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_info_ = account_info;
  // @@protoc_insertion_point(field_set_allocated:network.DGLoginSuccessPacket.account_info)
}

// -------------------------------------------------------------------

// DGPlayerCreateSuccessPacket

// uint32 account_index = 1;
inline void DGPlayerCreateSuccessPacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t DGPlayerCreateSuccessPacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t DGPlayerCreateSuccessPacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.DGPlayerCreateSuccessPacket.account_index)
  return _internal_account_index();
}
inline void DGPlayerCreateSuccessPacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void DGPlayerCreateSuccessPacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.DGPlayerCreateSuccessPacket.account_index)
}

// .network.TSimplePlayer player = 2;
inline bool DGPlayerCreateSuccessPacket::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool DGPlayerCreateSuccessPacket::has_player() const {
  return _internal_has_player();
}
inline const ::network::TSimplePlayer& DGPlayerCreateSuccessPacket::_internal_player() const {
  const ::network::TSimplePlayer* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TSimplePlayer&>(
      ::network::_TSimplePlayer_default_instance_);
}
inline const ::network::TSimplePlayer& DGPlayerCreateSuccessPacket::player() const {
  // @@protoc_insertion_point(field_get:network.DGPlayerCreateSuccessPacket.player)
  return _internal_player();
}
inline void DGPlayerCreateSuccessPacket::unsafe_arena_set_allocated_player(
    ::network::TSimplePlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGPlayerCreateSuccessPacket.player)
}
inline ::network::TSimplePlayer* DGPlayerCreateSuccessPacket::release_player() {
  
  ::network::TSimplePlayer* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TSimplePlayer* DGPlayerCreateSuccessPacket::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:network.DGPlayerCreateSuccessPacket.player)
  
  ::network::TSimplePlayer* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::network::TSimplePlayer* DGPlayerCreateSuccessPacket::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TSimplePlayer>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::network::TSimplePlayer* DGPlayerCreateSuccessPacket::mutable_player() {
  ::network::TSimplePlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:network.DGPlayerCreateSuccessPacket.player)
  return _msg;
}
inline void DGPlayerCreateSuccessPacket::set_allocated_player(::network::TSimplePlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:network.DGPlayerCreateSuccessPacket.player)
}

// -------------------------------------------------------------------

// DGPlayerDeleteSuccessPacket

// uint32 account_index = 1;
inline void DGPlayerDeleteSuccessPacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t DGPlayerDeleteSuccessPacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t DGPlayerDeleteSuccessPacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.DGPlayerDeleteSuccessPacket.account_index)
  return _internal_account_index();
}
inline void DGPlayerDeleteSuccessPacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void DGPlayerDeleteSuccessPacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.DGPlayerDeleteSuccessPacket.account_index)
}

// -------------------------------------------------------------------

// DGPlayerLoadPacket

// .TPlayerTable player = 1;
inline bool DGPlayerLoadPacket::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool DGPlayerLoadPacket::has_player() const {
  return _internal_has_player();
}
inline const ::TPlayerTable& DGPlayerLoadPacket::_internal_player() const {
  const ::TPlayerTable* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::TPlayerTable&>(
      ::_TPlayerTable_default_instance_);
}
inline const ::TPlayerTable& DGPlayerLoadPacket::player() const {
  // @@protoc_insertion_point(field_get:network.DGPlayerLoadPacket.player)
  return _internal_player();
}
inline void DGPlayerLoadPacket::unsafe_arena_set_allocated_player(
    ::TPlayerTable* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGPlayerLoadPacket.player)
}
inline ::TPlayerTable* DGPlayerLoadPacket::release_player() {
  
  ::TPlayerTable* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TPlayerTable* DGPlayerLoadPacket::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:network.DGPlayerLoadPacket.player)
  
  ::TPlayerTable* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::TPlayerTable* DGPlayerLoadPacket::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::TPlayerTable>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::TPlayerTable* DGPlayerLoadPacket::mutable_player() {
  ::TPlayerTable* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:network.DGPlayerLoadPacket.player)
  return _msg;
}
inline void DGPlayerLoadPacket::set_allocated_player(::TPlayerTable* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:network.DGPlayerLoadPacket.player)
}

// -------------------------------------------------------------------

// DGPlayerSkillLoadPacket

// uint32 pid = 1;
inline void DGPlayerSkillLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGPlayerSkillLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGPlayerSkillLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGPlayerSkillLoadPacket.pid)
  return _internal_pid();
}
inline void DGPlayerSkillLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGPlayerSkillLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPlayerSkillLoadPacket.pid)
}

// repeated .TPlayerSkill skills = 2;
inline int DGPlayerSkillLoadPacket::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int DGPlayerSkillLoadPacket::skills_size() const {
  return _internal_skills_size();
}
inline ::TPlayerSkill* DGPlayerSkillLoadPacket::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGPlayerSkillLoadPacket.skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >*
DGPlayerSkillLoadPacket::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:network.DGPlayerSkillLoadPacket.skills)
  return &_impl_.skills_;
}
inline const ::TPlayerSkill& DGPlayerSkillLoadPacket::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::TPlayerSkill& DGPlayerSkillLoadPacket::skills(int index) const {
  // @@protoc_insertion_point(field_get:network.DGPlayerSkillLoadPacket.skills)
  return _internal_skills(index);
}
inline ::TPlayerSkill* DGPlayerSkillLoadPacket::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::TPlayerSkill* DGPlayerSkillLoadPacket::add_skills() {
  ::TPlayerSkill* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:network.DGPlayerSkillLoadPacket.skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >&
DGPlayerSkillLoadPacket::skills() const {
  // @@protoc_insertion_point(field_list:network.DGPlayerSkillLoadPacket.skills)
  return _impl_.skills_;
}

// -------------------------------------------------------------------

// DGItemLoadPacket

// uint32 pid = 1;
inline void DGItemLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGItemLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGItemLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGItemLoadPacket.pid)
  return _internal_pid();
}
inline void DGItemLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGItemLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGItemLoadPacket.pid)
}

// repeated .network.TItemData items = 2;
inline int DGItemLoadPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGItemLoadPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* DGItemLoadPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGItemLoadPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
DGItemLoadPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGItemLoadPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& DGItemLoadPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& DGItemLoadPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGItemLoadPacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* DGItemLoadPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* DGItemLoadPacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGItemLoadPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
DGItemLoadPacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGItemLoadPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// DGPetLoadPacket

// repeated .network.TPetAdvancedTable pets = 1;
inline int DGPetLoadPacket::_internal_pets_size() const {
  return _impl_.pets_.size();
}
inline int DGPetLoadPacket::pets_size() const {
  return _internal_pets_size();
}
inline ::network::TPetAdvancedTable* DGPetLoadPacket::mutable_pets(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGPetLoadPacket.pets)
  return _impl_.pets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedTable >*
DGPetLoadPacket::mutable_pets() {
  // @@protoc_insertion_point(field_mutable_list:network.DGPetLoadPacket.pets)
  return &_impl_.pets_;
}
inline const ::network::TPetAdvancedTable& DGPetLoadPacket::_internal_pets(int index) const {
  return _impl_.pets_.Get(index);
}
inline const ::network::TPetAdvancedTable& DGPetLoadPacket::pets(int index) const {
  // @@protoc_insertion_point(field_get:network.DGPetLoadPacket.pets)
  return _internal_pets(index);
}
inline ::network::TPetAdvancedTable* DGPetLoadPacket::_internal_add_pets() {
  return _impl_.pets_.Add();
}
inline ::network::TPetAdvancedTable* DGPetLoadPacket::add_pets() {
  ::network::TPetAdvancedTable* _add = _internal_add_pets();
  // @@protoc_insertion_point(field_add:network.DGPetLoadPacket.pets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedTable >&
DGPetLoadPacket::pets() const {
  // @@protoc_insertion_point(field_list:network.DGPetLoadPacket.pets)
  return _impl_.pets_;
}

// -------------------------------------------------------------------

// DGQuestLoadPacket

// uint32 pid = 1;
inline void DGQuestLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGQuestLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGQuestLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGQuestLoadPacket.pid)
  return _internal_pid();
}
inline void DGQuestLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGQuestLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGQuestLoadPacket.pid)
}

// repeated .TQuestTable quests = 2;
inline int DGQuestLoadPacket::_internal_quests_size() const {
  return _impl_.quests_.size();
}
inline int DGQuestLoadPacket::quests_size() const {
  return _internal_quests_size();
}
inline ::TQuestTable* DGQuestLoadPacket::mutable_quests(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGQuestLoadPacket.quests)
  return _impl_.quests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >*
DGQuestLoadPacket::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:network.DGQuestLoadPacket.quests)
  return &_impl_.quests_;
}
inline const ::TQuestTable& DGQuestLoadPacket::_internal_quests(int index) const {
  return _impl_.quests_.Get(index);
}
inline const ::TQuestTable& DGQuestLoadPacket::quests(int index) const {
  // @@protoc_insertion_point(field_get:network.DGQuestLoadPacket.quests)
  return _internal_quests(index);
}
inline ::TQuestTable* DGQuestLoadPacket::_internal_add_quests() {
  return _impl_.quests_.Add();
}
inline ::TQuestTable* DGQuestLoadPacket::add_quests() {
  ::TQuestTable* _add = _internal_add_quests();
  // @@protoc_insertion_point(field_add:network.DGQuestLoadPacket.quests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >&
DGQuestLoadPacket::quests() const {
  // @@protoc_insertion_point(field_list:network.DGQuestLoadPacket.quests)
  return _impl_.quests_;
}

// -------------------------------------------------------------------

// DGAffectLoadPacket

// uint32 pid = 1;
inline void DGAffectLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGAffectLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGAffectLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGAffectLoadPacket.pid)
  return _internal_pid();
}
inline void DGAffectLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGAffectLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGAffectLoadPacket.pid)
}

// repeated .TPacketAffectElement affects = 2;
inline int DGAffectLoadPacket::_internal_affects_size() const {
  return _impl_.affects_.size();
}
inline int DGAffectLoadPacket::affects_size() const {
  return _internal_affects_size();
}
inline ::TPacketAffectElement* DGAffectLoadPacket::mutable_affects(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGAffectLoadPacket.affects)
  return _impl_.affects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPacketAffectElement >*
DGAffectLoadPacket::mutable_affects() {
  // @@protoc_insertion_point(field_mutable_list:network.DGAffectLoadPacket.affects)
  return &_impl_.affects_;
}
inline const ::TPacketAffectElement& DGAffectLoadPacket::_internal_affects(int index) const {
  return _impl_.affects_.Get(index);
}
inline const ::TPacketAffectElement& DGAffectLoadPacket::affects(int index) const {
  // @@protoc_insertion_point(field_get:network.DGAffectLoadPacket.affects)
  return _internal_affects(index);
}
inline ::TPacketAffectElement* DGAffectLoadPacket::_internal_add_affects() {
  return _impl_.affects_.Add();
}
inline ::TPacketAffectElement* DGAffectLoadPacket::add_affects() {
  ::TPacketAffectElement* _add = _internal_add_affects();
  // @@protoc_insertion_point(field_add:network.DGAffectLoadPacket.affects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPacketAffectElement >&
DGAffectLoadPacket::affects() const {
  // @@protoc_insertion_point(field_list:network.DGAffectLoadPacket.affects)
  return _impl_.affects_;
}

// -------------------------------------------------------------------

// DGSafeboxLoadPacket

// uint32 account_id = 1;
inline void DGSafeboxLoadPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t DGSafeboxLoadPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t DGSafeboxLoadPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxLoadPacket.account_id)
  return _internal_account_id();
}
inline void DGSafeboxLoadPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void DGSafeboxLoadPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.DGSafeboxLoadPacket.account_id)
}

// uint32 size = 2;
inline void DGSafeboxLoadPacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t DGSafeboxLoadPacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t DGSafeboxLoadPacket::size() const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxLoadPacket.size)
  return _internal_size();
}
inline void DGSafeboxLoadPacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void DGSafeboxLoadPacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.DGSafeboxLoadPacket.size)
}

// int64 gold = 3;
inline void DGSafeboxLoadPacket::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t DGSafeboxLoadPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t DGSafeboxLoadPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxLoadPacket.gold)
  return _internal_gold();
}
inline void DGSafeboxLoadPacket::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void DGSafeboxLoadPacket::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.DGSafeboxLoadPacket.gold)
}

// bool is_mall = 4;
inline void DGSafeboxLoadPacket::clear_is_mall() {
  _impl_.is_mall_ = false;
}
inline bool DGSafeboxLoadPacket::_internal_is_mall() const {
  return _impl_.is_mall_;
}
inline bool DGSafeboxLoadPacket::is_mall() const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxLoadPacket.is_mall)
  return _internal_is_mall();
}
inline void DGSafeboxLoadPacket::_internal_set_is_mall(bool value) {
  
  _impl_.is_mall_ = value;
}
inline void DGSafeboxLoadPacket::set_is_mall(bool value) {
  _internal_set_is_mall(value);
  // @@protoc_insertion_point(field_set:network.DGSafeboxLoadPacket.is_mall)
}

// repeated .network.TItemData items = 5;
inline int DGSafeboxLoadPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGSafeboxLoadPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* DGSafeboxLoadPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGSafeboxLoadPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
DGSafeboxLoadPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGSafeboxLoadPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& DGSafeboxLoadPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& DGSafeboxLoadPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxLoadPacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* DGSafeboxLoadPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* DGSafeboxLoadPacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGSafeboxLoadPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
DGSafeboxLoadPacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGSafeboxLoadPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// DGSafeboxChangeSizePacket

// uint32 size = 1;
inline void DGSafeboxChangeSizePacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t DGSafeboxChangeSizePacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t DGSafeboxChangeSizePacket::size() const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxChangeSizePacket.size)
  return _internal_size();
}
inline void DGSafeboxChangeSizePacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void DGSafeboxChangeSizePacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.DGSafeboxChangeSizePacket.size)
}

// -------------------------------------------------------------------

// DGSafeboxChangePasswordAnswerPacket

// bool flag = 1;
inline void DGSafeboxChangePasswordAnswerPacket::clear_flag() {
  _impl_.flag_ = false;
}
inline bool DGSafeboxChangePasswordAnswerPacket::_internal_flag() const {
  return _impl_.flag_;
}
inline bool DGSafeboxChangePasswordAnswerPacket::flag() const {
  // @@protoc_insertion_point(field_get:network.DGSafeboxChangePasswordAnswerPacket.flag)
  return _internal_flag();
}
inline void DGSafeboxChangePasswordAnswerPacket::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void DGSafeboxChangePasswordAnswerPacket::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.DGSafeboxChangePasswordAnswerPacket.flag)
}

// -------------------------------------------------------------------

// DGEmpireSelectPacket

// uint32 empire = 1;
inline void DGEmpireSelectPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t DGEmpireSelectPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t DGEmpireSelectPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.DGEmpireSelectPacket.empire)
  return _internal_empire();
}
inline void DGEmpireSelectPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void DGEmpireSelectPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.DGEmpireSelectPacket.empire)
}

// -------------------------------------------------------------------

// DGP2PInfoPacket

// bytes host = 1;
inline void DGP2PInfoPacket::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& DGP2PInfoPacket::host() const {
  // @@protoc_insertion_point(field_get:network.DGP2PInfoPacket.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGP2PInfoPacket::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGP2PInfoPacket.host)
}
inline std::string* DGP2PInfoPacket::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:network.DGP2PInfoPacket.host)
  return _s;
}
inline const std::string& DGP2PInfoPacket::_internal_host() const {
  return _impl_.host_.Get();
}
inline void DGP2PInfoPacket::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* DGP2PInfoPacket::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* DGP2PInfoPacket::release_host() {
  // @@protoc_insertion_point(field_release:network.DGP2PInfoPacket.host)
  return _impl_.host_.Release();
}
inline void DGP2PInfoPacket::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGP2PInfoPacket.host)
}

// uint32 port = 2;
inline void DGP2PInfoPacket::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t DGP2PInfoPacket::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t DGP2PInfoPacket::port() const {
  // @@protoc_insertion_point(field_get:network.DGP2PInfoPacket.port)
  return _internal_port();
}
inline void DGP2PInfoPacket::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void DGP2PInfoPacket::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.DGP2PInfoPacket.port)
}

// uint32 listen_port = 3;
inline void DGP2PInfoPacket::clear_listen_port() {
  _impl_.listen_port_ = 0u;
}
inline uint32_t DGP2PInfoPacket::_internal_listen_port() const {
  return _impl_.listen_port_;
}
inline uint32_t DGP2PInfoPacket::listen_port() const {
  // @@protoc_insertion_point(field_get:network.DGP2PInfoPacket.listen_port)
  return _internal_listen_port();
}
inline void DGP2PInfoPacket::_internal_set_listen_port(uint32_t value) {
  
  _impl_.listen_port_ = value;
}
inline void DGP2PInfoPacket::set_listen_port(uint32_t value) {
  _internal_set_listen_port(value);
  // @@protoc_insertion_point(field_set:network.DGP2PInfoPacket.listen_port)
}

// uint32 channel = 4;
inline void DGP2PInfoPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t DGP2PInfoPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t DGP2PInfoPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.DGP2PInfoPacket.channel)
  return _internal_channel();
}
inline void DGP2PInfoPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void DGP2PInfoPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.DGP2PInfoPacket.channel)
}

// bool processor_core = 5;
inline void DGP2PInfoPacket::clear_processor_core() {
  _impl_.processor_core_ = false;
}
inline bool DGP2PInfoPacket::_internal_processor_core() const {
  return _impl_.processor_core_;
}
inline bool DGP2PInfoPacket::processor_core() const {
  // @@protoc_insertion_point(field_get:network.DGP2PInfoPacket.processor_core)
  return _internal_processor_core();
}
inline void DGP2PInfoPacket::_internal_set_processor_core(bool value) {
  
  _impl_.processor_core_ = value;
}
inline void DGP2PInfoPacket::set_processor_core(bool value) {
  _internal_set_processor_core(value);
  // @@protoc_insertion_point(field_set:network.DGP2PInfoPacket.processor_core)
}

// -------------------------------------------------------------------

// DGLoginAlreadyPacket

// bytes login = 1;
inline void DGLoginAlreadyPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& DGLoginAlreadyPacket::login() const {
  // @@protoc_insertion_point(field_get:network.DGLoginAlreadyPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGLoginAlreadyPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGLoginAlreadyPacket.login)
}
inline std::string* DGLoginAlreadyPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.DGLoginAlreadyPacket.login)
  return _s;
}
inline const std::string& DGLoginAlreadyPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void DGLoginAlreadyPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* DGLoginAlreadyPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* DGLoginAlreadyPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.DGLoginAlreadyPacket.login)
  return _impl_.login_.Release();
}
inline void DGLoginAlreadyPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGLoginAlreadyPacket.login)
}

// -------------------------------------------------------------------

// DGTimePacket

// uint32 time = 1;
inline void DGTimePacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t DGTimePacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t DGTimePacket::time() const {
  // @@protoc_insertion_point(field_get:network.DGTimePacket.time)
  return _internal_time();
}
inline void DGTimePacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void DGTimePacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.DGTimePacket.time)
}

// -------------------------------------------------------------------

// DGReloadShopTablePacket

// repeated .network.TShopTable shops = 1;
inline int DGReloadShopTablePacket::_internal_shops_size() const {
  return _impl_.shops_.size();
}
inline int DGReloadShopTablePacket::shops_size() const {
  return _internal_shops_size();
}
inline ::network::TShopTable* DGReloadShopTablePacket::mutable_shops(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadShopTablePacket.shops)
  return _impl_.shops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >*
DGReloadShopTablePacket::mutable_shops() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadShopTablePacket.shops)
  return &_impl_.shops_;
}
inline const ::network::TShopTable& DGReloadShopTablePacket::_internal_shops(int index) const {
  return _impl_.shops_.Get(index);
}
inline const ::network::TShopTable& DGReloadShopTablePacket::shops(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadShopTablePacket.shops)
  return _internal_shops(index);
}
inline ::network::TShopTable* DGReloadShopTablePacket::_internal_add_shops() {
  return _impl_.shops_.Add();
}
inline ::network::TShopTable* DGReloadShopTablePacket::add_shops() {
  ::network::TShopTable* _add = _internal_add_shops();
  // @@protoc_insertion_point(field_add:network.DGReloadShopTablePacket.shops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >&
DGReloadShopTablePacket::shops() const {
  // @@protoc_insertion_point(field_list:network.DGReloadShopTablePacket.shops)
  return _impl_.shops_;
}

// -------------------------------------------------------------------

// DGReloadMobProtoPacket

// repeated .network.TMobTable mobs = 1;
inline int DGReloadMobProtoPacket::_internal_mobs_size() const {
  return _impl_.mobs_.size();
}
inline int DGReloadMobProtoPacket::mobs_size() const {
  return _internal_mobs_size();
}
inline ::network::TMobTable* DGReloadMobProtoPacket::mutable_mobs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadMobProtoPacket.mobs)
  return _impl_.mobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
DGReloadMobProtoPacket::mutable_mobs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadMobProtoPacket.mobs)
  return &_impl_.mobs_;
}
inline const ::network::TMobTable& DGReloadMobProtoPacket::_internal_mobs(int index) const {
  return _impl_.mobs_.Get(index);
}
inline const ::network::TMobTable& DGReloadMobProtoPacket::mobs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadMobProtoPacket.mobs)
  return _internal_mobs(index);
}
inline ::network::TMobTable* DGReloadMobProtoPacket::_internal_add_mobs() {
  return _impl_.mobs_.Add();
}
inline ::network::TMobTable* DGReloadMobProtoPacket::add_mobs() {
  ::network::TMobTable* _add = _internal_add_mobs();
  // @@protoc_insertion_point(field_add:network.DGReloadMobProtoPacket.mobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
DGReloadMobProtoPacket::mobs() const {
  // @@protoc_insertion_point(field_list:network.DGReloadMobProtoPacket.mobs)
  return _impl_.mobs_;
}

// -------------------------------------------------------------------

// DGReloadProtoPacket

// repeated .network.TSkillTable skills = 1;
inline int DGReloadProtoPacket::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int DGReloadProtoPacket::skills_size() const {
  return _internal_skills_size();
}
inline ::network::TSkillTable* DGReloadProtoPacket::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >*
DGReloadProtoPacket::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.skills)
  return &_impl_.skills_;
}
inline const ::network::TSkillTable& DGReloadProtoPacket::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::network::TSkillTable& DGReloadProtoPacket::skills(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.skills)
  return _internal_skills(index);
}
inline ::network::TSkillTable* DGReloadProtoPacket::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::network::TSkillTable* DGReloadProtoPacket::add_skills() {
  ::network::TSkillTable* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSkillTable >&
DGReloadProtoPacket::skills() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.skills)
  return _impl_.skills_;
}

// repeated .network.TItemTable items = 2;
inline int DGReloadProtoPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGReloadProtoPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemTable* DGReloadProtoPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >*
DGReloadProtoPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemTable& DGReloadProtoPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemTable& DGReloadProtoPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.items)
  return _internal_items(index);
}
inline ::network::TItemTable* DGReloadProtoPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemTable* DGReloadProtoPacket::add_items() {
  ::network::TItemTable* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >&
DGReloadProtoPacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.items)
  return _impl_.items_;
}

// repeated .network.TMobTable mobs = 3;
inline int DGReloadProtoPacket::_internal_mobs_size() const {
  return _impl_.mobs_.size();
}
inline int DGReloadProtoPacket::mobs_size() const {
  return _internal_mobs_size();
}
inline ::network::TMobTable* DGReloadProtoPacket::mutable_mobs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.mobs)
  return _impl_.mobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
DGReloadProtoPacket::mutable_mobs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.mobs)
  return &_impl_.mobs_;
}
inline const ::network::TMobTable& DGReloadProtoPacket::_internal_mobs(int index) const {
  return _impl_.mobs_.Get(index);
}
inline const ::network::TMobTable& DGReloadProtoPacket::mobs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.mobs)
  return _internal_mobs(index);
}
inline ::network::TMobTable* DGReloadProtoPacket::_internal_add_mobs() {
  return _impl_.mobs_.Add();
}
inline ::network::TMobTable* DGReloadProtoPacket::add_mobs() {
  ::network::TMobTable* _add = _internal_add_mobs();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.mobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
DGReloadProtoPacket::mobs() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.mobs)
  return _impl_.mobs_;
}

// repeated .network.TShopTable shops = 4;
inline int DGReloadProtoPacket::_internal_shops_size() const {
  return _impl_.shops_.size();
}
inline int DGReloadProtoPacket::shops_size() const {
  return _internal_shops_size();
}
inline ::network::TShopTable* DGReloadProtoPacket::mutable_shops(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.shops)
  return _impl_.shops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >*
DGReloadProtoPacket::mutable_shops() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.shops)
  return &_impl_.shops_;
}
inline const ::network::TShopTable& DGReloadProtoPacket::_internal_shops(int index) const {
  return _impl_.shops_.Get(index);
}
inline const ::network::TShopTable& DGReloadProtoPacket::shops(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.shops)
  return _internal_shops(index);
}
inline ::network::TShopTable* DGReloadProtoPacket::_internal_add_shops() {
  return _impl_.shops_.Add();
}
inline ::network::TShopTable* DGReloadProtoPacket::add_shops() {
  ::network::TShopTable* _add = _internal_add_shops();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.shops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopTable >&
DGReloadProtoPacket::shops() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.shops)
  return _impl_.shops_;
}

// repeated .network.TSoulProtoTable soul_protos = 5;
inline int DGReloadProtoPacket::_internal_soul_protos_size() const {
  return _impl_.soul_protos_.size();
}
inline int DGReloadProtoPacket::soul_protos_size() const {
  return _internal_soul_protos_size();
}
inline ::network::TSoulProtoTable* DGReloadProtoPacket::mutable_soul_protos(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.soul_protos)
  return _impl_.soul_protos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >*
DGReloadProtoPacket::mutable_soul_protos() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.soul_protos)
  return &_impl_.soul_protos_;
}
inline const ::network::TSoulProtoTable& DGReloadProtoPacket::_internal_soul_protos(int index) const {
  return _impl_.soul_protos_.Get(index);
}
inline const ::network::TSoulProtoTable& DGReloadProtoPacket::soul_protos(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.soul_protos)
  return _internal_soul_protos(index);
}
inline ::network::TSoulProtoTable* DGReloadProtoPacket::_internal_add_soul_protos() {
  return _impl_.soul_protos_.Add();
}
inline ::network::TSoulProtoTable* DGReloadProtoPacket::add_soul_protos() {
  ::network::TSoulProtoTable* _add = _internal_add_soul_protos();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.soul_protos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSoulProtoTable >&
DGReloadProtoPacket::soul_protos() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.soul_protos)
  return _impl_.soul_protos_;
}

// repeated .network.TPetAdvancedSkillProto pet_skills = 6;
inline int DGReloadProtoPacket::_internal_pet_skills_size() const {
  return _impl_.pet_skills_.size();
}
inline int DGReloadProtoPacket::pet_skills_size() const {
  return _internal_pet_skills_size();
}
inline ::network::TPetAdvancedSkillProto* DGReloadProtoPacket::mutable_pet_skills(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.pet_skills)
  return _impl_.pet_skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >*
DGReloadProtoPacket::mutable_pet_skills() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.pet_skills)
  return &_impl_.pet_skills_;
}
inline const ::network::TPetAdvancedSkillProto& DGReloadProtoPacket::_internal_pet_skills(int index) const {
  return _impl_.pet_skills_.Get(index);
}
inline const ::network::TPetAdvancedSkillProto& DGReloadProtoPacket::pet_skills(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.pet_skills)
  return _internal_pet_skills(index);
}
inline ::network::TPetAdvancedSkillProto* DGReloadProtoPacket::_internal_add_pet_skills() {
  return _impl_.pet_skills_.Add();
}
inline ::network::TPetAdvancedSkillProto* DGReloadProtoPacket::add_pet_skills() {
  ::network::TPetAdvancedSkillProto* _add = _internal_add_pet_skills();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.pet_skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedSkillProto >&
DGReloadProtoPacket::pet_skills() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.pet_skills)
  return _impl_.pet_skills_;
}

// repeated .network.TPetAdvancedEvolveProto pet_evolves = 7;
inline int DGReloadProtoPacket::_internal_pet_evolves_size() const {
  return _impl_.pet_evolves_.size();
}
inline int DGReloadProtoPacket::pet_evolves_size() const {
  return _internal_pet_evolves_size();
}
inline ::network::TPetAdvancedEvolveProto* DGReloadProtoPacket::mutable_pet_evolves(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.pet_evolves)
  return _impl_.pet_evolves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >*
DGReloadProtoPacket::mutable_pet_evolves() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.pet_evolves)
  return &_impl_.pet_evolves_;
}
inline const ::network::TPetAdvancedEvolveProto& DGReloadProtoPacket::_internal_pet_evolves(int index) const {
  return _impl_.pet_evolves_.Get(index);
}
inline const ::network::TPetAdvancedEvolveProto& DGReloadProtoPacket::pet_evolves(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.pet_evolves)
  return _internal_pet_evolves(index);
}
inline ::network::TPetAdvancedEvolveProto* DGReloadProtoPacket::_internal_add_pet_evolves() {
  return _impl_.pet_evolves_.Add();
}
inline ::network::TPetAdvancedEvolveProto* DGReloadProtoPacket::add_pet_evolves() {
  ::network::TPetAdvancedEvolveProto* _add = _internal_add_pet_evolves();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.pet_evolves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedEvolveProto >&
DGReloadProtoPacket::pet_evolves() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.pet_evolves)
  return _impl_.pet_evolves_;
}

// repeated .network.TPetAdvancedAttrProto pet_attrs = 8;
inline int DGReloadProtoPacket::_internal_pet_attrs_size() const {
  return _impl_.pet_attrs_.size();
}
inline int DGReloadProtoPacket::pet_attrs_size() const {
  return _internal_pet_attrs_size();
}
inline ::network::TPetAdvancedAttrProto* DGReloadProtoPacket::mutable_pet_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadProtoPacket.pet_attrs)
  return _impl_.pet_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >*
DGReloadProtoPacket::mutable_pet_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadProtoPacket.pet_attrs)
  return &_impl_.pet_attrs_;
}
inline const ::network::TPetAdvancedAttrProto& DGReloadProtoPacket::_internal_pet_attrs(int index) const {
  return _impl_.pet_attrs_.Get(index);
}
inline const ::network::TPetAdvancedAttrProto& DGReloadProtoPacket::pet_attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadProtoPacket.pet_attrs)
  return _internal_pet_attrs(index);
}
inline ::network::TPetAdvancedAttrProto* DGReloadProtoPacket::_internal_add_pet_attrs() {
  return _impl_.pet_attrs_.Add();
}
inline ::network::TPetAdvancedAttrProto* DGReloadProtoPacket::add_pet_attrs() {
  ::network::TPetAdvancedAttrProto* _add = _internal_add_pet_attrs();
  // @@protoc_insertion_point(field_add:network.DGReloadProtoPacket.pet_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPetAdvancedAttrProto >&
DGReloadProtoPacket::pet_attrs() const {
  // @@protoc_insertion_point(field_list:network.DGReloadProtoPacket.pet_attrs)
  return _impl_.pet_attrs_;
}

// -------------------------------------------------------------------

// DGChangeNamePacket

// uint32 pid = 1;
inline void DGChangeNamePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGChangeNamePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGChangeNamePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGChangeNamePacket.pid)
  return _internal_pid();
}
inline void DGChangeNamePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGChangeNamePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGChangeNamePacket.pid)
}

// bytes name = 2;
inline void DGChangeNamePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DGChangeNamePacket::name() const {
  // @@protoc_insertion_point(field_get:network.DGChangeNamePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGChangeNamePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGChangeNamePacket.name)
}
inline std::string* DGChangeNamePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.DGChangeNamePacket.name)
  return _s;
}
inline const std::string& DGChangeNamePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DGChangeNamePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DGChangeNamePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DGChangeNamePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.DGChangeNamePacket.name)
  return _impl_.name_.Release();
}
inline void DGChangeNamePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGChangeNamePacket.name)
}

// -------------------------------------------------------------------

// DGAuthLoginPacket

// bool result = 1;
inline void DGAuthLoginPacket::clear_result() {
  _impl_.result_ = false;
}
inline bool DGAuthLoginPacket::_internal_result() const {
  return _impl_.result_;
}
inline bool DGAuthLoginPacket::result() const {
  // @@protoc_insertion_point(field_get:network.DGAuthLoginPacket.result)
  return _internal_result();
}
inline void DGAuthLoginPacket::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void DGAuthLoginPacket::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:network.DGAuthLoginPacket.result)
}

// -------------------------------------------------------------------

// DGChangeEmpirePrivPacket

// uint32 type = 1;
inline void DGChangeEmpirePrivPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DGChangeEmpirePrivPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DGChangeEmpirePrivPacket::type() const {
  // @@protoc_insertion_point(field_get:network.DGChangeEmpirePrivPacket.type)
  return _internal_type();
}
inline void DGChangeEmpirePrivPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DGChangeEmpirePrivPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.DGChangeEmpirePrivPacket.type)
}

// int32 value = 2;
inline void DGChangeEmpirePrivPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t DGChangeEmpirePrivPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t DGChangeEmpirePrivPacket::value() const {
  // @@protoc_insertion_point(field_get:network.DGChangeEmpirePrivPacket.value)
  return _internal_value();
}
inline void DGChangeEmpirePrivPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void DGChangeEmpirePrivPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.DGChangeEmpirePrivPacket.value)
}

// uint32 empire = 3;
inline void DGChangeEmpirePrivPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t DGChangeEmpirePrivPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t DGChangeEmpirePrivPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.DGChangeEmpirePrivPacket.empire)
  return _internal_empire();
}
inline void DGChangeEmpirePrivPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void DGChangeEmpirePrivPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.DGChangeEmpirePrivPacket.empire)
}

// bool log = 4;
inline void DGChangeEmpirePrivPacket::clear_log() {
  _impl_.log_ = false;
}
inline bool DGChangeEmpirePrivPacket::_internal_log() const {
  return _impl_.log_;
}
inline bool DGChangeEmpirePrivPacket::log() const {
  // @@protoc_insertion_point(field_get:network.DGChangeEmpirePrivPacket.log)
  return _internal_log();
}
inline void DGChangeEmpirePrivPacket::_internal_set_log(bool value) {
  
  _impl_.log_ = value;
}
inline void DGChangeEmpirePrivPacket::set_log(bool value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:network.DGChangeEmpirePrivPacket.log)
}

// uint32 end_time_sec = 5;
inline void DGChangeEmpirePrivPacket::clear_end_time_sec() {
  _impl_.end_time_sec_ = 0u;
}
inline uint32_t DGChangeEmpirePrivPacket::_internal_end_time_sec() const {
  return _impl_.end_time_sec_;
}
inline uint32_t DGChangeEmpirePrivPacket::end_time_sec() const {
  // @@protoc_insertion_point(field_get:network.DGChangeEmpirePrivPacket.end_time_sec)
  return _internal_end_time_sec();
}
inline void DGChangeEmpirePrivPacket::_internal_set_end_time_sec(uint32_t value) {
  
  _impl_.end_time_sec_ = value;
}
inline void DGChangeEmpirePrivPacket::set_end_time_sec(uint32_t value) {
  _internal_set_end_time_sec(value);
  // @@protoc_insertion_point(field_set:network.DGChangeEmpirePrivPacket.end_time_sec)
}

// -------------------------------------------------------------------

// DGChangeGuildPrivPacket

// uint32 type = 1;
inline void DGChangeGuildPrivPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DGChangeGuildPrivPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DGChangeGuildPrivPacket::type() const {
  // @@protoc_insertion_point(field_get:network.DGChangeGuildPrivPacket.type)
  return _internal_type();
}
inline void DGChangeGuildPrivPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DGChangeGuildPrivPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.DGChangeGuildPrivPacket.type)
}

// int32 value = 2;
inline void DGChangeGuildPrivPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t DGChangeGuildPrivPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t DGChangeGuildPrivPacket::value() const {
  // @@protoc_insertion_point(field_get:network.DGChangeGuildPrivPacket.value)
  return _internal_value();
}
inline void DGChangeGuildPrivPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void DGChangeGuildPrivPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.DGChangeGuildPrivPacket.value)
}

// uint32 guild_id = 3;
inline void DGChangeGuildPrivPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGChangeGuildPrivPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGChangeGuildPrivPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGChangeGuildPrivPacket.guild_id)
  return _internal_guild_id();
}
inline void DGChangeGuildPrivPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGChangeGuildPrivPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGChangeGuildPrivPacket.guild_id)
}

// bool log = 4;
inline void DGChangeGuildPrivPacket::clear_log() {
  _impl_.log_ = false;
}
inline bool DGChangeGuildPrivPacket::_internal_log() const {
  return _impl_.log_;
}
inline bool DGChangeGuildPrivPacket::log() const {
  // @@protoc_insertion_point(field_get:network.DGChangeGuildPrivPacket.log)
  return _internal_log();
}
inline void DGChangeGuildPrivPacket::_internal_set_log(bool value) {
  
  _impl_.log_ = value;
}
inline void DGChangeGuildPrivPacket::set_log(bool value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:network.DGChangeGuildPrivPacket.log)
}

// uint32 end_time_sec = 5;
inline void DGChangeGuildPrivPacket::clear_end_time_sec() {
  _impl_.end_time_sec_ = 0u;
}
inline uint32_t DGChangeGuildPrivPacket::_internal_end_time_sec() const {
  return _impl_.end_time_sec_;
}
inline uint32_t DGChangeGuildPrivPacket::end_time_sec() const {
  // @@protoc_insertion_point(field_get:network.DGChangeGuildPrivPacket.end_time_sec)
  return _internal_end_time_sec();
}
inline void DGChangeGuildPrivPacket::_internal_set_end_time_sec(uint32_t value) {
  
  _impl_.end_time_sec_ = value;
}
inline void DGChangeGuildPrivPacket::set_end_time_sec(uint32_t value) {
  _internal_set_end_time_sec(value);
  // @@protoc_insertion_point(field_set:network.DGChangeGuildPrivPacket.end_time_sec)
}

// -------------------------------------------------------------------

// DGChangeCharacterPrivPacket

// uint32 type = 1;
inline void DGChangeCharacterPrivPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DGChangeCharacterPrivPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DGChangeCharacterPrivPacket::type() const {
  // @@protoc_insertion_point(field_get:network.DGChangeCharacterPrivPacket.type)
  return _internal_type();
}
inline void DGChangeCharacterPrivPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DGChangeCharacterPrivPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.DGChangeCharacterPrivPacket.type)
}

// int32 value = 2;
inline void DGChangeCharacterPrivPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t DGChangeCharacterPrivPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t DGChangeCharacterPrivPacket::value() const {
  // @@protoc_insertion_point(field_get:network.DGChangeCharacterPrivPacket.value)
  return _internal_value();
}
inline void DGChangeCharacterPrivPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void DGChangeCharacterPrivPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.DGChangeCharacterPrivPacket.value)
}

// uint32 pid = 3;
inline void DGChangeCharacterPrivPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGChangeCharacterPrivPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGChangeCharacterPrivPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGChangeCharacterPrivPacket.pid)
  return _internal_pid();
}
inline void DGChangeCharacterPrivPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGChangeCharacterPrivPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGChangeCharacterPrivPacket.pid)
}

// bool log = 4;
inline void DGChangeCharacterPrivPacket::clear_log() {
  _impl_.log_ = false;
}
inline bool DGChangeCharacterPrivPacket::_internal_log() const {
  return _impl_.log_;
}
inline bool DGChangeCharacterPrivPacket::log() const {
  // @@protoc_insertion_point(field_get:network.DGChangeCharacterPrivPacket.log)
  return _internal_log();
}
inline void DGChangeCharacterPrivPacket::_internal_set_log(bool value) {
  
  _impl_.log_ = value;
}
inline void DGChangeCharacterPrivPacket::set_log(bool value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:network.DGChangeCharacterPrivPacket.log)
}

// -------------------------------------------------------------------

// DGMoneyLogPacket

// uint32 type = 1;
inline void DGMoneyLogPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DGMoneyLogPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DGMoneyLogPacket::type() const {
  // @@protoc_insertion_point(field_get:network.DGMoneyLogPacket.type)
  return _internal_type();
}
inline void DGMoneyLogPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DGMoneyLogPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.DGMoneyLogPacket.type)
}

// uint32 vnum = 2;
inline void DGMoneyLogPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t DGMoneyLogPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t DGMoneyLogPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.DGMoneyLogPacket.vnum)
  return _internal_vnum();
}
inline void DGMoneyLogPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void DGMoneyLogPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.DGMoneyLogPacket.vnum)
}

// uint64 gold = 3;
inline void DGMoneyLogPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t DGMoneyLogPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t DGMoneyLogPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.DGMoneyLogPacket.gold)
  return _internal_gold();
}
inline void DGMoneyLogPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void DGMoneyLogPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.DGMoneyLogPacket.gold)
}

// -------------------------------------------------------------------

// DGSetEventFlagPacket

// bytes flag_name = 1;
inline void DGSetEventFlagPacket::clear_flag_name() {
  _impl_.flag_name_.ClearToEmpty();
}
inline const std::string& DGSetEventFlagPacket::flag_name() const {
  // @@protoc_insertion_point(field_get:network.DGSetEventFlagPacket.flag_name)
  return _internal_flag_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGSetEventFlagPacket::set_flag_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGSetEventFlagPacket.flag_name)
}
inline std::string* DGSetEventFlagPacket::mutable_flag_name() {
  std::string* _s = _internal_mutable_flag_name();
  // @@protoc_insertion_point(field_mutable:network.DGSetEventFlagPacket.flag_name)
  return _s;
}
inline const std::string& DGSetEventFlagPacket::_internal_flag_name() const {
  return _impl_.flag_name_.Get();
}
inline void DGSetEventFlagPacket::_internal_set_flag_name(const std::string& value) {
  
  _impl_.flag_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DGSetEventFlagPacket::_internal_mutable_flag_name() {
  
  return _impl_.flag_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DGSetEventFlagPacket::release_flag_name() {
  // @@protoc_insertion_point(field_release:network.DGSetEventFlagPacket.flag_name)
  return _impl_.flag_name_.Release();
}
inline void DGSetEventFlagPacket::set_allocated_flag_name(std::string* flag_name) {
  if (flag_name != nullptr) {
    
  } else {
    
  }
  _impl_.flag_name_.SetAllocated(flag_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_name_.IsDefault()) {
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGSetEventFlagPacket.flag_name)
}

// int32 value = 2;
inline void DGSetEventFlagPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t DGSetEventFlagPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t DGSetEventFlagPacket::value() const {
  // @@protoc_insertion_point(field_get:network.DGSetEventFlagPacket.value)
  return _internal_value();
}
inline void DGSetEventFlagPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void DGSetEventFlagPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.DGSetEventFlagPacket.value)
}

// -------------------------------------------------------------------

// DGVCardPacket

// uint32 id = 1;
inline void DGVCardPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DGVCardPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DGVCardPacket::id() const {
  // @@protoc_insertion_point(field_get:network.DGVCardPacket.id)
  return _internal_id();
}
inline void DGVCardPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DGVCardPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.DGVCardPacket.id)
}

// bytes sell_character = 2;
inline void DGVCardPacket::clear_sell_character() {
  _impl_.sell_character_.ClearToEmpty();
}
inline const std::string& DGVCardPacket::sell_character() const {
  // @@protoc_insertion_point(field_get:network.DGVCardPacket.sell_character)
  return _internal_sell_character();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGVCardPacket::set_sell_character(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sell_character_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGVCardPacket.sell_character)
}
inline std::string* DGVCardPacket::mutable_sell_character() {
  std::string* _s = _internal_mutable_sell_character();
  // @@protoc_insertion_point(field_mutable:network.DGVCardPacket.sell_character)
  return _s;
}
inline const std::string& DGVCardPacket::_internal_sell_character() const {
  return _impl_.sell_character_.Get();
}
inline void DGVCardPacket::_internal_set_sell_character(const std::string& value) {
  
  _impl_.sell_character_.Set(value, GetArenaForAllocation());
}
inline std::string* DGVCardPacket::_internal_mutable_sell_character() {
  
  return _impl_.sell_character_.Mutable(GetArenaForAllocation());
}
inline std::string* DGVCardPacket::release_sell_character() {
  // @@protoc_insertion_point(field_release:network.DGVCardPacket.sell_character)
  return _impl_.sell_character_.Release();
}
inline void DGVCardPacket::set_allocated_sell_character(std::string* sell_character) {
  if (sell_character != nullptr) {
    
  } else {
    
  }
  _impl_.sell_character_.SetAllocated(sell_character, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sell_character_.IsDefault()) {
    _impl_.sell_character_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGVCardPacket.sell_character)
}

// bytes sell_account = 3;
inline void DGVCardPacket::clear_sell_account() {
  _impl_.sell_account_.ClearToEmpty();
}
inline const std::string& DGVCardPacket::sell_account() const {
  // @@protoc_insertion_point(field_get:network.DGVCardPacket.sell_account)
  return _internal_sell_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGVCardPacket::set_sell_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sell_account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGVCardPacket.sell_account)
}
inline std::string* DGVCardPacket::mutable_sell_account() {
  std::string* _s = _internal_mutable_sell_account();
  // @@protoc_insertion_point(field_mutable:network.DGVCardPacket.sell_account)
  return _s;
}
inline const std::string& DGVCardPacket::_internal_sell_account() const {
  return _impl_.sell_account_.Get();
}
inline void DGVCardPacket::_internal_set_sell_account(const std::string& value) {
  
  _impl_.sell_account_.Set(value, GetArenaForAllocation());
}
inline std::string* DGVCardPacket::_internal_mutable_sell_account() {
  
  return _impl_.sell_account_.Mutable(GetArenaForAllocation());
}
inline std::string* DGVCardPacket::release_sell_account() {
  // @@protoc_insertion_point(field_release:network.DGVCardPacket.sell_account)
  return _impl_.sell_account_.Release();
}
inline void DGVCardPacket::set_allocated_sell_account(std::string* sell_account) {
  if (sell_account != nullptr) {
    
  } else {
    
  }
  _impl_.sell_account_.SetAllocated(sell_account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sell_account_.IsDefault()) {
    _impl_.sell_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGVCardPacket.sell_account)
}

// bytes buy_character = 4;
inline void DGVCardPacket::clear_buy_character() {
  _impl_.buy_character_.ClearToEmpty();
}
inline const std::string& DGVCardPacket::buy_character() const {
  // @@protoc_insertion_point(field_get:network.DGVCardPacket.buy_character)
  return _internal_buy_character();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGVCardPacket::set_buy_character(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buy_character_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGVCardPacket.buy_character)
}
inline std::string* DGVCardPacket::mutable_buy_character() {
  std::string* _s = _internal_mutable_buy_character();
  // @@protoc_insertion_point(field_mutable:network.DGVCardPacket.buy_character)
  return _s;
}
inline const std::string& DGVCardPacket::_internal_buy_character() const {
  return _impl_.buy_character_.Get();
}
inline void DGVCardPacket::_internal_set_buy_character(const std::string& value) {
  
  _impl_.buy_character_.Set(value, GetArenaForAllocation());
}
inline std::string* DGVCardPacket::_internal_mutable_buy_character() {
  
  return _impl_.buy_character_.Mutable(GetArenaForAllocation());
}
inline std::string* DGVCardPacket::release_buy_character() {
  // @@protoc_insertion_point(field_release:network.DGVCardPacket.buy_character)
  return _impl_.buy_character_.Release();
}
inline void DGVCardPacket::set_allocated_buy_character(std::string* buy_character) {
  if (buy_character != nullptr) {
    
  } else {
    
  }
  _impl_.buy_character_.SetAllocated(buy_character, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buy_character_.IsDefault()) {
    _impl_.buy_character_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGVCardPacket.buy_character)
}

// bytes buy_account = 5;
inline void DGVCardPacket::clear_buy_account() {
  _impl_.buy_account_.ClearToEmpty();
}
inline const std::string& DGVCardPacket::buy_account() const {
  // @@protoc_insertion_point(field_get:network.DGVCardPacket.buy_account)
  return _internal_buy_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGVCardPacket::set_buy_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buy_account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGVCardPacket.buy_account)
}
inline std::string* DGVCardPacket::mutable_buy_account() {
  std::string* _s = _internal_mutable_buy_account();
  // @@protoc_insertion_point(field_mutable:network.DGVCardPacket.buy_account)
  return _s;
}
inline const std::string& DGVCardPacket::_internal_buy_account() const {
  return _impl_.buy_account_.Get();
}
inline void DGVCardPacket::_internal_set_buy_account(const std::string& value) {
  
  _impl_.buy_account_.Set(value, GetArenaForAllocation());
}
inline std::string* DGVCardPacket::_internal_mutable_buy_account() {
  
  return _impl_.buy_account_.Mutable(GetArenaForAllocation());
}
inline std::string* DGVCardPacket::release_buy_account() {
  // @@protoc_insertion_point(field_release:network.DGVCardPacket.buy_account)
  return _impl_.buy_account_.Release();
}
inline void DGVCardPacket::set_allocated_buy_account(std::string* buy_account) {
  if (buy_account != nullptr) {
    
  } else {
    
  }
  _impl_.buy_account_.SetAllocated(buy_account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buy_account_.IsDefault()) {
    _impl_.buy_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGVCardPacket.buy_account)
}

// -------------------------------------------------------------------

// DGNoticePacket

// bytes notice = 1;
inline void DGNoticePacket::clear_notice() {
  _impl_.notice_.ClearToEmpty();
}
inline const std::string& DGNoticePacket::notice() const {
  // @@protoc_insertion_point(field_get:network.DGNoticePacket.notice)
  return _internal_notice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGNoticePacket::set_notice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notice_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGNoticePacket.notice)
}
inline std::string* DGNoticePacket::mutable_notice() {
  std::string* _s = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:network.DGNoticePacket.notice)
  return _s;
}
inline const std::string& DGNoticePacket::_internal_notice() const {
  return _impl_.notice_.Get();
}
inline void DGNoticePacket::_internal_set_notice(const std::string& value) {
  
  _impl_.notice_.Set(value, GetArenaForAllocation());
}
inline std::string* DGNoticePacket::_internal_mutable_notice() {
  
  return _impl_.notice_.Mutable(GetArenaForAllocation());
}
inline std::string* DGNoticePacket::release_notice() {
  // @@protoc_insertion_point(field_release:network.DGNoticePacket.notice)
  return _impl_.notice_.Release();
}
inline void DGNoticePacket::set_allocated_notice(std::string* notice) {
  if (notice != nullptr) {
    
  } else {
    
  }
  _impl_.notice_.SetAllocated(notice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notice_.IsDefault()) {
    _impl_.notice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGNoticePacket.notice)
}

// -------------------------------------------------------------------

// DGAddBlockCountryIPPacket

// uint32 ip_from = 1;
inline void DGAddBlockCountryIPPacket::clear_ip_from() {
  _impl_.ip_from_ = 0u;
}
inline uint32_t DGAddBlockCountryIPPacket::_internal_ip_from() const {
  return _impl_.ip_from_;
}
inline uint32_t DGAddBlockCountryIPPacket::ip_from() const {
  // @@protoc_insertion_point(field_get:network.DGAddBlockCountryIPPacket.ip_from)
  return _internal_ip_from();
}
inline void DGAddBlockCountryIPPacket::_internal_set_ip_from(uint32_t value) {
  
  _impl_.ip_from_ = value;
}
inline void DGAddBlockCountryIPPacket::set_ip_from(uint32_t value) {
  _internal_set_ip_from(value);
  // @@protoc_insertion_point(field_set:network.DGAddBlockCountryIPPacket.ip_from)
}

// uint32 ip_to = 2;
inline void DGAddBlockCountryIPPacket::clear_ip_to() {
  _impl_.ip_to_ = 0u;
}
inline uint32_t DGAddBlockCountryIPPacket::_internal_ip_to() const {
  return _impl_.ip_to_;
}
inline uint32_t DGAddBlockCountryIPPacket::ip_to() const {
  // @@protoc_insertion_point(field_get:network.DGAddBlockCountryIPPacket.ip_to)
  return _internal_ip_to();
}
inline void DGAddBlockCountryIPPacket::_internal_set_ip_to(uint32_t value) {
  
  _impl_.ip_to_ = value;
}
inline void DGAddBlockCountryIPPacket::set_ip_to(uint32_t value) {
  _internal_set_ip_to(value);
  // @@protoc_insertion_point(field_set:network.DGAddBlockCountryIPPacket.ip_to)
}

// -------------------------------------------------------------------

// DGBlockExceptionPacket

// uint32 cmd = 1;
inline void DGBlockExceptionPacket::clear_cmd() {
  _impl_.cmd_ = 0u;
}
inline uint32_t DGBlockExceptionPacket::_internal_cmd() const {
  return _impl_.cmd_;
}
inline uint32_t DGBlockExceptionPacket::cmd() const {
  // @@protoc_insertion_point(field_get:network.DGBlockExceptionPacket.cmd)
  return _internal_cmd();
}
inline void DGBlockExceptionPacket::_internal_set_cmd(uint32_t value) {
  
  _impl_.cmd_ = value;
}
inline void DGBlockExceptionPacket::set_cmd(uint32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:network.DGBlockExceptionPacket.cmd)
}

// bytes login = 2;
inline void DGBlockExceptionPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& DGBlockExceptionPacket::login() const {
  // @@protoc_insertion_point(field_get:network.DGBlockExceptionPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGBlockExceptionPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGBlockExceptionPacket.login)
}
inline std::string* DGBlockExceptionPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.DGBlockExceptionPacket.login)
  return _s;
}
inline const std::string& DGBlockExceptionPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void DGBlockExceptionPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* DGBlockExceptionPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* DGBlockExceptionPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.DGBlockExceptionPacket.login)
  return _impl_.login_.Release();
}
inline void DGBlockExceptionPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGBlockExceptionPacket.login)
}

// -------------------------------------------------------------------

// DGMyShopPricelistPacket

// repeated .network.TItemPriceInfo price_info = 1;
inline int DGMyShopPricelistPacket::_internal_price_info_size() const {
  return _impl_.price_info_.size();
}
inline int DGMyShopPricelistPacket::price_info_size() const {
  return _internal_price_info_size();
}
inline ::network::TItemPriceInfo* DGMyShopPricelistPacket::mutable_price_info(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGMyShopPricelistPacket.price_info)
  return _impl_.price_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >*
DGMyShopPricelistPacket::mutable_price_info() {
  // @@protoc_insertion_point(field_mutable_list:network.DGMyShopPricelistPacket.price_info)
  return &_impl_.price_info_;
}
inline const ::network::TItemPriceInfo& DGMyShopPricelistPacket::_internal_price_info(int index) const {
  return _impl_.price_info_.Get(index);
}
inline const ::network::TItemPriceInfo& DGMyShopPricelistPacket::price_info(int index) const {
  // @@protoc_insertion_point(field_get:network.DGMyShopPricelistPacket.price_info)
  return _internal_price_info(index);
}
inline ::network::TItemPriceInfo* DGMyShopPricelistPacket::_internal_add_price_info() {
  return _impl_.price_info_.Add();
}
inline ::network::TItemPriceInfo* DGMyShopPricelistPacket::add_price_info() {
  ::network::TItemPriceInfo* _add = _internal_add_price_info();
  // @@protoc_insertion_point(field_add:network.DGMyShopPricelistPacket.price_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >&
DGMyShopPricelistPacket::price_info() const {
  // @@protoc_insertion_point(field_list:network.DGMyShopPricelistPacket.price_info)
  return _impl_.price_info_;
}

// -------------------------------------------------------------------

// DGReloadAdminPacket

// repeated .network.TAdminInfo admins = 1;
inline int DGReloadAdminPacket::_internal_admins_size() const {
  return _impl_.admins_.size();
}
inline int DGReloadAdminPacket::admins_size() const {
  return _internal_admins_size();
}
inline ::network::TAdminInfo* DGReloadAdminPacket::mutable_admins(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadAdminPacket.admins)
  return _impl_.admins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >*
DGReloadAdminPacket::mutable_admins() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadAdminPacket.admins)
  return &_impl_.admins_;
}
inline const ::network::TAdminInfo& DGReloadAdminPacket::_internal_admins(int index) const {
  return _impl_.admins_.Get(index);
}
inline const ::network::TAdminInfo& DGReloadAdminPacket::admins(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadAdminPacket.admins)
  return _internal_admins(index);
}
inline ::network::TAdminInfo* DGReloadAdminPacket::_internal_add_admins() {
  return _impl_.admins_.Add();
}
inline ::network::TAdminInfo* DGReloadAdminPacket::add_admins() {
  ::network::TAdminInfo* _add = _internal_add_admins();
  // @@protoc_insertion_point(field_add:network.DGReloadAdminPacket.admins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAdminInfo >&
DGReloadAdminPacket::admins() const {
  // @@protoc_insertion_point(field_list:network.DGReloadAdminPacket.admins)
  return _impl_.admins_;
}

// repeated uint32 admin_configs = 2;
inline int DGReloadAdminPacket::_internal_admin_configs_size() const {
  return _impl_.admin_configs_.size();
}
inline int DGReloadAdminPacket::admin_configs_size() const {
  return _internal_admin_configs_size();
}
inline void DGReloadAdminPacket::clear_admin_configs() {
  _impl_.admin_configs_.Clear();
}
inline uint32_t DGReloadAdminPacket::_internal_admin_configs(int index) const {
  return _impl_.admin_configs_.Get(index);
}
inline uint32_t DGReloadAdminPacket::admin_configs(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadAdminPacket.admin_configs)
  return _internal_admin_configs(index);
}
inline void DGReloadAdminPacket::set_admin_configs(int index, uint32_t value) {
  _impl_.admin_configs_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGReloadAdminPacket.admin_configs)
}
inline void DGReloadAdminPacket::_internal_add_admin_configs(uint32_t value) {
  _impl_.admin_configs_.Add(value);
}
inline void DGReloadAdminPacket::add_admin_configs(uint32_t value) {
  _internal_add_admin_configs(value);
  // @@protoc_insertion_point(field_add:network.DGReloadAdminPacket.admin_configs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGReloadAdminPacket::_internal_admin_configs() const {
  return _impl_.admin_configs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGReloadAdminPacket::admin_configs() const {
  // @@protoc_insertion_point(field_list:network.DGReloadAdminPacket.admin_configs)
  return _internal_admin_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGReloadAdminPacket::_internal_mutable_admin_configs() {
  return &_impl_.admin_configs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGReloadAdminPacket::mutable_admin_configs() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadAdminPacket.admin_configs)
  return _internal_mutable_admin_configs();
}

// -------------------------------------------------------------------

// DGDetailLogPacket

// uint32 pid = 1;
inline void DGDetailLogPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGDetailLogPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGDetailLogPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGDetailLogPacket.pid)
  return _internal_pid();
}
inline void DGDetailLogPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGDetailLogPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGDetailLogPacket.pid)
}

// -------------------------------------------------------------------

// DGItemAwardInformerPacket

// bytes login = 1;
inline void DGItemAwardInformerPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& DGItemAwardInformerPacket::login() const {
  // @@protoc_insertion_point(field_get:network.DGItemAwardInformerPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGItemAwardInformerPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGItemAwardInformerPacket.login)
}
inline std::string* DGItemAwardInformerPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.DGItemAwardInformerPacket.login)
  return _s;
}
inline const std::string& DGItemAwardInformerPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void DGItemAwardInformerPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* DGItemAwardInformerPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* DGItemAwardInformerPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.DGItemAwardInformerPacket.login)
  return _impl_.login_.Release();
}
inline void DGItemAwardInformerPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGItemAwardInformerPacket.login)
}

// bytes command = 2;
inline void DGItemAwardInformerPacket::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& DGItemAwardInformerPacket::command() const {
  // @@protoc_insertion_point(field_get:network.DGItemAwardInformerPacket.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGItemAwardInformerPacket::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGItemAwardInformerPacket.command)
}
inline std::string* DGItemAwardInformerPacket::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:network.DGItemAwardInformerPacket.command)
  return _s;
}
inline const std::string& DGItemAwardInformerPacket::_internal_command() const {
  return _impl_.command_.Get();
}
inline void DGItemAwardInformerPacket::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* DGItemAwardInformerPacket::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* DGItemAwardInformerPacket::release_command() {
  // @@protoc_insertion_point(field_release:network.DGItemAwardInformerPacket.command)
  return _impl_.command_.Release();
}
inline void DGItemAwardInformerPacket::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGItemAwardInformerPacket.command)
}

// uint32 vnum = 3;
inline void DGItemAwardInformerPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t DGItemAwardInformerPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t DGItemAwardInformerPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.DGItemAwardInformerPacket.vnum)
  return _internal_vnum();
}
inline void DGItemAwardInformerPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void DGItemAwardInformerPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.DGItemAwardInformerPacket.vnum)
}

// -------------------------------------------------------------------

// DGRespondChannelStatusPacket

// repeated .network.TChannelStatus states = 1;
inline int DGRespondChannelStatusPacket::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int DGRespondChannelStatusPacket::states_size() const {
  return _internal_states_size();
}
inline ::network::TChannelStatus* DGRespondChannelStatusPacket::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGRespondChannelStatusPacket.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >*
DGRespondChannelStatusPacket::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:network.DGRespondChannelStatusPacket.states)
  return &_impl_.states_;
}
inline const ::network::TChannelStatus& DGRespondChannelStatusPacket::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::network::TChannelStatus& DGRespondChannelStatusPacket::states(int index) const {
  // @@protoc_insertion_point(field_get:network.DGRespondChannelStatusPacket.states)
  return _internal_states(index);
}
inline ::network::TChannelStatus* DGRespondChannelStatusPacket::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::network::TChannelStatus* DGRespondChannelStatusPacket::add_states() {
  ::network::TChannelStatus* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:network.DGRespondChannelStatusPacket.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >&
DGRespondChannelStatusPacket::states() const {
  // @@protoc_insertion_point(field_list:network.DGRespondChannelStatusPacket.states)
  return _impl_.states_;
}

// -------------------------------------------------------------------

// DGChannelSwitchPacket

// bytes ip = 1;
inline void DGChannelSwitchPacket::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& DGChannelSwitchPacket::ip() const {
  // @@protoc_insertion_point(field_get:network.DGChannelSwitchPacket.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGChannelSwitchPacket::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGChannelSwitchPacket.ip)
}
inline std::string* DGChannelSwitchPacket::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:network.DGChannelSwitchPacket.ip)
  return _s;
}
inline const std::string& DGChannelSwitchPacket::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void DGChannelSwitchPacket::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DGChannelSwitchPacket::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* DGChannelSwitchPacket::release_ip() {
  // @@protoc_insertion_point(field_release:network.DGChannelSwitchPacket.ip)
  return _impl_.ip_.Release();
}
inline void DGChannelSwitchPacket::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGChannelSwitchPacket.ip)
}

// uint32 port = 2;
inline void DGChannelSwitchPacket::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t DGChannelSwitchPacket::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t DGChannelSwitchPacket::port() const {
  // @@protoc_insertion_point(field_get:network.DGChannelSwitchPacket.port)
  return _internal_port();
}
inline void DGChannelSwitchPacket::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void DGChannelSwitchPacket::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.DGChannelSwitchPacket.port)
}

// -------------------------------------------------------------------

// DGSpareItemIDRangePacket

// .network.TItemIDRangeTable data = 1;
inline bool DGSpareItemIDRangePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool DGSpareItemIDRangePacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TItemIDRangeTable& DGSpareItemIDRangePacket::_internal_data() const {
  const ::network::TItemIDRangeTable* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemIDRangeTable&>(
      ::network::_TItemIDRangeTable_default_instance_);
}
inline const ::network::TItemIDRangeTable& DGSpareItemIDRangePacket::data() const {
  // @@protoc_insertion_point(field_get:network.DGSpareItemIDRangePacket.data)
  return _internal_data();
}
inline void DGSpareItemIDRangePacket::unsafe_arena_set_allocated_data(
    ::network::TItemIDRangeTable* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGSpareItemIDRangePacket.data)
}
inline ::network::TItemIDRangeTable* DGSpareItemIDRangePacket::release_data() {
  
  ::network::TItemIDRangeTable* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemIDRangeTable* DGSpareItemIDRangePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.DGSpareItemIDRangePacket.data)
  
  ::network::TItemIDRangeTable* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TItemIDRangeTable* DGSpareItemIDRangePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemIDRangeTable>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TItemIDRangeTable* DGSpareItemIDRangePacket::mutable_data() {
  ::network::TItemIDRangeTable* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.DGSpareItemIDRangePacket.data)
  return _msg;
}
inline void DGSpareItemIDRangePacket::set_allocated_data(::network::TItemIDRangeTable* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.DGSpareItemIDRangePacket.data)
}

// -------------------------------------------------------------------

// DGUpdateHorseNamePacket

// uint32 player_id = 1;
inline void DGUpdateHorseNamePacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t DGUpdateHorseNamePacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t DGUpdateHorseNamePacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.DGUpdateHorseNamePacket.player_id)
  return _internal_player_id();
}
inline void DGUpdateHorseNamePacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void DGUpdateHorseNamePacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.DGUpdateHorseNamePacket.player_id)
}

// bytes horse_name = 2;
inline void DGUpdateHorseNamePacket::clear_horse_name() {
  _impl_.horse_name_.ClearToEmpty();
}
inline const std::string& DGUpdateHorseNamePacket::horse_name() const {
  // @@protoc_insertion_point(field_get:network.DGUpdateHorseNamePacket.horse_name)
  return _internal_horse_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGUpdateHorseNamePacket::set_horse_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.horse_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGUpdateHorseNamePacket.horse_name)
}
inline std::string* DGUpdateHorseNamePacket::mutable_horse_name() {
  std::string* _s = _internal_mutable_horse_name();
  // @@protoc_insertion_point(field_mutable:network.DGUpdateHorseNamePacket.horse_name)
  return _s;
}
inline const std::string& DGUpdateHorseNamePacket::_internal_horse_name() const {
  return _impl_.horse_name_.Get();
}
inline void DGUpdateHorseNamePacket::_internal_set_horse_name(const std::string& value) {
  
  _impl_.horse_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DGUpdateHorseNamePacket::_internal_mutable_horse_name() {
  
  return _impl_.horse_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DGUpdateHorseNamePacket::release_horse_name() {
  // @@protoc_insertion_point(field_release:network.DGUpdateHorseNamePacket.horse_name)
  return _impl_.horse_name_.Release();
}
inline void DGUpdateHorseNamePacket::set_allocated_horse_name(std::string* horse_name) {
  if (horse_name != nullptr) {
    
  } else {
    
  }
  _impl_.horse_name_.SetAllocated(horse_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horse_name_.IsDefault()) {
    _impl_.horse_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGUpdateHorseNamePacket.horse_name)
}

// -------------------------------------------------------------------

// DGSpawnMobTimedPacket

// uint32 mob_vnum = 1;
inline void DGSpawnMobTimedPacket::clear_mob_vnum() {
  _impl_.mob_vnum_ = 0u;
}
inline uint32_t DGSpawnMobTimedPacket::_internal_mob_vnum() const {
  return _impl_.mob_vnum_;
}
inline uint32_t DGSpawnMobTimedPacket::mob_vnum() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.mob_vnum)
  return _internal_mob_vnum();
}
inline void DGSpawnMobTimedPacket::_internal_set_mob_vnum(uint32_t value) {
  
  _impl_.mob_vnum_ = value;
}
inline void DGSpawnMobTimedPacket::set_mob_vnum(uint32_t value) {
  _internal_set_mob_vnum(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.mob_vnum)
}

// uint32 map_index = 2;
inline void DGSpawnMobTimedPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t DGSpawnMobTimedPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t DGSpawnMobTimedPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.map_index)
  return _internal_map_index();
}
inline void DGSpawnMobTimedPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void DGSpawnMobTimedPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.map_index)
}

// int32 x = 3;
inline void DGSpawnMobTimedPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t DGSpawnMobTimedPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t DGSpawnMobTimedPacket::x() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.x)
  return _internal_x();
}
inline void DGSpawnMobTimedPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void DGSpawnMobTimedPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.x)
}

// int32 y = 4;
inline void DGSpawnMobTimedPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t DGSpawnMobTimedPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t DGSpawnMobTimedPacket::y() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.y)
  return _internal_y();
}
inline void DGSpawnMobTimedPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void DGSpawnMobTimedPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.y)
}

// uint32 channel = 5;
inline void DGSpawnMobTimedPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t DGSpawnMobTimedPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t DGSpawnMobTimedPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.channel)
  return _internal_channel();
}
inline void DGSpawnMobTimedPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void DGSpawnMobTimedPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.channel)
}

// int32 target_time = 6;
inline void DGSpawnMobTimedPacket::clear_target_time() {
  _impl_.target_time_ = 0;
}
inline int32_t DGSpawnMobTimedPacket::_internal_target_time() const {
  return _impl_.target_time_;
}
inline int32_t DGSpawnMobTimedPacket::target_time() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.target_time)
  return _internal_target_time();
}
inline void DGSpawnMobTimedPacket::_internal_set_target_time(int32_t value) {
  
  _impl_.target_time_ = value;
}
inline void DGSpawnMobTimedPacket::set_target_time(int32_t value) {
  _internal_set_target_time(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.target_time)
}

// int32 despawn_time = 7;
inline void DGSpawnMobTimedPacket::clear_despawn_time() {
  _impl_.despawn_time_ = 0;
}
inline int32_t DGSpawnMobTimedPacket::_internal_despawn_time() const {
  return _impl_.despawn_time_;
}
inline int32_t DGSpawnMobTimedPacket::despawn_time() const {
  // @@protoc_insertion_point(field_get:network.DGSpawnMobTimedPacket.despawn_time)
  return _internal_despawn_time();
}
inline void DGSpawnMobTimedPacket::_internal_set_despawn_time(int32_t value) {
  
  _impl_.despawn_time_ = value;
}
inline void DGSpawnMobTimedPacket::set_despawn_time(int32_t value) {
  _internal_set_despawn_time(value);
  // @@protoc_insertion_point(field_set:network.DGSpawnMobTimedPacket.despawn_time)
}

// -------------------------------------------------------------------

// DGItemOfflineRestorePacket

// repeated .network.TItemData items = 1;
inline int DGItemOfflineRestorePacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGItemOfflineRestorePacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* DGItemOfflineRestorePacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGItemOfflineRestorePacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
DGItemOfflineRestorePacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGItemOfflineRestorePacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& DGItemOfflineRestorePacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& DGItemOfflineRestorePacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGItemOfflineRestorePacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* DGItemOfflineRestorePacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* DGItemOfflineRestorePacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGItemOfflineRestorePacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
DGItemOfflineRestorePacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGItemOfflineRestorePacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// DGOfflineMessagesLoadPacket

// uint32 pid = 1;
inline void DGOfflineMessagesLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGOfflineMessagesLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGOfflineMessagesLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGOfflineMessagesLoadPacket.pid)
  return _internal_pid();
}
inline void DGOfflineMessagesLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGOfflineMessagesLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGOfflineMessagesLoadPacket.pid)
}

// repeated .network.TOfflineMessage messages = 2;
inline int DGOfflineMessagesLoadPacket::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int DGOfflineMessagesLoadPacket::messages_size() const {
  return _internal_messages_size();
}
inline ::network::TOfflineMessage* DGOfflineMessagesLoadPacket::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGOfflineMessagesLoadPacket.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TOfflineMessage >*
DGOfflineMessagesLoadPacket::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:network.DGOfflineMessagesLoadPacket.messages)
  return &_impl_.messages_;
}
inline const ::network::TOfflineMessage& DGOfflineMessagesLoadPacket::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::network::TOfflineMessage& DGOfflineMessagesLoadPacket::messages(int index) const {
  // @@protoc_insertion_point(field_get:network.DGOfflineMessagesLoadPacket.messages)
  return _internal_messages(index);
}
inline ::network::TOfflineMessage* DGOfflineMessagesLoadPacket::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::network::TOfflineMessage* DGOfflineMessagesLoadPacket::add_messages() {
  ::network::TOfflineMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:network.DGOfflineMessagesLoadPacket.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TOfflineMessage >&
DGOfflineMessagesLoadPacket::messages() const {
  // @@protoc_insertion_point(field_list:network.DGOfflineMessagesLoadPacket.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// DGItemRefundLoadPacket_RefundItem

// uint32 id = 1;
inline void DGItemRefundLoadPacket_RefundItem::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DGItemRefundLoadPacket_RefundItem::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DGItemRefundLoadPacket_RefundItem::id() const {
  // @@protoc_insertion_point(field_get:network.DGItemRefundLoadPacket.RefundItem.id)
  return _internal_id();
}
inline void DGItemRefundLoadPacket_RefundItem::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DGItemRefundLoadPacket_RefundItem::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.DGItemRefundLoadPacket.RefundItem.id)
}

// bool socket_set = 2;
inline void DGItemRefundLoadPacket_RefundItem::clear_socket_set() {
  _impl_.socket_set_ = false;
}
inline bool DGItemRefundLoadPacket_RefundItem::_internal_socket_set() const {
  return _impl_.socket_set_;
}
inline bool DGItemRefundLoadPacket_RefundItem::socket_set() const {
  // @@protoc_insertion_point(field_get:network.DGItemRefundLoadPacket.RefundItem.socket_set)
  return _internal_socket_set();
}
inline void DGItemRefundLoadPacket_RefundItem::_internal_set_socket_set(bool value) {
  
  _impl_.socket_set_ = value;
}
inline void DGItemRefundLoadPacket_RefundItem::set_socket_set(bool value) {
  _internal_set_socket_set(value);
  // @@protoc_insertion_point(field_set:network.DGItemRefundLoadPacket.RefundItem.socket_set)
}

// .network.TItemData item = 3;
inline bool DGItemRefundLoadPacket_RefundItem::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool DGItemRefundLoadPacket_RefundItem::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& DGItemRefundLoadPacket_RefundItem::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& DGItemRefundLoadPacket_RefundItem::item() const {
  // @@protoc_insertion_point(field_get:network.DGItemRefundLoadPacket.RefundItem.item)
  return _internal_item();
}
inline void DGItemRefundLoadPacket_RefundItem::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGItemRefundLoadPacket.RefundItem.item)
}
inline ::network::TItemData* DGItemRefundLoadPacket_RefundItem::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* DGItemRefundLoadPacket_RefundItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.DGItemRefundLoadPacket.RefundItem.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* DGItemRefundLoadPacket_RefundItem::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* DGItemRefundLoadPacket_RefundItem::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.DGItemRefundLoadPacket.RefundItem.item)
  return _msg;
}
inline void DGItemRefundLoadPacket_RefundItem::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.DGItemRefundLoadPacket.RefundItem.item)
}

// -------------------------------------------------------------------

// DGItemRefundLoadPacket

// uint32 pid = 1;
inline void DGItemRefundLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGItemRefundLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGItemRefundLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGItemRefundLoadPacket.pid)
  return _internal_pid();
}
inline void DGItemRefundLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGItemRefundLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGItemRefundLoadPacket.pid)
}

// repeated .network.DGItemRefundLoadPacket.RefundItem items = 2;
inline int DGItemRefundLoadPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGItemRefundLoadPacket::items_size() const {
  return _internal_items_size();
}
inline void DGItemRefundLoadPacket::clear_items() {
  _impl_.items_.Clear();
}
inline ::network::DGItemRefundLoadPacket_RefundItem* DGItemRefundLoadPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGItemRefundLoadPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGItemRefundLoadPacket_RefundItem >*
DGItemRefundLoadPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGItemRefundLoadPacket.items)
  return &_impl_.items_;
}
inline const ::network::DGItemRefundLoadPacket_RefundItem& DGItemRefundLoadPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::DGItemRefundLoadPacket_RefundItem& DGItemRefundLoadPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGItemRefundLoadPacket.items)
  return _internal_items(index);
}
inline ::network::DGItemRefundLoadPacket_RefundItem* DGItemRefundLoadPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::DGItemRefundLoadPacket_RefundItem* DGItemRefundLoadPacket::add_items() {
  ::network::DGItemRefundLoadPacket_RefundItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGItemRefundLoadPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGItemRefundLoadPacket_RefundItem >&
DGItemRefundLoadPacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGItemRefundLoadPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// DGWhisperPlayerExistResultPacket

// uint32 pid = 1;
inline void DGWhisperPlayerExistResultPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGWhisperPlayerExistResultPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGWhisperPlayerExistResultPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerExistResultPacket.pid)
  return _internal_pid();
}
inline void DGWhisperPlayerExistResultPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGWhisperPlayerExistResultPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerExistResultPacket.pid)
}

// bytes message = 2;
inline void DGWhisperPlayerExistResultPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DGWhisperPlayerExistResultPacket::message() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerExistResultPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGWhisperPlayerExistResultPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerExistResultPacket.message)
}
inline std::string* DGWhisperPlayerExistResultPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.DGWhisperPlayerExistResultPacket.message)
  return _s;
}
inline const std::string& DGWhisperPlayerExistResultPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DGWhisperPlayerExistResultPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerExistResultPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerExistResultPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.DGWhisperPlayerExistResultPacket.message)
  return _impl_.message_.Release();
}
inline void DGWhisperPlayerExistResultPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGWhisperPlayerExistResultPacket.message)
}

// bytes target_name = 3;
inline void DGWhisperPlayerExistResultPacket::clear_target_name() {
  _impl_.target_name_.ClearToEmpty();
}
inline const std::string& DGWhisperPlayerExistResultPacket::target_name() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerExistResultPacket.target_name)
  return _internal_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGWhisperPlayerExistResultPacket::set_target_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerExistResultPacket.target_name)
}
inline std::string* DGWhisperPlayerExistResultPacket::mutable_target_name() {
  std::string* _s = _internal_mutable_target_name();
  // @@protoc_insertion_point(field_mutable:network.DGWhisperPlayerExistResultPacket.target_name)
  return _s;
}
inline const std::string& DGWhisperPlayerExistResultPacket::_internal_target_name() const {
  return _impl_.target_name_.Get();
}
inline void DGWhisperPlayerExistResultPacket::_internal_set_target_name(const std::string& value) {
  
  _impl_.target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerExistResultPacket::_internal_mutable_target_name() {
  
  return _impl_.target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerExistResultPacket::release_target_name() {
  // @@protoc_insertion_point(field_release:network.DGWhisperPlayerExistResultPacket.target_name)
  return _impl_.target_name_.Release();
}
inline void DGWhisperPlayerExistResultPacket::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    
  } else {
    
  }
  _impl_.target_name_.SetAllocated(target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_.IsDefault()) {
    _impl_.target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGWhisperPlayerExistResultPacket.target_name)
}

// bool is_exist = 4;
inline void DGWhisperPlayerExistResultPacket::clear_is_exist() {
  _impl_.is_exist_ = false;
}
inline bool DGWhisperPlayerExistResultPacket::_internal_is_exist() const {
  return _impl_.is_exist_;
}
inline bool DGWhisperPlayerExistResultPacket::is_exist() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerExistResultPacket.is_exist)
  return _internal_is_exist();
}
inline void DGWhisperPlayerExistResultPacket::_internal_set_is_exist(bool value) {
  
  _impl_.is_exist_ = value;
}
inline void DGWhisperPlayerExistResultPacket::set_is_exist(bool value) {
  _internal_set_is_exist(value);
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerExistResultPacket.is_exist)
}

// bool is_blocked = 5;
inline void DGWhisperPlayerExistResultPacket::clear_is_blocked() {
  _impl_.is_blocked_ = false;
}
inline bool DGWhisperPlayerExistResultPacket::_internal_is_blocked() const {
  return _impl_.is_blocked_;
}
inline bool DGWhisperPlayerExistResultPacket::is_blocked() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerExistResultPacket.is_blocked)
  return _internal_is_blocked();
}
inline void DGWhisperPlayerExistResultPacket::_internal_set_is_blocked(bool value) {
  
  _impl_.is_blocked_ = value;
}
inline void DGWhisperPlayerExistResultPacket::set_is_blocked(bool value) {
  _internal_set_is_blocked(value);
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerExistResultPacket.is_blocked)
}

// bool return_money = 6;
inline void DGWhisperPlayerExistResultPacket::clear_return_money() {
  _impl_.return_money_ = false;
}
inline bool DGWhisperPlayerExistResultPacket::_internal_return_money() const {
  return _impl_.return_money_;
}
inline bool DGWhisperPlayerExistResultPacket::return_money() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerExistResultPacket.return_money)
  return _internal_return_money();
}
inline void DGWhisperPlayerExistResultPacket::_internal_set_return_money(bool value) {
  
  _impl_.return_money_ = value;
}
inline void DGWhisperPlayerExistResultPacket::set_return_money(bool value) {
  _internal_set_return_money(value);
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerExistResultPacket.return_money)
}

// -------------------------------------------------------------------

// DGWhisperPlayerMessageOfflinePacket

// uint32 pid = 1;
inline void DGWhisperPlayerMessageOfflinePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGWhisperPlayerMessageOfflinePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGWhisperPlayerMessageOfflinePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerMessageOfflinePacket.pid)
  return _internal_pid();
}
inline void DGWhisperPlayerMessageOfflinePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGWhisperPlayerMessageOfflinePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerMessageOfflinePacket.pid)
}

// bytes message = 2;
inline void DGWhisperPlayerMessageOfflinePacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DGWhisperPlayerMessageOfflinePacket::message() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerMessageOfflinePacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGWhisperPlayerMessageOfflinePacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerMessageOfflinePacket.message)
}
inline std::string* DGWhisperPlayerMessageOfflinePacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.DGWhisperPlayerMessageOfflinePacket.message)
  return _s;
}
inline const std::string& DGWhisperPlayerMessageOfflinePacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DGWhisperPlayerMessageOfflinePacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerMessageOfflinePacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerMessageOfflinePacket::release_message() {
  // @@protoc_insertion_point(field_release:network.DGWhisperPlayerMessageOfflinePacket.message)
  return _impl_.message_.Release();
}
inline void DGWhisperPlayerMessageOfflinePacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGWhisperPlayerMessageOfflinePacket.message)
}

// uint32 target_pid = 3;
inline void DGWhisperPlayerMessageOfflinePacket::clear_target_pid() {
  _impl_.target_pid_ = 0u;
}
inline uint32_t DGWhisperPlayerMessageOfflinePacket::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline uint32_t DGWhisperPlayerMessageOfflinePacket::target_pid() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerMessageOfflinePacket.target_pid)
  return _internal_target_pid();
}
inline void DGWhisperPlayerMessageOfflinePacket::_internal_set_target_pid(uint32_t value) {
  
  _impl_.target_pid_ = value;
}
inline void DGWhisperPlayerMessageOfflinePacket::set_target_pid(uint32_t value) {
  _internal_set_target_pid(value);
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerMessageOfflinePacket.target_pid)
}

// bytes target_name = 4;
inline void DGWhisperPlayerMessageOfflinePacket::clear_target_name() {
  _impl_.target_name_.ClearToEmpty();
}
inline const std::string& DGWhisperPlayerMessageOfflinePacket::target_name() const {
  // @@protoc_insertion_point(field_get:network.DGWhisperPlayerMessageOfflinePacket.target_name)
  return _internal_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGWhisperPlayerMessageOfflinePacket::set_target_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGWhisperPlayerMessageOfflinePacket.target_name)
}
inline std::string* DGWhisperPlayerMessageOfflinePacket::mutable_target_name() {
  std::string* _s = _internal_mutable_target_name();
  // @@protoc_insertion_point(field_mutable:network.DGWhisperPlayerMessageOfflinePacket.target_name)
  return _s;
}
inline const std::string& DGWhisperPlayerMessageOfflinePacket::_internal_target_name() const {
  return _impl_.target_name_.Get();
}
inline void DGWhisperPlayerMessageOfflinePacket::_internal_set_target_name(const std::string& value) {
  
  _impl_.target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerMessageOfflinePacket::_internal_mutable_target_name() {
  
  return _impl_.target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DGWhisperPlayerMessageOfflinePacket::release_target_name() {
  // @@protoc_insertion_point(field_release:network.DGWhisperPlayerMessageOfflinePacket.target_name)
  return _impl_.target_name_.Release();
}
inline void DGWhisperPlayerMessageOfflinePacket::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    
  } else {
    
  }
  _impl_.target_name_.SetAllocated(target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_.IsDefault()) {
    _impl_.target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGWhisperPlayerMessageOfflinePacket.target_name)
}

// -------------------------------------------------------------------

// DGReloadXmasRewardsPacket

// repeated .network.TXmasRewards rewards = 1;
inline int DGReloadXmasRewardsPacket::_internal_rewards_size() const {
  return _impl_.rewards_.size();
}
inline int DGReloadXmasRewardsPacket::rewards_size() const {
  return _internal_rewards_size();
}
inline ::network::TXmasRewards* DGReloadXmasRewardsPacket::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGReloadXmasRewardsPacket.rewards)
  return _impl_.rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >*
DGReloadXmasRewardsPacket::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:network.DGReloadXmasRewardsPacket.rewards)
  return &_impl_.rewards_;
}
inline const ::network::TXmasRewards& DGReloadXmasRewardsPacket::_internal_rewards(int index) const {
  return _impl_.rewards_.Get(index);
}
inline const ::network::TXmasRewards& DGReloadXmasRewardsPacket::rewards(int index) const {
  // @@protoc_insertion_point(field_get:network.DGReloadXmasRewardsPacket.rewards)
  return _internal_rewards(index);
}
inline ::network::TXmasRewards* DGReloadXmasRewardsPacket::_internal_add_rewards() {
  return _impl_.rewards_.Add();
}
inline ::network::TXmasRewards* DGReloadXmasRewardsPacket::add_rewards() {
  ::network::TXmasRewards* _add = _internal_add_rewards();
  // @@protoc_insertion_point(field_add:network.DGReloadXmasRewardsPacket.rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TXmasRewards >&
DGReloadXmasRewardsPacket::rewards() const {
  // @@protoc_insertion_point(field_list:network.DGReloadXmasRewardsPacket.rewards)
  return _impl_.rewards_;
}

// -------------------------------------------------------------------

// DGSetAveragePricesPacket_Element

// uint32 vnum = 1;
inline void DGSetAveragePricesPacket_Element::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t DGSetAveragePricesPacket_Element::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t DGSetAveragePricesPacket_Element::vnum() const {
  // @@protoc_insertion_point(field_get:network.DGSetAveragePricesPacket.Element.vnum)
  return _internal_vnum();
}
inline void DGSetAveragePricesPacket_Element::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void DGSetAveragePricesPacket_Element::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.DGSetAveragePricesPacket.Element.vnum)
}

// uint64 price = 2;
inline void DGSetAveragePricesPacket_Element::clear_price() {
  _impl_.price_ = uint64_t{0u};
}
inline uint64_t DGSetAveragePricesPacket_Element::_internal_price() const {
  return _impl_.price_;
}
inline uint64_t DGSetAveragePricesPacket_Element::price() const {
  // @@protoc_insertion_point(field_get:network.DGSetAveragePricesPacket.Element.price)
  return _internal_price();
}
inline void DGSetAveragePricesPacket_Element::_internal_set_price(uint64_t value) {
  
  _impl_.price_ = value;
}
inline void DGSetAveragePricesPacket_Element::set_price(uint64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.DGSetAveragePricesPacket.Element.price)
}

// -------------------------------------------------------------------

// DGSetAveragePricesPacket

// repeated .network.DGSetAveragePricesPacket.Element prices = 1;
inline int DGSetAveragePricesPacket::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int DGSetAveragePricesPacket::prices_size() const {
  return _internal_prices_size();
}
inline void DGSetAveragePricesPacket::clear_prices() {
  _impl_.prices_.Clear();
}
inline ::network::DGSetAveragePricesPacket_Element* DGSetAveragePricesPacket::mutable_prices(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGSetAveragePricesPacket.prices)
  return _impl_.prices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSetAveragePricesPacket_Element >*
DGSetAveragePricesPacket::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:network.DGSetAveragePricesPacket.prices)
  return &_impl_.prices_;
}
inline const ::network::DGSetAveragePricesPacket_Element& DGSetAveragePricesPacket::_internal_prices(int index) const {
  return _impl_.prices_.Get(index);
}
inline const ::network::DGSetAveragePricesPacket_Element& DGSetAveragePricesPacket::prices(int index) const {
  // @@protoc_insertion_point(field_get:network.DGSetAveragePricesPacket.prices)
  return _internal_prices(index);
}
inline ::network::DGSetAveragePricesPacket_Element* DGSetAveragePricesPacket::_internal_add_prices() {
  return _impl_.prices_.Add();
}
inline ::network::DGSetAveragePricesPacket_Element* DGSetAveragePricesPacket::add_prices() {
  ::network::DGSetAveragePricesPacket_Element* _add = _internal_add_prices();
  // @@protoc_insertion_point(field_add:network.DGSetAveragePricesPacket.prices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSetAveragePricesPacket_Element >&
DGSetAveragePricesPacket::prices() const {
  // @@protoc_insertion_point(field_list:network.DGSetAveragePricesPacket.prices)
  return _impl_.prices_;
}

// -------------------------------------------------------------------

// DGSkillColorLoadPacket_SkillColor

// repeated uint32 colors = 1;
inline int DGSkillColorLoadPacket_SkillColor::_internal_colors_size() const {
  return _impl_.colors_.size();
}
inline int DGSkillColorLoadPacket_SkillColor::colors_size() const {
  return _internal_colors_size();
}
inline void DGSkillColorLoadPacket_SkillColor::clear_colors() {
  _impl_.colors_.Clear();
}
inline uint32_t DGSkillColorLoadPacket_SkillColor::_internal_colors(int index) const {
  return _impl_.colors_.Get(index);
}
inline uint32_t DGSkillColorLoadPacket_SkillColor::colors(int index) const {
  // @@protoc_insertion_point(field_get:network.DGSkillColorLoadPacket.SkillColor.colors)
  return _internal_colors(index);
}
inline void DGSkillColorLoadPacket_SkillColor::set_colors(int index, uint32_t value) {
  _impl_.colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGSkillColorLoadPacket.SkillColor.colors)
}
inline void DGSkillColorLoadPacket_SkillColor::_internal_add_colors(uint32_t value) {
  _impl_.colors_.Add(value);
}
inline void DGSkillColorLoadPacket_SkillColor::add_colors(uint32_t value) {
  _internal_add_colors(value);
  // @@protoc_insertion_point(field_add:network.DGSkillColorLoadPacket.SkillColor.colors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGSkillColorLoadPacket_SkillColor::_internal_colors() const {
  return _impl_.colors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGSkillColorLoadPacket_SkillColor::colors() const {
  // @@protoc_insertion_point(field_list:network.DGSkillColorLoadPacket.SkillColor.colors)
  return _internal_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGSkillColorLoadPacket_SkillColor::_internal_mutable_colors() {
  return &_impl_.colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGSkillColorLoadPacket_SkillColor::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.DGSkillColorLoadPacket.SkillColor.colors)
  return _internal_mutable_colors();
}

// -------------------------------------------------------------------

// DGSkillColorLoadPacket

// repeated .network.DGSkillColorLoadPacket.SkillColor colors = 1;
inline int DGSkillColorLoadPacket::_internal_colors_size() const {
  return _impl_.colors_.size();
}
inline int DGSkillColorLoadPacket::colors_size() const {
  return _internal_colors_size();
}
inline void DGSkillColorLoadPacket::clear_colors() {
  _impl_.colors_.Clear();
}
inline ::network::DGSkillColorLoadPacket_SkillColor* DGSkillColorLoadPacket::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGSkillColorLoadPacket.colors)
  return _impl_.colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSkillColorLoadPacket_SkillColor >*
DGSkillColorLoadPacket::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.DGSkillColorLoadPacket.colors)
  return &_impl_.colors_;
}
inline const ::network::DGSkillColorLoadPacket_SkillColor& DGSkillColorLoadPacket::_internal_colors(int index) const {
  return _impl_.colors_.Get(index);
}
inline const ::network::DGSkillColorLoadPacket_SkillColor& DGSkillColorLoadPacket::colors(int index) const {
  // @@protoc_insertion_point(field_get:network.DGSkillColorLoadPacket.colors)
  return _internal_colors(index);
}
inline ::network::DGSkillColorLoadPacket_SkillColor* DGSkillColorLoadPacket::_internal_add_colors() {
  return _impl_.colors_.Add();
}
inline ::network::DGSkillColorLoadPacket_SkillColor* DGSkillColorLoadPacket::add_colors() {
  ::network::DGSkillColorLoadPacket_SkillColor* _add = _internal_add_colors();
  // @@protoc_insertion_point(field_add:network.DGSkillColorLoadPacket.colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::DGSkillColorLoadPacket_SkillColor >&
DGSkillColorLoadPacket::colors() const {
  // @@protoc_insertion_point(field_list:network.DGSkillColorLoadPacket.colors)
  return _impl_.colors_;
}

// -------------------------------------------------------------------

// DGEquipmentPageLoadPacket

// uint32 pid = 1;
inline void DGEquipmentPageLoadPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGEquipmentPageLoadPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGEquipmentPageLoadPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGEquipmentPageLoadPacket.pid)
  return _internal_pid();
}
inline void DGEquipmentPageLoadPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGEquipmentPageLoadPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGEquipmentPageLoadPacket.pid)
}

// repeated .network.TEquipmentChangerTable equipments = 2;
inline int DGEquipmentPageLoadPacket::_internal_equipments_size() const {
  return _impl_.equipments_.size();
}
inline int DGEquipmentPageLoadPacket::equipments_size() const {
  return _internal_equipments_size();
}
inline ::network::TEquipmentChangerTable* DGEquipmentPageLoadPacket::mutable_equipments(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGEquipmentPageLoadPacket.equipments)
  return _impl_.equipments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >*
DGEquipmentPageLoadPacket::mutable_equipments() {
  // @@protoc_insertion_point(field_mutable_list:network.DGEquipmentPageLoadPacket.equipments)
  return &_impl_.equipments_;
}
inline const ::network::TEquipmentChangerTable& DGEquipmentPageLoadPacket::_internal_equipments(int index) const {
  return _impl_.equipments_.Get(index);
}
inline const ::network::TEquipmentChangerTable& DGEquipmentPageLoadPacket::equipments(int index) const {
  // @@protoc_insertion_point(field_get:network.DGEquipmentPageLoadPacket.equipments)
  return _internal_equipments(index);
}
inline ::network::TEquipmentChangerTable* DGEquipmentPageLoadPacket::_internal_add_equipments() {
  return _impl_.equipments_.Add();
}
inline ::network::TEquipmentChangerTable* DGEquipmentPageLoadPacket::add_equipments() {
  ::network::TEquipmentChangerTable* _add = _internal_add_equipments();
  // @@protoc_insertion_point(field_add:network.DGEquipmentPageLoadPacket.equipments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >&
DGEquipmentPageLoadPacket::equipments() const {
  // @@protoc_insertion_point(field_list:network.DGEquipmentPageLoadPacket.equipments)
  return _impl_.equipments_;
}

// -------------------------------------------------------------------

// DGGuildDungeonPacket

// uint32 guild_id = 1;
inline void DGGuildDungeonPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildDungeonPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildDungeonPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildDungeonPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildDungeonPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildDungeonPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildDungeonPacket.guild_id)
}

// uint32 channel = 2;
inline void DGGuildDungeonPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t DGGuildDungeonPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t DGGuildDungeonPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.DGGuildDungeonPacket.channel)
  return _internal_channel();
}
inline void DGGuildDungeonPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void DGGuildDungeonPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.DGGuildDungeonPacket.channel)
}

// uint32 map_index = 3;
inline void DGGuildDungeonPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t DGGuildDungeonPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t DGGuildDungeonPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.DGGuildDungeonPacket.map_index)
  return _internal_map_index();
}
inline void DGGuildDungeonPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void DGGuildDungeonPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.DGGuildDungeonPacket.map_index)
}

// -------------------------------------------------------------------

// DGGuildDungeonCDPacket

// uint32 guild_id = 1;
inline void DGGuildDungeonCDPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildDungeonCDPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildDungeonCDPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildDungeonCDPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildDungeonCDPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildDungeonCDPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildDungeonCDPacket.guild_id)
}

// uint32 time = 2;
inline void DGGuildDungeonCDPacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t DGGuildDungeonCDPacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t DGGuildDungeonCDPacket::time() const {
  // @@protoc_insertion_point(field_get:network.DGGuildDungeonCDPacket.time)
  return _internal_time();
}
inline void DGGuildDungeonCDPacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void DGGuildDungeonCDPacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.DGGuildDungeonCDPacket.time)
}

// -------------------------------------------------------------------

// DGMaintenancePacket

// int32 shutdown_timer = 1;
inline void DGMaintenancePacket::clear_shutdown_timer() {
  _impl_.shutdown_timer_ = 0;
}
inline int32_t DGMaintenancePacket::_internal_shutdown_timer() const {
  return _impl_.shutdown_timer_;
}
inline int32_t DGMaintenancePacket::shutdown_timer() const {
  // @@protoc_insertion_point(field_get:network.DGMaintenancePacket.shutdown_timer)
  return _internal_shutdown_timer();
}
inline void DGMaintenancePacket::_internal_set_shutdown_timer(int32_t value) {
  
  _impl_.shutdown_timer_ = value;
}
inline void DGMaintenancePacket::set_shutdown_timer(int32_t value) {
  _internal_set_shutdown_timer(value);
  // @@protoc_insertion_point(field_set:network.DGMaintenancePacket.shutdown_timer)
}

// bool maintenance = 2;
inline void DGMaintenancePacket::clear_maintenance() {
  _impl_.maintenance_ = false;
}
inline bool DGMaintenancePacket::_internal_maintenance() const {
  return _impl_.maintenance_;
}
inline bool DGMaintenancePacket::maintenance() const {
  // @@protoc_insertion_point(field_get:network.DGMaintenancePacket.maintenance)
  return _internal_maintenance();
}
inline void DGMaintenancePacket::_internal_set_maintenance(bool value) {
  
  _impl_.maintenance_ = value;
}
inline void DGMaintenancePacket::set_maintenance(bool value) {
  _internal_set_maintenance(value);
  // @@protoc_insertion_point(field_set:network.DGMaintenancePacket.maintenance)
}

// int32 maintenance_duration = 3;
inline void DGMaintenancePacket::clear_maintenance_duration() {
  _impl_.maintenance_duration_ = 0;
}
inline int32_t DGMaintenancePacket::_internal_maintenance_duration() const {
  return _impl_.maintenance_duration_;
}
inline int32_t DGMaintenancePacket::maintenance_duration() const {
  // @@protoc_insertion_point(field_get:network.DGMaintenancePacket.maintenance_duration)
  return _internal_maintenance_duration();
}
inline void DGMaintenancePacket::_internal_set_maintenance_duration(int32_t value) {
  
  _impl_.maintenance_duration_ = value;
}
inline void DGMaintenancePacket::set_maintenance_duration(int32_t value) {
  _internal_set_maintenance_duration(value);
  // @@protoc_insertion_point(field_set:network.DGMaintenancePacket.maintenance_duration)
}

// -------------------------------------------------------------------

// DGWhitelistIPPacket

// string ip = 1;
inline void DGWhitelistIPPacket::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& DGWhitelistIPPacket::ip() const {
  // @@protoc_insertion_point(field_get:network.DGWhitelistIPPacket.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGWhitelistIPPacket::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGWhitelistIPPacket.ip)
}
inline std::string* DGWhitelistIPPacket::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:network.DGWhitelistIPPacket.ip)
  return _s;
}
inline const std::string& DGWhitelistIPPacket::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void DGWhitelistIPPacket::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DGWhitelistIPPacket::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* DGWhitelistIPPacket::release_ip() {
  // @@protoc_insertion_point(field_release:network.DGWhitelistIPPacket.ip)
  return _impl_.ip_.Release();
}
inline void DGWhitelistIPPacket::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGWhitelistIPPacket.ip)
}

// -------------------------------------------------------------------

// DGAuctionDeletePlayer

// uint32 pid = 1;
inline void DGAuctionDeletePlayer::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGAuctionDeletePlayer::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGAuctionDeletePlayer::pid() const {
  // @@protoc_insertion_point(field_get:network.DGAuctionDeletePlayer.pid)
  return _internal_pid();
}
inline void DGAuctionDeletePlayer::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGAuctionDeletePlayer::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGAuctionDeletePlayer.pid)
}

// -------------------------------------------------------------------

// DGCreateObjectPacket

// .network.TBuildingObject object = 1;
inline bool DGCreateObjectPacket::_internal_has_object() const {
  return this != internal_default_instance() && _impl_.object_ != nullptr;
}
inline bool DGCreateObjectPacket::has_object() const {
  return _internal_has_object();
}
inline const ::network::TBuildingObject& DGCreateObjectPacket::_internal_object() const {
  const ::network::TBuildingObject* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TBuildingObject&>(
      ::network::_TBuildingObject_default_instance_);
}
inline const ::network::TBuildingObject& DGCreateObjectPacket::object() const {
  // @@protoc_insertion_point(field_get:network.DGCreateObjectPacket.object)
  return _internal_object();
}
inline void DGCreateObjectPacket::unsafe_arena_set_allocated_object(
    ::network::TBuildingObject* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGCreateObjectPacket.object)
}
inline ::network::TBuildingObject* DGCreateObjectPacket::release_object() {
  
  ::network::TBuildingObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TBuildingObject* DGCreateObjectPacket::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:network.DGCreateObjectPacket.object)
  
  ::network::TBuildingObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::network::TBuildingObject* DGCreateObjectPacket::_internal_mutable_object() {
  
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TBuildingObject>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::network::TBuildingObject* DGCreateObjectPacket::mutable_object() {
  ::network::TBuildingObject* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:network.DGCreateObjectPacket.object)
  return _msg;
}
inline void DGCreateObjectPacket::set_allocated_object(::network::TBuildingObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object));
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:network.DGCreateObjectPacket.object)
}

// -------------------------------------------------------------------

// DGDeleteObjectPacket

// uint32 id = 1;
inline void DGDeleteObjectPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DGDeleteObjectPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DGDeleteObjectPacket::id() const {
  // @@protoc_insertion_point(field_get:network.DGDeleteObjectPacket.id)
  return _internal_id();
}
inline void DGDeleteObjectPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DGDeleteObjectPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.DGDeleteObjectPacket.id)
}

// -------------------------------------------------------------------

// DGUpdateLandPacket

// .network.TBuildingLand land = 1;
inline bool DGUpdateLandPacket::_internal_has_land() const {
  return this != internal_default_instance() && _impl_.land_ != nullptr;
}
inline bool DGUpdateLandPacket::has_land() const {
  return _internal_has_land();
}
inline const ::network::TBuildingLand& DGUpdateLandPacket::_internal_land() const {
  const ::network::TBuildingLand* p = _impl_.land_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TBuildingLand&>(
      ::network::_TBuildingLand_default_instance_);
}
inline const ::network::TBuildingLand& DGUpdateLandPacket::land() const {
  // @@protoc_insertion_point(field_get:network.DGUpdateLandPacket.land)
  return _internal_land();
}
inline void DGUpdateLandPacket::unsafe_arena_set_allocated_land(
    ::network::TBuildingLand* land) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.land_);
  }
  _impl_.land_ = land;
  if (land) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGUpdateLandPacket.land)
}
inline ::network::TBuildingLand* DGUpdateLandPacket::release_land() {
  
  ::network::TBuildingLand* temp = _impl_.land_;
  _impl_.land_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TBuildingLand* DGUpdateLandPacket::unsafe_arena_release_land() {
  // @@protoc_insertion_point(field_release:network.DGUpdateLandPacket.land)
  
  ::network::TBuildingLand* temp = _impl_.land_;
  _impl_.land_ = nullptr;
  return temp;
}
inline ::network::TBuildingLand* DGUpdateLandPacket::_internal_mutable_land() {
  
  if (_impl_.land_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TBuildingLand>(GetArenaForAllocation());
    _impl_.land_ = p;
  }
  return _impl_.land_;
}
inline ::network::TBuildingLand* DGUpdateLandPacket::mutable_land() {
  ::network::TBuildingLand* _msg = _internal_mutable_land();
  // @@protoc_insertion_point(field_mutable:network.DGUpdateLandPacket.land)
  return _msg;
}
inline void DGUpdateLandPacket::set_allocated_land(::network::TBuildingLand* land) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.land_);
  }
  if (land) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(land));
    if (message_arena != submessage_arena) {
      land = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, land, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.land_ = land;
  // @@protoc_insertion_point(field_set_allocated:network.DGUpdateLandPacket.land)
}

// -------------------------------------------------------------------

// DGMarriageAddPacket

// uint32 pid1 = 1;
inline void DGMarriageAddPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGMarriageAddPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGMarriageAddPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageAddPacket.pid1)
  return _internal_pid1();
}
inline void DGMarriageAddPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGMarriageAddPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageAddPacket.pid1)
}

// uint32 pid2 = 2;
inline void DGMarriageAddPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGMarriageAddPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGMarriageAddPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageAddPacket.pid2)
  return _internal_pid2();
}
inline void DGMarriageAddPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGMarriageAddPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageAddPacket.pid2)
}

// uint32 marry_time = 3;
inline void DGMarriageAddPacket::clear_marry_time() {
  _impl_.marry_time_ = 0u;
}
inline uint32_t DGMarriageAddPacket::_internal_marry_time() const {
  return _impl_.marry_time_;
}
inline uint32_t DGMarriageAddPacket::marry_time() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageAddPacket.marry_time)
  return _internal_marry_time();
}
inline void DGMarriageAddPacket::_internal_set_marry_time(uint32_t value) {
  
  _impl_.marry_time_ = value;
}
inline void DGMarriageAddPacket::set_marry_time(uint32_t value) {
  _internal_set_marry_time(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageAddPacket.marry_time)
}

// bytes name1 = 4;
inline void DGMarriageAddPacket::clear_name1() {
  _impl_.name1_.ClearToEmpty();
}
inline const std::string& DGMarriageAddPacket::name1() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageAddPacket.name1)
  return _internal_name1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGMarriageAddPacket::set_name1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGMarriageAddPacket.name1)
}
inline std::string* DGMarriageAddPacket::mutable_name1() {
  std::string* _s = _internal_mutable_name1();
  // @@protoc_insertion_point(field_mutable:network.DGMarriageAddPacket.name1)
  return _s;
}
inline const std::string& DGMarriageAddPacket::_internal_name1() const {
  return _impl_.name1_.Get();
}
inline void DGMarriageAddPacket::_internal_set_name1(const std::string& value) {
  
  _impl_.name1_.Set(value, GetArenaForAllocation());
}
inline std::string* DGMarriageAddPacket::_internal_mutable_name1() {
  
  return _impl_.name1_.Mutable(GetArenaForAllocation());
}
inline std::string* DGMarriageAddPacket::release_name1() {
  // @@protoc_insertion_point(field_release:network.DGMarriageAddPacket.name1)
  return _impl_.name1_.Release();
}
inline void DGMarriageAddPacket::set_allocated_name1(std::string* name1) {
  if (name1 != nullptr) {
    
  } else {
    
  }
  _impl_.name1_.SetAllocated(name1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name1_.IsDefault()) {
    _impl_.name1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGMarriageAddPacket.name1)
}

// bytes name2 = 5;
inline void DGMarriageAddPacket::clear_name2() {
  _impl_.name2_.ClearToEmpty();
}
inline const std::string& DGMarriageAddPacket::name2() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageAddPacket.name2)
  return _internal_name2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGMarriageAddPacket::set_name2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGMarriageAddPacket.name2)
}
inline std::string* DGMarriageAddPacket::mutable_name2() {
  std::string* _s = _internal_mutable_name2();
  // @@protoc_insertion_point(field_mutable:network.DGMarriageAddPacket.name2)
  return _s;
}
inline const std::string& DGMarriageAddPacket::_internal_name2() const {
  return _impl_.name2_.Get();
}
inline void DGMarriageAddPacket::_internal_set_name2(const std::string& value) {
  
  _impl_.name2_.Set(value, GetArenaForAllocation());
}
inline std::string* DGMarriageAddPacket::_internal_mutable_name2() {
  
  return _impl_.name2_.Mutable(GetArenaForAllocation());
}
inline std::string* DGMarriageAddPacket::release_name2() {
  // @@protoc_insertion_point(field_release:network.DGMarriageAddPacket.name2)
  return _impl_.name2_.Release();
}
inline void DGMarriageAddPacket::set_allocated_name2(std::string* name2) {
  if (name2 != nullptr) {
    
  } else {
    
  }
  _impl_.name2_.SetAllocated(name2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name2_.IsDefault()) {
    _impl_.name2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGMarriageAddPacket.name2)
}

// -------------------------------------------------------------------

// DGMarriageUpdatePacket

// uint32 pid1 = 1;
inline void DGMarriageUpdatePacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGMarriageUpdatePacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGMarriageUpdatePacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageUpdatePacket.pid1)
  return _internal_pid1();
}
inline void DGMarriageUpdatePacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGMarriageUpdatePacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageUpdatePacket.pid1)
}

// uint32 pid2 = 2;
inline void DGMarriageUpdatePacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGMarriageUpdatePacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGMarriageUpdatePacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageUpdatePacket.pid2)
  return _internal_pid2();
}
inline void DGMarriageUpdatePacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGMarriageUpdatePacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageUpdatePacket.pid2)
}

// int32 love_point = 3;
inline void DGMarriageUpdatePacket::clear_love_point() {
  _impl_.love_point_ = 0;
}
inline int32_t DGMarriageUpdatePacket::_internal_love_point() const {
  return _impl_.love_point_;
}
inline int32_t DGMarriageUpdatePacket::love_point() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageUpdatePacket.love_point)
  return _internal_love_point();
}
inline void DGMarriageUpdatePacket::_internal_set_love_point(int32_t value) {
  
  _impl_.love_point_ = value;
}
inline void DGMarriageUpdatePacket::set_love_point(int32_t value) {
  _internal_set_love_point(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageUpdatePacket.love_point)
}

// bool married = 4;
inline void DGMarriageUpdatePacket::clear_married() {
  _impl_.married_ = false;
}
inline bool DGMarriageUpdatePacket::_internal_married() const {
  return _impl_.married_;
}
inline bool DGMarriageUpdatePacket::married() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageUpdatePacket.married)
  return _internal_married();
}
inline void DGMarriageUpdatePacket::_internal_set_married(bool value) {
  
  _impl_.married_ = value;
}
inline void DGMarriageUpdatePacket::set_married(bool value) {
  _internal_set_married(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageUpdatePacket.married)
}

// -------------------------------------------------------------------

// DGMarriageRemovePacket

// uint32 pid1 = 1;
inline void DGMarriageRemovePacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGMarriageRemovePacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGMarriageRemovePacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageRemovePacket.pid1)
  return _internal_pid1();
}
inline void DGMarriageRemovePacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGMarriageRemovePacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageRemovePacket.pid1)
}

// uint32 pid2 = 2;
inline void DGMarriageRemovePacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGMarriageRemovePacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGMarriageRemovePacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGMarriageRemovePacket.pid2)
  return _internal_pid2();
}
inline void DGMarriageRemovePacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGMarriageRemovePacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGMarriageRemovePacket.pid2)
}

// -------------------------------------------------------------------

// DGWeddingRequestPacket

// uint32 pid1 = 1;
inline void DGWeddingRequestPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGWeddingRequestPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGWeddingRequestPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingRequestPacket.pid1)
  return _internal_pid1();
}
inline void DGWeddingRequestPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGWeddingRequestPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingRequestPacket.pid1)
}

// uint32 pid2 = 2;
inline void DGWeddingRequestPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGWeddingRequestPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGWeddingRequestPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingRequestPacket.pid2)
  return _internal_pid2();
}
inline void DGWeddingRequestPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGWeddingRequestPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingRequestPacket.pid2)
}

// -------------------------------------------------------------------

// DGWeddingReadyPacket

// uint32 pid1 = 1;
inline void DGWeddingReadyPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGWeddingReadyPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGWeddingReadyPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingReadyPacket.pid1)
  return _internal_pid1();
}
inline void DGWeddingReadyPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGWeddingReadyPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingReadyPacket.pid1)
}

// uint32 pid2 = 2;
inline void DGWeddingReadyPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGWeddingReadyPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGWeddingReadyPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingReadyPacket.pid2)
  return _internal_pid2();
}
inline void DGWeddingReadyPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGWeddingReadyPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingReadyPacket.pid2)
}

// uint32 map_index = 3;
inline void DGWeddingReadyPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t DGWeddingReadyPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t DGWeddingReadyPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingReadyPacket.map_index)
  return _internal_map_index();
}
inline void DGWeddingReadyPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void DGWeddingReadyPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingReadyPacket.map_index)
}

// -------------------------------------------------------------------

// DGWeddingStartPacket

// uint32 pid1 = 1;
inline void DGWeddingStartPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGWeddingStartPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGWeddingStartPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingStartPacket.pid1)
  return _internal_pid1();
}
inline void DGWeddingStartPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGWeddingStartPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingStartPacket.pid1)
}

// uint32 pid2 = 2;
inline void DGWeddingStartPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGWeddingStartPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGWeddingStartPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingStartPacket.pid2)
  return _internal_pid2();
}
inline void DGWeddingStartPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGWeddingStartPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingStartPacket.pid2)
}

// -------------------------------------------------------------------

// DGWeddingEndPacket

// uint32 pid1 = 1;
inline void DGWeddingEndPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t DGWeddingEndPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t DGWeddingEndPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingEndPacket.pid1)
  return _internal_pid1();
}
inline void DGWeddingEndPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void DGWeddingEndPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingEndPacket.pid1)
}

// uint32 pid2 = 2;
inline void DGWeddingEndPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t DGWeddingEndPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t DGWeddingEndPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.DGWeddingEndPacket.pid2)
  return _internal_pid2();
}
inline void DGWeddingEndPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void DGWeddingEndPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.DGWeddingEndPacket.pid2)
}

// -------------------------------------------------------------------

// DGBillingRepairPacket

// repeated uint32 login_keys = 1;
inline int DGBillingRepairPacket::_internal_login_keys_size() const {
  return _impl_.login_keys_.size();
}
inline int DGBillingRepairPacket::login_keys_size() const {
  return _internal_login_keys_size();
}
inline void DGBillingRepairPacket::clear_login_keys() {
  _impl_.login_keys_.Clear();
}
inline uint32_t DGBillingRepairPacket::_internal_login_keys(int index) const {
  return _impl_.login_keys_.Get(index);
}
inline uint32_t DGBillingRepairPacket::login_keys(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBillingRepairPacket.login_keys)
  return _internal_login_keys(index);
}
inline void DGBillingRepairPacket::set_login_keys(int index, uint32_t value) {
  _impl_.login_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGBillingRepairPacket.login_keys)
}
inline void DGBillingRepairPacket::_internal_add_login_keys(uint32_t value) {
  _impl_.login_keys_.Add(value);
}
inline void DGBillingRepairPacket::add_login_keys(uint32_t value) {
  _internal_add_login_keys(value);
  // @@protoc_insertion_point(field_add:network.DGBillingRepairPacket.login_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingRepairPacket::_internal_login_keys() const {
  return _impl_.login_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingRepairPacket::login_keys() const {
  // @@protoc_insertion_point(field_list:network.DGBillingRepairPacket.login_keys)
  return _internal_login_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingRepairPacket::_internal_mutable_login_keys() {
  return &_impl_.login_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingRepairPacket::mutable_login_keys() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBillingRepairPacket.login_keys)
  return _internal_mutable_login_keys();
}

// repeated bytes logins = 2;
inline int DGBillingRepairPacket::_internal_logins_size() const {
  return _impl_.logins_.size();
}
inline int DGBillingRepairPacket::logins_size() const {
  return _internal_logins_size();
}
inline void DGBillingRepairPacket::clear_logins() {
  _impl_.logins_.Clear();
}
inline std::string* DGBillingRepairPacket::add_logins() {
  std::string* _s = _internal_add_logins();
  // @@protoc_insertion_point(field_add_mutable:network.DGBillingRepairPacket.logins)
  return _s;
}
inline const std::string& DGBillingRepairPacket::_internal_logins(int index) const {
  return _impl_.logins_.Get(index);
}
inline const std::string& DGBillingRepairPacket::logins(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBillingRepairPacket.logins)
  return _internal_logins(index);
}
inline std::string* DGBillingRepairPacket::mutable_logins(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBillingRepairPacket.logins)
  return _impl_.logins_.Mutable(index);
}
inline void DGBillingRepairPacket::set_logins(int index, const std::string& value) {
  _impl_.logins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.DGBillingRepairPacket.logins)
}
inline void DGBillingRepairPacket::set_logins(int index, std::string&& value) {
  _impl_.logins_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.DGBillingRepairPacket.logins)
}
inline void DGBillingRepairPacket::set_logins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.DGBillingRepairPacket.logins)
}
inline void DGBillingRepairPacket::set_logins(int index, const void* value, size_t size) {
  _impl_.logins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.DGBillingRepairPacket.logins)
}
inline std::string* DGBillingRepairPacket::_internal_add_logins() {
  return _impl_.logins_.Add();
}
inline void DGBillingRepairPacket::add_logins(const std::string& value) {
  _impl_.logins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.DGBillingRepairPacket.logins)
}
inline void DGBillingRepairPacket::add_logins(std::string&& value) {
  _impl_.logins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.DGBillingRepairPacket.logins)
}
inline void DGBillingRepairPacket::add_logins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.DGBillingRepairPacket.logins)
}
inline void DGBillingRepairPacket::add_logins(const void* value, size_t size) {
  _impl_.logins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.DGBillingRepairPacket.logins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DGBillingRepairPacket::logins() const {
  // @@protoc_insertion_point(field_list:network.DGBillingRepairPacket.logins)
  return _impl_.logins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DGBillingRepairPacket::mutable_logins() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBillingRepairPacket.logins)
  return &_impl_.logins_;
}

// repeated bytes hosts = 3;
inline int DGBillingRepairPacket::_internal_hosts_size() const {
  return _impl_.hosts_.size();
}
inline int DGBillingRepairPacket::hosts_size() const {
  return _internal_hosts_size();
}
inline void DGBillingRepairPacket::clear_hosts() {
  _impl_.hosts_.Clear();
}
inline std::string* DGBillingRepairPacket::add_hosts() {
  std::string* _s = _internal_add_hosts();
  // @@protoc_insertion_point(field_add_mutable:network.DGBillingRepairPacket.hosts)
  return _s;
}
inline const std::string& DGBillingRepairPacket::_internal_hosts(int index) const {
  return _impl_.hosts_.Get(index);
}
inline const std::string& DGBillingRepairPacket::hosts(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBillingRepairPacket.hosts)
  return _internal_hosts(index);
}
inline std::string* DGBillingRepairPacket::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGBillingRepairPacket.hosts)
  return _impl_.hosts_.Mutable(index);
}
inline void DGBillingRepairPacket::set_hosts(int index, const std::string& value) {
  _impl_.hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.DGBillingRepairPacket.hosts)
}
inline void DGBillingRepairPacket::set_hosts(int index, std::string&& value) {
  _impl_.hosts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.DGBillingRepairPacket.hosts)
}
inline void DGBillingRepairPacket::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.DGBillingRepairPacket.hosts)
}
inline void DGBillingRepairPacket::set_hosts(int index, const void* value, size_t size) {
  _impl_.hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.DGBillingRepairPacket.hosts)
}
inline std::string* DGBillingRepairPacket::_internal_add_hosts() {
  return _impl_.hosts_.Add();
}
inline void DGBillingRepairPacket::add_hosts(const std::string& value) {
  _impl_.hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.DGBillingRepairPacket.hosts)
}
inline void DGBillingRepairPacket::add_hosts(std::string&& value) {
  _impl_.hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.DGBillingRepairPacket.hosts)
}
inline void DGBillingRepairPacket::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.DGBillingRepairPacket.hosts)
}
inline void DGBillingRepairPacket::add_hosts(const void* value, size_t size) {
  _impl_.hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.DGBillingRepairPacket.hosts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DGBillingRepairPacket::hosts() const {
  // @@protoc_insertion_point(field_list:network.DGBillingRepairPacket.hosts)
  return _impl_.hosts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DGBillingRepairPacket::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBillingRepairPacket.hosts)
  return &_impl_.hosts_;
}

// -------------------------------------------------------------------

// DGBillingExpirePacket

// bytes login = 1;
inline void DGBillingExpirePacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& DGBillingExpirePacket::login() const {
  // @@protoc_insertion_point(field_get:network.DGBillingExpirePacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGBillingExpirePacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGBillingExpirePacket.login)
}
inline std::string* DGBillingExpirePacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.DGBillingExpirePacket.login)
  return _s;
}
inline const std::string& DGBillingExpirePacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void DGBillingExpirePacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* DGBillingExpirePacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* DGBillingExpirePacket::release_login() {
  // @@protoc_insertion_point(field_release:network.DGBillingExpirePacket.login)
  return _impl_.login_.Release();
}
inline void DGBillingExpirePacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGBillingExpirePacket.login)
}

// uint32 bill_type = 2;
inline void DGBillingExpirePacket::clear_bill_type() {
  _impl_.bill_type_ = 0u;
}
inline uint32_t DGBillingExpirePacket::_internal_bill_type() const {
  return _impl_.bill_type_;
}
inline uint32_t DGBillingExpirePacket::bill_type() const {
  // @@protoc_insertion_point(field_get:network.DGBillingExpirePacket.bill_type)
  return _internal_bill_type();
}
inline void DGBillingExpirePacket::_internal_set_bill_type(uint32_t value) {
  
  _impl_.bill_type_ = value;
}
inline void DGBillingExpirePacket::set_bill_type(uint32_t value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:network.DGBillingExpirePacket.bill_type)
}

// uint32 remain_seconds = 3;
inline void DGBillingExpirePacket::clear_remain_seconds() {
  _impl_.remain_seconds_ = 0u;
}
inline uint32_t DGBillingExpirePacket::_internal_remain_seconds() const {
  return _impl_.remain_seconds_;
}
inline uint32_t DGBillingExpirePacket::remain_seconds() const {
  // @@protoc_insertion_point(field_get:network.DGBillingExpirePacket.remain_seconds)
  return _internal_remain_seconds();
}
inline void DGBillingExpirePacket::_internal_set_remain_seconds(uint32_t value) {
  
  _impl_.remain_seconds_ = value;
}
inline void DGBillingExpirePacket::set_remain_seconds(uint32_t value) {
  _internal_set_remain_seconds(value);
  // @@protoc_insertion_point(field_set:network.DGBillingExpirePacket.remain_seconds)
}

// -------------------------------------------------------------------

// DGBillingLoginPacket

// repeated uint32 login_keys = 1;
inline int DGBillingLoginPacket::_internal_login_keys_size() const {
  return _impl_.login_keys_.size();
}
inline int DGBillingLoginPacket::login_keys_size() const {
  return _internal_login_keys_size();
}
inline void DGBillingLoginPacket::clear_login_keys() {
  _impl_.login_keys_.Clear();
}
inline uint32_t DGBillingLoginPacket::_internal_login_keys(int index) const {
  return _impl_.login_keys_.Get(index);
}
inline uint32_t DGBillingLoginPacket::login_keys(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBillingLoginPacket.login_keys)
  return _internal_login_keys(index);
}
inline void DGBillingLoginPacket::set_login_keys(int index, uint32_t value) {
  _impl_.login_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGBillingLoginPacket.login_keys)
}
inline void DGBillingLoginPacket::_internal_add_login_keys(uint32_t value) {
  _impl_.login_keys_.Add(value);
}
inline void DGBillingLoginPacket::add_login_keys(uint32_t value) {
  _internal_add_login_keys(value);
  // @@protoc_insertion_point(field_add:network.DGBillingLoginPacket.login_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingLoginPacket::_internal_login_keys() const {
  return _impl_.login_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingLoginPacket::login_keys() const {
  // @@protoc_insertion_point(field_list:network.DGBillingLoginPacket.login_keys)
  return _internal_login_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingLoginPacket::_internal_mutable_login_keys() {
  return &_impl_.login_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingLoginPacket::mutable_login_keys() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBillingLoginPacket.login_keys)
  return _internal_mutable_login_keys();
}

// repeated uint32 logins = 2;
inline int DGBillingLoginPacket::_internal_logins_size() const {
  return _impl_.logins_.size();
}
inline int DGBillingLoginPacket::logins_size() const {
  return _internal_logins_size();
}
inline void DGBillingLoginPacket::clear_logins() {
  _impl_.logins_.Clear();
}
inline uint32_t DGBillingLoginPacket::_internal_logins(int index) const {
  return _impl_.logins_.Get(index);
}
inline uint32_t DGBillingLoginPacket::logins(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBillingLoginPacket.logins)
  return _internal_logins(index);
}
inline void DGBillingLoginPacket::set_logins(int index, uint32_t value) {
  _impl_.logins_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGBillingLoginPacket.logins)
}
inline void DGBillingLoginPacket::_internal_add_logins(uint32_t value) {
  _impl_.logins_.Add(value);
}
inline void DGBillingLoginPacket::add_logins(uint32_t value) {
  _internal_add_logins(value);
  // @@protoc_insertion_point(field_add:network.DGBillingLoginPacket.logins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingLoginPacket::_internal_logins() const {
  return _impl_.logins_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingLoginPacket::logins() const {
  // @@protoc_insertion_point(field_list:network.DGBillingLoginPacket.logins)
  return _internal_logins();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingLoginPacket::_internal_mutable_logins() {
  return &_impl_.logins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingLoginPacket::mutable_logins() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBillingLoginPacket.logins)
  return _internal_mutable_logins();
}

// -------------------------------------------------------------------

// DGBillingCheckPacket

// repeated uint32 keys = 1;
inline int DGBillingCheckPacket::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int DGBillingCheckPacket::keys_size() const {
  return _internal_keys_size();
}
inline void DGBillingCheckPacket::clear_keys() {
  _impl_.keys_.Clear();
}
inline uint32_t DGBillingCheckPacket::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline uint32_t DGBillingCheckPacket::keys(int index) const {
  // @@protoc_insertion_point(field_get:network.DGBillingCheckPacket.keys)
  return _internal_keys(index);
}
inline void DGBillingCheckPacket::set_keys(int index, uint32_t value) {
  _impl_.keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGBillingCheckPacket.keys)
}
inline void DGBillingCheckPacket::_internal_add_keys(uint32_t value) {
  _impl_.keys_.Add(value);
}
inline void DGBillingCheckPacket::add_keys(uint32_t value) {
  _internal_add_keys(value);
  // @@protoc_insertion_point(field_add:network.DGBillingCheckPacket.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingCheckPacket::_internal_keys() const {
  return _impl_.keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGBillingCheckPacket::keys() const {
  // @@protoc_insertion_point(field_list:network.DGBillingCheckPacket.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingCheckPacket::_internal_mutable_keys() {
  return &_impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGBillingCheckPacket::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:network.DGBillingCheckPacket.keys)
  return _internal_mutable_keys();
}

// -------------------------------------------------------------------

// DGGuildLoadPacket

// uint32 guild_id = 1;
inline void DGGuildLoadPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildLoadPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildLoadPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildLoadPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildLoadPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildLoadPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildLoadPacket.guild_id)
}

// -------------------------------------------------------------------

// DGGuildSkillUpdatePacket

// uint32 guild_id = 1;
inline void DGGuildSkillUpdatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildSkillUpdatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildSkillUpdatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUpdatePacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildSkillUpdatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildSkillUpdatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUpdatePacket.guild_id)
}

// int32 amount = 2;
inline void DGGuildSkillUpdatePacket::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t DGGuildSkillUpdatePacket::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t DGGuildSkillUpdatePacket::amount() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUpdatePacket.amount)
  return _internal_amount();
}
inline void DGGuildSkillUpdatePacket::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void DGGuildSkillUpdatePacket::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUpdatePacket.amount)
}

// repeated uint32 skill_levels = 3;
inline int DGGuildSkillUpdatePacket::_internal_skill_levels_size() const {
  return _impl_.skill_levels_.size();
}
inline int DGGuildSkillUpdatePacket::skill_levels_size() const {
  return _internal_skill_levels_size();
}
inline void DGGuildSkillUpdatePacket::clear_skill_levels() {
  _impl_.skill_levels_.Clear();
}
inline uint32_t DGGuildSkillUpdatePacket::_internal_skill_levels(int index) const {
  return _impl_.skill_levels_.Get(index);
}
inline uint32_t DGGuildSkillUpdatePacket::skill_levels(int index) const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUpdatePacket.skill_levels)
  return _internal_skill_levels(index);
}
inline void DGGuildSkillUpdatePacket::set_skill_levels(int index, uint32_t value) {
  _impl_.skill_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUpdatePacket.skill_levels)
}
inline void DGGuildSkillUpdatePacket::_internal_add_skill_levels(uint32_t value) {
  _impl_.skill_levels_.Add(value);
}
inline void DGGuildSkillUpdatePacket::add_skill_levels(uint32_t value) {
  _internal_add_skill_levels(value);
  // @@protoc_insertion_point(field_add:network.DGGuildSkillUpdatePacket.skill_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGGuildSkillUpdatePacket::_internal_skill_levels() const {
  return _impl_.skill_levels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DGGuildSkillUpdatePacket::skill_levels() const {
  // @@protoc_insertion_point(field_list:network.DGGuildSkillUpdatePacket.skill_levels)
  return _internal_skill_levels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGGuildSkillUpdatePacket::_internal_mutable_skill_levels() {
  return &_impl_.skill_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DGGuildSkillUpdatePacket::mutable_skill_levels() {
  // @@protoc_insertion_point(field_mutable_list:network.DGGuildSkillUpdatePacket.skill_levels)
  return _internal_mutable_skill_levels();
}

// uint32 skill_point = 4;
inline void DGGuildSkillUpdatePacket::clear_skill_point() {
  _impl_.skill_point_ = 0u;
}
inline uint32_t DGGuildSkillUpdatePacket::_internal_skill_point() const {
  return _impl_.skill_point_;
}
inline uint32_t DGGuildSkillUpdatePacket::skill_point() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUpdatePacket.skill_point)
  return _internal_skill_point();
}
inline void DGGuildSkillUpdatePacket::_internal_set_skill_point(uint32_t value) {
  
  _impl_.skill_point_ = value;
}
inline void DGGuildSkillUpdatePacket::set_skill_point(uint32_t value) {
  _internal_set_skill_point(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUpdatePacket.skill_point)
}

// uint32 save = 5;
inline void DGGuildSkillUpdatePacket::clear_save() {
  _impl_.save_ = 0u;
}
inline uint32_t DGGuildSkillUpdatePacket::_internal_save() const {
  return _impl_.save_;
}
inline uint32_t DGGuildSkillUpdatePacket::save() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUpdatePacket.save)
  return _internal_save();
}
inline void DGGuildSkillUpdatePacket::_internal_set_save(uint32_t value) {
  
  _impl_.save_ = value;
}
inline void DGGuildSkillUpdatePacket::set_save(uint32_t value) {
  _internal_set_save(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUpdatePacket.save)
}

// -------------------------------------------------------------------

// DGGuildExpUpdatePacket

// uint32 guild_id = 1;
inline void DGGuildExpUpdatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildExpUpdatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildExpUpdatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildExpUpdatePacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildExpUpdatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildExpUpdatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildExpUpdatePacket.guild_id)
}

// int32 amount = 2;
inline void DGGuildExpUpdatePacket::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t DGGuildExpUpdatePacket::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t DGGuildExpUpdatePacket::amount() const {
  // @@protoc_insertion_point(field_get:network.DGGuildExpUpdatePacket.amount)
  return _internal_amount();
}
inline void DGGuildExpUpdatePacket::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void DGGuildExpUpdatePacket::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:network.DGGuildExpUpdatePacket.amount)
}

// -------------------------------------------------------------------

// DGGuildAddMemberPacket

// uint32 guild_id = 1;
inline void DGGuildAddMemberPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildAddMemberPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildAddMemberPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildAddMemberPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildAddMemberPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.guild_id)
}

// uint32 pid = 2;
inline void DGGuildAddMemberPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGGuildAddMemberPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGGuildAddMemberPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.pid)
  return _internal_pid();
}
inline void DGGuildAddMemberPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGGuildAddMemberPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.pid)
}

// uint32 grade = 3;
inline void DGGuildAddMemberPacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t DGGuildAddMemberPacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t DGGuildAddMemberPacket::grade() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.grade)
  return _internal_grade();
}
inline void DGGuildAddMemberPacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void DGGuildAddMemberPacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.grade)
}

// bool is_general = 4;
inline void DGGuildAddMemberPacket::clear_is_general() {
  _impl_.is_general_ = false;
}
inline bool DGGuildAddMemberPacket::_internal_is_general() const {
  return _impl_.is_general_;
}
inline bool DGGuildAddMemberPacket::is_general() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.is_general)
  return _internal_is_general();
}
inline void DGGuildAddMemberPacket::_internal_set_is_general(bool value) {
  
  _impl_.is_general_ = value;
}
inline void DGGuildAddMemberPacket::set_is_general(bool value) {
  _internal_set_is_general(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.is_general)
}

// uint32 job = 5;
inline void DGGuildAddMemberPacket::clear_job() {
  _impl_.job_ = 0u;
}
inline uint32_t DGGuildAddMemberPacket::_internal_job() const {
  return _impl_.job_;
}
inline uint32_t DGGuildAddMemberPacket::job() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.job)
  return _internal_job();
}
inline void DGGuildAddMemberPacket::_internal_set_job(uint32_t value) {
  
  _impl_.job_ = value;
}
inline void DGGuildAddMemberPacket::set_job(uint32_t value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.job)
}

// uint32 level = 6;
inline void DGGuildAddMemberPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t DGGuildAddMemberPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t DGGuildAddMemberPacket::level() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.level)
  return _internal_level();
}
inline void DGGuildAddMemberPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void DGGuildAddMemberPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.level)
}

// uint32 offer = 7;
inline void DGGuildAddMemberPacket::clear_offer() {
  _impl_.offer_ = 0u;
}
inline uint32_t DGGuildAddMemberPacket::_internal_offer() const {
  return _impl_.offer_;
}
inline uint32_t DGGuildAddMemberPacket::offer() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.offer)
  return _internal_offer();
}
inline void DGGuildAddMemberPacket::_internal_set_offer(uint32_t value) {
  
  _impl_.offer_ = value;
}
inline void DGGuildAddMemberPacket::set_offer(uint32_t value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.offer)
}

// bytes name = 8;
inline void DGGuildAddMemberPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DGGuildAddMemberPacket::name() const {
  // @@protoc_insertion_point(field_get:network.DGGuildAddMemberPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGGuildAddMemberPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGGuildAddMemberPacket.name)
}
inline std::string* DGGuildAddMemberPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.DGGuildAddMemberPacket.name)
  return _s;
}
inline const std::string& DGGuildAddMemberPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DGGuildAddMemberPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DGGuildAddMemberPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DGGuildAddMemberPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.DGGuildAddMemberPacket.name)
  return _impl_.name_.Release();
}
inline void DGGuildAddMemberPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGGuildAddMemberPacket.name)
}

// -------------------------------------------------------------------

// DGGuildRemoveMemberPacket

// uint32 guild_id = 1;
inline void DGGuildRemoveMemberPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildRemoveMemberPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildRemoveMemberPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildRemoveMemberPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildRemoveMemberPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildRemoveMemberPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildRemoveMemberPacket.guild_id)
}

// uint32 pid = 2;
inline void DGGuildRemoveMemberPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGGuildRemoveMemberPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGGuildRemoveMemberPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGGuildRemoveMemberPacket.pid)
  return _internal_pid();
}
inline void DGGuildRemoveMemberPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGGuildRemoveMemberPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGGuildRemoveMemberPacket.pid)
}

// -------------------------------------------------------------------

// DGGuildChangeGradePacket

// uint32 guild_id = 1;
inline void DGGuildChangeGradePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildChangeGradePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildChangeGradePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeGradePacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildChangeGradePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildChangeGradePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeGradePacket.guild_id)
}

// uint32 grade = 2;
inline void DGGuildChangeGradePacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t DGGuildChangeGradePacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t DGGuildChangeGradePacket::grade() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeGradePacket.grade)
  return _internal_grade();
}
inline void DGGuildChangeGradePacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void DGGuildChangeGradePacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeGradePacket.grade)
}

// -------------------------------------------------------------------

// DGGuildChangeMemberDataPacket

// uint32 guild_id = 1;
inline void DGGuildChangeMemberDataPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildChangeMemberDataPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildChangeMemberDataPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeMemberDataPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildChangeMemberDataPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildChangeMemberDataPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeMemberDataPacket.guild_id)
}

// uint32 pid = 2;
inline void DGGuildChangeMemberDataPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGGuildChangeMemberDataPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGGuildChangeMemberDataPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeMemberDataPacket.pid)
  return _internal_pid();
}
inline void DGGuildChangeMemberDataPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGGuildChangeMemberDataPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeMemberDataPacket.pid)
}

// uint32 offer = 3;
inline void DGGuildChangeMemberDataPacket::clear_offer() {
  _impl_.offer_ = 0u;
}
inline uint32_t DGGuildChangeMemberDataPacket::_internal_offer() const {
  return _impl_.offer_;
}
inline uint32_t DGGuildChangeMemberDataPacket::offer() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeMemberDataPacket.offer)
  return _internal_offer();
}
inline void DGGuildChangeMemberDataPacket::_internal_set_offer(uint32_t value) {
  
  _impl_.offer_ = value;
}
inline void DGGuildChangeMemberDataPacket::set_offer(uint32_t value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeMemberDataPacket.offer)
}

// uint32 level = 4;
inline void DGGuildChangeMemberDataPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t DGGuildChangeMemberDataPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t DGGuildChangeMemberDataPacket::level() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeMemberDataPacket.level)
  return _internal_level();
}
inline void DGGuildChangeMemberDataPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void DGGuildChangeMemberDataPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeMemberDataPacket.level)
}

// uint32 grade = 5;
inline void DGGuildChangeMemberDataPacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t DGGuildChangeMemberDataPacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t DGGuildChangeMemberDataPacket::grade() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeMemberDataPacket.grade)
  return _internal_grade();
}
inline void DGGuildChangeMemberDataPacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void DGGuildChangeMemberDataPacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeMemberDataPacket.grade)
}

// -------------------------------------------------------------------

// DGGuildDisbandPacket

// uint32 guild_id = 1;
inline void DGGuildDisbandPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildDisbandPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildDisbandPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildDisbandPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildDisbandPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildDisbandPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildDisbandPacket.guild_id)
}

// -------------------------------------------------------------------

// DGGuildLadderPacket

// uint32 guild_id = 1;
inline void DGGuildLadderPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildLadderPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildLadderPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildLadderPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildLadderPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildLadderPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildLadderPacket.guild_id)
}

// int32 ladder_point = 2;
inline void DGGuildLadderPacket::clear_ladder_point() {
  _impl_.ladder_point_ = 0;
}
inline int32_t DGGuildLadderPacket::_internal_ladder_point() const {
  return _impl_.ladder_point_;
}
inline int32_t DGGuildLadderPacket::ladder_point() const {
  // @@protoc_insertion_point(field_get:network.DGGuildLadderPacket.ladder_point)
  return _internal_ladder_point();
}
inline void DGGuildLadderPacket::_internal_set_ladder_point(int32_t value) {
  
  _impl_.ladder_point_ = value;
}
inline void DGGuildLadderPacket::set_ladder_point(int32_t value) {
  _internal_set_ladder_point(value);
  // @@protoc_insertion_point(field_set:network.DGGuildLadderPacket.ladder_point)
}

// repeated int32 wins = 3;
inline int DGGuildLadderPacket::_internal_wins_size() const {
  return _impl_.wins_.size();
}
inline int DGGuildLadderPacket::wins_size() const {
  return _internal_wins_size();
}
inline void DGGuildLadderPacket::clear_wins() {
  _impl_.wins_.Clear();
}
inline int32_t DGGuildLadderPacket::_internal_wins(int index) const {
  return _impl_.wins_.Get(index);
}
inline int32_t DGGuildLadderPacket::wins(int index) const {
  // @@protoc_insertion_point(field_get:network.DGGuildLadderPacket.wins)
  return _internal_wins(index);
}
inline void DGGuildLadderPacket::set_wins(int index, int32_t value) {
  _impl_.wins_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGGuildLadderPacket.wins)
}
inline void DGGuildLadderPacket::_internal_add_wins(int32_t value) {
  _impl_.wins_.Add(value);
}
inline void DGGuildLadderPacket::add_wins(int32_t value) {
  _internal_add_wins(value);
  // @@protoc_insertion_point(field_add:network.DGGuildLadderPacket.wins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DGGuildLadderPacket::_internal_wins() const {
  return _impl_.wins_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DGGuildLadderPacket::wins() const {
  // @@protoc_insertion_point(field_list:network.DGGuildLadderPacket.wins)
  return _internal_wins();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DGGuildLadderPacket::_internal_mutable_wins() {
  return &_impl_.wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DGGuildLadderPacket::mutable_wins() {
  // @@protoc_insertion_point(field_mutable_list:network.DGGuildLadderPacket.wins)
  return _internal_mutable_wins();
}

// repeated int32 draws = 4;
inline int DGGuildLadderPacket::_internal_draws_size() const {
  return _impl_.draws_.size();
}
inline int DGGuildLadderPacket::draws_size() const {
  return _internal_draws_size();
}
inline void DGGuildLadderPacket::clear_draws() {
  _impl_.draws_.Clear();
}
inline int32_t DGGuildLadderPacket::_internal_draws(int index) const {
  return _impl_.draws_.Get(index);
}
inline int32_t DGGuildLadderPacket::draws(int index) const {
  // @@protoc_insertion_point(field_get:network.DGGuildLadderPacket.draws)
  return _internal_draws(index);
}
inline void DGGuildLadderPacket::set_draws(int index, int32_t value) {
  _impl_.draws_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGGuildLadderPacket.draws)
}
inline void DGGuildLadderPacket::_internal_add_draws(int32_t value) {
  _impl_.draws_.Add(value);
}
inline void DGGuildLadderPacket::add_draws(int32_t value) {
  _internal_add_draws(value);
  // @@protoc_insertion_point(field_add:network.DGGuildLadderPacket.draws)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DGGuildLadderPacket::_internal_draws() const {
  return _impl_.draws_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DGGuildLadderPacket::draws() const {
  // @@protoc_insertion_point(field_list:network.DGGuildLadderPacket.draws)
  return _internal_draws();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DGGuildLadderPacket::_internal_mutable_draws() {
  return &_impl_.draws_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DGGuildLadderPacket::mutable_draws() {
  // @@protoc_insertion_point(field_mutable_list:network.DGGuildLadderPacket.draws)
  return _internal_mutable_draws();
}

// repeated int32 losses = 5;
inline int DGGuildLadderPacket::_internal_losses_size() const {
  return _impl_.losses_.size();
}
inline int DGGuildLadderPacket::losses_size() const {
  return _internal_losses_size();
}
inline void DGGuildLadderPacket::clear_losses() {
  _impl_.losses_.Clear();
}
inline int32_t DGGuildLadderPacket::_internal_losses(int index) const {
  return _impl_.losses_.Get(index);
}
inline int32_t DGGuildLadderPacket::losses(int index) const {
  // @@protoc_insertion_point(field_get:network.DGGuildLadderPacket.losses)
  return _internal_losses(index);
}
inline void DGGuildLadderPacket::set_losses(int index, int32_t value) {
  _impl_.losses_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.DGGuildLadderPacket.losses)
}
inline void DGGuildLadderPacket::_internal_add_losses(int32_t value) {
  _impl_.losses_.Add(value);
}
inline void DGGuildLadderPacket::add_losses(int32_t value) {
  _internal_add_losses(value);
  // @@protoc_insertion_point(field_add:network.DGGuildLadderPacket.losses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DGGuildLadderPacket::_internal_losses() const {
  return _impl_.losses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DGGuildLadderPacket::losses() const {
  // @@protoc_insertion_point(field_list:network.DGGuildLadderPacket.losses)
  return _internal_losses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DGGuildLadderPacket::_internal_mutable_losses() {
  return &_impl_.losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DGGuildLadderPacket::mutable_losses() {
  // @@protoc_insertion_point(field_mutable_list:network.DGGuildLadderPacket.losses)
  return _internal_mutable_losses();
}

// -------------------------------------------------------------------

// DGGuildWarPacket

// uint32 type = 1;
inline void DGGuildWarPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DGGuildWarPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DGGuildWarPacket::type() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarPacket.type)
  return _internal_type();
}
inline void DGGuildWarPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DGGuildWarPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarPacket.type)
}

// uint32 war = 2;
inline void DGGuildWarPacket::clear_war() {
  _impl_.war_ = 0u;
}
inline uint32_t DGGuildWarPacket::_internal_war() const {
  return _impl_.war_;
}
inline uint32_t DGGuildWarPacket::war() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarPacket.war)
  return _internal_war();
}
inline void DGGuildWarPacket::_internal_set_war(uint32_t value) {
  
  _impl_.war_ = value;
}
inline void DGGuildWarPacket::set_war(uint32_t value) {
  _internal_set_war(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarPacket.war)
}

// uint32 guild_from = 3;
inline void DGGuildWarPacket::clear_guild_from() {
  _impl_.guild_from_ = 0u;
}
inline uint32_t DGGuildWarPacket::_internal_guild_from() const {
  return _impl_.guild_from_;
}
inline uint32_t DGGuildWarPacket::guild_from() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarPacket.guild_from)
  return _internal_guild_from();
}
inline void DGGuildWarPacket::_internal_set_guild_from(uint32_t value) {
  
  _impl_.guild_from_ = value;
}
inline void DGGuildWarPacket::set_guild_from(uint32_t value) {
  _internal_set_guild_from(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarPacket.guild_from)
}

// uint32 guild_to = 4;
inline void DGGuildWarPacket::clear_guild_to() {
  _impl_.guild_to_ = 0u;
}
inline uint32_t DGGuildWarPacket::_internal_guild_to() const {
  return _impl_.guild_to_;
}
inline uint32_t DGGuildWarPacket::guild_to() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarPacket.guild_to)
  return _internal_guild_to();
}
inline void DGGuildWarPacket::_internal_set_guild_to(uint32_t value) {
  
  _impl_.guild_to_ = value;
}
inline void DGGuildWarPacket::set_guild_to(uint32_t value) {
  _internal_set_guild_to(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarPacket.guild_to)
}

// int32 war_price = 5;
inline void DGGuildWarPacket::clear_war_price() {
  _impl_.war_price_ = 0;
}
inline int32_t DGGuildWarPacket::_internal_war_price() const {
  return _impl_.war_price_;
}
inline int32_t DGGuildWarPacket::war_price() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarPacket.war_price)
  return _internal_war_price();
}
inline void DGGuildWarPacket::_internal_set_war_price(int32_t value) {
  
  _impl_.war_price_ = value;
}
inline void DGGuildWarPacket::set_war_price(int32_t value) {
  _internal_set_war_price(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarPacket.war_price)
}

// int32 initial_score = 6;
inline void DGGuildWarPacket::clear_initial_score() {
  _impl_.initial_score_ = 0;
}
inline int32_t DGGuildWarPacket::_internal_initial_score() const {
  return _impl_.initial_score_;
}
inline int32_t DGGuildWarPacket::initial_score() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarPacket.initial_score)
  return _internal_initial_score();
}
inline void DGGuildWarPacket::_internal_set_initial_score(int32_t value) {
  
  _impl_.initial_score_ = value;
}
inline void DGGuildWarPacket::set_initial_score(int32_t value) {
  _internal_set_initial_score(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarPacket.initial_score)
}

// -------------------------------------------------------------------

// DGGuildWarScorePacket

// uint32 guild_gain_point = 1;
inline void DGGuildWarScorePacket::clear_guild_gain_point() {
  _impl_.guild_gain_point_ = 0u;
}
inline uint32_t DGGuildWarScorePacket::_internal_guild_gain_point() const {
  return _impl_.guild_gain_point_;
}
inline uint32_t DGGuildWarScorePacket::guild_gain_point() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarScorePacket.guild_gain_point)
  return _internal_guild_gain_point();
}
inline void DGGuildWarScorePacket::_internal_set_guild_gain_point(uint32_t value) {
  
  _impl_.guild_gain_point_ = value;
}
inline void DGGuildWarScorePacket::set_guild_gain_point(uint32_t value) {
  _internal_set_guild_gain_point(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarScorePacket.guild_gain_point)
}

// uint32 guild_opponent = 2;
inline void DGGuildWarScorePacket::clear_guild_opponent() {
  _impl_.guild_opponent_ = 0u;
}
inline uint32_t DGGuildWarScorePacket::_internal_guild_opponent() const {
  return _impl_.guild_opponent_;
}
inline uint32_t DGGuildWarScorePacket::guild_opponent() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarScorePacket.guild_opponent)
  return _internal_guild_opponent();
}
inline void DGGuildWarScorePacket::_internal_set_guild_opponent(uint32_t value) {
  
  _impl_.guild_opponent_ = value;
}
inline void DGGuildWarScorePacket::set_guild_opponent(uint32_t value) {
  _internal_set_guild_opponent(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarScorePacket.guild_opponent)
}

// int32 score = 3;
inline void DGGuildWarScorePacket::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t DGGuildWarScorePacket::_internal_score() const {
  return _impl_.score_;
}
inline int32_t DGGuildWarScorePacket::score() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarScorePacket.score)
  return _internal_score();
}
inline void DGGuildWarScorePacket::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void DGGuildWarScorePacket::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarScorePacket.score)
}

// int32 bet_score = 4;
inline void DGGuildWarScorePacket::clear_bet_score() {
  _impl_.bet_score_ = 0;
}
inline int32_t DGGuildWarScorePacket::_internal_bet_score() const {
  return _impl_.bet_score_;
}
inline int32_t DGGuildWarScorePacket::bet_score() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarScorePacket.bet_score)
  return _internal_bet_score();
}
inline void DGGuildWarScorePacket::_internal_set_bet_score(int32_t value) {
  
  _impl_.bet_score_ = value;
}
inline void DGGuildWarScorePacket::set_bet_score(int32_t value) {
  _internal_set_bet_score(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarScorePacket.bet_score)
}

// -------------------------------------------------------------------

// DGGuildSkillUsableChangePacket

// uint32 guild_id = 1;
inline void DGGuildSkillUsableChangePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildSkillUsableChangePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildSkillUsableChangePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUsableChangePacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildSkillUsableChangePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildSkillUsableChangePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUsableChangePacket.guild_id)
}

// uint32 skill_vnum = 2;
inline void DGGuildSkillUsableChangePacket::clear_skill_vnum() {
  _impl_.skill_vnum_ = 0u;
}
inline uint32_t DGGuildSkillUsableChangePacket::_internal_skill_vnum() const {
  return _impl_.skill_vnum_;
}
inline uint32_t DGGuildSkillUsableChangePacket::skill_vnum() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUsableChangePacket.skill_vnum)
  return _internal_skill_vnum();
}
inline void DGGuildSkillUsableChangePacket::_internal_set_skill_vnum(uint32_t value) {
  
  _impl_.skill_vnum_ = value;
}
inline void DGGuildSkillUsableChangePacket::set_skill_vnum(uint32_t value) {
  _internal_set_skill_vnum(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUsableChangePacket.skill_vnum)
}

// bool usable = 3;
inline void DGGuildSkillUsableChangePacket::clear_usable() {
  _impl_.usable_ = false;
}
inline bool DGGuildSkillUsableChangePacket::_internal_usable() const {
  return _impl_.usable_;
}
inline bool DGGuildSkillUsableChangePacket::usable() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSkillUsableChangePacket.usable)
  return _internal_usable();
}
inline void DGGuildSkillUsableChangePacket::_internal_set_usable(bool value) {
  
  _impl_.usable_ = value;
}
inline void DGGuildSkillUsableChangePacket::set_usable(bool value) {
  _internal_set_usable(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSkillUsableChangePacket.usable)
}

// -------------------------------------------------------------------

// DGGuildMoneyChangePacket

// uint32 guild_id = 1;
inline void DGGuildMoneyChangePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildMoneyChangePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildMoneyChangePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildMoneyChangePacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildMoneyChangePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildMoneyChangePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildMoneyChangePacket.guild_id)
}

// int32 total_gold = 2;
inline void DGGuildMoneyChangePacket::clear_total_gold() {
  _impl_.total_gold_ = 0;
}
inline int32_t DGGuildMoneyChangePacket::_internal_total_gold() const {
  return _impl_.total_gold_;
}
inline int32_t DGGuildMoneyChangePacket::total_gold() const {
  // @@protoc_insertion_point(field_get:network.DGGuildMoneyChangePacket.total_gold)
  return _internal_total_gold();
}
inline void DGGuildMoneyChangePacket::_internal_set_total_gold(int32_t value) {
  
  _impl_.total_gold_ = value;
}
inline void DGGuildMoneyChangePacket::set_total_gold(int32_t value) {
  _internal_set_total_gold(value);
  // @@protoc_insertion_point(field_set:network.DGGuildMoneyChangePacket.total_gold)
}

// -------------------------------------------------------------------

// DGGuildMoneyWithdrawPacket

// uint32 guild_id = 1;
inline void DGGuildMoneyWithdrawPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildMoneyWithdrawPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildMoneyWithdrawPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildMoneyWithdrawPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildMoneyWithdrawPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildMoneyWithdrawPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildMoneyWithdrawPacket.guild_id)
}

// int32 change_gold = 2;
inline void DGGuildMoneyWithdrawPacket::clear_change_gold() {
  _impl_.change_gold_ = 0;
}
inline int32_t DGGuildMoneyWithdrawPacket::_internal_change_gold() const {
  return _impl_.change_gold_;
}
inline int32_t DGGuildMoneyWithdrawPacket::change_gold() const {
  // @@protoc_insertion_point(field_get:network.DGGuildMoneyWithdrawPacket.change_gold)
  return _internal_change_gold();
}
inline void DGGuildMoneyWithdrawPacket::_internal_set_change_gold(int32_t value) {
  
  _impl_.change_gold_ = value;
}
inline void DGGuildMoneyWithdrawPacket::set_change_gold(int32_t value) {
  _internal_set_change_gold(value);
  // @@protoc_insertion_point(field_set:network.DGGuildMoneyWithdrawPacket.change_gold)
}

// -------------------------------------------------------------------

// DGGuildWarReserveAddPacket

// uint32 id = 1;
inline void DGGuildWarReserveAddPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DGGuildWarReserveAddPacket::id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.id)
  return _internal_id();
}
inline void DGGuildWarReserveAddPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DGGuildWarReserveAddPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.id)
}

// uint32 guild_from = 2;
inline void DGGuildWarReserveAddPacket::clear_guild_from() {
  _impl_.guild_from_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_guild_from() const {
  return _impl_.guild_from_;
}
inline uint32_t DGGuildWarReserveAddPacket::guild_from() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.guild_from)
  return _internal_guild_from();
}
inline void DGGuildWarReserveAddPacket::_internal_set_guild_from(uint32_t value) {
  
  _impl_.guild_from_ = value;
}
inline void DGGuildWarReserveAddPacket::set_guild_from(uint32_t value) {
  _internal_set_guild_from(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.guild_from)
}

// uint32 guild_to = 3;
inline void DGGuildWarReserveAddPacket::clear_guild_to() {
  _impl_.guild_to_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_guild_to() const {
  return _impl_.guild_to_;
}
inline uint32_t DGGuildWarReserveAddPacket::guild_to() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.guild_to)
  return _internal_guild_to();
}
inline void DGGuildWarReserveAddPacket::_internal_set_guild_to(uint32_t value) {
  
  _impl_.guild_to_ = value;
}
inline void DGGuildWarReserveAddPacket::set_guild_to(uint32_t value) {
  _internal_set_guild_to(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.guild_to)
}

// uint32 time = 4;
inline void DGGuildWarReserveAddPacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t DGGuildWarReserveAddPacket::time() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.time)
  return _internal_time();
}
inline void DGGuildWarReserveAddPacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void DGGuildWarReserveAddPacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.time)
}

// uint32 type = 5;
inline void DGGuildWarReserveAddPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DGGuildWarReserveAddPacket::type() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.type)
  return _internal_type();
}
inline void DGGuildWarReserveAddPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DGGuildWarReserveAddPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.type)
}

// int32 war_price = 6;
inline void DGGuildWarReserveAddPacket::clear_war_price() {
  _impl_.war_price_ = 0;
}
inline int32_t DGGuildWarReserveAddPacket::_internal_war_price() const {
  return _impl_.war_price_;
}
inline int32_t DGGuildWarReserveAddPacket::war_price() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.war_price)
  return _internal_war_price();
}
inline void DGGuildWarReserveAddPacket::_internal_set_war_price(int32_t value) {
  
  _impl_.war_price_ = value;
}
inline void DGGuildWarReserveAddPacket::set_war_price(int32_t value) {
  _internal_set_war_price(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.war_price)
}

// int32 initial_score = 7;
inline void DGGuildWarReserveAddPacket::clear_initial_score() {
  _impl_.initial_score_ = 0;
}
inline int32_t DGGuildWarReserveAddPacket::_internal_initial_score() const {
  return _impl_.initial_score_;
}
inline int32_t DGGuildWarReserveAddPacket::initial_score() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.initial_score)
  return _internal_initial_score();
}
inline void DGGuildWarReserveAddPacket::_internal_set_initial_score(int32_t value) {
  
  _impl_.initial_score_ = value;
}
inline void DGGuildWarReserveAddPacket::set_initial_score(int32_t value) {
  _internal_set_initial_score(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.initial_score)
}

// bool started = 8;
inline void DGGuildWarReserveAddPacket::clear_started() {
  _impl_.started_ = false;
}
inline bool DGGuildWarReserveAddPacket::_internal_started() const {
  return _impl_.started_;
}
inline bool DGGuildWarReserveAddPacket::started() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.started)
  return _internal_started();
}
inline void DGGuildWarReserveAddPacket::_internal_set_started(bool value) {
  
  _impl_.started_ = value;
}
inline void DGGuildWarReserveAddPacket::set_started(bool value) {
  _internal_set_started(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.started)
}

// uint32 bet_from = 9;
inline void DGGuildWarReserveAddPacket::clear_bet_from() {
  _impl_.bet_from_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_bet_from() const {
  return _impl_.bet_from_;
}
inline uint32_t DGGuildWarReserveAddPacket::bet_from() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.bet_from)
  return _internal_bet_from();
}
inline void DGGuildWarReserveAddPacket::_internal_set_bet_from(uint32_t value) {
  
  _impl_.bet_from_ = value;
}
inline void DGGuildWarReserveAddPacket::set_bet_from(uint32_t value) {
  _internal_set_bet_from(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.bet_from)
}

// uint32 bet_to = 10;
inline void DGGuildWarReserveAddPacket::clear_bet_to() {
  _impl_.bet_to_ = 0u;
}
inline uint32_t DGGuildWarReserveAddPacket::_internal_bet_to() const {
  return _impl_.bet_to_;
}
inline uint32_t DGGuildWarReserveAddPacket::bet_to() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.bet_to)
  return _internal_bet_to();
}
inline void DGGuildWarReserveAddPacket::_internal_set_bet_to(uint32_t value) {
  
  _impl_.bet_to_ = value;
}
inline void DGGuildWarReserveAddPacket::set_bet_to(uint32_t value) {
  _internal_set_bet_to(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.bet_to)
}

// int32 power_from = 11;
inline void DGGuildWarReserveAddPacket::clear_power_from() {
  _impl_.power_from_ = 0;
}
inline int32_t DGGuildWarReserveAddPacket::_internal_power_from() const {
  return _impl_.power_from_;
}
inline int32_t DGGuildWarReserveAddPacket::power_from() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.power_from)
  return _internal_power_from();
}
inline void DGGuildWarReserveAddPacket::_internal_set_power_from(int32_t value) {
  
  _impl_.power_from_ = value;
}
inline void DGGuildWarReserveAddPacket::set_power_from(int32_t value) {
  _internal_set_power_from(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.power_from)
}

// int32 power_to = 12;
inline void DGGuildWarReserveAddPacket::clear_power_to() {
  _impl_.power_to_ = 0;
}
inline int32_t DGGuildWarReserveAddPacket::_internal_power_to() const {
  return _impl_.power_to_;
}
inline int32_t DGGuildWarReserveAddPacket::power_to() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.power_to)
  return _internal_power_to();
}
inline void DGGuildWarReserveAddPacket::_internal_set_power_to(int32_t value) {
  
  _impl_.power_to_ = value;
}
inline void DGGuildWarReserveAddPacket::set_power_to(int32_t value) {
  _internal_set_power_to(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.power_to)
}

// int32 handicap = 13;
inline void DGGuildWarReserveAddPacket::clear_handicap() {
  _impl_.handicap_ = 0;
}
inline int32_t DGGuildWarReserveAddPacket::_internal_handicap() const {
  return _impl_.handicap_;
}
inline int32_t DGGuildWarReserveAddPacket::handicap() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveAddPacket.handicap)
  return _internal_handicap();
}
inline void DGGuildWarReserveAddPacket::_internal_set_handicap(int32_t value) {
  
  _impl_.handicap_ = value;
}
inline void DGGuildWarReserveAddPacket::set_handicap(int32_t value) {
  _internal_set_handicap(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveAddPacket.handicap)
}

// -------------------------------------------------------------------

// DGGuildWarReserveDeletePacket

// uint32 id = 1;
inline void DGGuildWarReserveDeletePacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DGGuildWarReserveDeletePacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DGGuildWarReserveDeletePacket::id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarReserveDeletePacket.id)
  return _internal_id();
}
inline void DGGuildWarReserveDeletePacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DGGuildWarReserveDeletePacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarReserveDeletePacket.id)
}

// -------------------------------------------------------------------

// DGGuildWarBetPacket

// uint32 id = 1;
inline void DGGuildWarBetPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DGGuildWarBetPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DGGuildWarBetPacket::id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarBetPacket.id)
  return _internal_id();
}
inline void DGGuildWarBetPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DGGuildWarBetPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarBetPacket.id)
}

// bytes login = 2;
inline void DGGuildWarBetPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& DGGuildWarBetPacket::login() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarBetPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DGGuildWarBetPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.DGGuildWarBetPacket.login)
}
inline std::string* DGGuildWarBetPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.DGGuildWarBetPacket.login)
  return _s;
}
inline const std::string& DGGuildWarBetPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void DGGuildWarBetPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* DGGuildWarBetPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* DGGuildWarBetPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.DGGuildWarBetPacket.login)
  return _impl_.login_.Release();
}
inline void DGGuildWarBetPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.DGGuildWarBetPacket.login)
}

// uint32 gold = 3;
inline void DGGuildWarBetPacket::clear_gold() {
  _impl_.gold_ = 0u;
}
inline uint32_t DGGuildWarBetPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t DGGuildWarBetPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarBetPacket.gold)
  return _internal_gold();
}
inline void DGGuildWarBetPacket::_internal_set_gold(uint32_t value) {
  
  _impl_.gold_ = value;
}
inline void DGGuildWarBetPacket::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarBetPacket.gold)
}

// uint32 guild_id = 4;
inline void DGGuildWarBetPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildWarBetPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildWarBetPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildWarBetPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildWarBetPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildWarBetPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildWarBetPacket.guild_id)
}

// -------------------------------------------------------------------

// DGGuildChangeMasterPacket

// uint32 guild_id = 1;
inline void DGGuildChangeMasterPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildChangeMasterPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildChangeMasterPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildChangeMasterPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildChangeMasterPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildChangeMasterPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildChangeMasterPacket.guild_id)
}

// -------------------------------------------------------------------

// DGGuildSafeboxPacket

// uint32 sub_header = 1;
inline void DGGuildSafeboxPacket::clear_sub_header() {
  _impl_.sub_header_ = 0u;
}
inline uint32_t DGGuildSafeboxPacket::_internal_sub_header() const {
  return _impl_.sub_header_;
}
inline uint32_t DGGuildSafeboxPacket::sub_header() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.sub_header)
  return _internal_sub_header();
}
inline void DGGuildSafeboxPacket::_internal_set_sub_header(uint32_t value) {
  
  _impl_.sub_header_ = value;
}
inline void DGGuildSafeboxPacket::set_sub_header(uint32_t value) {
  _internal_set_sub_header(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSafeboxPacket.sub_header)
}

// uint32 guild_id = 2;
inline void DGGuildSafeboxPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t DGGuildSafeboxPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t DGGuildSafeboxPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.guild_id)
  return _internal_guild_id();
}
inline void DGGuildSafeboxPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void DGGuildSafeboxPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSafeboxPacket.guild_id)
}

// .network.TItemData item = 3;
inline bool DGGuildSafeboxPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool DGGuildSafeboxPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& DGGuildSafeboxPacket::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& DGGuildSafeboxPacket::item() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.item)
  return _internal_item();
}
inline void DGGuildSafeboxPacket::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGGuildSafeboxPacket.item)
}
inline ::network::TItemData* DGGuildSafeboxPacket::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* DGGuildSafeboxPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.DGGuildSafeboxPacket.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* DGGuildSafeboxPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* DGGuildSafeboxPacket::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.DGGuildSafeboxPacket.item)
  return _msg;
}
inline void DGGuildSafeboxPacket::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.DGGuildSafeboxPacket.item)
}

// uint64 gold = 4;
inline void DGGuildSafeboxPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t DGGuildSafeboxPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t DGGuildSafeboxPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.gold)
  return _internal_gold();
}
inline void DGGuildSafeboxPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void DGGuildSafeboxPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSafeboxPacket.gold)
}

// uint32 size = 5;
inline void DGGuildSafeboxPacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t DGGuildSafeboxPacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t DGGuildSafeboxPacket::size() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.size)
  return _internal_size();
}
inline void DGGuildSafeboxPacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void DGGuildSafeboxPacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.DGGuildSafeboxPacket.size)
}

// repeated .network.TItemData items = 6;
inline int DGGuildSafeboxPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DGGuildSafeboxPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* DGGuildSafeboxPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.DGGuildSafeboxPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
DGGuildSafeboxPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.DGGuildSafeboxPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& DGGuildSafeboxPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& DGGuildSafeboxPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* DGGuildSafeboxPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* DGGuildSafeboxPacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.DGGuildSafeboxPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
DGGuildSafeboxPacket::items() const {
  // @@protoc_insertion_point(field_list:network.DGGuildSafeboxPacket.items)
  return _impl_.items_;
}

// .network.TGuildSafeboxLogTable added_log = 7;
inline bool DGGuildSafeboxPacket::_internal_has_added_log() const {
  return this != internal_default_instance() && _impl_.added_log_ != nullptr;
}
inline bool DGGuildSafeboxPacket::has_added_log() const {
  return _internal_has_added_log();
}
inline const ::network::TGuildSafeboxLogTable& DGGuildSafeboxPacket::_internal_added_log() const {
  const ::network::TGuildSafeboxLogTable* p = _impl_.added_log_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TGuildSafeboxLogTable&>(
      ::network::_TGuildSafeboxLogTable_default_instance_);
}
inline const ::network::TGuildSafeboxLogTable& DGGuildSafeboxPacket::added_log() const {
  // @@protoc_insertion_point(field_get:network.DGGuildSafeboxPacket.added_log)
  return _internal_added_log();
}
inline void DGGuildSafeboxPacket::unsafe_arena_set_allocated_added_log(
    ::network::TGuildSafeboxLogTable* added_log) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.added_log_);
  }
  _impl_.added_log_ = added_log;
  if (added_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.DGGuildSafeboxPacket.added_log)
}
inline ::network::TGuildSafeboxLogTable* DGGuildSafeboxPacket::release_added_log() {
  
  ::network::TGuildSafeboxLogTable* temp = _impl_.added_log_;
  _impl_.added_log_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TGuildSafeboxLogTable* DGGuildSafeboxPacket::unsafe_arena_release_added_log() {
  // @@protoc_insertion_point(field_release:network.DGGuildSafeboxPacket.added_log)
  
  ::network::TGuildSafeboxLogTable* temp = _impl_.added_log_;
  _impl_.added_log_ = nullptr;
  return temp;
}
inline ::network::TGuildSafeboxLogTable* DGGuildSafeboxPacket::_internal_mutable_added_log() {
  
  if (_impl_.added_log_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TGuildSafeboxLogTable>(GetArenaForAllocation());
    _impl_.added_log_ = p;
  }
  return _impl_.added_log_;
}
inline ::network::TGuildSafeboxLogTable* DGGuildSafeboxPacket::mutable_added_log() {
  ::network::TGuildSafeboxLogTable* _msg = _internal_mutable_added_log();
  // @@protoc_insertion_point(field_mutable:network.DGGuildSafeboxPacket.added_log)
  return _msg;
}
inline void DGGuildSafeboxPacket::set_allocated_added_log(::network::TGuildSafeboxLogTable* added_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.added_log_);
  }
  if (added_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(added_log));
    if (message_arena != submessage_arena) {
      added_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, added_log, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.added_log_ = added_log;
  // @@protoc_insertion_point(field_set_allocated:network.DGGuildSafeboxPacket.added_log)
}

// -------------------------------------------------------------------

// DGPartyCreatePacket

// uint32 leader_pid = 1;
inline void DGPartyCreatePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t DGPartyCreatePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t DGPartyCreatePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyCreatePacket.leader_pid)
  return _internal_leader_pid();
}
inline void DGPartyCreatePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void DGPartyCreatePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyCreatePacket.leader_pid)
}

// -------------------------------------------------------------------

// DGPartyDeletePacket

// uint32 leader_pid = 1;
inline void DGPartyDeletePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t DGPartyDeletePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t DGPartyDeletePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyDeletePacket.leader_pid)
  return _internal_leader_pid();
}
inline void DGPartyDeletePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void DGPartyDeletePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyDeletePacket.leader_pid)
}

// -------------------------------------------------------------------

// DGPartyAddPacket

// uint32 leader_pid = 1;
inline void DGPartyAddPacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t DGPartyAddPacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t DGPartyAddPacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyAddPacket.leader_pid)
  return _internal_leader_pid();
}
inline void DGPartyAddPacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void DGPartyAddPacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyAddPacket.leader_pid)
}

// uint32 pid = 2;
inline void DGPartyAddPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGPartyAddPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGPartyAddPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyAddPacket.pid)
  return _internal_pid();
}
inline void DGPartyAddPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGPartyAddPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyAddPacket.pid)
}

// uint32 state = 3;
inline void DGPartyAddPacket::clear_state() {
  _impl_.state_ = 0u;
}
inline uint32_t DGPartyAddPacket::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t DGPartyAddPacket::state() const {
  // @@protoc_insertion_point(field_get:network.DGPartyAddPacket.state)
  return _internal_state();
}
inline void DGPartyAddPacket::_internal_set_state(uint32_t value) {
  
  _impl_.state_ = value;
}
inline void DGPartyAddPacket::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:network.DGPartyAddPacket.state)
}

// -------------------------------------------------------------------

// DGPartyRemovePacket

// uint32 pid = 1;
inline void DGPartyRemovePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGPartyRemovePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGPartyRemovePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyRemovePacket.pid)
  return _internal_pid();
}
inline void DGPartyRemovePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGPartyRemovePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyRemovePacket.pid)
}

// -------------------------------------------------------------------

// DGPartyStateChangePacket

// uint32 leader_pid = 1;
inline void DGPartyStateChangePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t DGPartyStateChangePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t DGPartyStateChangePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyStateChangePacket.leader_pid)
  return _internal_leader_pid();
}
inline void DGPartyStateChangePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void DGPartyStateChangePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyStateChangePacket.leader_pid)
}

// uint32 pid = 2;
inline void DGPartyStateChangePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGPartyStateChangePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGPartyStateChangePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartyStateChangePacket.pid)
  return _internal_pid();
}
inline void DGPartyStateChangePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGPartyStateChangePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartyStateChangePacket.pid)
}

// uint32 role = 3;
inline void DGPartyStateChangePacket::clear_role() {
  _impl_.role_ = 0u;
}
inline uint32_t DGPartyStateChangePacket::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t DGPartyStateChangePacket::role() const {
  // @@protoc_insertion_point(field_get:network.DGPartyStateChangePacket.role)
  return _internal_role();
}
inline void DGPartyStateChangePacket::_internal_set_role(uint32_t value) {
  
  _impl_.role_ = value;
}
inline void DGPartyStateChangePacket::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:network.DGPartyStateChangePacket.role)
}

// bool flag = 4;
inline void DGPartyStateChangePacket::clear_flag() {
  _impl_.flag_ = false;
}
inline bool DGPartyStateChangePacket::_internal_flag() const {
  return _impl_.flag_;
}
inline bool DGPartyStateChangePacket::flag() const {
  // @@protoc_insertion_point(field_get:network.DGPartyStateChangePacket.flag)
  return _internal_flag();
}
inline void DGPartyStateChangePacket::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void DGPartyStateChangePacket::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.DGPartyStateChangePacket.flag)
}

// -------------------------------------------------------------------

// DGPartySetMemberLevelPacket

// uint32 leader_pid = 1;
inline void DGPartySetMemberLevelPacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t DGPartySetMemberLevelPacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t DGPartySetMemberLevelPacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartySetMemberLevelPacket.leader_pid)
  return _internal_leader_pid();
}
inline void DGPartySetMemberLevelPacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void DGPartySetMemberLevelPacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartySetMemberLevelPacket.leader_pid)
}

// uint32 pid = 2;
inline void DGPartySetMemberLevelPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t DGPartySetMemberLevelPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t DGPartySetMemberLevelPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.DGPartySetMemberLevelPacket.pid)
  return _internal_pid();
}
inline void DGPartySetMemberLevelPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void DGPartySetMemberLevelPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.DGPartySetMemberLevelPacket.pid)
}

// uint32 level = 3;
inline void DGPartySetMemberLevelPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t DGPartySetMemberLevelPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t DGPartySetMemberLevelPacket::level() const {
  // @@protoc_insertion_point(field_get:network.DGPartySetMemberLevelPacket.level)
  return _internal_level();
}
inline void DGPartySetMemberLevelPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void DGPartySetMemberLevelPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.DGPartySetMemberLevelPacket.level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dg_5fpackets_2eproto
