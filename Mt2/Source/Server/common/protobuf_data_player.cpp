// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_player.proto

#include "protobuf_data_player.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TPlayerSkill::TPlayerSkill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.master_type_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.next_read_)*/0u
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_.can_change_color_)*/false
  , /*decltype(_impl_.changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPlayerSkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPlayerSkillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPlayerSkillDefaultTypeInternal() {}
  union {
    TPlayerSkill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPlayerSkillDefaultTypeInternal _TPlayerSkill_default_instance_;
PROTOBUF_CONSTEXPR TQuickslot::TQuickslot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TQuickslotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TQuickslotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TQuickslotDefaultTypeInternal() {}
  union {
    TQuickslot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TQuickslotDefaultTypeInternal _TQuickslot_default_instance_;
PROTOBUF_CONSTEXPR TPlayerFishEventSlot::TPlayerFishEventSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_main_)*/false
  , /*decltype(_impl_.shape_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPlayerFishEventSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPlayerFishEventSlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPlayerFishEventSlotDefaultTypeInternal() {}
  union {
    TPlayerFishEventSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPlayerFishEventSlotDefaultTypeInternal _TPlayerFishEventSlot_default_instance_;
PROTOBUF_CONSTEXPR TRunePageData::TRunePageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.main_vnum_)*/{}
  , /*decltype(_impl_._main_vnum_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sub_vnum_)*/{}
  , /*decltype(_impl_._sub_vnum_cached_byte_size_)*/{0}
  , /*decltype(_impl_.main_group_)*/0
  , /*decltype(_impl_.sub_group_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TRunePageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TRunePageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TRunePageDataDefaultTypeInternal() {}
  union {
    TRunePageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TRunePageDataDefaultTypeInternal _TRunePageData_default_instance_;
PROTOBUF_CONSTEXPR TPlayerTable::TPlayerTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.quickslots_)*/{}
  , /*decltype(_impl_.parts_)*/{}
  , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
  , /*decltype(_impl_.premium_times_)*/{}
  , /*decltype(_impl_._premium_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_changed_)*/{}
  , /*decltype(_impl_.runes_)*/{}
  , /*decltype(_impl_._runes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fish_slots_)*/{}
  , /*decltype(_impl_.attrtree_)*/{}
  , /*decltype(_impl_._attrtree_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mount_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rune_page_data_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.job_)*/0u
  , /*decltype(_impl_.voice_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.level_step_)*/0u
  , /*decltype(_impl_.st_)*/0u
  , /*decltype(_impl_.ht_)*/0u
  , /*decltype(_impl_.dx_)*/0u
  , /*decltype(_impl_.iq_)*/0u
  , /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_.dir_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.exit_x_)*/0
  , /*decltype(_impl_.exit_y_)*/0
  , /*decltype(_impl_.exit_map_index_)*/0u
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.sp_)*/0
  , /*decltype(_impl_.playtime_)*/0
  , /*decltype(_impl_.stat_point_)*/0
  , /*decltype(_impl_.skill_point_)*/0
  , /*decltype(_impl_.sub_skill_point_)*/0
  , /*decltype(_impl_.horse_skill_point_)*/0
  , /*decltype(_impl_.part_base_)*/0u
  , /*decltype(_impl_.part_hair_base_)*/0u
  , /*decltype(_impl_.skill_group_)*/0u
  , /*decltype(_impl_.alignment_)*/0
  , /*decltype(_impl_.stat_reset_count_)*/0
  , /*decltype(_impl_.mount_state_)*/0u
  , /*decltype(_impl_.mount_item_id_)*/0u
  , /*decltype(_impl_.horse_grade_)*/0u
  , /*decltype(_impl_.horse_elapsed_time_)*/0u
  , /*decltype(_impl_.logoff_interval_)*/0u
  , /*decltype(_impl_.inventory_max_num_)*/0u
  , /*decltype(_impl_.uppitem_inv_max_num_)*/0u
  , /*decltype(_impl_.last_play_time_)*/0u
  , /*decltype(_impl_.fish_event_use_count_)*/0u
  , /*decltype(_impl_.fakebuff_skill1_)*/0u
  , /*decltype(_impl_.fakebuff_skill2_)*/0u
  , /*decltype(_impl_.fakebuff_skill3_)*/0u
  , /*decltype(_impl_.equipment_page_index_)*/0u
  , /*decltype(_impl_.combat_zone_points_)*/0u
  , /*decltype(_impl_.animasphere_)*/0u
  , /*decltype(_impl_.gaya_)*/0u
  , /*decltype(_impl_.skillbook_inv_max_num_)*/0u
  , /*decltype(_impl_.stone_inv_max_num_)*/0u
  , /*decltype(_impl_.enchant_inv_max_num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPlayerTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPlayerTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPlayerTableDefaultTypeInternal() {}
  union {
    TPlayerTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPlayerTableDefaultTypeInternal _TPlayerTable_default_instance_;
PROTOBUF_CONSTEXPR TQuestTable::TQuestTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TQuestTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TQuestTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TQuestTableDefaultTypeInternal() {}
  union {
    TQuestTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TQuestTableDefaultTypeInternal _TQuestTable_default_instance_;
PROTOBUF_CONSTEXPR TPacketAffectElement::TPacketAffectElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.apply_on_)*/0u
  , /*decltype(_impl_.apply_value_)*/0
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.sp_cost_)*/0
  , /*decltype(_impl_.blend_color_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPacketAffectElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPacketAffectElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPacketAffectElementDefaultTypeInternal() {}
  union {
    TPacketAffectElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPacketAffectElementDefaultTypeInternal _TPacketAffectElement_default_instance_;
static ::_pb::Metadata file_level_metadata_data_5fplayer_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_data_5fplayer_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_5fplayer_2eproto = nullptr;

const uint32_t TableStruct_data_5fplayer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _impl_.master_type_),
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _impl_.next_read_),
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _impl_.can_change_color_),
  PROTOBUF_FIELD_OFFSET(::TPlayerSkill, _impl_.changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TQuickslot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TQuickslot, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TQuickslot, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TPlayerFishEventSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TPlayerFishEventSlot, _impl_.is_main_),
  PROTOBUF_FIELD_OFFSET(::TPlayerFishEventSlot, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TRunePageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TRunePageData, _impl_.main_group_),
  PROTOBUF_FIELD_OFFSET(::TRunePageData, _impl_.main_vnum_),
  PROTOBUF_FIELD_OFFSET(::TRunePageData, _impl_.sub_group_),
  PROTOBUF_FIELD_OFFSET(::TRunePageData, _impl_.sub_vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.voice_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.level_step_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.st_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.ht_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.dx_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.iq_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.exit_x_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.exit_y_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.exit_map_index_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.sp_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.playtime_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.stat_point_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.skill_point_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.sub_skill_point_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.horse_skill_point_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.quickslots_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.part_base_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.parts_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.part_hair_base_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.skill_group_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.stat_reset_count_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.mount_state_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.mount_name_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.mount_item_id_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.horse_grade_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.horse_elapsed_time_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.logoff_interval_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.premium_times_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.inventory_max_num_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.uppitem_inv_max_num_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.data_changed_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.last_play_time_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.rune_page_data_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.runes_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.fish_event_use_count_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.fish_slots_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.fakebuff_skill1_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.fakebuff_skill2_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.fakebuff_skill3_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.attrtree_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.equipment_page_index_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.combat_zone_points_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.animasphere_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.gaya_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.skillbook_inv_max_num_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.stone_inv_max_num_),
  PROTOBUF_FIELD_OFFSET(::TPlayerTable, _impl_.enchant_inv_max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TQuestTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TQuestTable, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::TQuestTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TQuestTable, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::TQuestTable, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.apply_on_),
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.apply_value_),
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.sp_cost_),
  PROTOBUF_FIELD_OFFSET(::TPacketAffectElement, _impl_.blend_color_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TPlayerSkill)},
  { 12, -1, -1, sizeof(::TQuickslot)},
  { 20, -1, -1, sizeof(::TPlayerFishEventSlot)},
  { 28, -1, -1, sizeof(::TRunePageData)},
  { 38, -1, -1, sizeof(::TPlayerTable)},
  { 105, -1, -1, sizeof(::TQuestTable)},
  { 115, -1, -1, sizeof(::TPacketAffectElement)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TPlayerSkill_default_instance_._instance,
  &::_TQuickslot_default_instance_._instance,
  &::_TPlayerFishEventSlot_default_instance_._instance,
  &::_TRunePageData_default_instance_._instance,
  &::_TPlayerTable_default_instance_._instance,
  &::_TQuestTable_default_instance_._instance,
  &::_TPacketAffectElement_default_instance_._instance,
};

const char descriptor_table_protodef_data_5fplayer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021data_player.proto\"\177\n\014TPlayerSkill\022\023\n\013m"
  "aster_type\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\021\n\tnext_"
  "read\030\003 \001(\r\022\r\n\005color\030\004 \001(\r\022\030\n\020can_change_"
  "color\030\005 \001(\010\022\017\n\007changed\030\006 \001(\010\"\'\n\nTQuicksl"
  "ot\022\014\n\004type\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\"6\n\024TPlayer"
  "FishEventSlot\022\017\n\007is_main\030\001 \001(\010\022\r\n\005shape\030"
  "\002 \001(\r\"[\n\rTRunePageData\022\022\n\nmain_group\030\001 \001"
  "(\021\022\021\n\tmain_vnum\030\002 \003(\r\022\021\n\tsub_group\030\003 \001(\021"
  "\022\020\n\010sub_vnum\030\004 \003(\r\"\207\n\n\014TPlayerTable\022\n\n\002i"
  "d\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\n\n\002ip\030\003 \001(\014\022\013\n\003job"
  "\030\004 \001(\r\022\r\n\005voice\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\022\n\n"
  "level_step\030\007 \001(\r\022\n\n\002st\030\010 \001(\r\022\n\n\002ht\030\t \001(\r"
  "\022\n\n\002dx\030\n \001(\r\022\n\n\002iq\030\013 \001(\r\022\013\n\003exp\030\014 \001(\r\022\014\n"
  "\004gold\030\r \001(\003\022\013\n\003dir\030\016 \001(\r\022\t\n\001x\030\017 \001(\005\022\t\n\001y"
  "\030\020 \001(\005\022\021\n\tmap_index\030\021 \001(\r\022\016\n\006exit_x\030\022 \001("
  "\005\022\016\n\006exit_y\030\023 \001(\005\022\026\n\016exit_map_index\030\024 \001("
  "\r\022\n\n\002hp\030\025 \001(\005\022\n\n\002sp\030\026 \001(\005\022\020\n\010playtime\030\027 "
  "\001(\005\022\022\n\nstat_point\030\030 \001(\005\022\023\n\013skill_point\030\031"
  " \001(\005\022\027\n\017sub_skill_point\030\032 \001(\005\022\031\n\021horse_s"
  "kill_point\030\033 \001(\005\022\035\n\006skills\030\034 \003(\0132\r.TPlay"
  "erSkill\022\037\n\nquickslots\030\035 \003(\0132\013.TQuickslot"
  "\022\021\n\tpart_base\030\036 \001(\r\022\r\n\005parts\030\037 \003(\r\022\026\n\016pa"
  "rt_hair_base\030  \001(\r\022\023\n\013skill_group\030! \001(\r\022"
  "\021\n\talignment\030\" \001(\005\022\030\n\020stat_reset_count\030#"
  " \001(\005\022\023\n\013mount_state\030$ \001(\r\022\022\n\nmount_name\030"
  "% \001(\014\022\025\n\rmount_item_id\030& \001(\r\022\023\n\013horse_gr"
  "ade\030\' \001(\r\022\032\n\022horse_elapsed_time\030( \001(\r\022\027\n"
  "\017logoff_interval\030) \001(\r\022\025\n\rpremium_times\030"
  "* \003(\005\022\031\n\021inventory_max_num\030+ \001(\r\022\033\n\023uppi"
  "tem_inv_max_num\030, \001(\r\022\024\n\014data_changed\030- "
  "\003(\010\022\026\n\016last_play_time\030. \001(\r\022&\n\016rune_page"
  "_data\030/ \001(\0132\016.TRunePageData\022\r\n\005runes\0300 \003"
  "(\r\022\034\n\024fish_event_use_count\0301 \001(\r\022)\n\nfish"
  "_slots\0302 \003(\0132\025.TPlayerFishEventSlot\022\027\n\017f"
  "akebuff_skill1\0303 \001(\r\022\027\n\017fakebuff_skill2\030"
  "4 \001(\r\022\027\n\017fakebuff_skill3\0305 \001(\r\022\020\n\010attrtr"
  "ee\0306 \003(\r\022\034\n\024equipment_page_index\0307 \001(\r\022\032"
  "\n\022combat_zone_points\0308 \001(\r\022\023\n\013animaspher"
  "e\0309 \001(\r\022\014\n\004gaya\030: \001(\r\022\035\n\025skillbook_inv_m"
  "ax_num\030; \001(\r\022\031\n\021stone_inv_max_num\030< \001(\r\022"
  "\033\n\023enchant_inv_max_num\030= \001(\r\"F\n\013TQuestTa"
  "ble\022\013\n\003pid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005state\030"
  "\003 \001(\014\022\r\n\005value\030\004 \001(\005\"\221\001\n\024TPacketAffectEl"
  "ement\022\014\n\004type\030\001 \001(\r\022\020\n\010apply_on\030\002 \001(\r\022\023\n"
  "\013apply_value\030\003 \001(\005\022\014\n\004flag\030\004 \001(\r\022\020\n\010dura"
  "tion\030\005 \001(\005\022\017\n\007sp_cost\030\006 \001(\005\022\023\n\013blend_col"
  "or\030\007 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_data_5fplayer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_5fplayer_2eproto = {
    false, false, 1856, descriptor_table_protodef_data_5fplayer_2eproto,
    "data_player.proto",
    &descriptor_table_data_5fplayer_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_data_5fplayer_2eproto::offsets,
    file_level_metadata_data_5fplayer_2eproto, file_level_enum_descriptors_data_5fplayer_2eproto,
    file_level_service_descriptors_data_5fplayer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_5fplayer_2eproto_getter() {
  return &descriptor_table_data_5fplayer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_5fplayer_2eproto(&descriptor_table_data_5fplayer_2eproto);

// ===================================================================

class TPlayerSkill::_Internal {
 public:
};

TPlayerSkill::TPlayerSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TPlayerSkill)
}
TPlayerSkill::TPlayerSkill(const TPlayerSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPlayerSkill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.master_type_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.next_read_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.can_change_color_){}
    , decltype(_impl_.changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.master_type_, &from._impl_.master_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.changed_) -
    reinterpret_cast<char*>(&_impl_.master_type_)) + sizeof(_impl_.changed_));
  // @@protoc_insertion_point(copy_constructor:TPlayerSkill)
}

inline void TPlayerSkill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.master_type_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.next_read_){0u}
    , decltype(_impl_.color_){0u}
    , decltype(_impl_.can_change_color_){false}
    , decltype(_impl_.changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TPlayerSkill::~TPlayerSkill() {
  // @@protoc_insertion_point(destructor:TPlayerSkill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPlayerSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TPlayerSkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPlayerSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:TPlayerSkill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.master_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.changed_) -
      reinterpret_cast<char*>(&_impl_.master_type_)) + sizeof(_impl_.changed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPlayerSkill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 master_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.master_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 next_read = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.next_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_change_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.can_change_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool changed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPlayerSkill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TPlayerSkill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master_type = 1;
  if (this->_internal_master_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_master_type(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 next_read = 3;
  if (this->_internal_next_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_next_read(), target);
  }

  // uint32 color = 4;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_color(), target);
  }

  // bool can_change_color = 5;
  if (this->_internal_can_change_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_can_change_color(), target);
  }

  // bool changed = 6;
  if (this->_internal_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TPlayerSkill)
  return target;
}

size_t TPlayerSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TPlayerSkill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 master_type = 1;
  if (this->_internal_master_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_master_type());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 next_read = 3;
  if (this->_internal_next_read() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_next_read());
  }

  // uint32 color = 4;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  // bool can_change_color = 5;
  if (this->_internal_can_change_color() != 0) {
    total_size += 1 + 1;
  }

  // bool changed = 6;
  if (this->_internal_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPlayerSkill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPlayerSkill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPlayerSkill::GetClassData() const { return &_class_data_; }


void TPlayerSkill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPlayerSkill*>(&to_msg);
  auto& from = static_cast<const TPlayerSkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TPlayerSkill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_master_type() != 0) {
    _this->_internal_set_master_type(from._internal_master_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_next_read() != 0) {
    _this->_internal_set_next_read(from._internal_next_read());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_can_change_color() != 0) {
    _this->_internal_set_can_change_color(from._internal_can_change_color());
  }
  if (from._internal_changed() != 0) {
    _this->_internal_set_changed(from._internal_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPlayerSkill::CopyFrom(const TPlayerSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TPlayerSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlayerSkill::IsInitialized() const {
  return true;
}

void TPlayerSkill::InternalSwap(TPlayerSkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPlayerSkill, _impl_.changed_)
      + sizeof(TPlayerSkill::_impl_.changed_)
      - PROTOBUF_FIELD_OFFSET(TPlayerSkill, _impl_.master_type_)>(
          reinterpret_cast<char*>(&_impl_.master_type_),
          reinterpret_cast<char*>(&other->_impl_.master_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPlayerSkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[0]);
}

// ===================================================================

class TQuickslot::_Internal {
 public:
};

TQuickslot::TQuickslot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TQuickslot)
}
TQuickslot::TQuickslot(const TQuickslot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TQuickslot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.pos_));
  // @@protoc_insertion_point(copy_constructor:TQuickslot)
}

inline void TQuickslot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TQuickslot::~TQuickslot() {
  // @@protoc_insertion_point(destructor:TQuickslot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TQuickslot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TQuickslot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TQuickslot::Clear() {
// @@protoc_insertion_point(message_clear_start:TQuickslot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pos_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TQuickslot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TQuickslot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TQuickslot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 pos = 2;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TQuickslot)
  return target;
}

size_t TQuickslot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TQuickslot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 pos = 2;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TQuickslot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TQuickslot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TQuickslot::GetClassData() const { return &_class_data_; }


void TQuickslot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TQuickslot*>(&to_msg);
  auto& from = static_cast<const TQuickslot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TQuickslot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TQuickslot::CopyFrom(const TQuickslot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TQuickslot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TQuickslot::IsInitialized() const {
  return true;
}

void TQuickslot::InternalSwap(TQuickslot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TQuickslot, _impl_.pos_)
      + sizeof(TQuickslot::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(TQuickslot, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TQuickslot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[1]);
}

// ===================================================================

class TPlayerFishEventSlot::_Internal {
 public:
};

TPlayerFishEventSlot::TPlayerFishEventSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TPlayerFishEventSlot)
}
TPlayerFishEventSlot::TPlayerFishEventSlot(const TPlayerFishEventSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPlayerFishEventSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_main_){}
    , decltype(_impl_.shape_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_main_, &from._impl_.is_main_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shape_) -
    reinterpret_cast<char*>(&_impl_.is_main_)) + sizeof(_impl_.shape_));
  // @@protoc_insertion_point(copy_constructor:TPlayerFishEventSlot)
}

inline void TPlayerFishEventSlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_main_){false}
    , decltype(_impl_.shape_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TPlayerFishEventSlot::~TPlayerFishEventSlot() {
  // @@protoc_insertion_point(destructor:TPlayerFishEventSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPlayerFishEventSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TPlayerFishEventSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPlayerFishEventSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:TPlayerFishEventSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_main_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shape_) -
      reinterpret_cast<char*>(&_impl_.is_main_)) + sizeof(_impl_.shape_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPlayerFishEventSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_main = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_main_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPlayerFishEventSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TPlayerFishEventSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_main = 1;
  if (this->_internal_is_main() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_main(), target);
  }

  // uint32 shape = 2;
  if (this->_internal_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TPlayerFishEventSlot)
  return target;
}

size_t TPlayerFishEventSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TPlayerFishEventSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_main = 1;
  if (this->_internal_is_main() != 0) {
    total_size += 1 + 1;
  }

  // uint32 shape = 2;
  if (this->_internal_shape() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shape());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPlayerFishEventSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPlayerFishEventSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPlayerFishEventSlot::GetClassData() const { return &_class_data_; }


void TPlayerFishEventSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPlayerFishEventSlot*>(&to_msg);
  auto& from = static_cast<const TPlayerFishEventSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TPlayerFishEventSlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_main() != 0) {
    _this->_internal_set_is_main(from._internal_is_main());
  }
  if (from._internal_shape() != 0) {
    _this->_internal_set_shape(from._internal_shape());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPlayerFishEventSlot::CopyFrom(const TPlayerFishEventSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TPlayerFishEventSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlayerFishEventSlot::IsInitialized() const {
  return true;
}

void TPlayerFishEventSlot::InternalSwap(TPlayerFishEventSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPlayerFishEventSlot, _impl_.shape_)
      + sizeof(TPlayerFishEventSlot::_impl_.shape_)
      - PROTOBUF_FIELD_OFFSET(TPlayerFishEventSlot, _impl_.is_main_)>(
          reinterpret_cast<char*>(&_impl_.is_main_),
          reinterpret_cast<char*>(&other->_impl_.is_main_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPlayerFishEventSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[2]);
}

// ===================================================================

class TRunePageData::_Internal {
 public:
};

TRunePageData::TRunePageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TRunePageData)
}
TRunePageData::TRunePageData(const TRunePageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TRunePageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.main_vnum_){from._impl_.main_vnum_}
    , /*decltype(_impl_._main_vnum_cached_byte_size_)*/{0}
    , decltype(_impl_.sub_vnum_){from._impl_.sub_vnum_}
    , /*decltype(_impl_._sub_vnum_cached_byte_size_)*/{0}
    , decltype(_impl_.main_group_){}
    , decltype(_impl_.sub_group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.main_group_, &from._impl_.main_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sub_group_) -
    reinterpret_cast<char*>(&_impl_.main_group_)) + sizeof(_impl_.sub_group_));
  // @@protoc_insertion_point(copy_constructor:TRunePageData)
}

inline void TRunePageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.main_vnum_){arena}
    , /*decltype(_impl_._main_vnum_cached_byte_size_)*/{0}
    , decltype(_impl_.sub_vnum_){arena}
    , /*decltype(_impl_._sub_vnum_cached_byte_size_)*/{0}
    , decltype(_impl_.main_group_){0}
    , decltype(_impl_.sub_group_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TRunePageData::~TRunePageData() {
  // @@protoc_insertion_point(destructor:TRunePageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TRunePageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.main_vnum_.~RepeatedField();
  _impl_.sub_vnum_.~RepeatedField();
}

void TRunePageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TRunePageData::Clear() {
// @@protoc_insertion_point(message_clear_start:TRunePageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.main_vnum_.Clear();
  _impl_.sub_vnum_.Clear();
  ::memset(&_impl_.main_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sub_group_) -
      reinterpret_cast<char*>(&_impl_.main_group_)) + sizeof(_impl_.sub_group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRunePageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 main_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.main_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 main_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_main_vnum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_main_vnum(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 sub_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sub_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 sub_vnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sub_vnum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_sub_vnum(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TRunePageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TRunePageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 main_group = 1;
  if (this->_internal_main_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_main_group(), target);
  }

  // repeated uint32 main_vnum = 2;
  {
    int byte_size = _impl_._main_vnum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_main_vnum(), byte_size, target);
    }
  }

  // sint32 sub_group = 3;
  if (this->_internal_sub_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_sub_group(), target);
  }

  // repeated uint32 sub_vnum = 4;
  {
    int byte_size = _impl_._sub_vnum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_sub_vnum(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TRunePageData)
  return target;
}

size_t TRunePageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TRunePageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 main_vnum = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.main_vnum_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._main_vnum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 sub_vnum = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.sub_vnum_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sub_vnum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // sint32 main_group = 1;
  if (this->_internal_main_group() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_main_group());
  }

  // sint32 sub_group = 3;
  if (this->_internal_sub_group() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sub_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TRunePageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TRunePageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TRunePageData::GetClassData() const { return &_class_data_; }


void TRunePageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TRunePageData*>(&to_msg);
  auto& from = static_cast<const TRunePageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TRunePageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.main_vnum_.MergeFrom(from._impl_.main_vnum_);
  _this->_impl_.sub_vnum_.MergeFrom(from._impl_.sub_vnum_);
  if (from._internal_main_group() != 0) {
    _this->_internal_set_main_group(from._internal_main_group());
  }
  if (from._internal_sub_group() != 0) {
    _this->_internal_set_sub_group(from._internal_sub_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TRunePageData::CopyFrom(const TRunePageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TRunePageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRunePageData::IsInitialized() const {
  return true;
}

void TRunePageData::InternalSwap(TRunePageData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.main_vnum_.InternalSwap(&other->_impl_.main_vnum_);
  _impl_.sub_vnum_.InternalSwap(&other->_impl_.sub_vnum_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TRunePageData, _impl_.sub_group_)
      + sizeof(TRunePageData::_impl_.sub_group_)
      - PROTOBUF_FIELD_OFFSET(TRunePageData, _impl_.main_group_)>(
          reinterpret_cast<char*>(&_impl_.main_group_),
          reinterpret_cast<char*>(&other->_impl_.main_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRunePageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[3]);
}

// ===================================================================

class TPlayerTable::_Internal {
 public:
  static const ::TRunePageData& rune_page_data(const TPlayerTable* msg);
};

const ::TRunePageData&
TPlayerTable::_Internal::rune_page_data(const TPlayerTable* msg) {
  return *msg->_impl_.rune_page_data_;
}
TPlayerTable::TPlayerTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TPlayerTable)
}
TPlayerTable::TPlayerTable(const TPlayerTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPlayerTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.quickslots_){from._impl_.quickslots_}
    , decltype(_impl_.parts_){from._impl_.parts_}
    , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
    , decltype(_impl_.premium_times_){from._impl_.premium_times_}
    , /*decltype(_impl_._premium_times_cached_byte_size_)*/{0}
    , decltype(_impl_.data_changed_){from._impl_.data_changed_}
    , decltype(_impl_.runes_){from._impl_.runes_}
    , /*decltype(_impl_._runes_cached_byte_size_)*/{0}
    , decltype(_impl_.fish_slots_){from._impl_.fish_slots_}
    , decltype(_impl_.attrtree_){from._impl_.attrtree_}
    , /*decltype(_impl_._attrtree_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.mount_name_){}
    , decltype(_impl_.rune_page_data_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.voice_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.level_step_){}
    , decltype(_impl_.st_){}
    , decltype(_impl_.ht_){}
    , decltype(_impl_.dx_){}
    , decltype(_impl_.iq_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.exit_x_){}
    , decltype(_impl_.exit_y_){}
    , decltype(_impl_.exit_map_index_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.sp_){}
    , decltype(_impl_.playtime_){}
    , decltype(_impl_.stat_point_){}
    , decltype(_impl_.skill_point_){}
    , decltype(_impl_.sub_skill_point_){}
    , decltype(_impl_.horse_skill_point_){}
    , decltype(_impl_.part_base_){}
    , decltype(_impl_.part_hair_base_){}
    , decltype(_impl_.skill_group_){}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.stat_reset_count_){}
    , decltype(_impl_.mount_state_){}
    , decltype(_impl_.mount_item_id_){}
    , decltype(_impl_.horse_grade_){}
    , decltype(_impl_.horse_elapsed_time_){}
    , decltype(_impl_.logoff_interval_){}
    , decltype(_impl_.inventory_max_num_){}
    , decltype(_impl_.uppitem_inv_max_num_){}
    , decltype(_impl_.last_play_time_){}
    , decltype(_impl_.fish_event_use_count_){}
    , decltype(_impl_.fakebuff_skill1_){}
    , decltype(_impl_.fakebuff_skill2_){}
    , decltype(_impl_.fakebuff_skill3_){}
    , decltype(_impl_.equipment_page_index_){}
    , decltype(_impl_.combat_zone_points_){}
    , decltype(_impl_.animasphere_){}
    , decltype(_impl_.gaya_){}
    , decltype(_impl_.skillbook_inv_max_num_){}
    , decltype(_impl_.stone_inv_max_num_){}
    , decltype(_impl_.enchant_inv_max_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mount_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mount_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mount_name().empty()) {
    _this->_impl_.mount_name_.Set(from._internal_mount_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rune_page_data()) {
    _this->_impl_.rune_page_data_ = new ::TRunePageData(*from._impl_.rune_page_data_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enchant_inv_max_num_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.enchant_inv_max_num_));
  // @@protoc_insertion_point(copy_constructor:TPlayerTable)
}

inline void TPlayerTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.quickslots_){arena}
    , decltype(_impl_.parts_){arena}
    , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
    , decltype(_impl_.premium_times_){arena}
    , /*decltype(_impl_._premium_times_cached_byte_size_)*/{0}
    , decltype(_impl_.data_changed_){arena}
    , decltype(_impl_.runes_){arena}
    , /*decltype(_impl_._runes_cached_byte_size_)*/{0}
    , decltype(_impl_.fish_slots_){arena}
    , decltype(_impl_.attrtree_){arena}
    , /*decltype(_impl_._attrtree_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.mount_name_){}
    , decltype(_impl_.rune_page_data_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.job_){0u}
    , decltype(_impl_.voice_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.level_step_){0u}
    , decltype(_impl_.st_){0u}
    , decltype(_impl_.ht_){0u}
    , decltype(_impl_.dx_){0u}
    , decltype(_impl_.iq_){0u}
    , decltype(_impl_.exp_){0u}
    , decltype(_impl_.gold_){int64_t{0}}
    , decltype(_impl_.dir_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.exit_x_){0}
    , decltype(_impl_.exit_y_){0}
    , decltype(_impl_.exit_map_index_){0u}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.sp_){0}
    , decltype(_impl_.playtime_){0}
    , decltype(_impl_.stat_point_){0}
    , decltype(_impl_.skill_point_){0}
    , decltype(_impl_.sub_skill_point_){0}
    , decltype(_impl_.horse_skill_point_){0}
    , decltype(_impl_.part_base_){0u}
    , decltype(_impl_.part_hair_base_){0u}
    , decltype(_impl_.skill_group_){0u}
    , decltype(_impl_.alignment_){0}
    , decltype(_impl_.stat_reset_count_){0}
    , decltype(_impl_.mount_state_){0u}
    , decltype(_impl_.mount_item_id_){0u}
    , decltype(_impl_.horse_grade_){0u}
    , decltype(_impl_.horse_elapsed_time_){0u}
    , decltype(_impl_.logoff_interval_){0u}
    , decltype(_impl_.inventory_max_num_){0u}
    , decltype(_impl_.uppitem_inv_max_num_){0u}
    , decltype(_impl_.last_play_time_){0u}
    , decltype(_impl_.fish_event_use_count_){0u}
    , decltype(_impl_.fakebuff_skill1_){0u}
    , decltype(_impl_.fakebuff_skill2_){0u}
    , decltype(_impl_.fakebuff_skill3_){0u}
    , decltype(_impl_.equipment_page_index_){0u}
    , decltype(_impl_.combat_zone_points_){0u}
    , decltype(_impl_.animasphere_){0u}
    , decltype(_impl_.gaya_){0u}
    , decltype(_impl_.skillbook_inv_max_num_){0u}
    , decltype(_impl_.stone_inv_max_num_){0u}
    , decltype(_impl_.enchant_inv_max_num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mount_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mount_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TPlayerTable::~TPlayerTable() {
  // @@protoc_insertion_point(destructor:TPlayerTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPlayerTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
  _impl_.quickslots_.~RepeatedPtrField();
  _impl_.parts_.~RepeatedField();
  _impl_.premium_times_.~RepeatedField();
  _impl_.data_changed_.~RepeatedField();
  _impl_.runes_.~RepeatedField();
  _impl_.fish_slots_.~RepeatedPtrField();
  _impl_.attrtree_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.mount_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rune_page_data_;
}

void TPlayerTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPlayerTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TPlayerTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.quickslots_.Clear();
  _impl_.parts_.Clear();
  _impl_.premium_times_.Clear();
  _impl_.data_changed_.Clear();
  _impl_.runes_.Clear();
  _impl_.fish_slots_.Clear();
  _impl_.attrtree_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.mount_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rune_page_data_ != nullptr) {
    delete _impl_.rune_page_data_;
  }
  _impl_.rune_page_data_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enchant_inv_max_num_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.enchant_inv_max_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPlayerTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 job = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level_step = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.level_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 st = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ht = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ht_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.dx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 iq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.iq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gold = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dir = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exit_x = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.exit_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exit_y = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.exit_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exit_map_index = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.exit_map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playtime = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stat_point = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.stat_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_point = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sub_skill_point = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.sub_skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 horse_skill_point = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.horse_skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TPlayerSkill skills = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TQuickslot quickslots = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_quickslots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 part_base = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.part_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 parts = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_parts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 248) {
          _internal_add_parts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 part_hair_base = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.part_hair_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_group = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 alignment = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stat_reset_count = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stat_reset_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mount_state = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mount_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mount_name = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mount_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mount_item_id = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mount_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 horse_grade = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.horse_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 horse_elapsed_time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.horse_elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logoff_interval = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.logoff_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 premium_times = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_premium_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_premium_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inventory_max_num = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.inventory_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uppitem_inv_max_num = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.uppitem_inv_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool data_changed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_data_changed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_data_changed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_play_time = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.last_play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TRunePageData rune_page_data = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_rune_page_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 runes = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_runes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_runes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fish_event_use_count = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.fish_event_use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TPlayerFishEventSlot fish_slots = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fish_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 fakebuff_skill1 = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.fakebuff_skill1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fakebuff_skill2 = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.fakebuff_skill2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fakebuff_skill3 = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.fakebuff_skill3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 attrtree = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attrtree(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_attrtree(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 equipment_page_index = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.equipment_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 combat_zone_points = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.combat_zone_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 animasphere = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.animasphere_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gaya = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.gaya_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skillbook_inv_max_num = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.skillbook_inv_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stone_inv_max_num = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.stone_inv_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enchant_inv_max_num = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.enchant_inv_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPlayerTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TPlayerTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes ip = 3;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 job = 4;
  if (this->_internal_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_job(), target);
  }

  // uint32 voice = 5;
  if (this->_internal_voice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_voice(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // uint32 level_step = 7;
  if (this->_internal_level_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level_step(), target);
  }

  // uint32 st = 8;
  if (this->_internal_st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_st(), target);
  }

  // uint32 ht = 9;
  if (this->_internal_ht() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ht(), target);
  }

  // uint32 dx = 10;
  if (this->_internal_dx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dx(), target);
  }

  // uint32 iq = 11;
  if (this->_internal_iq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_iq(), target);
  }

  // uint32 exp = 12;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_exp(), target);
  }

  // int64 gold = 13;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_gold(), target);
  }

  // uint32 dir = 14;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_dir(), target);
  }

  // int32 x = 15;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_x(), target);
  }

  // int32 y = 16;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_y(), target);
  }

  // uint32 map_index = 17;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_map_index(), target);
  }

  // int32 exit_x = 18;
  if (this->_internal_exit_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_exit_x(), target);
  }

  // int32 exit_y = 19;
  if (this->_internal_exit_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_exit_y(), target);
  }

  // uint32 exit_map_index = 20;
  if (this->_internal_exit_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_exit_map_index(), target);
  }

  // int32 hp = 21;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_hp(), target);
  }

  // int32 sp = 22;
  if (this->_internal_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_sp(), target);
  }

  // int32 playtime = 23;
  if (this->_internal_playtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_playtime(), target);
  }

  // int32 stat_point = 24;
  if (this->_internal_stat_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_stat_point(), target);
  }

  // int32 skill_point = 25;
  if (this->_internal_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_skill_point(), target);
  }

  // int32 sub_skill_point = 26;
  if (this->_internal_sub_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_sub_skill_point(), target);
  }

  // int32 horse_skill_point = 27;
  if (this->_internal_horse_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_horse_skill_point(), target);
  }

  // repeated .TPlayerSkill skills = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TQuickslot quickslots = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quickslots_size()); i < n; i++) {
    const auto& repfield = this->_internal_quickslots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 part_base = 30;
  if (this->_internal_part_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_part_base(), target);
  }

  // repeated uint32 parts = 31;
  {
    int byte_size = _impl_._parts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          31, _internal_parts(), byte_size, target);
    }
  }

  // uint32 part_hair_base = 32;
  if (this->_internal_part_hair_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_part_hair_base(), target);
  }

  // uint32 skill_group = 33;
  if (this->_internal_skill_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_skill_group(), target);
  }

  // int32 alignment = 34;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_alignment(), target);
  }

  // int32 stat_reset_count = 35;
  if (this->_internal_stat_reset_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_stat_reset_count(), target);
  }

  // uint32 mount_state = 36;
  if (this->_internal_mount_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_mount_state(), target);
  }

  // bytes mount_name = 37;
  if (!this->_internal_mount_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        37, this->_internal_mount_name(), target);
  }

  // uint32 mount_item_id = 38;
  if (this->_internal_mount_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_mount_item_id(), target);
  }

  // uint32 horse_grade = 39;
  if (this->_internal_horse_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_horse_grade(), target);
  }

  // uint32 horse_elapsed_time = 40;
  if (this->_internal_horse_elapsed_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_horse_elapsed_time(), target);
  }

  // uint32 logoff_interval = 41;
  if (this->_internal_logoff_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_logoff_interval(), target);
  }

  // repeated int32 premium_times = 42;
  {
    int byte_size = _impl_._premium_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          42, _internal_premium_times(), byte_size, target);
    }
  }

  // uint32 inventory_max_num = 43;
  if (this->_internal_inventory_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_inventory_max_num(), target);
  }

  // uint32 uppitem_inv_max_num = 44;
  if (this->_internal_uppitem_inv_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_uppitem_inv_max_num(), target);
  }

  // repeated bool data_changed = 45;
  if (this->_internal_data_changed_size() > 0) {
    target = stream->WriteFixedPacked(45, _internal_data_changed(), target);
  }

  // uint32 last_play_time = 46;
  if (this->_internal_last_play_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(46, this->_internal_last_play_time(), target);
  }

  // .TRunePageData rune_page_data = 47;
  if (this->_internal_has_rune_page_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::rune_page_data(this),
        _Internal::rune_page_data(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 runes = 48;
  {
    int byte_size = _impl_._runes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          48, _internal_runes(), byte_size, target);
    }
  }

  // uint32 fish_event_use_count = 49;
  if (this->_internal_fish_event_use_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_fish_event_use_count(), target);
  }

  // repeated .TPlayerFishEventSlot fish_slots = 50;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fish_slots_size()); i < n; i++) {
    const auto& repfield = this->_internal_fish_slots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 fakebuff_skill1 = 51;
  if (this->_internal_fakebuff_skill1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(51, this->_internal_fakebuff_skill1(), target);
  }

  // uint32 fakebuff_skill2 = 52;
  if (this->_internal_fakebuff_skill2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(52, this->_internal_fakebuff_skill2(), target);
  }

  // uint32 fakebuff_skill3 = 53;
  if (this->_internal_fakebuff_skill3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_fakebuff_skill3(), target);
  }

  // repeated uint32 attrtree = 54;
  {
    int byte_size = _impl_._attrtree_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          54, _internal_attrtree(), byte_size, target);
    }
  }

  // uint32 equipment_page_index = 55;
  if (this->_internal_equipment_page_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(55, this->_internal_equipment_page_index(), target);
  }

  // uint32 combat_zone_points = 56;
  if (this->_internal_combat_zone_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(56, this->_internal_combat_zone_points(), target);
  }

  // uint32 animasphere = 57;
  if (this->_internal_animasphere() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(57, this->_internal_animasphere(), target);
  }

  // uint32 gaya = 58;
  if (this->_internal_gaya() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_gaya(), target);
  }

  // uint32 skillbook_inv_max_num = 59;
  if (this->_internal_skillbook_inv_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(59, this->_internal_skillbook_inv_max_num(), target);
  }

  // uint32 stone_inv_max_num = 60;
  if (this->_internal_stone_inv_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(60, this->_internal_stone_inv_max_num(), target);
  }

  // uint32 enchant_inv_max_num = 61;
  if (this->_internal_enchant_inv_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(61, this->_internal_enchant_inv_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TPlayerTable)
  return target;
}

size_t TPlayerTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TPlayerTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TPlayerSkill skills = 28;
  total_size += 2UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TQuickslot quickslots = 29;
  total_size += 2UL * this->_internal_quickslots_size();
  for (const auto& msg : this->_impl_.quickslots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 parts = 31;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.parts_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 premium_times = 42;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.premium_times_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._premium_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool data_changed = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_changed_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 runes = 48;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.runes_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._runes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TPlayerFishEventSlot fish_slots = 50;
  total_size += 2UL * this->_internal_fish_slots_size();
  for (const auto& msg : this->_impl_.fish_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 attrtree = 54;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.attrtree_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._attrtree_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // bytes mount_name = 37;
  if (!this->_internal_mount_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mount_name());
  }

  // .TRunePageData rune_page_data = 47;
  if (this->_internal_has_rune_page_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rune_page_data_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 job = 4;
  if (this->_internal_job() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_job());
  }

  // uint32 voice = 5;
  if (this->_internal_voice() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voice());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 level_step = 7;
  if (this->_internal_level_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level_step());
  }

  // uint32 st = 8;
  if (this->_internal_st() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_st());
  }

  // uint32 ht = 9;
  if (this->_internal_ht() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ht());
  }

  // uint32 dx = 10;
  if (this->_internal_dx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dx());
  }

  // uint32 iq = 11;
  if (this->_internal_iq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_iq());
  }

  // uint32 exp = 12;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  // int64 gold = 13;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  // uint32 dir = 14;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dir());
  }

  // int32 x = 15;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 16;
  if (this->_internal_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // uint32 map_index = 17;
  if (this->_internal_map_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_map_index());
  }

  // int32 exit_x = 18;
  if (this->_internal_exit_x() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exit_x());
  }

  // int32 exit_y = 19;
  if (this->_internal_exit_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exit_y());
  }

  // uint32 exit_map_index = 20;
  if (this->_internal_exit_map_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_exit_map_index());
  }

  // int32 hp = 21;
  if (this->_internal_hp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 sp = 22;
  if (this->_internal_sp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sp());
  }

  // int32 playtime = 23;
  if (this->_internal_playtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_playtime());
  }

  // int32 stat_point = 24;
  if (this->_internal_stat_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_stat_point());
  }

  // int32 skill_point = 25;
  if (this->_internal_skill_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_skill_point());
  }

  // int32 sub_skill_point = 26;
  if (this->_internal_sub_skill_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sub_skill_point());
  }

  // int32 horse_skill_point = 27;
  if (this->_internal_horse_skill_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_horse_skill_point());
  }

  // uint32 part_base = 30;
  if (this->_internal_part_base() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_part_base());
  }

  // uint32 part_hair_base = 32;
  if (this->_internal_part_hair_base() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_part_hair_base());
  }

  // uint32 skill_group = 33;
  if (this->_internal_skill_group() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_skill_group());
  }

  // int32 alignment = 34;
  if (this->_internal_alignment() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_alignment());
  }

  // int32 stat_reset_count = 35;
  if (this->_internal_stat_reset_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_stat_reset_count());
  }

  // uint32 mount_state = 36;
  if (this->_internal_mount_state() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_mount_state());
  }

  // uint32 mount_item_id = 38;
  if (this->_internal_mount_item_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_mount_item_id());
  }

  // uint32 horse_grade = 39;
  if (this->_internal_horse_grade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_horse_grade());
  }

  // uint32 horse_elapsed_time = 40;
  if (this->_internal_horse_elapsed_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_horse_elapsed_time());
  }

  // uint32 logoff_interval = 41;
  if (this->_internal_logoff_interval() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_logoff_interval());
  }

  // uint32 inventory_max_num = 43;
  if (this->_internal_inventory_max_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_inventory_max_num());
  }

  // uint32 uppitem_inv_max_num = 44;
  if (this->_internal_uppitem_inv_max_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_uppitem_inv_max_num());
  }

  // uint32 last_play_time = 46;
  if (this->_internal_last_play_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_last_play_time());
  }

  // uint32 fish_event_use_count = 49;
  if (this->_internal_fish_event_use_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fish_event_use_count());
  }

  // uint32 fakebuff_skill1 = 51;
  if (this->_internal_fakebuff_skill1() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fakebuff_skill1());
  }

  // uint32 fakebuff_skill2 = 52;
  if (this->_internal_fakebuff_skill2() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fakebuff_skill2());
  }

  // uint32 fakebuff_skill3 = 53;
  if (this->_internal_fakebuff_skill3() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fakebuff_skill3());
  }

  // uint32 equipment_page_index = 55;
  if (this->_internal_equipment_page_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_equipment_page_index());
  }

  // uint32 combat_zone_points = 56;
  if (this->_internal_combat_zone_points() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_combat_zone_points());
  }

  // uint32 animasphere = 57;
  if (this->_internal_animasphere() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_animasphere());
  }

  // uint32 gaya = 58;
  if (this->_internal_gaya() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_gaya());
  }

  // uint32 skillbook_inv_max_num = 59;
  if (this->_internal_skillbook_inv_max_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_skillbook_inv_max_num());
  }

  // uint32 stone_inv_max_num = 60;
  if (this->_internal_stone_inv_max_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_stone_inv_max_num());
  }

  // uint32 enchant_inv_max_num = 61;
  if (this->_internal_enchant_inv_max_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_enchant_inv_max_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPlayerTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPlayerTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPlayerTable::GetClassData() const { return &_class_data_; }


void TPlayerTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPlayerTable*>(&to_msg);
  auto& from = static_cast<const TPlayerTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TPlayerTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  _this->_impl_.quickslots_.MergeFrom(from._impl_.quickslots_);
  _this->_impl_.parts_.MergeFrom(from._impl_.parts_);
  _this->_impl_.premium_times_.MergeFrom(from._impl_.premium_times_);
  _this->_impl_.data_changed_.MergeFrom(from._impl_.data_changed_);
  _this->_impl_.runes_.MergeFrom(from._impl_.runes_);
  _this->_impl_.fish_slots_.MergeFrom(from._impl_.fish_slots_);
  _this->_impl_.attrtree_.MergeFrom(from._impl_.attrtree_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_mount_name().empty()) {
    _this->_internal_set_mount_name(from._internal_mount_name());
  }
  if (from._internal_has_rune_page_data()) {
    _this->_internal_mutable_rune_page_data()->::TRunePageData::MergeFrom(
        from._internal_rune_page_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_job() != 0) {
    _this->_internal_set_job(from._internal_job());
  }
  if (from._internal_voice() != 0) {
    _this->_internal_set_voice(from._internal_voice());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_level_step() != 0) {
    _this->_internal_set_level_step(from._internal_level_step());
  }
  if (from._internal_st() != 0) {
    _this->_internal_set_st(from._internal_st());
  }
  if (from._internal_ht() != 0) {
    _this->_internal_set_ht(from._internal_ht());
  }
  if (from._internal_dx() != 0) {
    _this->_internal_set_dx(from._internal_dx());
  }
  if (from._internal_iq() != 0) {
    _this->_internal_set_iq(from._internal_iq());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_exit_x() != 0) {
    _this->_internal_set_exit_x(from._internal_exit_x());
  }
  if (from._internal_exit_y() != 0) {
    _this->_internal_set_exit_y(from._internal_exit_y());
  }
  if (from._internal_exit_map_index() != 0) {
    _this->_internal_set_exit_map_index(from._internal_exit_map_index());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_sp() != 0) {
    _this->_internal_set_sp(from._internal_sp());
  }
  if (from._internal_playtime() != 0) {
    _this->_internal_set_playtime(from._internal_playtime());
  }
  if (from._internal_stat_point() != 0) {
    _this->_internal_set_stat_point(from._internal_stat_point());
  }
  if (from._internal_skill_point() != 0) {
    _this->_internal_set_skill_point(from._internal_skill_point());
  }
  if (from._internal_sub_skill_point() != 0) {
    _this->_internal_set_sub_skill_point(from._internal_sub_skill_point());
  }
  if (from._internal_horse_skill_point() != 0) {
    _this->_internal_set_horse_skill_point(from._internal_horse_skill_point());
  }
  if (from._internal_part_base() != 0) {
    _this->_internal_set_part_base(from._internal_part_base());
  }
  if (from._internal_part_hair_base() != 0) {
    _this->_internal_set_part_hair_base(from._internal_part_hair_base());
  }
  if (from._internal_skill_group() != 0) {
    _this->_internal_set_skill_group(from._internal_skill_group());
  }
  if (from._internal_alignment() != 0) {
    _this->_internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_stat_reset_count() != 0) {
    _this->_internal_set_stat_reset_count(from._internal_stat_reset_count());
  }
  if (from._internal_mount_state() != 0) {
    _this->_internal_set_mount_state(from._internal_mount_state());
  }
  if (from._internal_mount_item_id() != 0) {
    _this->_internal_set_mount_item_id(from._internal_mount_item_id());
  }
  if (from._internal_horse_grade() != 0) {
    _this->_internal_set_horse_grade(from._internal_horse_grade());
  }
  if (from._internal_horse_elapsed_time() != 0) {
    _this->_internal_set_horse_elapsed_time(from._internal_horse_elapsed_time());
  }
  if (from._internal_logoff_interval() != 0) {
    _this->_internal_set_logoff_interval(from._internal_logoff_interval());
  }
  if (from._internal_inventory_max_num() != 0) {
    _this->_internal_set_inventory_max_num(from._internal_inventory_max_num());
  }
  if (from._internal_uppitem_inv_max_num() != 0) {
    _this->_internal_set_uppitem_inv_max_num(from._internal_uppitem_inv_max_num());
  }
  if (from._internal_last_play_time() != 0) {
    _this->_internal_set_last_play_time(from._internal_last_play_time());
  }
  if (from._internal_fish_event_use_count() != 0) {
    _this->_internal_set_fish_event_use_count(from._internal_fish_event_use_count());
  }
  if (from._internal_fakebuff_skill1() != 0) {
    _this->_internal_set_fakebuff_skill1(from._internal_fakebuff_skill1());
  }
  if (from._internal_fakebuff_skill2() != 0) {
    _this->_internal_set_fakebuff_skill2(from._internal_fakebuff_skill2());
  }
  if (from._internal_fakebuff_skill3() != 0) {
    _this->_internal_set_fakebuff_skill3(from._internal_fakebuff_skill3());
  }
  if (from._internal_equipment_page_index() != 0) {
    _this->_internal_set_equipment_page_index(from._internal_equipment_page_index());
  }
  if (from._internal_combat_zone_points() != 0) {
    _this->_internal_set_combat_zone_points(from._internal_combat_zone_points());
  }
  if (from._internal_animasphere() != 0) {
    _this->_internal_set_animasphere(from._internal_animasphere());
  }
  if (from._internal_gaya() != 0) {
    _this->_internal_set_gaya(from._internal_gaya());
  }
  if (from._internal_skillbook_inv_max_num() != 0) {
    _this->_internal_set_skillbook_inv_max_num(from._internal_skillbook_inv_max_num());
  }
  if (from._internal_stone_inv_max_num() != 0) {
    _this->_internal_set_stone_inv_max_num(from._internal_stone_inv_max_num());
  }
  if (from._internal_enchant_inv_max_num() != 0) {
    _this->_internal_set_enchant_inv_max_num(from._internal_enchant_inv_max_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPlayerTable::CopyFrom(const TPlayerTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TPlayerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlayerTable::IsInitialized() const {
  return true;
}

void TPlayerTable::InternalSwap(TPlayerTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  _impl_.quickslots_.InternalSwap(&other->_impl_.quickslots_);
  _impl_.parts_.InternalSwap(&other->_impl_.parts_);
  _impl_.premium_times_.InternalSwap(&other->_impl_.premium_times_);
  _impl_.data_changed_.InternalSwap(&other->_impl_.data_changed_);
  _impl_.runes_.InternalSwap(&other->_impl_.runes_);
  _impl_.fish_slots_.InternalSwap(&other->_impl_.fish_slots_);
  _impl_.attrtree_.InternalSwap(&other->_impl_.attrtree_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mount_name_, lhs_arena,
      &other->_impl_.mount_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPlayerTable, _impl_.enchant_inv_max_num_)
      + sizeof(TPlayerTable::_impl_.enchant_inv_max_num_)
      - PROTOBUF_FIELD_OFFSET(TPlayerTable, _impl_.rune_page_data_)>(
          reinterpret_cast<char*>(&_impl_.rune_page_data_),
          reinterpret_cast<char*>(&other->_impl_.rune_page_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPlayerTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[4]);
}

// ===================================================================

class TQuestTable::_Internal {
 public:
};

TQuestTable::TQuestTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TQuestTable)
}
TQuestTable::TQuestTable(const TQuestTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TQuestTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:TQuestTable)
}

inline void TQuestTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TQuestTable::~TQuestTable() {
  // @@protoc_insertion_point(destructor:TQuestTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TQuestTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.state_.Destroy();
}

void TQuestTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TQuestTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TQuestTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TQuestTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TQuestTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TQuestTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes state = 3;
  if (!this->_internal_state().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_state(), target);
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TQuestTable)
  return target;
}

size_t TQuestTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TQuestTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TQuestTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TQuestTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TQuestTable::GetClassData() const { return &_class_data_; }


void TQuestTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TQuestTable*>(&to_msg);
  auto& from = static_cast<const TQuestTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TQuestTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TQuestTable::CopyFrom(const TQuestTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TQuestTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TQuestTable::IsInitialized() const {
  return true;
}

void TQuestTable::InternalSwap(TQuestTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TQuestTable, _impl_.value_)
      + sizeof(TQuestTable::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TQuestTable, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TQuestTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[5]);
}

// ===================================================================

class TPacketAffectElement::_Internal {
 public:
};

TPacketAffectElement::TPacketAffectElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TPacketAffectElement)
}
TPacketAffectElement::TPacketAffectElement(const TPacketAffectElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPacketAffectElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.apply_on_){}
    , decltype(_impl_.apply_value_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.sp_cost_){}
    , decltype(_impl_.blend_color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blend_color_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.blend_color_));
  // @@protoc_insertion_point(copy_constructor:TPacketAffectElement)
}

inline void TPacketAffectElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.apply_on_){0u}
    , decltype(_impl_.apply_value_){0}
    , decltype(_impl_.flag_){0u}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.sp_cost_){0}
    , decltype(_impl_.blend_color_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TPacketAffectElement::~TPacketAffectElement() {
  // @@protoc_insertion_point(destructor:TPacketAffectElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPacketAffectElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TPacketAffectElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPacketAffectElement::Clear() {
// @@protoc_insertion_point(message_clear_start:TPacketAffectElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blend_color_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.blend_color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPacketAffectElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.apply_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 apply_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.apply_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sp_cost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sp_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blend_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.blend_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPacketAffectElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TPacketAffectElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 apply_on = 2;
  if (this->_internal_apply_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apply_on(), target);
  }

  // int32 apply_value = 3;
  if (this->_internal_apply_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_apply_value(), target);
  }

  // uint32 flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flag(), target);
  }

  // int32 duration = 5;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_duration(), target);
  }

  // int32 sp_cost = 6;
  if (this->_internal_sp_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_sp_cost(), target);
  }

  // uint32 blend_color = 7;
  if (this->_internal_blend_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_blend_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TPacketAffectElement)
  return target;
}

size_t TPacketAffectElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TPacketAffectElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 apply_on = 2;
  if (this->_internal_apply_on() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_on());
  }

  // int32 apply_value = 3;
  if (this->_internal_apply_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apply_value());
  }

  // uint32 flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // int32 duration = 5;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  // int32 sp_cost = 6;
  if (this->_internal_sp_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sp_cost());
  }

  // uint32 blend_color = 7;
  if (this->_internal_blend_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blend_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPacketAffectElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPacketAffectElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPacketAffectElement::GetClassData() const { return &_class_data_; }


void TPacketAffectElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPacketAffectElement*>(&to_msg);
  auto& from = static_cast<const TPacketAffectElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TPacketAffectElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_apply_on() != 0) {
    _this->_internal_set_apply_on(from._internal_apply_on());
  }
  if (from._internal_apply_value() != 0) {
    _this->_internal_set_apply_value(from._internal_apply_value());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_sp_cost() != 0) {
    _this->_internal_set_sp_cost(from._internal_sp_cost());
  }
  if (from._internal_blend_color() != 0) {
    _this->_internal_set_blend_color(from._internal_blend_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPacketAffectElement::CopyFrom(const TPacketAffectElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TPacketAffectElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPacketAffectElement::IsInitialized() const {
  return true;
}

void TPacketAffectElement::InternalSwap(TPacketAffectElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPacketAffectElement, _impl_.blend_color_)
      + sizeof(TPacketAffectElement::_impl_.blend_color_)
      - PROTOBUF_FIELD_OFFSET(TPacketAffectElement, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPacketAffectElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fplayer_2eproto_getter, &descriptor_table_data_5fplayer_2eproto_once,
      file_level_metadata_data_5fplayer_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TPlayerSkill*
Arena::CreateMaybeMessage< ::TPlayerSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TPlayerSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::TQuickslot*
Arena::CreateMaybeMessage< ::TQuickslot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TQuickslot >(arena);
}
template<> PROTOBUF_NOINLINE ::TPlayerFishEventSlot*
Arena::CreateMaybeMessage< ::TPlayerFishEventSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TPlayerFishEventSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::TRunePageData*
Arena::CreateMaybeMessage< ::TRunePageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TRunePageData >(arena);
}
template<> PROTOBUF_NOINLINE ::TPlayerTable*
Arena::CreateMaybeMessage< ::TPlayerTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TPlayerTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TQuestTable*
Arena::CreateMaybeMessage< ::TQuestTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TQuestTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TPacketAffectElement*
Arena::CreateMaybeMessage< ::TPacketAffectElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TPacketAffectElement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
