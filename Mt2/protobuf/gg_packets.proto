syntax = "proto3";

package network;

import "data.proto";
import "data_item.proto";

/*********************************************************\
 ** General Packets
\*********************************************************/

message GGSetupPacket {
  uint32 port = 1;
  uint32 listen_port = 2;
  uint32 channel = 3;
  bool processor_core = 4;
}

message GGLoginPacket {
  bytes name = 1;
  uint32 pid = 2;
  uint32 empire = 3;
  uint32 map_index = 4;
  uint32 channel = 5;
  uint32 language = 6;
  bool is_in_dungeon = 7;
  uint32 race = 8;
  bool temp_login = 9;
}

message GGLogoutPacket {
  bytes name = 1;
  uint32 pid = 2;
}

message GGRelayPacket {
  bytes name = 1;
  uint32 pid = 2;
  
  uint32 relay_header = 3;
  bytes relay = 4;
}

message GGPlayerPacket {
  sint32 language = 1;
  uint32 empire = 2;
  uint32 pid = 3;
  
  uint32 relay_header = 4;
  bytes relay = 5;
}

message GGDisconnectPacket {
  bytes login = 1;
}

message GGLoginPingPacket {
  bytes login = 1;
}

/*********************************************************\
 ** Game Packets
\*********************************************************/

message GGGiveItemPacket {
  TItemData item = 1;
  bool no_refund = 2;
}

message GGGiveGoldPacket {
  uint32 pid = 1;
  int64 gold = 2;
}

message GGShoutPacket {
  uint32 empire = 1;
  bytes text = 2;
}

message GGNoticePacket {
  bytes message = 1;
  bool big_font = 2;
  int32 lang_id = 3;
  uint32 channel = 4;
  uint32 empire = 5;
}

message GGSuccessNoticePacket {
  int32 lang_id = 1;
  bytes message = 2;
}

message GGMessengerRequestPacket {
  bytes requestor = 1;
  uint32 target_pid = 2;
}


message GGMessengerRequestFailPacket {
  bytes requestor = 1;
  uint32 target_pid = 2;
}

message GGMessengerAddPacket {
  bytes account = 1;
  bytes companion = 2;
}

message GGMessengerRemovePacket {
  bytes account = 1;
  bytes companion = 2;
}

message GGMessengerBlockAddPacket {
  bytes account = 1;
  bytes companion = 2;
}

message GGMessengerBlockRemovePacket {
  bytes account = 1;
  bytes companion = 2;
}

message GGFindPositionPacket {
  uint32 from_pid = 1;
  uint32 target_pid = 2;
  bool is_gm = 3;
}

message GGWarpCharacterPacket {
  uint32 pid = 1;
  int32 x = 2;
  int32 y = 3;
  uint32 map_index = 4;
  uint32 target_pid = 5;
}

message GGXmasWarpSantaPacket {
  uint32 channel = 1;
  uint32 map_index = 2;
}

message GGXmasWarpSantaReplyPacket {
  uint32 channel = 1;
}

message GGBlockChatPacket {
  bytes name = 1;
  int32 block_duration = 2;
}

message GGCastleSiegePacket {
  uint32 empire = 1;
  uint32 tower_count = 2;
}

message GGPCBangUpdatePacket {
  uint32 pc_bang_id = 1;
}

message GGWhisperManagerAddPacket {
  bytes sender_name = 1;
  uint32 sender_pid = 2;
  bytes receiver_name = 3;
  uint32 receiver_pid = 4;
  bytes message = 5;
}

message GGTeamlerStatusPacket {
  bytes name = 1;
  bool is_online = 2;
  int32 language = 3;
}

message GGRequestDungeonWarpPacket {
  uint32 type = 1;
  uint32 player_id = 2;
  uint32 map_index = 3;
  uint32 dest_x = 4;
  uint32 dest_y = 5;
}

message GGAnswerDungeonWarpPacket {
  uint32 type = 1;
  uint32 player_id =  2;
  uint32 map_index = 3;
  uint32 dest_x = 4;
  uint32 dest_y = 5;
}

message GGDungeonSetFlagPacket {
  uint32 pid = 1;
  bytes flag_name = 2;
  int32 flag_value = 3;
}

message GGExecReloadCommandPacket {
  bytes argument = 1;
}

message GGRecvShutdownPacket {
  int32 start_sec = 1;
  bool maintenance = 2;
  int32 maintenance_duration = 3;
}

message GGTransferPacket {
  bytes name = 1;
  int32 x = 2;
  int32 y = 3;
}

message GGForceItemDeletePacket {
  uint32 item_id = 1;
}

message GGTeamChatPacket {
  bytes text = 1;
}

message GGCombatZoneRankingPacket {
  repeated TCombatZoneRankingPlayer weekly = 1;
  repeated TCombatZoneRankingPlayer general = 2;
}

message GGUpdateRightsPacket {
  bytes name = 1;
  uint32 gm_level = 2;
}

message GGFlushPlayerPacket {
  uint32 pid = 1;
}

message GGHomepageCommandPacket {
  bytes command = 1;
}

message GGPullOfflineMessagesPacket {
  uint32 pid = 1;
}

message GGDmgRankingUpdatePacket {
  message Entry {
    bytes name = 1;
	int32 dmg = 2;
  }

  uint32 type = 1;
  Entry data = 2;
}

message GGLocaleUpdateLastUsagePacket {
  bytes lang_base = 1;
}

message GGReloadCommandPacket {
  bytes argument = 1;
}

/*********************************************************\
 ** Game AUCTION Packets
\*********************************************************/

message GGAuctionInsertItemPacket {
  TShopItemTable item = 1;
}

message GGAuctionTakeItemPacket {
  uint32 owner_id = 1;
  uint32 item_id = 2;
  uint32 inventory_pos = 3;
}

message GGAuctionBuyItemPacket {
  uint32 pid = 1;
  string player_name = 2;
  uint32 item_id = 3;
  uint64 paid_gold = 4;
}

message GGAuctionTakeGoldPacket {
  uint32 owner_id = 1;
  uint64 gold = 2;
}

message GGAuctionSearchItemsPacket {
  uint32 pid = 1;
  uint32 page = 2;
  uint32 language = 3;
  TDataAuctionSearch options = 4;
}

message GGAuctionExtendedSearchItemsPacket {
  uint32 pid = 1;
  uint32 page = 2;
  uint32 language = 3;
  TExtendedDataAuctionSearch options = 4;
  uint32 map_index = 5;
  uint32 channel = 6;
}

message GGAuctionMarkShopPacket {
  uint32 pid = 1;
  uint32 item_id = 2;
}

message GGAuctionAnswerMarkShopPacket {
  uint32 pid = 1;
  uint32 owner_id = 2;
}

message GGAuctionShopRequestShowPacket {
  uint32 pid = 1;
}

message GGAuctionShopOpenPacket {
  uint32 owner_id = 1;
  string owner_name = 2;

  bytes name = 3;
  uint32 style = 4;
  uint32 vnum = 5;

  float color_red = 6;
  float color_green = 7;
  float color_blue = 8;

  uint32 channel = 9;
  uint32 map_index = 10;
  uint32 x = 11;
  uint32 y = 12;
  
  uint32 timeout = 13;
  
  repeated TItemData items = 14;
}

message GGAuctionShopTakeGoldPacket {
  uint32 owner_id = 1;
  uint64 gold = 2;
}

message GGAuctionShopSpawnPacket {
  bytes name = 1;
  bytes owner_name = 2;
  uint32 owner_id = 3;
  uint32 vnum = 4;
  uint32 style = 5;
  
  float color_red = 6;
  float color_green = 7;
  float color_blue = 8;
  
  uint32 map_index = 9;
  uint32 x = 10;
  uint32 y = 11;
}

message GGAuctionShopDespawnPacket {
  uint32 owner_id = 1;
}

message GGAuctionShopViewPacket {
  uint32 player_id = 1;
  uint32 owner_id = 2;
}

message GGAuctionShopViewCancelPacket {
  uint32 player_id = 1;
}

message GGAuctionShopRequestHistoryPacket {
  uint32 player_id = 1;
}

message GGAuctionShopRenewPacket {
  uint32 player_id = 1;
  uint32 timeout = 2;
}

message GGAuctionShopClosePacket {
  uint32 player_id = 1;
  uint32 map_index = 2;
  uint32 channel = 3;
}

message GGAuctionRequestAveragePricePacket {
  uint32 player_id = 1;
  uint32 requestor = 2;
  uint32 vnum = 3;
  uint32 count = 4;
}

/*********************************************************\
 ** Game EVENT MANAGER Packets
\*********************************************************/

message GGEventManagerOpenRegistrationPacket {
  uint32 event_index = 1;
}

message GGEventManagerCloseRegistrationPacket {
  bool clear_event_index = 1;
}

message GGEventManagerIgnorePlayerPacket {
  uint32 pid = 1;
}

message GGEventManagerOpenAnnouncementPacket {
  uint32 type = 1;
  uint32 tm_stamp = 2;
}

message GGEventManagerTagTeamRegisterPacket {
  uint32 pid1 = 1;
  uint32 pid2 = 2;
  uint32 groupidx = 3;
}

message GGEventManagerTagTeamUnregisterPacket {
  uint32 pid1 = 1;
  uint32 pid2 = 2;
  uint32 groupidx = 3;
}

message GGEventManagerTagTeamCreatePacket {
  repeated TEventManagerTagTeam teams = 1;
}

/*********************************************************\
 ** Game GUILD Packets
\*********************************************************/

message GGGuildChatPacket {
  uint32 guild_id = 1;
  bytes message = 2;
}

message GGGuildSetMemberCountBonusPacket {
  uint32 guild_id = 1;
  int32 bonus = 2;
}

message GGGuildWarZoneMapIndexPacket {
  uint32 guild_id1 = 1;
  uint32 guild_id2 = 2;
  uint32 map_index = 3;
}

message GGGuildChangeNamePacket {
  uint32 guild_id = 1;
  bytes name = 2;
}
