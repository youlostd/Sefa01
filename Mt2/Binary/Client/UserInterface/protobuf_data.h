// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf_data_item.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace network {
class SyncPositionElement;
struct SyncPositionElementDefaultTypeInternal;
extern SyncPositionElementDefaultTypeInternal _SyncPositionElement_default_instance_;
class TAccountTable;
struct TAccountTableDefaultTypeInternal;
extern TAccountTableDefaultTypeInternal _TAccountTable_default_instance_;
class TAdminInfo;
struct TAdminInfoDefaultTypeInternal;
extern TAdminInfoDefaultTypeInternal _TAdminInfo_default_instance_;
class TAttrtreeProto;
struct TAttrtreeProtoDefaultTypeInternal;
extern TAttrtreeProtoDefaultTypeInternal _TAttrtreeProto_default_instance_;
class TAuctionShopHistoryElement;
struct TAuctionShopHistoryElementDefaultTypeInternal;
extern TAuctionShopHistoryElementDefaultTypeInternal _TAuctionShopHistoryElement_default_instance_;
class TBattlepassData;
struct TBattlepassDataDefaultTypeInternal;
extern TBattlepassDataDefaultTypeInternal _TBattlepassData_default_instance_;
class TBuildingLand;
struct TBuildingLandDefaultTypeInternal;
extern TBuildingLandDefaultTypeInternal _TBuildingLand_default_instance_;
class TBuildingObject;
struct TBuildingObjectDefaultTypeInternal;
extern TBuildingObjectDefaultTypeInternal _TBuildingObject_default_instance_;
class TBuildingObjectMaterial;
struct TBuildingObjectMaterialDefaultTypeInternal;
extern TBuildingObjectMaterialDefaultTypeInternal _TBuildingObjectMaterial_default_instance_;
class TBuildingObjectProto;
struct TBuildingObjectProtoDefaultTypeInternal;
extern TBuildingObjectProtoDefaultTypeInternal _TBuildingObjectProto_default_instance_;
class TChannelStatus;
struct TChannelStatusDefaultTypeInternal;
extern TChannelStatusDefaultTypeInternal _TChannelStatus_default_instance_;
class TCombatZoneRankingPlayer;
struct TCombatZoneRankingPlayerDefaultTypeInternal;
extern TCombatZoneRankingPlayerDefaultTypeInternal _TCombatZoneRankingPlayer_default_instance_;
class TCrystalProto;
struct TCrystalProtoDefaultTypeInternal;
extern TCrystalProtoDefaultTypeInternal _TCrystalProto_default_instance_;
class TDataAuctionSearch;
struct TDataAuctionSearchDefaultTypeInternal;
extern TDataAuctionSearchDefaultTypeInternal _TDataAuctionSearch_default_instance_;
class TDataAuctionSearch_ItemType;
struct TDataAuctionSearch_ItemTypeDefaultTypeInternal;
extern TDataAuctionSearch_ItemTypeDefaultTypeInternal _TDataAuctionSearch_ItemType_default_instance_;
class TEquipmentChangerTable;
struct TEquipmentChangerTableDefaultTypeInternal;
extern TEquipmentChangerTableDefaultTypeInternal _TEquipmentChangerTable_default_instance_;
class TEquipmentPageInfo;
struct TEquipmentPageInfoDefaultTypeInternal;
extern TEquipmentPageInfoDefaultTypeInternal _TEquipmentPageInfo_default_instance_;
class TEventManagerTagTeam;
struct TEventManagerTagTeamDefaultTypeInternal;
extern TEventManagerTagTeamDefaultTypeInternal _TEventManagerTagTeam_default_instance_;
class TExtendedDataAuctionSearch;
struct TExtendedDataAuctionSearchDefaultTypeInternal;
extern TExtendedDataAuctionSearchDefaultTypeInternal _TExtendedDataAuctionSearch_default_instance_;
class TGayaShopData;
struct TGayaShopDataDefaultTypeInternal;
extern TGayaShopDataDefaultTypeInternal _TGayaShopData_default_instance_;
class TGuildLadderInfo;
struct TGuildLadderInfoDefaultTypeInternal;
extern TGuildLadderInfoDefaultTypeInternal _TGuildLadderInfo_default_instance_;
class TGuildMemberInfo;
struct TGuildMemberInfoDefaultTypeInternal;
extern TGuildMemberInfoDefaultTypeInternal _TGuildMemberInfo_default_instance_;
class TGuildSafeboxInitial;
struct TGuildSafeboxInitialDefaultTypeInternal;
extern TGuildSafeboxInitialDefaultTypeInternal _TGuildSafeboxInitial_default_instance_;
class TGuildSafeboxLogTable;
struct TGuildSafeboxLogTableDefaultTypeInternal;
extern TGuildSafeboxLogTableDefaultTypeInternal _TGuildSafeboxLogTable_default_instance_;
class THorseBonusProto;
struct THorseBonusProtoDefaultTypeInternal;
extern THorseBonusProtoDefaultTypeInternal _THorseBonusProto_default_instance_;
class THorseUpgradeProto;
struct THorseUpgradeProtoDefaultTypeInternal;
extern THorseUpgradeProtoDefaultTypeInternal _THorseUpgradeProto_default_instance_;
class TItemApply;
struct TItemApplyDefaultTypeInternal;
extern TItemApplyDefaultTypeInternal _TItemApply_default_instance_;
class TItemAttrTable;
struct TItemAttrTableDefaultTypeInternal;
extern TItemAttrTableDefaultTypeInternal _TItemAttrTable_default_instance_;
class TItemIDRangeTable;
struct TItemIDRangeTableDefaultTypeInternal;
extern TItemIDRangeTableDefaultTypeInternal _TItemIDRangeTable_default_instance_;
class TItemLimit;
struct TItemLimitDefaultTypeInternal;
extern TItemLimitDefaultTypeInternal _TItemLimit_default_instance_;
class TItemPriceInfo;
struct TItemPriceInfoDefaultTypeInternal;
extern TItemPriceInfoDefaultTypeInternal _TItemPriceInfo_default_instance_;
class TItemTable;
struct TItemTableDefaultTypeInternal;
extern TItemTableDefaultTypeInternal _TItemTable_default_instance_;
class TMapLocation;
struct TMapLocationDefaultTypeInternal;
extern TMapLocationDefaultTypeInternal _TMapLocation_default_instance_;
class TMobSkillLevel;
struct TMobSkillLevelDefaultTypeInternal;
extern TMobSkillLevelDefaultTypeInternal _TMobSkillLevel_default_instance_;
class TMobTable;
struct TMobTableDefaultTypeInternal;
extern TMobTableDefaultTypeInternal _TMobTable_default_instance_;
class TOfflineMessage;
struct TOfflineMessageDefaultTypeInternal;
extern TOfflineMessageDefaultTypeInternal _TOfflineMessage_default_instance_;
class TOnlinePlayerInfo;
struct TOnlinePlayerInfoDefaultTypeInternal;
extern TOnlinePlayerInfoDefaultTypeInternal _TOnlinePlayerInfo_default_instance_;
class TPacketLoginOnSetup;
struct TPacketLoginOnSetupDefaultTypeInternal;
extern TPacketLoginOnSetupDefaultTypeInternal _TPacketLoginOnSetup_default_instance_;
class TRefineMaterial;
struct TRefineMaterialDefaultTypeInternal;
extern TRefineMaterialDefaultTypeInternal _TRefineMaterial_default_instance_;
class TRefineTable;
struct TRefineTableDefaultTypeInternal;
extern TRefineTableDefaultTypeInternal _TRefineTable_default_instance_;
class TRepeatedItemTable;
struct TRepeatedItemTableDefaultTypeInternal;
extern TRepeatedItemTableDefaultTypeInternal _TRepeatedItemTable_default_instance_;
class TRepeatedMobTable;
struct TRepeatedMobTableDefaultTypeInternal;
extern TRepeatedMobTableDefaultTypeInternal _TRepeatedMobTable_default_instance_;
class TRunePointProtoTable;
struct TRunePointProtoTableDefaultTypeInternal;
extern TRunePointProtoTableDefaultTypeInternal _TRunePointProtoTable_default_instance_;
class TRuneProtoTable;
struct TRuneProtoTableDefaultTypeInternal;
extern TRuneProtoTableDefaultTypeInternal _TRuneProtoTable_default_instance_;
class TShopTable;
struct TShopTableDefaultTypeInternal;
extern TShopTableDefaultTypeInternal _TShopTable_default_instance_;
class TSimplePlayer;
struct TSimplePlayerDefaultTypeInternal;
extern TSimplePlayerDefaultTypeInternal _TSimplePlayer_default_instance_;
class TSkillTable;
struct TSkillTableDefaultTypeInternal;
extern TSkillTableDefaultTypeInternal _TSkillTable_default_instance_;
class TSoulProtoTable;
struct TSoulProtoTableDefaultTypeInternal;
extern TSoulProtoTableDefaultTypeInternal _TSoulProtoTable_default_instance_;
class TSwitchbotTable;
struct TSwitchbotTableDefaultTypeInternal;
extern TSwitchbotTableDefaultTypeInternal _TSwitchbotTable_default_instance_;
class TTargetMonsterDropInfoTable;
struct TTargetMonsterDropInfoTableDefaultTypeInternal;
extern TTargetMonsterDropInfoTableDefaultTypeInternal _TTargetMonsterDropInfoTable_default_instance_;
class TWikiChestDropInfo;
struct TWikiChestDropInfoDefaultTypeInternal;
extern TWikiChestDropInfoDefaultTypeInternal _TWikiChestDropInfo_default_instance_;
class TWikiInfoTable;
struct TWikiInfoTableDefaultTypeInternal;
extern TWikiInfoTableDefaultTypeInternal _TWikiInfoTable_default_instance_;
class TWikiItemOriginInfo;
struct TWikiItemOriginInfoDefaultTypeInternal;
extern TWikiItemOriginInfoDefaultTypeInternal _TWikiItemOriginInfo_default_instance_;
class TWikiRefineInfo;
struct TWikiRefineInfoDefaultTypeInternal;
extern TWikiRefineInfoDefaultTypeInternal _TWikiRefineInfo_default_instance_;
class TXmasRewards;
struct TXmasRewardsDefaultTypeInternal;
extern TXmasRewardsDefaultTypeInternal _TXmasRewards_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::SyncPositionElement* Arena::CreateMaybeMessage<::network::SyncPositionElement>(Arena*);
template<> ::network::TAccountTable* Arena::CreateMaybeMessage<::network::TAccountTable>(Arena*);
template<> ::network::TAdminInfo* Arena::CreateMaybeMessage<::network::TAdminInfo>(Arena*);
template<> ::network::TAttrtreeProto* Arena::CreateMaybeMessage<::network::TAttrtreeProto>(Arena*);
template<> ::network::TAuctionShopHistoryElement* Arena::CreateMaybeMessage<::network::TAuctionShopHistoryElement>(Arena*);
template<> ::network::TBattlepassData* Arena::CreateMaybeMessage<::network::TBattlepassData>(Arena*);
template<> ::network::TBuildingLand* Arena::CreateMaybeMessage<::network::TBuildingLand>(Arena*);
template<> ::network::TBuildingObject* Arena::CreateMaybeMessage<::network::TBuildingObject>(Arena*);
template<> ::network::TBuildingObjectMaterial* Arena::CreateMaybeMessage<::network::TBuildingObjectMaterial>(Arena*);
template<> ::network::TBuildingObjectProto* Arena::CreateMaybeMessage<::network::TBuildingObjectProto>(Arena*);
template<> ::network::TChannelStatus* Arena::CreateMaybeMessage<::network::TChannelStatus>(Arena*);
template<> ::network::TCombatZoneRankingPlayer* Arena::CreateMaybeMessage<::network::TCombatZoneRankingPlayer>(Arena*);
template<> ::network::TCrystalProto* Arena::CreateMaybeMessage<::network::TCrystalProto>(Arena*);
template<> ::network::TDataAuctionSearch* Arena::CreateMaybeMessage<::network::TDataAuctionSearch>(Arena*);
template<> ::network::TDataAuctionSearch_ItemType* Arena::CreateMaybeMessage<::network::TDataAuctionSearch_ItemType>(Arena*);
template<> ::network::TEquipmentChangerTable* Arena::CreateMaybeMessage<::network::TEquipmentChangerTable>(Arena*);
template<> ::network::TEquipmentPageInfo* Arena::CreateMaybeMessage<::network::TEquipmentPageInfo>(Arena*);
template<> ::network::TEventManagerTagTeam* Arena::CreateMaybeMessage<::network::TEventManagerTagTeam>(Arena*);
template<> ::network::TExtendedDataAuctionSearch* Arena::CreateMaybeMessage<::network::TExtendedDataAuctionSearch>(Arena*);
template<> ::network::TGayaShopData* Arena::CreateMaybeMessage<::network::TGayaShopData>(Arena*);
template<> ::network::TGuildLadderInfo* Arena::CreateMaybeMessage<::network::TGuildLadderInfo>(Arena*);
template<> ::network::TGuildMemberInfo* Arena::CreateMaybeMessage<::network::TGuildMemberInfo>(Arena*);
template<> ::network::TGuildSafeboxInitial* Arena::CreateMaybeMessage<::network::TGuildSafeboxInitial>(Arena*);
template<> ::network::TGuildSafeboxLogTable* Arena::CreateMaybeMessage<::network::TGuildSafeboxLogTable>(Arena*);
template<> ::network::THorseBonusProto* Arena::CreateMaybeMessage<::network::THorseBonusProto>(Arena*);
template<> ::network::THorseUpgradeProto* Arena::CreateMaybeMessage<::network::THorseUpgradeProto>(Arena*);
template<> ::network::TItemApply* Arena::CreateMaybeMessage<::network::TItemApply>(Arena*);
template<> ::network::TItemAttrTable* Arena::CreateMaybeMessage<::network::TItemAttrTable>(Arena*);
template<> ::network::TItemIDRangeTable* Arena::CreateMaybeMessage<::network::TItemIDRangeTable>(Arena*);
template<> ::network::TItemLimit* Arena::CreateMaybeMessage<::network::TItemLimit>(Arena*);
template<> ::network::TItemPriceInfo* Arena::CreateMaybeMessage<::network::TItemPriceInfo>(Arena*);
template<> ::network::TItemTable* Arena::CreateMaybeMessage<::network::TItemTable>(Arena*);
template<> ::network::TMapLocation* Arena::CreateMaybeMessage<::network::TMapLocation>(Arena*);
template<> ::network::TMobSkillLevel* Arena::CreateMaybeMessage<::network::TMobSkillLevel>(Arena*);
template<> ::network::TMobTable* Arena::CreateMaybeMessage<::network::TMobTable>(Arena*);
template<> ::network::TOfflineMessage* Arena::CreateMaybeMessage<::network::TOfflineMessage>(Arena*);
template<> ::network::TOnlinePlayerInfo* Arena::CreateMaybeMessage<::network::TOnlinePlayerInfo>(Arena*);
template<> ::network::TPacketLoginOnSetup* Arena::CreateMaybeMessage<::network::TPacketLoginOnSetup>(Arena*);
template<> ::network::TRefineMaterial* Arena::CreateMaybeMessage<::network::TRefineMaterial>(Arena*);
template<> ::network::TRefineTable* Arena::CreateMaybeMessage<::network::TRefineTable>(Arena*);
template<> ::network::TRepeatedItemTable* Arena::CreateMaybeMessage<::network::TRepeatedItemTable>(Arena*);
template<> ::network::TRepeatedMobTable* Arena::CreateMaybeMessage<::network::TRepeatedMobTable>(Arena*);
template<> ::network::TRunePointProtoTable* Arena::CreateMaybeMessage<::network::TRunePointProtoTable>(Arena*);
template<> ::network::TRuneProtoTable* Arena::CreateMaybeMessage<::network::TRuneProtoTable>(Arena*);
template<> ::network::TShopTable* Arena::CreateMaybeMessage<::network::TShopTable>(Arena*);
template<> ::network::TSimplePlayer* Arena::CreateMaybeMessage<::network::TSimplePlayer>(Arena*);
template<> ::network::TSkillTable* Arena::CreateMaybeMessage<::network::TSkillTable>(Arena*);
template<> ::network::TSoulProtoTable* Arena::CreateMaybeMessage<::network::TSoulProtoTable>(Arena*);
template<> ::network::TSwitchbotTable* Arena::CreateMaybeMessage<::network::TSwitchbotTable>(Arena*);
template<> ::network::TTargetMonsterDropInfoTable* Arena::CreateMaybeMessage<::network::TTargetMonsterDropInfoTable>(Arena*);
template<> ::network::TWikiChestDropInfo* Arena::CreateMaybeMessage<::network::TWikiChestDropInfo>(Arena*);
template<> ::network::TWikiInfoTable* Arena::CreateMaybeMessage<::network::TWikiInfoTable>(Arena*);
template<> ::network::TWikiItemOriginInfo* Arena::CreateMaybeMessage<::network::TWikiItemOriginInfo>(Arena*);
template<> ::network::TWikiRefineInfo* Arena::CreateMaybeMessage<::network::TWikiRefineInfo>(Arena*);
template<> ::network::TXmasRewards* Arena::CreateMaybeMessage<::network::TXmasRewards>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class SyncPositionElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.SyncPositionElement) */ {
 public:
  inline SyncPositionElement() : SyncPositionElement(nullptr) {}
  ~SyncPositionElement() override;
  explicit PROTOBUF_CONSTEXPR SyncPositionElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPositionElement(const SyncPositionElement& from);
  SyncPositionElement(SyncPositionElement&& from) noexcept
    : SyncPositionElement() {
    *this = ::std::move(from);
  }

  inline SyncPositionElement& operator=(const SyncPositionElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPositionElement& operator=(SyncPositionElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPositionElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPositionElement* internal_default_instance() {
    return reinterpret_cast<const SyncPositionElement*>(
               &_SyncPositionElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPositionElement& a, SyncPositionElement& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPositionElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPositionElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPositionElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPositionElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPositionElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncPositionElement& from) {
    SyncPositionElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPositionElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.SyncPositionElement";
  }
  protected:
  explicit SyncPositionElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 x = 2;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 3;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.SyncPositionElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TGuildMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TGuildMemberInfo) */ {
 public:
  inline TGuildMemberInfo() : TGuildMemberInfo(nullptr) {}
  ~TGuildMemberInfo() override;
  explicit PROTOBUF_CONSTEXPR TGuildMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGuildMemberInfo(const TGuildMemberInfo& from);
  TGuildMemberInfo(TGuildMemberInfo&& from) noexcept
    : TGuildMemberInfo() {
    *this = ::std::move(from);
  }

  inline TGuildMemberInfo& operator=(const TGuildMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGuildMemberInfo& operator=(TGuildMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGuildMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGuildMemberInfo* internal_default_instance() {
    return reinterpret_cast<const TGuildMemberInfo*>(
               &_TGuildMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TGuildMemberInfo& a, TGuildMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TGuildMemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGuildMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TGuildMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TGuildMemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGuildMemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TGuildMemberInfo& from) {
    TGuildMemberInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGuildMemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TGuildMemberInfo";
  }
  protected:
  explicit TGuildMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 7,
    kPidFieldNumber = 1,
    kGradeFieldNumber = 2,
    kIsGeneralFieldNumber = 3,
    kJobFieldNumber = 4,
    kLevelFieldNumber = 5,
    kOfferFieldNumber = 6,
  };
  // bytes name = 7;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 grade = 2;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // bool is_general = 3;
  void clear_is_general();
  bool is_general() const;
  void set_is_general(bool value);
  private:
  bool _internal_is_general() const;
  void _internal_set_is_general(bool value);
  public:

  // uint32 job = 4;
  void clear_job();
  uint32_t job() const;
  void set_job(uint32_t value);
  private:
  uint32_t _internal_job() const;
  void _internal_set_job(uint32_t value);
  public:

  // uint32 level = 5;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 offer = 6;
  void clear_offer();
  uint32_t offer() const;
  void set_offer(uint32_t value);
  private:
  uint32_t _internal_offer() const;
  void _internal_set_offer(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TGuildMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    uint32_t grade_;
    bool is_general_;
    uint32_t job_;
    uint32_t level_;
    uint32_t offer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TOnlinePlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TOnlinePlayerInfo) */ {
 public:
  inline TOnlinePlayerInfo() : TOnlinePlayerInfo(nullptr) {}
  ~TOnlinePlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR TOnlinePlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOnlinePlayerInfo(const TOnlinePlayerInfo& from);
  TOnlinePlayerInfo(TOnlinePlayerInfo&& from) noexcept
    : TOnlinePlayerInfo() {
    *this = ::std::move(from);
  }

  inline TOnlinePlayerInfo& operator=(const TOnlinePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOnlinePlayerInfo& operator=(TOnlinePlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOnlinePlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOnlinePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const TOnlinePlayerInfo*>(
               &_TOnlinePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TOnlinePlayerInfo& a, TOnlinePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TOnlinePlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOnlinePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TOnlinePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TOnlinePlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TOnlinePlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TOnlinePlayerInfo& from) {
    TOnlinePlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOnlinePlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TOnlinePlayerInfo";
  }
  protected:
  explicit TOnlinePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kMapIndexFieldNumber = 2,
    kChannelFieldNumber = 3,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TOnlinePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t map_index_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TTargetMonsterDropInfoTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TTargetMonsterDropInfoTable) */ {
 public:
  inline TTargetMonsterDropInfoTable() : TTargetMonsterDropInfoTable(nullptr) {}
  ~TTargetMonsterDropInfoTable() override;
  explicit PROTOBUF_CONSTEXPR TTargetMonsterDropInfoTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TTargetMonsterDropInfoTable(const TTargetMonsterDropInfoTable& from);
  TTargetMonsterDropInfoTable(TTargetMonsterDropInfoTable&& from) noexcept
    : TTargetMonsterDropInfoTable() {
    *this = ::std::move(from);
  }

  inline TTargetMonsterDropInfoTable& operator=(const TTargetMonsterDropInfoTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTargetMonsterDropInfoTable& operator=(TTargetMonsterDropInfoTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TTargetMonsterDropInfoTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TTargetMonsterDropInfoTable* internal_default_instance() {
    return reinterpret_cast<const TTargetMonsterDropInfoTable*>(
               &_TTargetMonsterDropInfoTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TTargetMonsterDropInfoTable& a, TTargetMonsterDropInfoTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TTargetMonsterDropInfoTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTargetMonsterDropInfoTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TTargetMonsterDropInfoTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TTargetMonsterDropInfoTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TTargetMonsterDropInfoTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TTargetMonsterDropInfoTable& from) {
    TTargetMonsterDropInfoTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTargetMonsterDropInfoTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TTargetMonsterDropInfoTable";
  }
  protected:
  explicit TTargetMonsterDropInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelLimitFieldNumber = 1,
    kItemVnumFieldNumber = 2,
    kItemCountFieldNumber = 3,
  };
  // uint32 level_limit = 1;
  void clear_level_limit();
  uint32_t level_limit() const;
  void set_level_limit(uint32_t value);
  private:
  uint32_t _internal_level_limit() const;
  void _internal_set_level_limit(uint32_t value);
  public:

  // uint32 item_vnum = 2;
  void clear_item_vnum();
  uint32_t item_vnum() const;
  void set_item_vnum(uint32_t value);
  private:
  uint32_t _internal_item_vnum() const;
  void _internal_set_item_vnum(uint32_t value);
  public:

  // uint32 item_count = 3;
  void clear_item_count();
  uint32_t item_count() const;
  void set_item_count(uint32_t value);
  private:
  uint32_t _internal_item_count() const;
  void _internal_set_item_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TTargetMonsterDropInfoTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t level_limit_;
    uint32_t item_vnum_;
    uint32_t item_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TEventManagerTagTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TEventManagerTagTeam) */ {
 public:
  inline TEventManagerTagTeam() : TEventManagerTagTeam(nullptr) {}
  ~TEventManagerTagTeam() override;
  explicit PROTOBUF_CONSTEXPR TEventManagerTagTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEventManagerTagTeam(const TEventManagerTagTeam& from);
  TEventManagerTagTeam(TEventManagerTagTeam&& from) noexcept
    : TEventManagerTagTeam() {
    *this = ::std::move(from);
  }

  inline TEventManagerTagTeam& operator=(const TEventManagerTagTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEventManagerTagTeam& operator=(TEventManagerTagTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEventManagerTagTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEventManagerTagTeam* internal_default_instance() {
    return reinterpret_cast<const TEventManagerTagTeam*>(
               &_TEventManagerTagTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TEventManagerTagTeam& a, TEventManagerTagTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(TEventManagerTagTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEventManagerTagTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEventManagerTagTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEventManagerTagTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEventManagerTagTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TEventManagerTagTeam& from) {
    TEventManagerTagTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEventManagerTagTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TEventManagerTagTeam";
  }
  protected:
  explicit TEventManagerTagTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kName1FieldNumber = 2,
    kName2FieldNumber = 4,
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 3,
  };
  // bytes name1 = 2;
  void clear_name1();
  const std::string& name1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name1();
  PROTOBUF_NODISCARD std::string* release_name1();
  void set_allocated_name1(std::string* name1);
  private:
  const std::string& _internal_name1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name1(const std::string& value);
  std::string* _internal_mutable_name1();
  public:

  // bytes name2 = 4;
  void clear_name2();
  const std::string& name2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name2();
  PROTOBUF_NODISCARD std::string* release_name2();
  void set_allocated_name2(std::string* name2);
  private:
  const std::string& _internal_name2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name2(const std::string& value);
  std::string* _internal_mutable_name2();
  public:

  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 3;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TEventManagerTagTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name2_;
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TCrystalProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TCrystalProto) */ {
 public:
  inline TCrystalProto() : TCrystalProto(nullptr) {}
  ~TCrystalProto() override;
  explicit PROTOBUF_CONSTEXPR TCrystalProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCrystalProto(const TCrystalProto& from);
  TCrystalProto(TCrystalProto&& from) noexcept
    : TCrystalProto() {
    *this = ::std::move(from);
  }

  inline TCrystalProto& operator=(const TCrystalProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCrystalProto& operator=(TCrystalProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCrystalProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCrystalProto* internal_default_instance() {
    return reinterpret_cast<const TCrystalProto*>(
               &_TCrystalProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TCrystalProto& a, TCrystalProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TCrystalProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCrystalProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCrystalProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCrystalProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCrystalProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCrystalProto& from) {
    TCrystalProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCrystalProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TCrystalProto";
  }
  protected:
  explicit TCrystalProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppliesFieldNumber = 4,
    kProcessLevelFieldNumber = 1,
    kClarityTypeFieldNumber = 2,
    kClarityLevelFieldNumber = 3,
    kRequiredFragmentsFieldNumber = 5,
  };
  // repeated .network.TItemAttribute applies = 4;
  int applies_size() const;
  private:
  int _internal_applies_size() const;
  public:
  void clear_applies();
  ::network::TItemAttribute* mutable_applies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
      mutable_applies();
  private:
  const ::network::TItemAttribute& _internal_applies(int index) const;
  ::network::TItemAttribute* _internal_add_applies();
  public:
  const ::network::TItemAttribute& applies(int index) const;
  ::network::TItemAttribute* add_applies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
      applies() const;

  // uint32 process_level = 1;
  void clear_process_level();
  uint32_t process_level() const;
  void set_process_level(uint32_t value);
  private:
  uint32_t _internal_process_level() const;
  void _internal_set_process_level(uint32_t value);
  public:

  // uint32 clarity_type = 2;
  void clear_clarity_type();
  uint32_t clarity_type() const;
  void set_clarity_type(uint32_t value);
  private:
  uint32_t _internal_clarity_type() const;
  void _internal_set_clarity_type(uint32_t value);
  public:

  // uint32 clarity_level = 3;
  void clear_clarity_level();
  uint32_t clarity_level() const;
  void set_clarity_level(uint32_t value);
  private:
  uint32_t _internal_clarity_level() const;
  void _internal_set_clarity_level(uint32_t value);
  public:

  // uint32 required_fragments = 5;
  void clear_required_fragments();
  uint32_t required_fragments() const;
  void set_required_fragments(uint32_t value);
  private:
  uint32_t _internal_required_fragments() const;
  void _internal_set_required_fragments(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TCrystalProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute > applies_;
    uint32_t process_level_;
    uint32_t clarity_type_;
    uint32_t clarity_level_;
    uint32_t required_fragments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TMobSkillLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TMobSkillLevel) */ {
 public:
  inline TMobSkillLevel() : TMobSkillLevel(nullptr) {}
  ~TMobSkillLevel() override;
  explicit PROTOBUF_CONSTEXPR TMobSkillLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TMobSkillLevel(const TMobSkillLevel& from);
  TMobSkillLevel(TMobSkillLevel&& from) noexcept
    : TMobSkillLevel() {
    *this = ::std::move(from);
  }

  inline TMobSkillLevel& operator=(const TMobSkillLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMobSkillLevel& operator=(TMobSkillLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TMobSkillLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TMobSkillLevel* internal_default_instance() {
    return reinterpret_cast<const TMobSkillLevel*>(
               &_TMobSkillLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TMobSkillLevel& a, TMobSkillLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(TMobSkillLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMobSkillLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TMobSkillLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TMobSkillLevel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TMobSkillLevel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TMobSkillLevel& from) {
    TMobSkillLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMobSkillLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TMobSkillLevel";
  }
  protected:
  explicit TMobSkillLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TMobSkillLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TMobTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TMobTable) */ {
 public:
  inline TMobTable() : TMobTable(nullptr) {}
  ~TMobTable() override;
  explicit PROTOBUF_CONSTEXPR TMobTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TMobTable(const TMobTable& from);
  TMobTable(TMobTable&& from) noexcept
    : TMobTable() {
    *this = ::std::move(from);
  }

  inline TMobTable& operator=(const TMobTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMobTable& operator=(TMobTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TMobTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TMobTable* internal_default_instance() {
    return reinterpret_cast<const TMobTable*>(
               &_TMobTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TMobTable& a, TMobTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TMobTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMobTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TMobTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TMobTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TMobTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TMobTable& from) {
    TMobTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMobTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TMobTable";
  }
  protected:
  explicit TMobTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnchantsFieldNumber = 29,
    kResistsFieldNumber = 30,
    kSkillsFieldNumber = 42,
    kLocaleNameFieldNumber = 50,
    kNameFieldNumber = 2,
    kFolderFieldNumber = 36,
    kVnumFieldNumber = 1,
    kTypeFieldNumber = 3,
    kRankFieldNumber = 4,
    kBattleTypeFieldNumber = 5,
    kLevelFieldNumber = 6,
    kSizeFieldNumber = 7,
    kGoldMinFieldNumber = 8,
    kGoldMaxFieldNumber = 9,
    kExpFieldNumber = 10,
    kMaxHpFieldNumber = 11,
    kRegenCycleFieldNumber = 12,
    kRegenPercentFieldNumber = 13,
    kDefFieldNumber = 14,
    kAiFlagFieldNumber = 15,
    kRaceFlagFieldNumber = 16,
    kImmuneFlagFieldNumber = 17,
    kStrFieldNumber = 18,
    kDexFieldNumber = 19,
    kConFieldNumber = 20,
    kIntFieldNumber = 21,
    kDamageMinFieldNumber = 22,
    kDamageMaxFieldNumber = 23,
    kAttackSpeedFieldNumber = 24,
    kMovingSpeedFieldNumber = 25,
    kAggressiveHpPctFieldNumber = 26,
    kAggressiveSightFieldNumber = 27,
    kAttackRangeFieldNumber = 28,
    kResurrectionVnumFieldNumber = 31,
    kDropItemVnumFieldNumber = 32,
    kMountCapacityFieldNumber = 33,
    kOnClickTypeFieldNumber = 34,
    kEmpireFieldNumber = 35,
    kDamMultiplyFieldNumber = 37,
    kSummonVnumFieldNumber = 38,
    kDrainSpFieldNumber = 39,
    kMobColorFieldNumber = 40,
    kPolymorphItemVnumFieldNumber = 41,
    kBerserkPointFieldNumber = 43,
    kStoneSkinPointFieldNumber = 44,
    kGodSpeedPointFieldNumber = 45,
    kDeathBlowPointFieldNumber = 46,
    kRevivePointFieldNumber = 47,
    kHealerPointFieldNumber = 48,
    kScalingSizeFieldNumber = 49,
  };
  // repeated int32 enchants = 29;
  int enchants_size() const;
  private:
  int _internal_enchants_size() const;
  public:
  void clear_enchants();
  private:
  int32_t _internal_enchants(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_enchants() const;
  void _internal_add_enchants(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_enchants();
  public:
  int32_t enchants(int index) const;
  void set_enchants(int index, int32_t value);
  void add_enchants(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      enchants() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_enchants();

  // repeated int32 resists = 30;
  int resists_size() const;
  private:
  int _internal_resists_size() const;
  public:
  void clear_resists();
  private:
  int32_t _internal_resists(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_resists() const;
  void _internal_add_resists(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_resists();
  public:
  int32_t resists(int index) const;
  void set_resists(int index, int32_t value);
  void add_resists(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      resists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_resists();

  // repeated .network.TMobSkillLevel skills = 42;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::network::TMobSkillLevel* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobSkillLevel >*
      mutable_skills();
  private:
  const ::network::TMobSkillLevel& _internal_skills(int index) const;
  ::network::TMobSkillLevel* _internal_add_skills();
  public:
  const ::network::TMobSkillLevel& skills(int index) const;
  ::network::TMobSkillLevel* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobSkillLevel >&
      skills() const;

  // repeated bytes locale_name = 50;
  int locale_name_size() const;
  private:
  int _internal_locale_name_size() const;
  public:
  void clear_locale_name();
  const std::string& locale_name(int index) const;
  std::string* mutable_locale_name(int index);
  void set_locale_name(int index, const std::string& value);
  void set_locale_name(int index, std::string&& value);
  void set_locale_name(int index, const char* value);
  void set_locale_name(int index, const void* value, size_t size);
  std::string* add_locale_name();
  void add_locale_name(const std::string& value);
  void add_locale_name(std::string&& value);
  void add_locale_name(const char* value);
  void add_locale_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locale_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locale_name();
  private:
  const std::string& _internal_locale_name(int index) const;
  std::string* _internal_add_locale_name();
  public:

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes folder = 36;
  void clear_folder();
  const std::string& folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder();
  PROTOBUF_NODISCARD std::string* release_folder();
  void set_allocated_folder(std::string* folder);
  private:
  const std::string& _internal_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder(const std::string& value);
  std::string* _internal_mutable_folder();
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 rank = 4;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // uint32 battle_type = 5;
  void clear_battle_type();
  uint32_t battle_type() const;
  void set_battle_type(uint32_t value);
  private:
  uint32_t _internal_battle_type() const;
  void _internal_set_battle_type(uint32_t value);
  public:

  // uint32 level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 size = 7;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint32 gold_min = 8;
  void clear_gold_min();
  uint32_t gold_min() const;
  void set_gold_min(uint32_t value);
  private:
  uint32_t _internal_gold_min() const;
  void _internal_set_gold_min(uint32_t value);
  public:

  // uint32 gold_max = 9;
  void clear_gold_max();
  uint32_t gold_max() const;
  void set_gold_max(uint32_t value);
  private:
  uint32_t _internal_gold_max() const;
  void _internal_set_gold_max(uint32_t value);
  public:

  // uint32 exp = 10;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint32 max_hp = 11;
  void clear_max_hp();
  uint32_t max_hp() const;
  void set_max_hp(uint32_t value);
  private:
  uint32_t _internal_max_hp() const;
  void _internal_set_max_hp(uint32_t value);
  public:

  // uint32 regen_cycle = 12;
  void clear_regen_cycle();
  uint32_t regen_cycle() const;
  void set_regen_cycle(uint32_t value);
  private:
  uint32_t _internal_regen_cycle() const;
  void _internal_set_regen_cycle(uint32_t value);
  public:

  // uint32 regen_percent = 13;
  void clear_regen_percent();
  uint32_t regen_percent() const;
  void set_regen_percent(uint32_t value);
  private:
  uint32_t _internal_regen_percent() const;
  void _internal_set_regen_percent(uint32_t value);
  public:

  // uint32 def = 14;
  void clear_def();
  uint32_t def() const;
  void set_def(uint32_t value);
  private:
  uint32_t _internal_def() const;
  void _internal_set_def(uint32_t value);
  public:

  // uint32 ai_flag = 15;
  void clear_ai_flag();
  uint32_t ai_flag() const;
  void set_ai_flag(uint32_t value);
  private:
  uint32_t _internal_ai_flag() const;
  void _internal_set_ai_flag(uint32_t value);
  public:

  // uint32 race_flag = 16;
  void clear_race_flag();
  uint32_t race_flag() const;
  void set_race_flag(uint32_t value);
  private:
  uint32_t _internal_race_flag() const;
  void _internal_set_race_flag(uint32_t value);
  public:

  // uint32 immune_flag = 17;
  void clear_immune_flag();
  uint32_t immune_flag() const;
  void set_immune_flag(uint32_t value);
  private:
  uint32_t _internal_immune_flag() const;
  void _internal_set_immune_flag(uint32_t value);
  public:

  // uint32 str = 18;
  void clear_str();
  uint32_t str() const;
  void set_str(uint32_t value);
  private:
  uint32_t _internal_str() const;
  void _internal_set_str(uint32_t value);
  public:

  // uint32 dex = 19;
  void clear_dex();
  uint32_t dex() const;
  void set_dex(uint32_t value);
  private:
  uint32_t _internal_dex() const;
  void _internal_set_dex(uint32_t value);
  public:

  // uint32 con = 20;
  void clear_con();
  uint32_t con() const;
  void set_con(uint32_t value);
  private:
  uint32_t _internal_con() const;
  void _internal_set_con(uint32_t value);
  public:

  // uint32 int = 21;
  void clear_int_();
  uint32_t int_() const;
  void set_int_(uint32_t value);
  private:
  uint32_t _internal_int_() const;
  void _internal_set_int_(uint32_t value);
  public:

  // uint32 damage_min = 22;
  void clear_damage_min();
  uint32_t damage_min() const;
  void set_damage_min(uint32_t value);
  private:
  uint32_t _internal_damage_min() const;
  void _internal_set_damage_min(uint32_t value);
  public:

  // uint32 damage_max = 23;
  void clear_damage_max();
  uint32_t damage_max() const;
  void set_damage_max(uint32_t value);
  private:
  uint32_t _internal_damage_max() const;
  void _internal_set_damage_max(uint32_t value);
  public:

  // uint32 attack_speed = 24;
  void clear_attack_speed();
  uint32_t attack_speed() const;
  void set_attack_speed(uint32_t value);
  private:
  uint32_t _internal_attack_speed() const;
  void _internal_set_attack_speed(uint32_t value);
  public:

  // uint32 moving_speed = 25;
  void clear_moving_speed();
  uint32_t moving_speed() const;
  void set_moving_speed(uint32_t value);
  private:
  uint32_t _internal_moving_speed() const;
  void _internal_set_moving_speed(uint32_t value);
  public:

  // uint32 aggressive_hp_pct = 26;
  void clear_aggressive_hp_pct();
  uint32_t aggressive_hp_pct() const;
  void set_aggressive_hp_pct(uint32_t value);
  private:
  uint32_t _internal_aggressive_hp_pct() const;
  void _internal_set_aggressive_hp_pct(uint32_t value);
  public:

  // uint32 aggressive_sight = 27;
  void clear_aggressive_sight();
  uint32_t aggressive_sight() const;
  void set_aggressive_sight(uint32_t value);
  private:
  uint32_t _internal_aggressive_sight() const;
  void _internal_set_aggressive_sight(uint32_t value);
  public:

  // uint32 attack_range = 28;
  void clear_attack_range();
  uint32_t attack_range() const;
  void set_attack_range(uint32_t value);
  private:
  uint32_t _internal_attack_range() const;
  void _internal_set_attack_range(uint32_t value);
  public:

  // uint32 resurrection_vnum = 31;
  void clear_resurrection_vnum();
  uint32_t resurrection_vnum() const;
  void set_resurrection_vnum(uint32_t value);
  private:
  uint32_t _internal_resurrection_vnum() const;
  void _internal_set_resurrection_vnum(uint32_t value);
  public:

  // uint32 drop_item_vnum = 32;
  void clear_drop_item_vnum();
  uint32_t drop_item_vnum() const;
  void set_drop_item_vnum(uint32_t value);
  private:
  uint32_t _internal_drop_item_vnum() const;
  void _internal_set_drop_item_vnum(uint32_t value);
  public:

  // uint32 mount_capacity = 33;
  void clear_mount_capacity();
  uint32_t mount_capacity() const;
  void set_mount_capacity(uint32_t value);
  private:
  uint32_t _internal_mount_capacity() const;
  void _internal_set_mount_capacity(uint32_t value);
  public:

  // uint32 on_click_type = 34;
  void clear_on_click_type();
  uint32_t on_click_type() const;
  void set_on_click_type(uint32_t value);
  private:
  uint32_t _internal_on_click_type() const;
  void _internal_set_on_click_type(uint32_t value);
  public:

  // uint32 empire = 35;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // float dam_multiply = 37;
  void clear_dam_multiply();
  float dam_multiply() const;
  void set_dam_multiply(float value);
  private:
  float _internal_dam_multiply() const;
  void _internal_set_dam_multiply(float value);
  public:

  // uint32 summon_vnum = 38;
  void clear_summon_vnum();
  uint32_t summon_vnum() const;
  void set_summon_vnum(uint32_t value);
  private:
  uint32_t _internal_summon_vnum() const;
  void _internal_set_summon_vnum(uint32_t value);
  public:

  // uint32 drain_sp = 39;
  void clear_drain_sp();
  uint32_t drain_sp() const;
  void set_drain_sp(uint32_t value);
  private:
  uint32_t _internal_drain_sp() const;
  void _internal_set_drain_sp(uint32_t value);
  public:

  // uint32 mob_color = 40;
  void clear_mob_color();
  uint32_t mob_color() const;
  void set_mob_color(uint32_t value);
  private:
  uint32_t _internal_mob_color() const;
  void _internal_set_mob_color(uint32_t value);
  public:

  // uint32 polymorph_item_vnum = 41;
  void clear_polymorph_item_vnum();
  uint32_t polymorph_item_vnum() const;
  void set_polymorph_item_vnum(uint32_t value);
  private:
  uint32_t _internal_polymorph_item_vnum() const;
  void _internal_set_polymorph_item_vnum(uint32_t value);
  public:

  // uint32 berserk_point = 43;
  void clear_berserk_point();
  uint32_t berserk_point() const;
  void set_berserk_point(uint32_t value);
  private:
  uint32_t _internal_berserk_point() const;
  void _internal_set_berserk_point(uint32_t value);
  public:

  // uint32 stone_skin_point = 44;
  void clear_stone_skin_point();
  uint32_t stone_skin_point() const;
  void set_stone_skin_point(uint32_t value);
  private:
  uint32_t _internal_stone_skin_point() const;
  void _internal_set_stone_skin_point(uint32_t value);
  public:

  // uint32 god_speed_point = 45;
  void clear_god_speed_point();
  uint32_t god_speed_point() const;
  void set_god_speed_point(uint32_t value);
  private:
  uint32_t _internal_god_speed_point() const;
  void _internal_set_god_speed_point(uint32_t value);
  public:

  // uint32 death_blow_point = 46;
  void clear_death_blow_point();
  uint32_t death_blow_point() const;
  void set_death_blow_point(uint32_t value);
  private:
  uint32_t _internal_death_blow_point() const;
  void _internal_set_death_blow_point(uint32_t value);
  public:

  // uint32 revive_point = 47;
  void clear_revive_point();
  uint32_t revive_point() const;
  void set_revive_point(uint32_t value);
  private:
  uint32_t _internal_revive_point() const;
  void _internal_set_revive_point(uint32_t value);
  public:

  // uint32 healer_point = 48;
  void clear_healer_point();
  uint32_t healer_point() const;
  void set_healer_point(uint32_t value);
  private:
  uint32_t _internal_healer_point() const;
  void _internal_set_healer_point(uint32_t value);
  public:

  // float scaling_size = 49;
  void clear_scaling_size();
  float scaling_size() const;
  void set_scaling_size(float value);
  private:
  float _internal_scaling_size() const;
  void _internal_set_scaling_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:network.TMobTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > enchants_;
    mutable std::atomic<int> _enchants_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > resists_;
    mutable std::atomic<int> _resists_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobSkillLevel > skills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locale_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_;
    uint32_t vnum_;
    uint32_t type_;
    uint32_t rank_;
    uint32_t battle_type_;
    uint32_t level_;
    uint32_t size_;
    uint32_t gold_min_;
    uint32_t gold_max_;
    uint32_t exp_;
    uint32_t max_hp_;
    uint32_t regen_cycle_;
    uint32_t regen_percent_;
    uint32_t def_;
    uint32_t ai_flag_;
    uint32_t race_flag_;
    uint32_t immune_flag_;
    uint32_t str_;
    uint32_t dex_;
    uint32_t con_;
    uint32_t int__;
    uint32_t damage_min_;
    uint32_t damage_max_;
    uint32_t attack_speed_;
    uint32_t moving_speed_;
    uint32_t aggressive_hp_pct_;
    uint32_t aggressive_sight_;
    uint32_t attack_range_;
    uint32_t resurrection_vnum_;
    uint32_t drop_item_vnum_;
    uint32_t mount_capacity_;
    uint32_t on_click_type_;
    uint32_t empire_;
    float dam_multiply_;
    uint32_t summon_vnum_;
    uint32_t drain_sp_;
    uint32_t mob_color_;
    uint32_t polymorph_item_vnum_;
    uint32_t berserk_point_;
    uint32_t stone_skin_point_;
    uint32_t god_speed_point_;
    uint32_t death_blow_point_;
    uint32_t revive_point_;
    uint32_t healer_point_;
    float scaling_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TRepeatedMobTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TRepeatedMobTable) */ {
 public:
  inline TRepeatedMobTable() : TRepeatedMobTable(nullptr) {}
  ~TRepeatedMobTable() override;
  explicit PROTOBUF_CONSTEXPR TRepeatedMobTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRepeatedMobTable(const TRepeatedMobTable& from);
  TRepeatedMobTable(TRepeatedMobTable&& from) noexcept
    : TRepeatedMobTable() {
    *this = ::std::move(from);
  }

  inline TRepeatedMobTable& operator=(const TRepeatedMobTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRepeatedMobTable& operator=(TRepeatedMobTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRepeatedMobTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRepeatedMobTable* internal_default_instance() {
    return reinterpret_cast<const TRepeatedMobTable*>(
               &_TRepeatedMobTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TRepeatedMobTable& a, TRepeatedMobTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TRepeatedMobTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRepeatedMobTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRepeatedMobTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRepeatedMobTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRepeatedMobTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRepeatedMobTable& from) {
    TRepeatedMobTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRepeatedMobTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TRepeatedMobTable";
  }
  protected:
  explicit TRepeatedMobTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .network.TMobTable data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::network::TMobTable* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
      mutable_data();
  private:
  const ::network::TMobTable& _internal_data(int index) const;
  ::network::TMobTable* _internal_add_data();
  public:
  const ::network::TMobTable& data(int index) const;
  ::network::TMobTable* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
      data() const;

  // @@protoc_insertion_point(class_scope:network.TRepeatedMobTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TItemLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemLimit) */ {
 public:
  inline TItemLimit() : TItemLimit(nullptr) {}
  ~TItemLimit() override;
  explicit PROTOBUF_CONSTEXPR TItemLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemLimit(const TItemLimit& from);
  TItemLimit(TItemLimit&& from) noexcept
    : TItemLimit() {
    *this = ::std::move(from);
  }

  inline TItemLimit& operator=(const TItemLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemLimit& operator=(TItemLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemLimit* internal_default_instance() {
    return reinterpret_cast<const TItemLimit*>(
               &_TItemLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TItemLimit& a, TItemLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemLimit& from) {
    TItemLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemLimit";
  }
  protected:
  explicit TItemLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TItemApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemApply) */ {
 public:
  inline TItemApply() : TItemApply(nullptr) {}
  ~TItemApply() override;
  explicit PROTOBUF_CONSTEXPR TItemApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemApply(const TItemApply& from);
  TItemApply(TItemApply&& from) noexcept
    : TItemApply() {
    *this = ::std::move(from);
  }

  inline TItemApply& operator=(const TItemApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemApply& operator=(TItemApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemApply* internal_default_instance() {
    return reinterpret_cast<const TItemApply*>(
               &_TItemApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TItemApply& a, TItemApply& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemApply& from) {
    TItemApply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemApply";
  }
  protected:
  explicit TItemApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TItemTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemTable) */ {
 public:
  inline TItemTable() : TItemTable(nullptr) {}
  ~TItemTable() override;
  explicit PROTOBUF_CONSTEXPR TItemTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemTable(const TItemTable& from);
  TItemTable(TItemTable&& from) noexcept
    : TItemTable() {
    *this = ::std::move(from);
  }

  inline TItemTable& operator=(const TItemTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemTable& operator=(TItemTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemTable* internal_default_instance() {
    return reinterpret_cast<const TItemTable*>(
               &_TItemTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TItemTable& a, TItemTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemTable& from) {
    TItemTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemTable";
  }
  protected:
  explicit TItemTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 14,
    kAppliesFieldNumber = 15,
    kValuesFieldNumber = 16,
    kSocketsFieldNumber = 17,
    kLocaleNameFieldNumber = 26,
    kNameFieldNumber = 3,
    kVnumFieldNumber = 1,
    kVnumRangeFieldNumber = 2,
    kTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kWeightFieldNumber = 6,
    kSizeFieldNumber = 7,
    kAntiFlagsFieldNumber = 8,
    kFlagsFieldNumber = 9,
    kWearFlagsFieldNumber = 10,
    kImmuneFlagsFieldNumber = 11,
    kGoldFieldNumber = 12,
    kShopBuyPriceFieldNumber = 13,
    kRefinedVnumFieldNumber = 18,
    kRefineSetFieldNumber = 19,
    kAlterToMagicItemPctFieldNumber = 20,
    kSpecularFieldNumber = 21,
    kGainSocketPctFieldNumber = 22,
    kAddonTypeFieldNumber = 23,
    kLimitRealTimeFirstUseIndexFieldNumber = 24,
    kLimitTimerBasedOnWearIndexFieldNumber = 25,
  };
  // repeated .network.TItemLimit limits = 14;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::network::TItemLimit* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemLimit >*
      mutable_limits();
  private:
  const ::network::TItemLimit& _internal_limits(int index) const;
  ::network::TItemLimit* _internal_add_limits();
  public:
  const ::network::TItemLimit& limits(int index) const;
  ::network::TItemLimit* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemLimit >&
      limits() const;

  // repeated .network.TItemApply applies = 15;
  int applies_size() const;
  private:
  int _internal_applies_size() const;
  public:
  void clear_applies();
  ::network::TItemApply* mutable_applies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemApply >*
      mutable_applies();
  private:
  const ::network::TItemApply& _internal_applies(int index) const;
  ::network::TItemApply* _internal_add_applies();
  public:
  const ::network::TItemApply& applies(int index) const;
  ::network::TItemApply* add_applies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemApply >&
      applies() const;

  // repeated int32 values = 16;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int32_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_values() const;
  void _internal_add_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_values();
  public:
  int32_t values(int index) const;
  void set_values(int index, int32_t value);
  void add_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_values();

  // repeated int32 sockets = 17;
  int sockets_size() const;
  private:
  int _internal_sockets_size() const;
  public:
  void clear_sockets();
  private:
  int32_t _internal_sockets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sockets() const;
  void _internal_add_sockets(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sockets();
  public:
  int32_t sockets(int index) const;
  void set_sockets(int index, int32_t value);
  void add_sockets(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sockets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sockets();

  // repeated bytes locale_name = 26;
  int locale_name_size() const;
  private:
  int _internal_locale_name_size() const;
  public:
  void clear_locale_name();
  const std::string& locale_name(int index) const;
  std::string* mutable_locale_name(int index);
  void set_locale_name(int index, const std::string& value);
  void set_locale_name(int index, std::string&& value);
  void set_locale_name(int index, const char* value);
  void set_locale_name(int index, const void* value, size_t size);
  std::string* add_locale_name();
  void add_locale_name(const std::string& value);
  void add_locale_name(std::string&& value);
  void add_locale_name(const char* value);
  void add_locale_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locale_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locale_name();
  private:
  const std::string& _internal_locale_name(int index) const;
  std::string* _internal_add_locale_name();
  public:

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 vnum_range = 2;
  void clear_vnum_range();
  uint32_t vnum_range() const;
  void set_vnum_range(uint32_t value);
  private:
  uint32_t _internal_vnum_range() const;
  void _internal_set_vnum_range(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 sub_type = 5;
  void clear_sub_type();
  uint32_t sub_type() const;
  void set_sub_type(uint32_t value);
  private:
  uint32_t _internal_sub_type() const;
  void _internal_set_sub_type(uint32_t value);
  public:

  // uint32 weight = 6;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // uint32 size = 7;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint32 anti_flags = 8;
  void clear_anti_flags();
  uint32_t anti_flags() const;
  void set_anti_flags(uint32_t value);
  private:
  uint32_t _internal_anti_flags() const;
  void _internal_set_anti_flags(uint32_t value);
  public:

  // uint32 flags = 9;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 wear_flags = 10;
  void clear_wear_flags();
  uint32_t wear_flags() const;
  void set_wear_flags(uint32_t value);
  private:
  uint32_t _internal_wear_flags() const;
  void _internal_set_wear_flags(uint32_t value);
  public:

  // uint32 immune_flags = 11;
  void clear_immune_flags();
  uint32_t immune_flags() const;
  void set_immune_flags(uint32_t value);
  private:
  uint32_t _internal_immune_flags() const;
  void _internal_set_immune_flags(uint32_t value);
  public:

  // int64 gold = 12;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // int64 shop_buy_price = 13;
  void clear_shop_buy_price();
  int64_t shop_buy_price() const;
  void set_shop_buy_price(int64_t value);
  private:
  int64_t _internal_shop_buy_price() const;
  void _internal_set_shop_buy_price(int64_t value);
  public:

  // uint32 refined_vnum = 18;
  void clear_refined_vnum();
  uint32_t refined_vnum() const;
  void set_refined_vnum(uint32_t value);
  private:
  uint32_t _internal_refined_vnum() const;
  void _internal_set_refined_vnum(uint32_t value);
  public:

  // uint32 refine_set = 19;
  void clear_refine_set();
  uint32_t refine_set() const;
  void set_refine_set(uint32_t value);
  private:
  uint32_t _internal_refine_set() const;
  void _internal_set_refine_set(uint32_t value);
  public:

  // uint32 alter_to_magic_item_pct = 20;
  void clear_alter_to_magic_item_pct();
  uint32_t alter_to_magic_item_pct() const;
  void set_alter_to_magic_item_pct(uint32_t value);
  private:
  uint32_t _internal_alter_to_magic_item_pct() const;
  void _internal_set_alter_to_magic_item_pct(uint32_t value);
  public:

  // uint32 specular = 21;
  void clear_specular();
  uint32_t specular() const;
  void set_specular(uint32_t value);
  private:
  uint32_t _internal_specular() const;
  void _internal_set_specular(uint32_t value);
  public:

  // uint32 gain_socket_pct = 22;
  void clear_gain_socket_pct();
  uint32_t gain_socket_pct() const;
  void set_gain_socket_pct(uint32_t value);
  private:
  uint32_t _internal_gain_socket_pct() const;
  void _internal_set_gain_socket_pct(uint32_t value);
  public:

  // sint32 addon_type = 23;
  void clear_addon_type();
  int32_t addon_type() const;
  void set_addon_type(int32_t value);
  private:
  int32_t _internal_addon_type() const;
  void _internal_set_addon_type(int32_t value);
  public:

  // sint32 limit_real_time_first_use_index = 24;
  void clear_limit_real_time_first_use_index();
  int32_t limit_real_time_first_use_index() const;
  void set_limit_real_time_first_use_index(int32_t value);
  private:
  int32_t _internal_limit_real_time_first_use_index() const;
  void _internal_set_limit_real_time_first_use_index(int32_t value);
  public:

  // sint32 limit_timer_based_on_wear_index = 25;
  void clear_limit_timer_based_on_wear_index();
  int32_t limit_timer_based_on_wear_index() const;
  void set_limit_timer_based_on_wear_index(int32_t value);
  private:
  int32_t _internal_limit_timer_based_on_wear_index() const;
  void _internal_set_limit_timer_based_on_wear_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemLimit > limits_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemApply > applies_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sockets_;
    mutable std::atomic<int> _sockets_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locale_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t vnum_;
    uint32_t vnum_range_;
    uint32_t type_;
    uint32_t sub_type_;
    uint32_t weight_;
    uint32_t size_;
    uint32_t anti_flags_;
    uint32_t flags_;
    uint32_t wear_flags_;
    uint32_t immune_flags_;
    int64_t gold_;
    int64_t shop_buy_price_;
    uint32_t refined_vnum_;
    uint32_t refine_set_;
    uint32_t alter_to_magic_item_pct_;
    uint32_t specular_;
    uint32_t gain_socket_pct_;
    int32_t addon_type_;
    int32_t limit_real_time_first_use_index_;
    int32_t limit_timer_based_on_wear_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TRepeatedItemTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TRepeatedItemTable) */ {
 public:
  inline TRepeatedItemTable() : TRepeatedItemTable(nullptr) {}
  ~TRepeatedItemTable() override;
  explicit PROTOBUF_CONSTEXPR TRepeatedItemTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRepeatedItemTable(const TRepeatedItemTable& from);
  TRepeatedItemTable(TRepeatedItemTable&& from) noexcept
    : TRepeatedItemTable() {
    *this = ::std::move(from);
  }

  inline TRepeatedItemTable& operator=(const TRepeatedItemTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRepeatedItemTable& operator=(TRepeatedItemTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRepeatedItemTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRepeatedItemTable* internal_default_instance() {
    return reinterpret_cast<const TRepeatedItemTable*>(
               &_TRepeatedItemTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TRepeatedItemTable& a, TRepeatedItemTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TRepeatedItemTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRepeatedItemTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRepeatedItemTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRepeatedItemTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRepeatedItemTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRepeatedItemTable& from) {
    TRepeatedItemTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRepeatedItemTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TRepeatedItemTable";
  }
  protected:
  explicit TRepeatedItemTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .network.TItemTable data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::network::TItemTable* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >*
      mutable_data();
  private:
  const ::network::TItemTable& _internal_data(int index) const;
  ::network::TItemTable* _internal_add_data();
  public:
  const ::network::TItemTable& data(int index) const;
  ::network::TItemTable* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >&
      data() const;

  // @@protoc_insertion_point(class_scope:network.TRepeatedItemTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TShopTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TShopTable) */ {
 public:
  inline TShopTable() : TShopTable(nullptr) {}
  ~TShopTable() override;
  explicit PROTOBUF_CONSTEXPR TShopTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TShopTable(const TShopTable& from);
  TShopTable(TShopTable&& from) noexcept
    : TShopTable() {
    *this = ::std::move(from);
  }

  inline TShopTable& operator=(const TShopTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TShopTable& operator=(TShopTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TShopTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TShopTable* internal_default_instance() {
    return reinterpret_cast<const TShopTable*>(
               &_TShopTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TShopTable& a, TShopTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TShopTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TShopTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TShopTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TShopTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TShopTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TShopTable& from) {
    TShopTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TShopTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TShopTable";
  }
  protected:
  explicit TShopTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kVnumFieldNumber = 1,
    kNpcVnumFieldNumber = 2,
    kItemCountFieldNumber = 3,
  };
  // repeated .network.TShopItemTable items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TShopItemTable* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
      mutable_items();
  private:
  const ::network::TShopItemTable& _internal_items(int index) const;
  ::network::TShopItemTable* _internal_add_items();
  public:
  const ::network::TShopItemTable& items(int index) const;
  ::network::TShopItemTable* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
      items() const;

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 npc_vnum = 2;
  void clear_npc_vnum();
  uint32_t npc_vnum() const;
  void set_npc_vnum(uint32_t value);
  private:
  uint32_t _internal_npc_vnum() const;
  void _internal_set_npc_vnum(uint32_t value);
  public:

  // uint32 item_count = 3;
  void clear_item_count();
  uint32_t item_count() const;
  void set_item_count(uint32_t value);
  private:
  uint32_t _internal_item_count() const;
  void _internal_set_item_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TShopTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable > items_;
    uint32_t vnum_;
    uint32_t npc_vnum_;
    uint32_t item_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TDataAuctionSearch_ItemType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TDataAuctionSearch.ItemType) */ {
 public:
  inline TDataAuctionSearch_ItemType() : TDataAuctionSearch_ItemType(nullptr) {}
  ~TDataAuctionSearch_ItemType() override;
  explicit PROTOBUF_CONSTEXPR TDataAuctionSearch_ItemType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDataAuctionSearch_ItemType(const TDataAuctionSearch_ItemType& from);
  TDataAuctionSearch_ItemType(TDataAuctionSearch_ItemType&& from) noexcept
    : TDataAuctionSearch_ItemType() {
    *this = ::std::move(from);
  }

  inline TDataAuctionSearch_ItemType& operator=(const TDataAuctionSearch_ItemType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDataAuctionSearch_ItemType& operator=(TDataAuctionSearch_ItemType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDataAuctionSearch_ItemType& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDataAuctionSearch_ItemType* internal_default_instance() {
    return reinterpret_cast<const TDataAuctionSearch_ItemType*>(
               &_TDataAuctionSearch_ItemType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TDataAuctionSearch_ItemType& a, TDataAuctionSearch_ItemType& b) {
    a.Swap(&b);
  }
  inline void Swap(TDataAuctionSearch_ItemType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDataAuctionSearch_ItemType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDataAuctionSearch_ItemType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDataAuctionSearch_ItemType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDataAuctionSearch_ItemType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDataAuctionSearch_ItemType& from) {
    TDataAuctionSearch_ItemType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDataAuctionSearch_ItemType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TDataAuctionSearch.ItemType";
  }
  protected:
  explicit TDataAuctionSearch_ItemType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 sub_types = 2;
  int sub_types_size() const;
  private:
  int _internal_sub_types_size() const;
  public:
  void clear_sub_types();
  private:
  uint32_t _internal_sub_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_sub_types() const;
  void _internal_add_sub_types(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_sub_types();
  public:
  uint32_t sub_types(int index) const;
  void set_sub_types(int index, uint32_t value);
  void add_sub_types(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      sub_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_sub_types();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TDataAuctionSearch.ItemType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > sub_types_;
    mutable std::atomic<int> _sub_types_cached_byte_size_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TDataAuctionSearch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TDataAuctionSearch) */ {
 public:
  inline TDataAuctionSearch() : TDataAuctionSearch(nullptr) {}
  ~TDataAuctionSearch() override;
  explicit PROTOBUF_CONSTEXPR TDataAuctionSearch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDataAuctionSearch(const TDataAuctionSearch& from);
  TDataAuctionSearch(TDataAuctionSearch&& from) noexcept
    : TDataAuctionSearch() {
    *this = ::std::move(from);
  }

  inline TDataAuctionSearch& operator=(const TDataAuctionSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDataAuctionSearch& operator=(TDataAuctionSearch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDataAuctionSearch& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDataAuctionSearch* internal_default_instance() {
    return reinterpret_cast<const TDataAuctionSearch*>(
               &_TDataAuctionSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TDataAuctionSearch& a, TDataAuctionSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(TDataAuctionSearch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDataAuctionSearch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDataAuctionSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDataAuctionSearch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDataAuctionSearch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDataAuctionSearch& from) {
    TDataAuctionSearch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDataAuctionSearch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TDataAuctionSearch";
  }
  protected:
  explicit TDataAuctionSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TDataAuctionSearch_ItemType ItemType;

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kSearchTextFieldNumber = 1,
    kSocket0FieldNumber = 3,
    kValue0FieldNumber = 4,
    kIncludeAntiFlagFieldNumber = 5,
  };
  // repeated .network.TDataAuctionSearch.ItemType types = 2;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  ::network::TDataAuctionSearch_ItemType* mutable_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TDataAuctionSearch_ItemType >*
      mutable_types();
  private:
  const ::network::TDataAuctionSearch_ItemType& _internal_types(int index) const;
  ::network::TDataAuctionSearch_ItemType* _internal_add_types();
  public:
  const ::network::TDataAuctionSearch_ItemType& types(int index) const;
  ::network::TDataAuctionSearch_ItemType* add_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TDataAuctionSearch_ItemType >&
      types() const;

  // bytes search_text = 1;
  void clear_search_text();
  const std::string& search_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_text();
  PROTOBUF_NODISCARD std::string* release_search_text();
  void set_allocated_search_text(std::string* search_text);
  private:
  const std::string& _internal_search_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_text(const std::string& value);
  std::string* _internal_mutable_search_text();
  public:

  // sint32 socket0 = 3;
  void clear_socket0();
  int32_t socket0() const;
  void set_socket0(int32_t value);
  private:
  int32_t _internal_socket0() const;
  void _internal_set_socket0(int32_t value);
  public:

  // sint32 value0 = 4;
  void clear_value0();
  int32_t value0() const;
  void set_value0(int32_t value);
  private:
  int32_t _internal_value0() const;
  void _internal_set_value0(int32_t value);
  public:

  // uint32 include_anti_flag = 5;
  void clear_include_anti_flag();
  uint32_t include_anti_flag() const;
  void set_include_anti_flag(uint32_t value);
  private:
  uint32_t _internal_include_anti_flag() const;
  void _internal_set_include_anti_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TDataAuctionSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TDataAuctionSearch_ItemType > types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_text_;
    int32_t socket0_;
    int32_t value0_;
    uint32_t include_anti_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TExtendedDataAuctionSearch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TExtendedDataAuctionSearch) */ {
 public:
  inline TExtendedDataAuctionSearch() : TExtendedDataAuctionSearch(nullptr) {}
  ~TExtendedDataAuctionSearch() override;
  explicit PROTOBUF_CONSTEXPR TExtendedDataAuctionSearch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TExtendedDataAuctionSearch(const TExtendedDataAuctionSearch& from);
  TExtendedDataAuctionSearch(TExtendedDataAuctionSearch&& from) noexcept
    : TExtendedDataAuctionSearch() {
    *this = ::std::move(from);
  }

  inline TExtendedDataAuctionSearch& operator=(const TExtendedDataAuctionSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TExtendedDataAuctionSearch& operator=(TExtendedDataAuctionSearch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TExtendedDataAuctionSearch& default_instance() {
    return *internal_default_instance();
  }
  static inline const TExtendedDataAuctionSearch* internal_default_instance() {
    return reinterpret_cast<const TExtendedDataAuctionSearch*>(
               &_TExtendedDataAuctionSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TExtendedDataAuctionSearch& a, TExtendedDataAuctionSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(TExtendedDataAuctionSearch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TExtendedDataAuctionSearch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TExtendedDataAuctionSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TExtendedDataAuctionSearch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TExtendedDataAuctionSearch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TExtendedDataAuctionSearch& from) {
    TExtendedDataAuctionSearch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TExtendedDataAuctionSearch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TExtendedDataAuctionSearch";
  }
  protected:
  explicit TExtendedDataAuctionSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicDataFieldNumber = 1,
    kSearchTypeFieldNumber = 2,
    kLevelMinFieldNumber = 3,
    kPriceMinFieldNumber = 5,
    kPriceMaxFieldNumber = 6,
    kLevelMaxFieldNumber = 4,
    kIsOnlyAuctionItemFieldNumber = 7,
    kIsOnlySelfItemFieldNumber = 8,
    kIsSinglePriceOrderFieldNumber = 9,
    kSortOrder1ReversedFieldNumber = 11,
    kSortOrder1FieldNumber = 10,
    kSortOrder2FieldNumber = 12,
    kSortOrder3FieldNumber = 14,
    kSortOrder2ReversedFieldNumber = 13,
    kSortOrder3ReversedFieldNumber = 15,
  };
  // .network.TDataAuctionSearch basic_data = 1;
  bool has_basic_data() const;
  private:
  bool _internal_has_basic_data() const;
  public:
  void clear_basic_data();
  const ::network::TDataAuctionSearch& basic_data() const;
  PROTOBUF_NODISCARD ::network::TDataAuctionSearch* release_basic_data();
  ::network::TDataAuctionSearch* mutable_basic_data();
  void set_allocated_basic_data(::network::TDataAuctionSearch* basic_data);
  private:
  const ::network::TDataAuctionSearch& _internal_basic_data() const;
  ::network::TDataAuctionSearch* _internal_mutable_basic_data();
  public:
  void unsafe_arena_set_allocated_basic_data(
      ::network::TDataAuctionSearch* basic_data);
  ::network::TDataAuctionSearch* unsafe_arena_release_basic_data();

  // uint32 search_type = 2;
  void clear_search_type();
  uint32_t search_type() const;
  void set_search_type(uint32_t value);
  private:
  uint32_t _internal_search_type() const;
  void _internal_set_search_type(uint32_t value);
  public:

  // uint32 level_min = 3;
  void clear_level_min();
  uint32_t level_min() const;
  void set_level_min(uint32_t value);
  private:
  uint32_t _internal_level_min() const;
  void _internal_set_level_min(uint32_t value);
  public:

  // uint64 price_min = 5;
  void clear_price_min();
  uint64_t price_min() const;
  void set_price_min(uint64_t value);
  private:
  uint64_t _internal_price_min() const;
  void _internal_set_price_min(uint64_t value);
  public:

  // uint64 price_max = 6;
  void clear_price_max();
  uint64_t price_max() const;
  void set_price_max(uint64_t value);
  private:
  uint64_t _internal_price_max() const;
  void _internal_set_price_max(uint64_t value);
  public:

  // uint32 level_max = 4;
  void clear_level_max();
  uint32_t level_max() const;
  void set_level_max(uint32_t value);
  private:
  uint32_t _internal_level_max() const;
  void _internal_set_level_max(uint32_t value);
  public:

  // bool is_only_auction_item = 7;
  void clear_is_only_auction_item();
  bool is_only_auction_item() const;
  void set_is_only_auction_item(bool value);
  private:
  bool _internal_is_only_auction_item() const;
  void _internal_set_is_only_auction_item(bool value);
  public:

  // bool is_only_self_item = 8;
  void clear_is_only_self_item();
  bool is_only_self_item() const;
  void set_is_only_self_item(bool value);
  private:
  bool _internal_is_only_self_item() const;
  void _internal_set_is_only_self_item(bool value);
  public:

  // bool is_single_price_order = 9;
  void clear_is_single_price_order();
  bool is_single_price_order() const;
  void set_is_single_price_order(bool value);
  private:
  bool _internal_is_single_price_order() const;
  void _internal_set_is_single_price_order(bool value);
  public:

  // bool sort_order1_reversed = 11;
  void clear_sort_order1_reversed();
  bool sort_order1_reversed() const;
  void set_sort_order1_reversed(bool value);
  private:
  bool _internal_sort_order1_reversed() const;
  void _internal_set_sort_order1_reversed(bool value);
  public:

  // uint32 sort_order1 = 10;
  void clear_sort_order1();
  uint32_t sort_order1() const;
  void set_sort_order1(uint32_t value);
  private:
  uint32_t _internal_sort_order1() const;
  void _internal_set_sort_order1(uint32_t value);
  public:

  // uint32 sort_order2 = 12;
  void clear_sort_order2();
  uint32_t sort_order2() const;
  void set_sort_order2(uint32_t value);
  private:
  uint32_t _internal_sort_order2() const;
  void _internal_set_sort_order2(uint32_t value);
  public:

  // uint32 sort_order3 = 14;
  void clear_sort_order3();
  uint32_t sort_order3() const;
  void set_sort_order3(uint32_t value);
  private:
  uint32_t _internal_sort_order3() const;
  void _internal_set_sort_order3(uint32_t value);
  public:

  // bool sort_order2_reversed = 13;
  void clear_sort_order2_reversed();
  bool sort_order2_reversed() const;
  void set_sort_order2_reversed(bool value);
  private:
  bool _internal_sort_order2_reversed() const;
  void _internal_set_sort_order2_reversed(bool value);
  public:

  // bool sort_order3_reversed = 15;
  void clear_sort_order3_reversed();
  bool sort_order3_reversed() const;
  void set_sort_order3_reversed(bool value);
  private:
  bool _internal_sort_order3_reversed() const;
  void _internal_set_sort_order3_reversed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.TExtendedDataAuctionSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TDataAuctionSearch* basic_data_;
    uint32_t search_type_;
    uint32_t level_min_;
    uint64_t price_min_;
    uint64_t price_max_;
    uint32_t level_max_;
    bool is_only_auction_item_;
    bool is_only_self_item_;
    bool is_single_price_order_;
    bool sort_order1_reversed_;
    uint32_t sort_order1_;
    uint32_t sort_order2_;
    uint32_t sort_order3_;
    bool sort_order2_reversed_;
    bool sort_order3_reversed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TAuctionShopHistoryElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TAuctionShopHistoryElement) */ {
 public:
  inline TAuctionShopHistoryElement() : TAuctionShopHistoryElement(nullptr) {}
  ~TAuctionShopHistoryElement() override;
  explicit PROTOBUF_CONSTEXPR TAuctionShopHistoryElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAuctionShopHistoryElement(const TAuctionShopHistoryElement& from);
  TAuctionShopHistoryElement(TAuctionShopHistoryElement&& from) noexcept
    : TAuctionShopHistoryElement() {
    *this = ::std::move(from);
  }

  inline TAuctionShopHistoryElement& operator=(const TAuctionShopHistoryElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAuctionShopHistoryElement& operator=(TAuctionShopHistoryElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAuctionShopHistoryElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAuctionShopHistoryElement* internal_default_instance() {
    return reinterpret_cast<const TAuctionShopHistoryElement*>(
               &_TAuctionShopHistoryElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TAuctionShopHistoryElement& a, TAuctionShopHistoryElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TAuctionShopHistoryElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAuctionShopHistoryElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAuctionShopHistoryElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAuctionShopHistoryElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAuctionShopHistoryElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAuctionShopHistoryElement& from) {
    TAuctionShopHistoryElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAuctionShopHistoryElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TAuctionShopHistoryElement";
  }
  protected:
  explicit TAuctionShopHistoryElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyerFieldNumber = 3,
    kPriceFieldNumber = 2,
    kVnumFieldNumber = 1,
    kDateFieldNumber = 4,
  };
  // bytes buyer = 3;
  void clear_buyer();
  const std::string& buyer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer();
  PROTOBUF_NODISCARD std::string* release_buyer();
  void set_allocated_buyer(std::string* buyer);
  private:
  const std::string& _internal_buyer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer(const std::string& value);
  std::string* _internal_mutable_buyer();
  public:

  // uint64 price = 2;
  void clear_price();
  uint64_t price() const;
  void set_price(uint64_t value);
  private:
  uint64_t _internal_price() const;
  void _internal_set_price(uint64_t value);
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 date = 4;
  void clear_date();
  uint32_t date() const;
  void set_date(uint32_t value);
  private:
  uint32_t _internal_date() const;
  void _internal_set_date(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TAuctionShopHistoryElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_;
    uint64_t price_;
    uint32_t vnum_;
    uint32_t date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TSkillTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TSkillTable) */ {
 public:
  inline TSkillTable() : TSkillTable(nullptr) {}
  ~TSkillTable() override;
  explicit PROTOBUF_CONSTEXPR TSkillTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSkillTable(const TSkillTable& from);
  TSkillTable(TSkillTable&& from) noexcept
    : TSkillTable() {
    *this = ::std::move(from);
  }

  inline TSkillTable& operator=(const TSkillTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSkillTable& operator=(TSkillTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSkillTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSkillTable* internal_default_instance() {
    return reinterpret_cast<const TSkillTable*>(
               &_TSkillTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TSkillTable& a, TSkillTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TSkillTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSkillTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSkillTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSkillTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSkillTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSkillTable& from) {
    TSkillTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSkillTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TSkillTable";
  }
  protected:
  explicit TSkillTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPointOnFieldNumber = 6,
    kPointPolyFieldNumber = 7,
    kSpCostPolyFieldNumber = 8,
    kDurationPolyFieldNumber = 9,
    kDurationSpCostPolyFieldNumber = 10,
    kCooldownPolyFieldNumber = 11,
    kMasterBonusPolyFieldNumber = 12,
    kGrandMasterAddSpCostPolyFieldNumber = 13,
    kPointOn2FieldNumber = 17,
    kPointPoly2FieldNumber = 18,
    kDurationPoly2FieldNumber = 19,
    kPointOn3FieldNumber = 22,
    kPointPoly3FieldNumber = 23,
    kDurationPoly3FieldNumber = 24,
    kSplashAroundDamageAdjustPolyFieldNumber = 30,
    kVnumFieldNumber = 1,
    kTypeFieldNumber = 3,
    kMaxLevelFieldNumber = 4,
    kSplashRangeFieldNumber = 5,
    kFlagFieldNumber = 14,
    kAffectFlagFieldNumber = 15,
    kAffectFlagLegendaryFieldNumber = 16,
    kAffectFlag2FieldNumber = 20,
    kAffectFlag2LegendaryFieldNumber = 21,
    kLevelStepFieldNumber = 25,
    kLevelLimitFieldNumber = 26,
    kPreSkillVnumFieldNumber = 27,
    kPreSkillLevelFieldNumber = 28,
    kMaxHitFieldNumber = 29,
    kSkillAttrTypeFieldNumber = 31,
    kTargetRangeFieldNumber = 32,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes point_on = 6;
  void clear_point_on();
  const std::string& point_on() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_on(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_on();
  PROTOBUF_NODISCARD std::string* release_point_on();
  void set_allocated_point_on(std::string* point_on);
  private:
  const std::string& _internal_point_on() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_on(const std::string& value);
  std::string* _internal_mutable_point_on();
  public:

  // bytes point_poly = 7;
  void clear_point_poly();
  const std::string& point_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_poly();
  PROTOBUF_NODISCARD std::string* release_point_poly();
  void set_allocated_point_poly(std::string* point_poly);
  private:
  const std::string& _internal_point_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_poly(const std::string& value);
  std::string* _internal_mutable_point_poly();
  public:

  // bytes sp_cost_poly = 8;
  void clear_sp_cost_poly();
  const std::string& sp_cost_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sp_cost_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sp_cost_poly();
  PROTOBUF_NODISCARD std::string* release_sp_cost_poly();
  void set_allocated_sp_cost_poly(std::string* sp_cost_poly);
  private:
  const std::string& _internal_sp_cost_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sp_cost_poly(const std::string& value);
  std::string* _internal_mutable_sp_cost_poly();
  public:

  // bytes duration_poly = 9;
  void clear_duration_poly();
  const std::string& duration_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration_poly();
  PROTOBUF_NODISCARD std::string* release_duration_poly();
  void set_allocated_duration_poly(std::string* duration_poly);
  private:
  const std::string& _internal_duration_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration_poly(const std::string& value);
  std::string* _internal_mutable_duration_poly();
  public:

  // bytes duration_sp_cost_poly = 10;
  void clear_duration_sp_cost_poly();
  const std::string& duration_sp_cost_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration_sp_cost_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration_sp_cost_poly();
  PROTOBUF_NODISCARD std::string* release_duration_sp_cost_poly();
  void set_allocated_duration_sp_cost_poly(std::string* duration_sp_cost_poly);
  private:
  const std::string& _internal_duration_sp_cost_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration_sp_cost_poly(const std::string& value);
  std::string* _internal_mutable_duration_sp_cost_poly();
  public:

  // bytes cooldown_poly = 11;
  void clear_cooldown_poly();
  const std::string& cooldown_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cooldown_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cooldown_poly();
  PROTOBUF_NODISCARD std::string* release_cooldown_poly();
  void set_allocated_cooldown_poly(std::string* cooldown_poly);
  private:
  const std::string& _internal_cooldown_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cooldown_poly(const std::string& value);
  std::string* _internal_mutable_cooldown_poly();
  public:

  // bytes master_bonus_poly = 12;
  void clear_master_bonus_poly();
  const std::string& master_bonus_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_master_bonus_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_master_bonus_poly();
  PROTOBUF_NODISCARD std::string* release_master_bonus_poly();
  void set_allocated_master_bonus_poly(std::string* master_bonus_poly);
  private:
  const std::string& _internal_master_bonus_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_master_bonus_poly(const std::string& value);
  std::string* _internal_mutable_master_bonus_poly();
  public:

  // bytes grand_master_add_sp_cost_poly = 13;
  void clear_grand_master_add_sp_cost_poly();
  const std::string& grand_master_add_sp_cost_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grand_master_add_sp_cost_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grand_master_add_sp_cost_poly();
  PROTOBUF_NODISCARD std::string* release_grand_master_add_sp_cost_poly();
  void set_allocated_grand_master_add_sp_cost_poly(std::string* grand_master_add_sp_cost_poly);
  private:
  const std::string& _internal_grand_master_add_sp_cost_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grand_master_add_sp_cost_poly(const std::string& value);
  std::string* _internal_mutable_grand_master_add_sp_cost_poly();
  public:

  // bytes point_on2 = 17;
  void clear_point_on2();
  const std::string& point_on2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_on2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_on2();
  PROTOBUF_NODISCARD std::string* release_point_on2();
  void set_allocated_point_on2(std::string* point_on2);
  private:
  const std::string& _internal_point_on2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_on2(const std::string& value);
  std::string* _internal_mutable_point_on2();
  public:

  // bytes point_poly2 = 18;
  void clear_point_poly2();
  const std::string& point_poly2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_poly2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_poly2();
  PROTOBUF_NODISCARD std::string* release_point_poly2();
  void set_allocated_point_poly2(std::string* point_poly2);
  private:
  const std::string& _internal_point_poly2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_poly2(const std::string& value);
  std::string* _internal_mutable_point_poly2();
  public:

  // bytes duration_poly2 = 19;
  void clear_duration_poly2();
  const std::string& duration_poly2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration_poly2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration_poly2();
  PROTOBUF_NODISCARD std::string* release_duration_poly2();
  void set_allocated_duration_poly2(std::string* duration_poly2);
  private:
  const std::string& _internal_duration_poly2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration_poly2(const std::string& value);
  std::string* _internal_mutable_duration_poly2();
  public:

  // bytes point_on3 = 22;
  void clear_point_on3();
  const std::string& point_on3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_on3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_on3();
  PROTOBUF_NODISCARD std::string* release_point_on3();
  void set_allocated_point_on3(std::string* point_on3);
  private:
  const std::string& _internal_point_on3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_on3(const std::string& value);
  std::string* _internal_mutable_point_on3();
  public:

  // bytes point_poly3 = 23;
  void clear_point_poly3();
  const std::string& point_poly3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_poly3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_poly3();
  PROTOBUF_NODISCARD std::string* release_point_poly3();
  void set_allocated_point_poly3(std::string* point_poly3);
  private:
  const std::string& _internal_point_poly3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_poly3(const std::string& value);
  std::string* _internal_mutable_point_poly3();
  public:

  // bytes duration_poly3 = 24;
  void clear_duration_poly3();
  const std::string& duration_poly3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration_poly3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration_poly3();
  PROTOBUF_NODISCARD std::string* release_duration_poly3();
  void set_allocated_duration_poly3(std::string* duration_poly3);
  private:
  const std::string& _internal_duration_poly3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration_poly3(const std::string& value);
  std::string* _internal_mutable_duration_poly3();
  public:

  // bytes splash_around_damage_adjust_poly = 30;
  void clear_splash_around_damage_adjust_poly();
  const std::string& splash_around_damage_adjust_poly() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_splash_around_damage_adjust_poly(ArgT0&& arg0, ArgT... args);
  std::string* mutable_splash_around_damage_adjust_poly();
  PROTOBUF_NODISCARD std::string* release_splash_around_damage_adjust_poly();
  void set_allocated_splash_around_damage_adjust_poly(std::string* splash_around_damage_adjust_poly);
  private:
  const std::string& _internal_splash_around_damage_adjust_poly() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_splash_around_damage_adjust_poly(const std::string& value);
  std::string* _internal_mutable_splash_around_damage_adjust_poly();
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 max_level = 4;
  void clear_max_level();
  uint32_t max_level() const;
  void set_max_level(uint32_t value);
  private:
  uint32_t _internal_max_level() const;
  void _internal_set_max_level(uint32_t value);
  public:

  // uint32 splash_range = 5;
  void clear_splash_range();
  uint32_t splash_range() const;
  void set_splash_range(uint32_t value);
  private:
  uint32_t _internal_splash_range() const;
  void _internal_set_splash_range(uint32_t value);
  public:

  // uint32 flag = 14;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // uint32 affect_flag = 15;
  void clear_affect_flag();
  uint32_t affect_flag() const;
  void set_affect_flag(uint32_t value);
  private:
  uint32_t _internal_affect_flag() const;
  void _internal_set_affect_flag(uint32_t value);
  public:

  // uint32 affect_flag_legendary = 16;
  void clear_affect_flag_legendary();
  uint32_t affect_flag_legendary() const;
  void set_affect_flag_legendary(uint32_t value);
  private:
  uint32_t _internal_affect_flag_legendary() const;
  void _internal_set_affect_flag_legendary(uint32_t value);
  public:

  // uint32 affect_flag2 = 20;
  void clear_affect_flag2();
  uint32_t affect_flag2() const;
  void set_affect_flag2(uint32_t value);
  private:
  uint32_t _internal_affect_flag2() const;
  void _internal_set_affect_flag2(uint32_t value);
  public:

  // uint32 affect_flag2_legendary = 21;
  void clear_affect_flag2_legendary();
  uint32_t affect_flag2_legendary() const;
  void set_affect_flag2_legendary(uint32_t value);
  private:
  uint32_t _internal_affect_flag2_legendary() const;
  void _internal_set_affect_flag2_legendary(uint32_t value);
  public:

  // uint32 level_step = 25;
  void clear_level_step();
  uint32_t level_step() const;
  void set_level_step(uint32_t value);
  private:
  uint32_t _internal_level_step() const;
  void _internal_set_level_step(uint32_t value);
  public:

  // uint32 level_limit = 26;
  void clear_level_limit();
  uint32_t level_limit() const;
  void set_level_limit(uint32_t value);
  private:
  uint32_t _internal_level_limit() const;
  void _internal_set_level_limit(uint32_t value);
  public:

  // uint32 pre_skill_vnum = 27;
  void clear_pre_skill_vnum();
  uint32_t pre_skill_vnum() const;
  void set_pre_skill_vnum(uint32_t value);
  private:
  uint32_t _internal_pre_skill_vnum() const;
  void _internal_set_pre_skill_vnum(uint32_t value);
  public:

  // uint32 pre_skill_level = 28;
  void clear_pre_skill_level();
  uint32_t pre_skill_level() const;
  void set_pre_skill_level(uint32_t value);
  private:
  uint32_t _internal_pre_skill_level() const;
  void _internal_set_pre_skill_level(uint32_t value);
  public:

  // int32 max_hit = 29;
  void clear_max_hit();
  int32_t max_hit() const;
  void set_max_hit(int32_t value);
  private:
  int32_t _internal_max_hit() const;
  void _internal_set_max_hit(int32_t value);
  public:

  // uint32 skill_attr_type = 31;
  void clear_skill_attr_type();
  uint32_t skill_attr_type() const;
  void set_skill_attr_type(uint32_t value);
  private:
  uint32_t _internal_skill_attr_type() const;
  void _internal_set_skill_attr_type(uint32_t value);
  public:

  // uint32 target_range = 32;
  void clear_target_range();
  uint32_t target_range() const;
  void set_target_range(uint32_t value);
  private:
  uint32_t _internal_target_range() const;
  void _internal_set_target_range(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TSkillTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_on_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sp_cost_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_sp_cost_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cooldown_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_bonus_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grand_master_add_sp_cost_poly_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_on2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_poly2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_poly2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_on3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_poly3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_poly3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splash_around_damage_adjust_poly_;
    uint32_t vnum_;
    uint32_t type_;
    uint32_t max_level_;
    uint32_t splash_range_;
    uint32_t flag_;
    uint32_t affect_flag_;
    uint32_t affect_flag_legendary_;
    uint32_t affect_flag2_;
    uint32_t affect_flag2_legendary_;
    uint32_t level_step_;
    uint32_t level_limit_;
    uint32_t pre_skill_vnum_;
    uint32_t pre_skill_level_;
    int32_t max_hit_;
    uint32_t skill_attr_type_;
    uint32_t target_range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TRefineMaterial final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TRefineMaterial) */ {
 public:
  inline TRefineMaterial() : TRefineMaterial(nullptr) {}
  ~TRefineMaterial() override;
  explicit PROTOBUF_CONSTEXPR TRefineMaterial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRefineMaterial(const TRefineMaterial& from);
  TRefineMaterial(TRefineMaterial&& from) noexcept
    : TRefineMaterial() {
    *this = ::std::move(from);
  }

  inline TRefineMaterial& operator=(const TRefineMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRefineMaterial& operator=(TRefineMaterial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRefineMaterial& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRefineMaterial* internal_default_instance() {
    return reinterpret_cast<const TRefineMaterial*>(
               &_TRefineMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TRefineMaterial& a, TRefineMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(TRefineMaterial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRefineMaterial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRefineMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRefineMaterial>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRefineMaterial& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRefineMaterial& from) {
    TRefineMaterial::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRefineMaterial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TRefineMaterial";
  }
  protected:
  explicit TRefineMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TRefineMaterial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TSwitchbotTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TSwitchbotTable) */ {
 public:
  inline TSwitchbotTable() : TSwitchbotTable(nullptr) {}
  ~TSwitchbotTable() override;
  explicit PROTOBUF_CONSTEXPR TSwitchbotTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSwitchbotTable(const TSwitchbotTable& from);
  TSwitchbotTable(TSwitchbotTable&& from) noexcept
    : TSwitchbotTable() {
    *this = ::std::move(from);
  }

  inline TSwitchbotTable& operator=(const TSwitchbotTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSwitchbotTable& operator=(TSwitchbotTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSwitchbotTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSwitchbotTable* internal_default_instance() {
    return reinterpret_cast<const TSwitchbotTable*>(
               &_TSwitchbotTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TSwitchbotTable& a, TSwitchbotTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TSwitchbotTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSwitchbotTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSwitchbotTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSwitchbotTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSwitchbotTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSwitchbotTable& from) {
    TSwitchbotTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSwitchbotTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TSwitchbotTable";
  }
  protected:
  explicit TSwitchbotTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrsFieldNumber = 4,
    kPremiumAttrsFieldNumber = 5,
    kItemIdFieldNumber = 1,
    kInvCellFieldNumber = 2,
    kSwitcherUsedFieldNumber = 3,
    kUsePremiumFieldNumber = 6,
    kFinishedFieldNumber = 7,
  };
  // repeated .network.TItemAttribute attrs = 4;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  ::network::TItemAttribute* mutable_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
      mutable_attrs();
  private:
  const ::network::TItemAttribute& _internal_attrs(int index) const;
  ::network::TItemAttribute* _internal_add_attrs();
  public:
  const ::network::TItemAttribute& attrs(int index) const;
  ::network::TItemAttribute* add_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
      attrs() const;

  // repeated .network.TItemAttribute premium_attrs = 5;
  int premium_attrs_size() const;
  private:
  int _internal_premium_attrs_size() const;
  public:
  void clear_premium_attrs();
  ::network::TItemAttribute* mutable_premium_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
      mutable_premium_attrs();
  private:
  const ::network::TItemAttribute& _internal_premium_attrs(int index) const;
  ::network::TItemAttribute* _internal_add_premium_attrs();
  public:
  const ::network::TItemAttribute& premium_attrs(int index) const;
  ::network::TItemAttribute* add_premium_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
      premium_attrs() const;

  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // uint32 inv_cell = 2;
  void clear_inv_cell();
  uint32_t inv_cell() const;
  void set_inv_cell(uint32_t value);
  private:
  uint32_t _internal_inv_cell() const;
  void _internal_set_inv_cell(uint32_t value);
  public:

  // uint32 switcher_used = 3;
  void clear_switcher_used();
  uint32_t switcher_used() const;
  void set_switcher_used(uint32_t value);
  private:
  uint32_t _internal_switcher_used() const;
  void _internal_set_switcher_used(uint32_t value);
  public:

  // bool use_premium = 6;
  void clear_use_premium();
  bool use_premium() const;
  void set_use_premium(bool value);
  private:
  bool _internal_use_premium() const;
  void _internal_set_use_premium(bool value);
  public:

  // bool finished = 7;
  void clear_finished();
  bool finished() const;
  void set_finished(bool value);
  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.TSwitchbotTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute > attrs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute > premium_attrs_;
    uint32_t item_id_;
    uint32_t inv_cell_;
    uint32_t switcher_used_;
    bool use_premium_;
    bool finished_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TRefineTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TRefineTable) */ {
 public:
  inline TRefineTable() : TRefineTable(nullptr) {}
  ~TRefineTable() override;
  explicit PROTOBUF_CONSTEXPR TRefineTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRefineTable(const TRefineTable& from);
  TRefineTable(TRefineTable&& from) noexcept
    : TRefineTable() {
    *this = ::std::move(from);
  }

  inline TRefineTable& operator=(const TRefineTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRefineTable& operator=(TRefineTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRefineTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRefineTable* internal_default_instance() {
    return reinterpret_cast<const TRefineTable*>(
               &_TRefineTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TRefineTable& a, TRefineTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TRefineTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRefineTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRefineTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRefineTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRefineTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRefineTable& from) {
    TRefineTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRefineTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TRefineTable";
  }
  protected:
  explicit TRefineTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 5,
    kIdFieldNumber = 1,
    kMaterialCountFieldNumber = 2,
    kCostFieldNumber = 3,
    kProbFieldNumber = 4,
  };
  // repeated .network.TRefineMaterial materials = 5;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::network::TRefineMaterial* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
      mutable_materials();
  private:
  const ::network::TRefineMaterial& _internal_materials(int index) const;
  ::network::TRefineMaterial* _internal_add_materials();
  public:
  const ::network::TRefineMaterial& materials(int index) const;
  ::network::TRefineMaterial* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
      materials() const;

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 material_count = 2;
  void clear_material_count();
  uint32_t material_count() const;
  void set_material_count(uint32_t value);
  private:
  uint32_t _internal_material_count() const;
  void _internal_set_material_count(uint32_t value);
  public:

  // int64 cost = 3;
  void clear_cost();
  int64_t cost() const;
  void set_cost(int64_t value);
  private:
  int64_t _internal_cost() const;
  void _internal_set_cost(int64_t value);
  public:

  // uint32 prob = 4;
  void clear_prob();
  uint32_t prob() const;
  void set_prob(uint32_t value);
  private:
  uint32_t _internal_prob() const;
  void _internal_set_prob(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TRefineTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial > materials_;
    uint32_t id_;
    uint32_t material_count_;
    int64_t cost_;
    uint32_t prob_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TWikiRefineInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TWikiRefineInfo) */ {
 public:
  inline TWikiRefineInfo() : TWikiRefineInfo(nullptr) {}
  ~TWikiRefineInfo() override;
  explicit PROTOBUF_CONSTEXPR TWikiRefineInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWikiRefineInfo(const TWikiRefineInfo& from);
  TWikiRefineInfo(TWikiRefineInfo&& from) noexcept
    : TWikiRefineInfo() {
    *this = ::std::move(from);
  }

  inline TWikiRefineInfo& operator=(const TWikiRefineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWikiRefineInfo& operator=(TWikiRefineInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWikiRefineInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWikiRefineInfo* internal_default_instance() {
    return reinterpret_cast<const TWikiRefineInfo*>(
               &_TWikiRefineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TWikiRefineInfo& a, TWikiRefineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TWikiRefineInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWikiRefineInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWikiRefineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWikiRefineInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWikiRefineInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWikiRefineInfo& from) {
    TWikiRefineInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWikiRefineInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TWikiRefineInfo";
  }
  protected:
  explicit TWikiRefineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 1,
    kMatCountFieldNumber = 2,
    kPriceFieldNumber = 3,
  };
  // repeated .network.TRefineMaterial materials = 1;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::network::TRefineMaterial* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
      mutable_materials();
  private:
  const ::network::TRefineMaterial& _internal_materials(int index) const;
  ::network::TRefineMaterial* _internal_add_materials();
  public:
  const ::network::TRefineMaterial& materials(int index) const;
  ::network::TRefineMaterial* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
      materials() const;

  // uint32 mat_count = 2;
  void clear_mat_count();
  uint32_t mat_count() const;
  void set_mat_count(uint32_t value);
  private:
  uint32_t _internal_mat_count() const;
  void _internal_set_mat_count(uint32_t value);
  public:

  // int32 price = 3;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TWikiRefineInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial > materials_;
    uint32_t mat_count_;
    int32_t price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TWikiChestDropInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TWikiChestDropInfo) */ {
 public:
  inline TWikiChestDropInfo() : TWikiChestDropInfo(nullptr) {}
  ~TWikiChestDropInfo() override;
  explicit PROTOBUF_CONSTEXPR TWikiChestDropInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWikiChestDropInfo(const TWikiChestDropInfo& from);
  TWikiChestDropInfo(TWikiChestDropInfo&& from) noexcept
    : TWikiChestDropInfo() {
    *this = ::std::move(from);
  }

  inline TWikiChestDropInfo& operator=(const TWikiChestDropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWikiChestDropInfo& operator=(TWikiChestDropInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWikiChestDropInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWikiChestDropInfo* internal_default_instance() {
    return reinterpret_cast<const TWikiChestDropInfo*>(
               &_TWikiChestDropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TWikiChestDropInfo& a, TWikiChestDropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TWikiChestDropInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWikiChestDropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWikiChestDropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWikiChestDropInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWikiChestDropInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWikiChestDropInfo& from) {
    TWikiChestDropInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWikiChestDropInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TWikiChestDropInfo";
  }
  protected:
  explicit TWikiChestDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumStartFieldNumber = 1,
    kVnumEndFieldNumber = 2,
  };
  // uint32 vnum_start = 1;
  void clear_vnum_start();
  uint32_t vnum_start() const;
  void set_vnum_start(uint32_t value);
  private:
  uint32_t _internal_vnum_start() const;
  void _internal_set_vnum_start(uint32_t value);
  public:

  // uint32 vnum_end = 2;
  void clear_vnum_end();
  uint32_t vnum_end() const;
  void set_vnum_end(uint32_t value);
  private:
  uint32_t _internal_vnum_end() const;
  void _internal_set_vnum_end(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TWikiChestDropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_start_;
    uint32_t vnum_end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TWikiItemOriginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TWikiItemOriginInfo) */ {
 public:
  inline TWikiItemOriginInfo() : TWikiItemOriginInfo(nullptr) {}
  ~TWikiItemOriginInfo() override;
  explicit PROTOBUF_CONSTEXPR TWikiItemOriginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWikiItemOriginInfo(const TWikiItemOriginInfo& from);
  TWikiItemOriginInfo(TWikiItemOriginInfo&& from) noexcept
    : TWikiItemOriginInfo() {
    *this = ::std::move(from);
  }

  inline TWikiItemOriginInfo& operator=(const TWikiItemOriginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWikiItemOriginInfo& operator=(TWikiItemOriginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWikiItemOriginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWikiItemOriginInfo* internal_default_instance() {
    return reinterpret_cast<const TWikiItemOriginInfo*>(
               &_TWikiItemOriginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TWikiItemOriginInfo& a, TWikiItemOriginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TWikiItemOriginInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWikiItemOriginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWikiItemOriginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWikiItemOriginInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWikiItemOriginInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWikiItemOriginInfo& from) {
    TWikiItemOriginInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWikiItemOriginInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TWikiItemOriginInfo";
  }
  protected:
  explicit TWikiItemOriginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumFieldNumber = 1,
    kIsMobFieldNumber = 2,
  };
  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // bool is_mob = 2;
  void clear_is_mob();
  bool is_mob() const;
  void set_is_mob(bool value);
  private:
  bool _internal_is_mob() const;
  void _internal_set_is_mob(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.TWikiItemOriginInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_;
    bool is_mob_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TWikiInfoTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TWikiInfoTable) */ {
 public:
  inline TWikiInfoTable() : TWikiInfoTable(nullptr) {}
  ~TWikiInfoTable() override;
  explicit PROTOBUF_CONSTEXPR TWikiInfoTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWikiInfoTable(const TWikiInfoTable& from);
  TWikiInfoTable(TWikiInfoTable&& from) noexcept
    : TWikiInfoTable() {
    *this = ::std::move(from);
  }

  inline TWikiInfoTable& operator=(const TWikiInfoTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWikiInfoTable& operator=(TWikiInfoTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWikiInfoTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWikiInfoTable* internal_default_instance() {
    return reinterpret_cast<const TWikiInfoTable*>(
               &_TWikiInfoTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TWikiInfoTable& a, TWikiInfoTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TWikiInfoTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWikiInfoTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWikiInfoTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWikiInfoTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWikiInfoTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWikiInfoTable& from) {
    TWikiInfoTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWikiInfoTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TWikiInfoTable";
  }
  protected:
  explicit TWikiInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefineInfosFieldNumber = 1,
    kChestInfosFieldNumber = 2,
    kIsCommonFieldNumber = 3,
    kOriginVnumFieldNumber = 4,
  };
  // repeated .network.TWikiRefineInfo refine_infos = 1;
  int refine_infos_size() const;
  private:
  int _internal_refine_infos_size() const;
  public:
  void clear_refine_infos();
  ::network::TWikiRefineInfo* mutable_refine_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiRefineInfo >*
      mutable_refine_infos();
  private:
  const ::network::TWikiRefineInfo& _internal_refine_infos(int index) const;
  ::network::TWikiRefineInfo* _internal_add_refine_infos();
  public:
  const ::network::TWikiRefineInfo& refine_infos(int index) const;
  ::network::TWikiRefineInfo* add_refine_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiRefineInfo >&
      refine_infos() const;

  // repeated .network.TWikiChestDropInfo chest_infos = 2;
  int chest_infos_size() const;
  private:
  int _internal_chest_infos_size() const;
  public:
  void clear_chest_infos();
  ::network::TWikiChestDropInfo* mutable_chest_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiChestDropInfo >*
      mutable_chest_infos();
  private:
  const ::network::TWikiChestDropInfo& _internal_chest_infos(int index) const;
  ::network::TWikiChestDropInfo* _internal_add_chest_infos();
  public:
  const ::network::TWikiChestDropInfo& chest_infos(int index) const;
  ::network::TWikiChestDropInfo* add_chest_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiChestDropInfo >&
      chest_infos() const;

  // bool is_common = 3;
  void clear_is_common();
  bool is_common() const;
  void set_is_common(bool value);
  private:
  bool _internal_is_common() const;
  void _internal_set_is_common(bool value);
  public:

  // uint32 origin_vnum = 4;
  void clear_origin_vnum();
  uint32_t origin_vnum() const;
  void set_origin_vnum(uint32_t value);
  private:
  uint32_t _internal_origin_vnum() const;
  void _internal_set_origin_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TWikiInfoTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiRefineInfo > refine_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiChestDropInfo > chest_infos_;
    bool is_common_;
    uint32_t origin_vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TItemAttrTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemAttrTable) */ {
 public:
  inline TItemAttrTable() : TItemAttrTable(nullptr) {}
  ~TItemAttrTable() override;
  explicit PROTOBUF_CONSTEXPR TItemAttrTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemAttrTable(const TItemAttrTable& from);
  TItemAttrTable(TItemAttrTable&& from) noexcept
    : TItemAttrTable() {
    *this = ::std::move(from);
  }

  inline TItemAttrTable& operator=(const TItemAttrTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemAttrTable& operator=(TItemAttrTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemAttrTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemAttrTable* internal_default_instance() {
    return reinterpret_cast<const TItemAttrTable*>(
               &_TItemAttrTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TItemAttrTable& a, TItemAttrTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemAttrTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemAttrTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemAttrTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemAttrTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemAttrTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemAttrTable& from) {
    TItemAttrTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemAttrTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemAttrTable";
  }
  protected:
  explicit TItemAttrTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kMaxLevelBySetFieldNumber = 5,
    kApplyFieldNumber = 1,
    kApplyIndexFieldNumber = 2,
    kProbFieldNumber = 3,
  };
  // repeated int32 values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int32_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_values() const;
  void _internal_add_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_values();
  public:
  int32_t values(int index) const;
  void set_values(int index, int32_t value);
  void add_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_values();

  // repeated uint32 max_level_by_set = 5;
  int max_level_by_set_size() const;
  private:
  int _internal_max_level_by_set_size() const;
  public:
  void clear_max_level_by_set();
  private:
  uint32_t _internal_max_level_by_set(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_max_level_by_set() const;
  void _internal_add_max_level_by_set(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_max_level_by_set();
  public:
  uint32_t max_level_by_set(int index) const;
  void set_max_level_by_set(int index, uint32_t value);
  void add_max_level_by_set(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      max_level_by_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_max_level_by_set();

  // bytes apply = 1;
  void clear_apply();
  const std::string& apply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply();
  PROTOBUF_NODISCARD std::string* release_apply();
  void set_allocated_apply(std::string* apply);
  private:
  const std::string& _internal_apply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apply(const std::string& value);
  std::string* _internal_mutable_apply();
  public:

  // uint32 apply_index = 2;
  void clear_apply_index();
  uint32_t apply_index() const;
  void set_apply_index(uint32_t value);
  private:
  uint32_t _internal_apply_index() const;
  void _internal_set_apply_index(uint32_t value);
  public:

  // uint32 prob = 3;
  void clear_prob();
  uint32_t prob() const;
  void set_prob(uint32_t value);
  private:
  uint32_t _internal_prob() const;
  void _internal_set_prob(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemAttrTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > max_level_by_set_;
    mutable std::atomic<int> _max_level_by_set_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_;
    uint32_t apply_index_;
    uint32_t prob_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TGuildLadderInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TGuildLadderInfo) */ {
 public:
  inline TGuildLadderInfo() : TGuildLadderInfo(nullptr) {}
  ~TGuildLadderInfo() override;
  explicit PROTOBUF_CONSTEXPR TGuildLadderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGuildLadderInfo(const TGuildLadderInfo& from);
  TGuildLadderInfo(TGuildLadderInfo&& from) noexcept
    : TGuildLadderInfo() {
    *this = ::std::move(from);
  }

  inline TGuildLadderInfo& operator=(const TGuildLadderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGuildLadderInfo& operator=(TGuildLadderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGuildLadderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGuildLadderInfo* internal_default_instance() {
    return reinterpret_cast<const TGuildLadderInfo*>(
               &_TGuildLadderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TGuildLadderInfo& a, TGuildLadderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TGuildLadderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGuildLadderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TGuildLadderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TGuildLadderInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGuildLadderInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TGuildLadderInfo& from) {
    TGuildLadderInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGuildLadderInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TGuildLadderInfo";
  }
  protected:
  explicit TGuildLadderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLevelFieldNumber = 2,
    kLadderPointsFieldNumber = 3,
    kMinMemberFieldNumber = 4,
    kMaxMemberFieldNumber = 5,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 ladder_points = 3;
  void clear_ladder_points();
  uint32_t ladder_points() const;
  void set_ladder_points(uint32_t value);
  private:
  uint32_t _internal_ladder_points() const;
  void _internal_set_ladder_points(uint32_t value);
  public:

  // uint32 min_member = 4;
  void clear_min_member();
  uint32_t min_member() const;
  void set_min_member(uint32_t value);
  private:
  uint32_t _internal_min_member() const;
  void _internal_set_min_member(uint32_t value);
  public:

  // uint32 max_member = 5;
  void clear_max_member();
  uint32_t max_member() const;
  void set_max_member(uint32_t value);
  private:
  uint32_t _internal_max_member() const;
  void _internal_set_max_member(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TGuildLadderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t level_;
    uint32_t ladder_points_;
    uint32_t min_member_;
    uint32_t max_member_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TBuildingLand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TBuildingLand) */ {
 public:
  inline TBuildingLand() : TBuildingLand(nullptr) {}
  ~TBuildingLand() override;
  explicit PROTOBUF_CONSTEXPR TBuildingLand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TBuildingLand(const TBuildingLand& from);
  TBuildingLand(TBuildingLand&& from) noexcept
    : TBuildingLand() {
    *this = ::std::move(from);
  }

  inline TBuildingLand& operator=(const TBuildingLand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBuildingLand& operator=(TBuildingLand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TBuildingLand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TBuildingLand* internal_default_instance() {
    return reinterpret_cast<const TBuildingLand*>(
               &_TBuildingLand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TBuildingLand& a, TBuildingLand& b) {
    a.Swap(&b);
  }
  inline void Swap(TBuildingLand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBuildingLand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TBuildingLand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TBuildingLand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TBuildingLand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TBuildingLand& from) {
    TBuildingLand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBuildingLand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TBuildingLand";
  }
  protected:
  explicit TBuildingLand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMapIndexFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kGuildIdFieldNumber = 7,
    kGuildLevelLimitFieldNumber = 8,
    kPriceFieldNumber = 9,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 width = 5;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 6;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 guild_id = 7;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 guild_level_limit = 8;
  void clear_guild_level_limit();
  uint32_t guild_level_limit() const;
  void set_guild_level_limit(uint32_t value);
  private:
  uint32_t _internal_guild_level_limit() const;
  void _internal_set_guild_level_limit(uint32_t value);
  public:

  // int64 price = 9;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TBuildingLand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t map_index_;
    int32_t x_;
    int32_t y_;
    uint32_t width_;
    uint32_t height_;
    uint32_t guild_id_;
    uint32_t guild_level_limit_;
    int64_t price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TBuildingObjectMaterial final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TBuildingObjectMaterial) */ {
 public:
  inline TBuildingObjectMaterial() : TBuildingObjectMaterial(nullptr) {}
  ~TBuildingObjectMaterial() override;
  explicit PROTOBUF_CONSTEXPR TBuildingObjectMaterial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TBuildingObjectMaterial(const TBuildingObjectMaterial& from);
  TBuildingObjectMaterial(TBuildingObjectMaterial&& from) noexcept
    : TBuildingObjectMaterial() {
    *this = ::std::move(from);
  }

  inline TBuildingObjectMaterial& operator=(const TBuildingObjectMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBuildingObjectMaterial& operator=(TBuildingObjectMaterial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TBuildingObjectMaterial& default_instance() {
    return *internal_default_instance();
  }
  static inline const TBuildingObjectMaterial* internal_default_instance() {
    return reinterpret_cast<const TBuildingObjectMaterial*>(
               &_TBuildingObjectMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TBuildingObjectMaterial& a, TBuildingObjectMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(TBuildingObjectMaterial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBuildingObjectMaterial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TBuildingObjectMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TBuildingObjectMaterial>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TBuildingObjectMaterial& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TBuildingObjectMaterial& from) {
    TBuildingObjectMaterial::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBuildingObjectMaterial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TBuildingObjectMaterial";
  }
  protected:
  explicit TBuildingObjectMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemVnumFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 item_vnum = 1;
  void clear_item_vnum();
  uint32_t item_vnum() const;
  void set_item_vnum(uint32_t value);
  private:
  uint32_t _internal_item_vnum() const;
  void _internal_set_item_vnum(uint32_t value);
  public:

  // uint32 count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TBuildingObjectMaterial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_vnum_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TBuildingObjectProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TBuildingObjectProto) */ {
 public:
  inline TBuildingObjectProto() : TBuildingObjectProto(nullptr) {}
  ~TBuildingObjectProto() override;
  explicit PROTOBUF_CONSTEXPR TBuildingObjectProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TBuildingObjectProto(const TBuildingObjectProto& from);
  TBuildingObjectProto(TBuildingObjectProto&& from) noexcept
    : TBuildingObjectProto() {
    *this = ::std::move(from);
  }

  inline TBuildingObjectProto& operator=(const TBuildingObjectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBuildingObjectProto& operator=(TBuildingObjectProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TBuildingObjectProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TBuildingObjectProto* internal_default_instance() {
    return reinterpret_cast<const TBuildingObjectProto*>(
               &_TBuildingObjectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TBuildingObjectProto& a, TBuildingObjectProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TBuildingObjectProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBuildingObjectProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TBuildingObjectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TBuildingObjectProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TBuildingObjectProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TBuildingObjectProto& from) {
    TBuildingObjectProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBuildingObjectProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TBuildingObjectProto";
  }
  protected:
  explicit TBuildingObjectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 3,
    kRegionFieldNumber = 7,
    kPriceFieldNumber = 2,
    kVnumFieldNumber = 1,
    kUpgradeVnumFieldNumber = 4,
    kUpgradeLimitTimeFieldNumber = 5,
    kLifeFieldNumber = 6,
    kNpcVnumFieldNumber = 8,
    kNpcXFieldNumber = 9,
    kNpcYFieldNumber = 10,
    kGroupVnumFieldNumber = 11,
    kDependOnGroupVnumFieldNumber = 12,
  };
  // repeated .network.TBuildingObjectMaterial materials = 3;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::network::TBuildingObjectMaterial* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectMaterial >*
      mutable_materials();
  private:
  const ::network::TBuildingObjectMaterial& _internal_materials(int index) const;
  ::network::TBuildingObjectMaterial* _internal_add_materials();
  public:
  const ::network::TBuildingObjectMaterial& materials(int index) const;
  ::network::TBuildingObjectMaterial* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectMaterial >&
      materials() const;

  // repeated int32 region = 7;
  int region_size() const;
  private:
  int _internal_region_size() const;
  public:
  void clear_region();
  private:
  int32_t _internal_region(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_region() const;
  void _internal_add_region(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_region();
  public:
  int32_t region(int index) const;
  void set_region(int index, int32_t value);
  void add_region(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      region() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_region();

  // int64 price = 2;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 upgrade_vnum = 4;
  void clear_upgrade_vnum();
  uint32_t upgrade_vnum() const;
  void set_upgrade_vnum(uint32_t value);
  private:
  uint32_t _internal_upgrade_vnum() const;
  void _internal_set_upgrade_vnum(uint32_t value);
  public:

  // uint32 upgrade_limit_time = 5;
  void clear_upgrade_limit_time();
  uint32_t upgrade_limit_time() const;
  void set_upgrade_limit_time(uint32_t value);
  private:
  uint32_t _internal_upgrade_limit_time() const;
  void _internal_set_upgrade_limit_time(uint32_t value);
  public:

  // int32 life = 6;
  void clear_life();
  int32_t life() const;
  void set_life(int32_t value);
  private:
  int32_t _internal_life() const;
  void _internal_set_life(int32_t value);
  public:

  // uint32 npc_vnum = 8;
  void clear_npc_vnum();
  uint32_t npc_vnum() const;
  void set_npc_vnum(uint32_t value);
  private:
  uint32_t _internal_npc_vnum() const;
  void _internal_set_npc_vnum(uint32_t value);
  public:

  // int32 npc_x = 9;
  void clear_npc_x();
  int32_t npc_x() const;
  void set_npc_x(int32_t value);
  private:
  int32_t _internal_npc_x() const;
  void _internal_set_npc_x(int32_t value);
  public:

  // int32 npc_y = 10;
  void clear_npc_y();
  int32_t npc_y() const;
  void set_npc_y(int32_t value);
  private:
  int32_t _internal_npc_y() const;
  void _internal_set_npc_y(int32_t value);
  public:

  // uint32 group_vnum = 11;
  void clear_group_vnum();
  uint32_t group_vnum() const;
  void set_group_vnum(uint32_t value);
  private:
  uint32_t _internal_group_vnum() const;
  void _internal_set_group_vnum(uint32_t value);
  public:

  // uint32 depend_on_group_vnum = 12;
  void clear_depend_on_group_vnum();
  uint32_t depend_on_group_vnum() const;
  void set_depend_on_group_vnum(uint32_t value);
  private:
  uint32_t _internal_depend_on_group_vnum() const;
  void _internal_set_depend_on_group_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TBuildingObjectProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectMaterial > materials_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > region_;
    mutable std::atomic<int> _region_cached_byte_size_;
    int64_t price_;
    uint32_t vnum_;
    uint32_t upgrade_vnum_;
    uint32_t upgrade_limit_time_;
    int32_t life_;
    uint32_t npc_vnum_;
    int32_t npc_x_;
    int32_t npc_y_;
    uint32_t group_vnum_;
    uint32_t depend_on_group_vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TBuildingObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TBuildingObject) */ {
 public:
  inline TBuildingObject() : TBuildingObject(nullptr) {}
  ~TBuildingObject() override;
  explicit PROTOBUF_CONSTEXPR TBuildingObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TBuildingObject(const TBuildingObject& from);
  TBuildingObject(TBuildingObject&& from) noexcept
    : TBuildingObject() {
    *this = ::std::move(from);
  }

  inline TBuildingObject& operator=(const TBuildingObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBuildingObject& operator=(TBuildingObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TBuildingObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const TBuildingObject* internal_default_instance() {
    return reinterpret_cast<const TBuildingObject*>(
               &_TBuildingObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TBuildingObject& a, TBuildingObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TBuildingObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBuildingObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TBuildingObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TBuildingObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TBuildingObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TBuildingObject& from) {
    TBuildingObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBuildingObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TBuildingObject";
  }
  protected:
  explicit TBuildingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLandIdFieldNumber = 2,
    kVnumFieldNumber = 3,
    kMapIndexFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kXRotFieldNumber = 7,
    kYRotFieldNumber = 8,
    kZRotFieldNumber = 9,
    kLifeFieldNumber = 10,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 land_id = 2;
  void clear_land_id();
  uint32_t land_id() const;
  void set_land_id(uint32_t value);
  private:
  uint32_t _internal_land_id() const;
  void _internal_set_land_id(uint32_t value);
  public:

  // uint32 vnum = 3;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 map_index = 4;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // int32 x = 5;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 6;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float x_rot = 7;
  void clear_x_rot();
  float x_rot() const;
  void set_x_rot(float value);
  private:
  float _internal_x_rot() const;
  void _internal_set_x_rot(float value);
  public:

  // float y_rot = 8;
  void clear_y_rot();
  float y_rot() const;
  void set_y_rot(float value);
  private:
  float _internal_y_rot() const;
  void _internal_set_y_rot(float value);
  public:

  // float z_rot = 9;
  void clear_z_rot();
  float z_rot() const;
  void set_z_rot(float value);
  private:
  float _internal_z_rot() const;
  void _internal_set_z_rot(float value);
  public:

  // int32 life = 10;
  void clear_life();
  int32_t life() const;
  void set_life(int32_t value);
  private:
  int32_t _internal_life() const;
  void _internal_set_life(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TBuildingObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t land_id_;
    uint32_t vnum_;
    uint32_t map_index_;
    int32_t x_;
    int32_t y_;
    float x_rot_;
    float y_rot_;
    float z_rot_;
    int32_t life_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TGuildSafeboxInitial final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TGuildSafeboxInitial) */ {
 public:
  inline TGuildSafeboxInitial() : TGuildSafeboxInitial(nullptr) {}
  ~TGuildSafeboxInitial() override;
  explicit PROTOBUF_CONSTEXPR TGuildSafeboxInitial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGuildSafeboxInitial(const TGuildSafeboxInitial& from);
  TGuildSafeboxInitial(TGuildSafeboxInitial&& from) noexcept
    : TGuildSafeboxInitial() {
    *this = ::std::move(from);
  }

  inline TGuildSafeboxInitial& operator=(const TGuildSafeboxInitial& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGuildSafeboxInitial& operator=(TGuildSafeboxInitial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGuildSafeboxInitial& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGuildSafeboxInitial* internal_default_instance() {
    return reinterpret_cast<const TGuildSafeboxInitial*>(
               &_TGuildSafeboxInitial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TGuildSafeboxInitial& a, TGuildSafeboxInitial& b) {
    a.Swap(&b);
  }
  inline void Swap(TGuildSafeboxInitial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGuildSafeboxInitial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TGuildSafeboxInitial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TGuildSafeboxInitial>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGuildSafeboxInitial& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TGuildSafeboxInitial& from) {
    TGuildSafeboxInitial::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGuildSafeboxInitial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TGuildSafeboxInitial";
  }
  protected:
  explicit TGuildSafeboxInitial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kSizeFieldNumber = 2,
    kGoldFieldNumber = 4,
  };
  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint64 gold = 4;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TGuildSafeboxInitial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint32_t guild_id_;
    uint32_t size_;
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class THorseUpgradeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.THorseUpgradeProto) */ {
 public:
  inline THorseUpgradeProto() : THorseUpgradeProto(nullptr) {}
  ~THorseUpgradeProto() override;
  explicit PROTOBUF_CONSTEXPR THorseUpgradeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  THorseUpgradeProto(const THorseUpgradeProto& from);
  THorseUpgradeProto(THorseUpgradeProto&& from) noexcept
    : THorseUpgradeProto() {
    *this = ::std::move(from);
  }

  inline THorseUpgradeProto& operator=(const THorseUpgradeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline THorseUpgradeProto& operator=(THorseUpgradeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const THorseUpgradeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const THorseUpgradeProto* internal_default_instance() {
    return reinterpret_cast<const THorseUpgradeProto*>(
               &_THorseUpgradeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(THorseUpgradeProto& a, THorseUpgradeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(THorseUpgradeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(THorseUpgradeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  THorseUpgradeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<THorseUpgradeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const THorseUpgradeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const THorseUpgradeProto& from) {
    THorseUpgradeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THorseUpgradeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.THorseUpgradeProto";
  }
  protected:
  explicit THorseUpgradeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradeTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
    kLevelLimitFieldNumber = 3,
    kRefineIdFieldNumber = 4,
  };
  // uint32 upgrade_type = 1;
  void clear_upgrade_type();
  uint32_t upgrade_type() const;
  void set_upgrade_type(uint32_t value);
  private:
  uint32_t _internal_upgrade_type() const;
  void _internal_set_upgrade_type(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 level_limit = 3;
  void clear_level_limit();
  uint32_t level_limit() const;
  void set_level_limit(uint32_t value);
  private:
  uint32_t _internal_level_limit() const;
  void _internal_set_level_limit(uint32_t value);
  public:

  // uint32 refine_id = 4;
  void clear_refine_id();
  uint32_t refine_id() const;
  void set_refine_id(uint32_t value);
  private:
  uint32_t _internal_refine_id() const;
  void _internal_set_refine_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.THorseUpgradeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t upgrade_type_;
    uint32_t level_;
    uint32_t level_limit_;
    uint32_t refine_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class THorseBonusProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.THorseBonusProto) */ {
 public:
  inline THorseBonusProto() : THorseBonusProto(nullptr) {}
  ~THorseBonusProto() override;
  explicit PROTOBUF_CONSTEXPR THorseBonusProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  THorseBonusProto(const THorseBonusProto& from);
  THorseBonusProto(THorseBonusProto&& from) noexcept
    : THorseBonusProto() {
    *this = ::std::move(from);
  }

  inline THorseBonusProto& operator=(const THorseBonusProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline THorseBonusProto& operator=(THorseBonusProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const THorseBonusProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const THorseBonusProto* internal_default_instance() {
    return reinterpret_cast<const THorseBonusProto*>(
               &_THorseBonusProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(THorseBonusProto& a, THorseBonusProto& b) {
    a.Swap(&b);
  }
  inline void Swap(THorseBonusProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(THorseBonusProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  THorseBonusProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<THorseBonusProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const THorseBonusProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const THorseBonusProto& from) {
    THorseBonusProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THorseBonusProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.THorseBonusProto";
  }
  protected:
  explicit THorseBonusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kMaxHpFieldNumber = 2,
    kMaxHpItemFieldNumber = 3,
    kArmorPctFieldNumber = 4,
    kArmorItemFieldNumber = 5,
    kMonsterPctFieldNumber = 6,
    kMonsterItemFieldNumber = 7,
    kItemCountFieldNumber = 8,
  };
  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 max_hp = 2;
  void clear_max_hp();
  uint32_t max_hp() const;
  void set_max_hp(uint32_t value);
  private:
  uint32_t _internal_max_hp() const;
  void _internal_set_max_hp(uint32_t value);
  public:

  // uint32 max_hp_item = 3;
  void clear_max_hp_item();
  uint32_t max_hp_item() const;
  void set_max_hp_item(uint32_t value);
  private:
  uint32_t _internal_max_hp_item() const;
  void _internal_set_max_hp_item(uint32_t value);
  public:

  // uint32 armor_pct = 4;
  void clear_armor_pct();
  uint32_t armor_pct() const;
  void set_armor_pct(uint32_t value);
  private:
  uint32_t _internal_armor_pct() const;
  void _internal_set_armor_pct(uint32_t value);
  public:

  // uint32 armor_item = 5;
  void clear_armor_item();
  uint32_t armor_item() const;
  void set_armor_item(uint32_t value);
  private:
  uint32_t _internal_armor_item() const;
  void _internal_set_armor_item(uint32_t value);
  public:

  // uint32 monster_pct = 6;
  void clear_monster_pct();
  uint32_t monster_pct() const;
  void set_monster_pct(uint32_t value);
  private:
  uint32_t _internal_monster_pct() const;
  void _internal_set_monster_pct(uint32_t value);
  public:

  // uint32 monster_item = 7;
  void clear_monster_item();
  uint32_t monster_item() const;
  void set_monster_item(uint32_t value);
  private:
  uint32_t _internal_monster_item() const;
  void _internal_set_monster_item(uint32_t value);
  public:

  // uint32 item_count = 8;
  void clear_item_count();
  uint32_t item_count() const;
  void set_item_count(uint32_t value);
  private:
  uint32_t _internal_item_count() const;
  void _internal_set_item_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.THorseBonusProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t level_;
    uint32_t max_hp_;
    uint32_t max_hp_item_;
    uint32_t armor_pct_;
    uint32_t armor_item_;
    uint32_t monster_pct_;
    uint32_t monster_item_;
    uint32_t item_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TGayaShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TGayaShopData) */ {
 public:
  inline TGayaShopData() : TGayaShopData(nullptr) {}
  ~TGayaShopData() override;
  explicit PROTOBUF_CONSTEXPR TGayaShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGayaShopData(const TGayaShopData& from);
  TGayaShopData(TGayaShopData&& from) noexcept
    : TGayaShopData() {
    *this = ::std::move(from);
  }

  inline TGayaShopData& operator=(const TGayaShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGayaShopData& operator=(TGayaShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGayaShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGayaShopData* internal_default_instance() {
    return reinterpret_cast<const TGayaShopData*>(
               &_TGayaShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TGayaShopData& a, TGayaShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(TGayaShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGayaShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TGayaShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TGayaShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGayaShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TGayaShopData& from) {
    TGayaShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGayaShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TGayaShopData";
  }
  protected:
  explicit TGayaShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kVnumFieldNumber = 2,
    kCountFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // uint32 pos = 1;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 price = 4;
  void clear_price();
  uint32_t price() const;
  void set_price(uint32_t value);
  private:
  uint32_t _internal_price() const;
  void _internal_set_price(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TGayaShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pos_;
    uint32_t vnum_;
    uint32_t count_;
    uint32_t price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TAttrtreeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TAttrtreeProto) */ {
 public:
  inline TAttrtreeProto() : TAttrtreeProto(nullptr) {}
  ~TAttrtreeProto() override;
  explicit PROTOBUF_CONSTEXPR TAttrtreeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAttrtreeProto(const TAttrtreeProto& from);
  TAttrtreeProto(TAttrtreeProto&& from) noexcept
    : TAttrtreeProto() {
    *this = ::std::move(from);
  }

  inline TAttrtreeProto& operator=(const TAttrtreeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAttrtreeProto& operator=(TAttrtreeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAttrtreeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAttrtreeProto* internal_default_instance() {
    return reinterpret_cast<const TAttrtreeProto*>(
               &_TAttrtreeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TAttrtreeProto& a, TAttrtreeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TAttrtreeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAttrtreeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAttrtreeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAttrtreeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAttrtreeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAttrtreeProto& from) {
    TAttrtreeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAttrtreeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TAttrtreeProto";
  }
  protected:
  explicit TAttrtreeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefineLevelFieldNumber = 5,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kApplyTypeFieldNumber = 3,
    kMaxApplyValueFieldNumber = 4,
  };
  // repeated uint32 refine_level = 5;
  int refine_level_size() const;
  private:
  int _internal_refine_level_size() const;
  public:
  void clear_refine_level();
  private:
  uint32_t _internal_refine_level(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_refine_level() const;
  void _internal_add_refine_level(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_refine_level();
  public:
  uint32_t refine_level(int index) const;
  void set_refine_level(int index, uint32_t value);
  void add_refine_level(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      refine_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_refine_level();

  // uint32 row = 1;
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // uint32 col = 2;
  void clear_col();
  uint32_t col() const;
  void set_col(uint32_t value);
  private:
  uint32_t _internal_col() const;
  void _internal_set_col(uint32_t value);
  public:

  // uint32 apply_type = 3;
  void clear_apply_type();
  uint32_t apply_type() const;
  void set_apply_type(uint32_t value);
  private:
  uint32_t _internal_apply_type() const;
  void _internal_set_apply_type(uint32_t value);
  public:

  // int32 max_apply_value = 4;
  void clear_max_apply_value();
  int32_t max_apply_value() const;
  void set_max_apply_value(int32_t value);
  private:
  int32_t _internal_max_apply_value() const;
  void _internal_set_max_apply_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TAttrtreeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > refine_level_;
    mutable std::atomic<int> _refine_level_cached_byte_size_;
    uint32_t row_;
    uint32_t col_;
    uint32_t apply_type_;
    int32_t max_apply_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TRuneProtoTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TRuneProtoTable) */ {
 public:
  inline TRuneProtoTable() : TRuneProtoTable(nullptr) {}
  ~TRuneProtoTable() override;
  explicit PROTOBUF_CONSTEXPR TRuneProtoTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRuneProtoTable(const TRuneProtoTable& from);
  TRuneProtoTable(TRuneProtoTable&& from) noexcept
    : TRuneProtoTable() {
    *this = ::std::move(from);
  }

  inline TRuneProtoTable& operator=(const TRuneProtoTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRuneProtoTable& operator=(TRuneProtoTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRuneProtoTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRuneProtoTable* internal_default_instance() {
    return reinterpret_cast<const TRuneProtoTable*>(
               &_TRuneProtoTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TRuneProtoTable& a, TRuneProtoTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TRuneProtoTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRuneProtoTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRuneProtoTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRuneProtoTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRuneProtoTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRuneProtoTable& from) {
    TRuneProtoTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRuneProtoTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TRuneProtoTable";
  }
  protected:
  explicit TRuneProtoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kApplyEvalFieldNumber = 6,
    kVnumFieldNumber = 1,
    kGroupFieldNumber = 3,
    kSubGroupFieldNumber = 4,
    kApplyTypeFieldNumber = 5,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes apply_eval = 6;
  void clear_apply_eval();
  const std::string& apply_eval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply_eval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply_eval();
  PROTOBUF_NODISCARD std::string* release_apply_eval();
  void set_allocated_apply_eval(std::string* apply_eval);
  private:
  const std::string& _internal_apply_eval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apply_eval(const std::string& value);
  std::string* _internal_mutable_apply_eval();
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 group = 3;
  void clear_group();
  uint32_t group() const;
  void set_group(uint32_t value);
  private:
  uint32_t _internal_group() const;
  void _internal_set_group(uint32_t value);
  public:

  // uint32 sub_group = 4;
  void clear_sub_group();
  uint32_t sub_group() const;
  void set_sub_group(uint32_t value);
  private:
  uint32_t _internal_sub_group() const;
  void _internal_set_sub_group(uint32_t value);
  public:

  // uint32 apply_type = 5;
  void clear_apply_type();
  uint32_t apply_type() const;
  void set_apply_type(uint32_t value);
  private:
  uint32_t _internal_apply_type() const;
  void _internal_set_apply_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TRuneProtoTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_eval_;
    uint32_t vnum_;
    uint32_t group_;
    uint32_t sub_group_;
    uint32_t apply_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TRunePointProtoTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TRunePointProtoTable) */ {
 public:
  inline TRunePointProtoTable() : TRunePointProtoTable(nullptr) {}
  ~TRunePointProtoTable() override;
  explicit PROTOBUF_CONSTEXPR TRunePointProtoTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRunePointProtoTable(const TRunePointProtoTable& from);
  TRunePointProtoTable(TRunePointProtoTable&& from) noexcept
    : TRunePointProtoTable() {
    *this = ::std::move(from);
  }

  inline TRunePointProtoTable& operator=(const TRunePointProtoTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRunePointProtoTable& operator=(TRunePointProtoTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRunePointProtoTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRunePointProtoTable* internal_default_instance() {
    return reinterpret_cast<const TRunePointProtoTable*>(
               &_TRunePointProtoTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TRunePointProtoTable& a, TRunePointProtoTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TRunePointProtoTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRunePointProtoTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRunePointProtoTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRunePointProtoTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRunePointProtoTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRunePointProtoTable& from) {
    TRunePointProtoTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRunePointProtoTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TRunePointProtoTable";
  }
  protected:
  explicit TRunePointProtoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kRefineProtoFieldNumber = 2,
  };
  // uint32 point = 1;
  void clear_point();
  uint32_t point() const;
  void set_point(uint32_t value);
  private:
  uint32_t _internal_point() const;
  void _internal_set_point(uint32_t value);
  public:

  // uint32 refine_proto = 2;
  void clear_refine_proto();
  uint32_t refine_proto() const;
  void set_refine_proto(uint32_t value);
  private:
  uint32_t _internal_refine_proto() const;
  void _internal_set_refine_proto(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TRunePointProtoTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t point_;
    uint32_t refine_proto_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TXmasRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TXmasRewards) */ {
 public:
  inline TXmasRewards() : TXmasRewards(nullptr) {}
  ~TXmasRewards() override;
  explicit PROTOBUF_CONSTEXPR TXmasRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TXmasRewards(const TXmasRewards& from);
  TXmasRewards(TXmasRewards&& from) noexcept
    : TXmasRewards() {
    *this = ::std::move(from);
  }

  inline TXmasRewards& operator=(const TXmasRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXmasRewards& operator=(TXmasRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TXmasRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const TXmasRewards* internal_default_instance() {
    return reinterpret_cast<const TXmasRewards*>(
               &_TXmasRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TXmasRewards& a, TXmasRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(TXmasRewards* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TXmasRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TXmasRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TXmasRewards>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TXmasRewards& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TXmasRewards& from) {
    TXmasRewards::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXmasRewards* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TXmasRewards";
  }
  protected:
  explicit TXmasRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kVnumFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // uint32 day = 1;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TXmasRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t day_;
    uint32_t vnum_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TSoulProtoTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TSoulProtoTable) */ {
 public:
  inline TSoulProtoTable() : TSoulProtoTable(nullptr) {}
  ~TSoulProtoTable() override;
  explicit PROTOBUF_CONSTEXPR TSoulProtoTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSoulProtoTable(const TSoulProtoTable& from);
  TSoulProtoTable(TSoulProtoTable&& from) noexcept
    : TSoulProtoTable() {
    *this = ::std::move(from);
  }

  inline TSoulProtoTable& operator=(const TSoulProtoTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSoulProtoTable& operator=(TSoulProtoTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSoulProtoTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSoulProtoTable* internal_default_instance() {
    return reinterpret_cast<const TSoulProtoTable*>(
               &_TSoulProtoTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TSoulProtoTable& a, TSoulProtoTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TSoulProtoTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSoulProtoTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSoulProtoTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSoulProtoTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSoulProtoTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSoulProtoTable& from) {
    TSoulProtoTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSoulProtoTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TSoulProtoTable";
  }
  protected:
  explicit TSoulProtoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyValuesFieldNumber = 4,
    kVnumFieldNumber = 1,
    kSoulTypeFieldNumber = 2,
    kApplyTypeFieldNumber = 3,
  };
  // repeated int32 apply_values = 4;
  int apply_values_size() const;
  private:
  int _internal_apply_values_size() const;
  public:
  void clear_apply_values();
  private:
  int32_t _internal_apply_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_apply_values() const;
  void _internal_add_apply_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_apply_values();
  public:
  int32_t apply_values(int index) const;
  void set_apply_values(int index, int32_t value);
  void add_apply_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      apply_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_apply_values();

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 soul_type = 2;
  void clear_soul_type();
  uint32_t soul_type() const;
  void set_soul_type(uint32_t value);
  private:
  uint32_t _internal_soul_type() const;
  void _internal_set_soul_type(uint32_t value);
  public:

  // uint32 apply_type = 3;
  void clear_apply_type();
  uint32_t apply_type() const;
  void set_apply_type(uint32_t value);
  private:
  uint32_t _internal_apply_type() const;
  void _internal_set_apply_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TSoulProtoTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > apply_values_;
    mutable std::atomic<int> _apply_values_cached_byte_size_;
    uint32_t vnum_;
    uint32_t soul_type_;
    uint32_t apply_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TItemIDRangeTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemIDRangeTable) */ {
 public:
  inline TItemIDRangeTable() : TItemIDRangeTable(nullptr) {}
  ~TItemIDRangeTable() override;
  explicit PROTOBUF_CONSTEXPR TItemIDRangeTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemIDRangeTable(const TItemIDRangeTable& from);
  TItemIDRangeTable(TItemIDRangeTable&& from) noexcept
    : TItemIDRangeTable() {
    *this = ::std::move(from);
  }

  inline TItemIDRangeTable& operator=(const TItemIDRangeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemIDRangeTable& operator=(TItemIDRangeTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemIDRangeTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemIDRangeTable* internal_default_instance() {
    return reinterpret_cast<const TItemIDRangeTable*>(
               &_TItemIDRangeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TItemIDRangeTable& a, TItemIDRangeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemIDRangeTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemIDRangeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemIDRangeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemIDRangeTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemIDRangeTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemIDRangeTable& from) {
    TItemIDRangeTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemIDRangeTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemIDRangeTable";
  }
  protected:
  explicit TItemIDRangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinIdFieldNumber = 1,
    kMaxIdFieldNumber = 2,
    kUsableItemIdMinFieldNumber = 3,
  };
  // uint32 min_id = 1;
  void clear_min_id();
  uint32_t min_id() const;
  void set_min_id(uint32_t value);
  private:
  uint32_t _internal_min_id() const;
  void _internal_set_min_id(uint32_t value);
  public:

  // uint32 max_id = 2;
  void clear_max_id();
  uint32_t max_id() const;
  void set_max_id(uint32_t value);
  private:
  uint32_t _internal_max_id() const;
  void _internal_set_max_id(uint32_t value);
  public:

  // uint32 usable_item_id_min = 3;
  void clear_usable_item_id_min();
  uint32_t usable_item_id_min() const;
  void set_usable_item_id_min(uint32_t value);
  private:
  uint32_t _internal_usable_item_id_min() const;
  void _internal_set_usable_item_id_min(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemIDRangeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t min_id_;
    uint32_t max_id_;
    uint32_t usable_item_id_min_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TBattlepassData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TBattlepassData) */ {
 public:
  inline TBattlepassData() : TBattlepassData(nullptr) {}
  ~TBattlepassData() override;
  explicit PROTOBUF_CONSTEXPR TBattlepassData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TBattlepassData(const TBattlepassData& from);
  TBattlepassData(TBattlepassData&& from) noexcept
    : TBattlepassData() {
    *this = ::std::move(from);
  }

  inline TBattlepassData& operator=(const TBattlepassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBattlepassData& operator=(TBattlepassData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TBattlepassData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TBattlepassData* internal_default_instance() {
    return reinterpret_cast<const TBattlepassData*>(
               &_TBattlepassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TBattlepassData& a, TBattlepassData& b) {
    a.Swap(&b);
  }
  inline void Swap(TBattlepassData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBattlepassData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TBattlepassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TBattlepassData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TBattlepassData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TBattlepassData& from) {
    TBattlepassData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBattlepassData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TBattlepassData";
  }
  protected:
  explicit TBattlepassData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTaskFieldNumber = 3,
    kProgressFieldNumber = 1,
    kRewardVnumFieldNumber = 4,
    kRewardCountFieldNumber = 5,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes task = 3;
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // int32 progress = 1;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // uint32 reward_vnum = 4;
  void clear_reward_vnum();
  uint32_t reward_vnum() const;
  void set_reward_vnum(uint32_t value);
  private:
  uint32_t _internal_reward_vnum() const;
  void _internal_set_reward_vnum(uint32_t value);
  public:

  // uint32 reward_count = 5;
  void clear_reward_count();
  uint32_t reward_count() const;
  void set_reward_count(uint32_t value);
  private:
  uint32_t _internal_reward_count() const;
  void _internal_set_reward_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TBattlepassData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    int32_t progress_;
    uint32_t reward_vnum_;
    uint32_t reward_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TAdminInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TAdminInfo) */ {
 public:
  inline TAdminInfo() : TAdminInfo(nullptr) {}
  ~TAdminInfo() override;
  explicit PROTOBUF_CONSTEXPR TAdminInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAdminInfo(const TAdminInfo& from);
  TAdminInfo(TAdminInfo&& from) noexcept
    : TAdminInfo() {
    *this = ::std::move(from);
  }

  inline TAdminInfo& operator=(const TAdminInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAdminInfo& operator=(TAdminInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAdminInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAdminInfo* internal_default_instance() {
    return reinterpret_cast<const TAdminInfo*>(
               &_TAdminInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TAdminInfo& a, TAdminInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TAdminInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAdminInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAdminInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAdminInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAdminInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAdminInfo& from) {
    TAdminInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAdminInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TAdminInfo";
  }
  protected:
  explicit TAdminInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kAuthorityFieldNumber = 4,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 authority = 4;
  void clear_authority();
  int32_t authority() const;
  void set_authority(int32_t value);
  private:
  int32_t _internal_authority() const;
  void _internal_set_authority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TAdminInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int32_t authority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TOfflineMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TOfflineMessage) */ {
 public:
  inline TOfflineMessage() : TOfflineMessage(nullptr) {}
  ~TOfflineMessage() override;
  explicit PROTOBUF_CONSTEXPR TOfflineMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOfflineMessage(const TOfflineMessage& from);
  TOfflineMessage(TOfflineMessage&& from) noexcept
    : TOfflineMessage() {
    *this = ::std::move(from);
  }

  inline TOfflineMessage& operator=(const TOfflineMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOfflineMessage& operator=(TOfflineMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOfflineMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOfflineMessage* internal_default_instance() {
    return reinterpret_cast<const TOfflineMessage*>(
               &_TOfflineMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TOfflineMessage& a, TOfflineMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TOfflineMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOfflineMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TOfflineMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TOfflineMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TOfflineMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TOfflineMessage& from) {
    TOfflineMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOfflineMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TOfflineMessage";
  }
  protected:
  explicit TOfflineMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kMessageFieldNumber = 2,
    kIsGmFieldNumber = 3,
  };
  // bytes sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool is_gm = 3;
  void clear_is_gm();
  bool is_gm() const;
  void set_is_gm(bool value);
  private:
  bool _internal_is_gm() const;
  void _internal_set_is_gm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.TOfflineMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool is_gm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TGuildSafeboxLogTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TGuildSafeboxLogTable) */ {
 public:
  inline TGuildSafeboxLogTable() : TGuildSafeboxLogTable(nullptr) {}
  ~TGuildSafeboxLogTable() override;
  explicit PROTOBUF_CONSTEXPR TGuildSafeboxLogTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGuildSafeboxLogTable(const TGuildSafeboxLogTable& from);
  TGuildSafeboxLogTable(TGuildSafeboxLogTable&& from) noexcept
    : TGuildSafeboxLogTable() {
    *this = ::std::move(from);
  }

  inline TGuildSafeboxLogTable& operator=(const TGuildSafeboxLogTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGuildSafeboxLogTable& operator=(TGuildSafeboxLogTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGuildSafeboxLogTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGuildSafeboxLogTable* internal_default_instance() {
    return reinterpret_cast<const TGuildSafeboxLogTable*>(
               &_TGuildSafeboxLogTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TGuildSafeboxLogTable& a, TGuildSafeboxLogTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TGuildSafeboxLogTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGuildSafeboxLogTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TGuildSafeboxLogTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TGuildSafeboxLogTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGuildSafeboxLogTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TGuildSafeboxLogTable& from) {
    TGuildSafeboxLogTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGuildSafeboxLogTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TGuildSafeboxLogTable";
  }
  protected:
  explicit TGuildSafeboxLogTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kItemFieldNumber = 4,
    kTypeFieldNumber = 1,
    kPidFieldNumber = 2,
    kGoldFieldNumber = 5,
    kTimeFieldNumber = 6,
  };
  // bytes player_name = 3;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .network.TItemData item = 4;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint64 gold = 5;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // uint32 time = 6;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TGuildSafeboxLogTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::network::TItemData* item_;
    uint32_t type_;
    uint32_t pid_;
    uint64_t gold_;
    uint32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TMapLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TMapLocation) */ {
 public:
  inline TMapLocation() : TMapLocation(nullptr) {}
  ~TMapLocation() override;
  explicit PROTOBUF_CONSTEXPR TMapLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TMapLocation(const TMapLocation& from);
  TMapLocation(TMapLocation&& from) noexcept
    : TMapLocation() {
    *this = ::std::move(from);
  }

  inline TMapLocation& operator=(const TMapLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMapLocation& operator=(TMapLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TMapLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TMapLocation* internal_default_instance() {
    return reinterpret_cast<const TMapLocation*>(
               &_TMapLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TMapLocation& a, TMapLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(TMapLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMapLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TMapLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TMapLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TMapLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TMapLocation& from) {
    TMapLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMapLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TMapLocation";
  }
  protected:
  explicit TMapLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 1,
    kHostNameFieldNumber = 2,
    kPortFieldNumber = 3,
    kChannelFieldNumber = 4,
  };
  // repeated uint32 maps = 1;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  private:
  uint32_t _internal_maps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_maps() const;
  void _internal_add_maps(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_maps();
  public:
  uint32_t maps(int index) const;
  void set_maps(int index, uint32_t value);
  void add_maps(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      maps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_maps();

  // bytes host_name = 2;
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // uint32 port = 3;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 channel = 4;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TMapLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > maps_;
    mutable std::atomic<int> _maps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
    uint32_t port_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TEquipmentChangerTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TEquipmentChangerTable) */ {
 public:
  inline TEquipmentChangerTable() : TEquipmentChangerTable(nullptr) {}
  ~TEquipmentChangerTable() override;
  explicit PROTOBUF_CONSTEXPR TEquipmentChangerTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEquipmentChangerTable(const TEquipmentChangerTable& from);
  TEquipmentChangerTable(TEquipmentChangerTable&& from) noexcept
    : TEquipmentChangerTable() {
    *this = ::std::move(from);
  }

  inline TEquipmentChangerTable& operator=(const TEquipmentChangerTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEquipmentChangerTable& operator=(TEquipmentChangerTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEquipmentChangerTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEquipmentChangerTable* internal_default_instance() {
    return reinterpret_cast<const TEquipmentChangerTable*>(
               &_TEquipmentChangerTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TEquipmentChangerTable& a, TEquipmentChangerTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TEquipmentChangerTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEquipmentChangerTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEquipmentChangerTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEquipmentChangerTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEquipmentChangerTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TEquipmentChangerTable& from) {
    TEquipmentChangerTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEquipmentChangerTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TEquipmentChangerTable";
  }
  protected:
  explicit TEquipmentChangerTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdsFieldNumber = 4,
    kPageNameFieldNumber = 3,
    kPidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kRunePageFieldNumber = 5,
  };
  // repeated uint32 item_ids = 4;
  int item_ids_size() const;
  private:
  int _internal_item_ids_size() const;
  public:
  void clear_item_ids();
  private:
  uint32_t _internal_item_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_item_ids() const;
  void _internal_add_item_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_item_ids();
  public:
  uint32_t item_ids(int index) const;
  void set_item_ids(int index, uint32_t value);
  void add_item_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      item_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_item_ids();

  // bytes page_name = 3;
  void clear_page_name();
  const std::string& page_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_name();
  PROTOBUF_NODISCARD std::string* release_page_name();
  void set_allocated_page_name(std::string* page_name);
  private:
  const std::string& _internal_page_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_name(const std::string& value);
  std::string* _internal_mutable_page_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 rune_page = 5;
  void clear_rune_page();
  uint32_t rune_page() const;
  void set_rune_page(uint32_t value);
  private:
  uint32_t _internal_rune_page() const;
  void _internal_set_rune_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TEquipmentChangerTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > item_ids_;
    mutable std::atomic<int> _item_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_name_;
    uint32_t pid_;
    uint32_t index_;
    uint32_t rune_page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TEquipmentPageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TEquipmentPageInfo) */ {
 public:
  inline TEquipmentPageInfo() : TEquipmentPageInfo(nullptr) {}
  ~TEquipmentPageInfo() override;
  explicit PROTOBUF_CONSTEXPR TEquipmentPageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEquipmentPageInfo(const TEquipmentPageInfo& from);
  TEquipmentPageInfo(TEquipmentPageInfo&& from) noexcept
    : TEquipmentPageInfo() {
    *this = ::std::move(from);
  }

  inline TEquipmentPageInfo& operator=(const TEquipmentPageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEquipmentPageInfo& operator=(TEquipmentPageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEquipmentPageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEquipmentPageInfo* internal_default_instance() {
    return reinterpret_cast<const TEquipmentPageInfo*>(
               &_TEquipmentPageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TEquipmentPageInfo& a, TEquipmentPageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TEquipmentPageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEquipmentPageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEquipmentPageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEquipmentPageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEquipmentPageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TEquipmentPageInfo& from) {
    TEquipmentPageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEquipmentPageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TEquipmentPageInfo";
  }
  protected:
  explicit TEquipmentPageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemCellsFieldNumber = 2,
    kPageNameFieldNumber = 1,
    kRunePageFieldNumber = 3,
  };
  // repeated sint32 item_cells = 2;
  int item_cells_size() const;
  private:
  int _internal_item_cells_size() const;
  public:
  void clear_item_cells();
  private:
  int32_t _internal_item_cells(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_item_cells() const;
  void _internal_add_item_cells(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_item_cells();
  public:
  int32_t item_cells(int index) const;
  void set_item_cells(int index, int32_t value);
  void add_item_cells(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      item_cells() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_item_cells();

  // bytes page_name = 1;
  void clear_page_name();
  const std::string& page_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_name();
  PROTOBUF_NODISCARD std::string* release_page_name();
  void set_allocated_page_name(std::string* page_name);
  private:
  const std::string& _internal_page_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_name(const std::string& value);
  std::string* _internal_mutable_page_name();
  public:

  // uint32 rune_page = 3;
  void clear_rune_page();
  uint32_t rune_page() const;
  void set_rune_page(uint32_t value);
  private:
  uint32_t _internal_rune_page() const;
  void _internal_set_rune_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TEquipmentPageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > item_cells_;
    mutable std::atomic<int> _item_cells_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_name_;
    uint32_t rune_page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TCombatZoneRankingPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TCombatZoneRankingPlayer) */ {
 public:
  inline TCombatZoneRankingPlayer() : TCombatZoneRankingPlayer(nullptr) {}
  ~TCombatZoneRankingPlayer() override;
  explicit PROTOBUF_CONSTEXPR TCombatZoneRankingPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCombatZoneRankingPlayer(const TCombatZoneRankingPlayer& from);
  TCombatZoneRankingPlayer(TCombatZoneRankingPlayer&& from) noexcept
    : TCombatZoneRankingPlayer() {
    *this = ::std::move(from);
  }

  inline TCombatZoneRankingPlayer& operator=(const TCombatZoneRankingPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCombatZoneRankingPlayer& operator=(TCombatZoneRankingPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCombatZoneRankingPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCombatZoneRankingPlayer* internal_default_instance() {
    return reinterpret_cast<const TCombatZoneRankingPlayer*>(
               &_TCombatZoneRankingPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TCombatZoneRankingPlayer& a, TCombatZoneRankingPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(TCombatZoneRankingPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCombatZoneRankingPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCombatZoneRankingPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCombatZoneRankingPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCombatZoneRankingPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCombatZoneRankingPlayer& from) {
    TCombatZoneRankingPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCombatZoneRankingPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TCombatZoneRankingPlayer";
  }
  protected:
  explicit TCombatZoneRankingPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmpireFieldNumber = 2,
    kPointsFieldNumber = 3,
    kRankFieldNumber = 4,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 empire = 2;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 points = 3;
  void clear_points();
  uint32_t points() const;
  void set_points(uint32_t value);
  private:
  uint32_t _internal_points() const;
  void _internal_set_points(uint32_t value);
  public:

  // uint32 rank = 4;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TCombatZoneRankingPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t empire_;
    uint32_t points_;
    uint32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TSimplePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TSimplePlayer) */ {
 public:
  inline TSimplePlayer() : TSimplePlayer(nullptr) {}
  ~TSimplePlayer() override;
  explicit PROTOBUF_CONSTEXPR TSimplePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSimplePlayer(const TSimplePlayer& from);
  TSimplePlayer(TSimplePlayer&& from) noexcept
    : TSimplePlayer() {
    *this = ::std::move(from);
  }

  inline TSimplePlayer& operator=(const TSimplePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSimplePlayer& operator=(TSimplePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSimplePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSimplePlayer* internal_default_instance() {
    return reinterpret_cast<const TSimplePlayer*>(
               &_TSimplePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TSimplePlayer& a, TSimplePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(TSimplePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSimplePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSimplePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSimplePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSimplePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSimplePlayer& from) {
    TSimplePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSimplePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TSimplePlayer";
  }
  protected:
  explicit TSimplePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGuildNameFieldNumber = 20,
    kIdFieldNumber = 1,
    kJobFieldNumber = 3,
    kLevelFieldNumber = 4,
    kPlayMinutesFieldNumber = 5,
    kStFieldNumber = 6,
    kHtFieldNumber = 7,
    kDxFieldNumber = 8,
    kIqFieldNumber = 9,
    kMainPartFieldNumber = 10,
    kHairPartFieldNumber = 11,
    kAccePartFieldNumber = 12,
    kChangeNameFieldNumber = 13,
    kXFieldNumber = 14,
    kYFieldNumber = 15,
    kAddrFieldNumber = 16,
    kPortFieldNumber = 17,
    kSkillGroupFieldNumber = 18,
    kGuildIdFieldNumber = 19,
    kHairBasePartFieldNumber = 21,
    kLastPlaytimeFieldNumber = 22,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes guild_name = 20;
  void clear_guild_name();
  const std::string& guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_name();
  PROTOBUF_NODISCARD std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 job = 3;
  void clear_job();
  uint32_t job() const;
  void set_job(uint32_t value);
  private:
  uint32_t _internal_job() const;
  void _internal_set_job(uint32_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 play_minutes = 5;
  void clear_play_minutes();
  uint32_t play_minutes() const;
  void set_play_minutes(uint32_t value);
  private:
  uint32_t _internal_play_minutes() const;
  void _internal_set_play_minutes(uint32_t value);
  public:

  // uint32 st = 6;
  void clear_st();
  uint32_t st() const;
  void set_st(uint32_t value);
  private:
  uint32_t _internal_st() const;
  void _internal_set_st(uint32_t value);
  public:

  // uint32 ht = 7;
  void clear_ht();
  uint32_t ht() const;
  void set_ht(uint32_t value);
  private:
  uint32_t _internal_ht() const;
  void _internal_set_ht(uint32_t value);
  public:

  // uint32 dx = 8;
  void clear_dx();
  uint32_t dx() const;
  void set_dx(uint32_t value);
  private:
  uint32_t _internal_dx() const;
  void _internal_set_dx(uint32_t value);
  public:

  // uint32 iq = 9;
  void clear_iq();
  uint32_t iq() const;
  void set_iq(uint32_t value);
  private:
  uint32_t _internal_iq() const;
  void _internal_set_iq(uint32_t value);
  public:

  // uint32 main_part = 10;
  void clear_main_part();
  uint32_t main_part() const;
  void set_main_part(uint32_t value);
  private:
  uint32_t _internal_main_part() const;
  void _internal_set_main_part(uint32_t value);
  public:

  // uint32 hair_part = 11;
  void clear_hair_part();
  uint32_t hair_part() const;
  void set_hair_part(uint32_t value);
  private:
  uint32_t _internal_hair_part() const;
  void _internal_set_hair_part(uint32_t value);
  public:

  // uint32 acce_part = 12;
  void clear_acce_part();
  uint32_t acce_part() const;
  void set_acce_part(uint32_t value);
  private:
  uint32_t _internal_acce_part() const;
  void _internal_set_acce_part(uint32_t value);
  public:

  // bool change_name = 13;
  void clear_change_name();
  bool change_name() const;
  void set_change_name(bool value);
  private:
  bool _internal_change_name() const;
  void _internal_set_change_name(bool value);
  public:

  // int32 x = 14;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 15;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 addr = 16;
  void clear_addr();
  int32_t addr() const;
  void set_addr(int32_t value);
  private:
  int32_t _internal_addr() const;
  void _internal_set_addr(int32_t value);
  public:

  // uint32 port = 17;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 skill_group = 18;
  void clear_skill_group();
  uint32_t skill_group() const;
  void set_skill_group(uint32_t value);
  private:
  uint32_t _internal_skill_group() const;
  void _internal_set_skill_group(uint32_t value);
  public:

  // uint32 guild_id = 19;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 hair_base_part = 21;
  void clear_hair_base_part();
  uint32_t hair_base_part() const;
  void set_hair_base_part(uint32_t value);
  private:
  uint32_t _internal_hair_base_part() const;
  void _internal_set_hair_base_part(uint32_t value);
  public:

  // uint32 last_playtime = 22;
  void clear_last_playtime();
  uint32_t last_playtime() const;
  void set_last_playtime(uint32_t value);
  private:
  uint32_t _internal_last_playtime() const;
  void _internal_set_last_playtime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TSimplePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
    uint32_t id_;
    uint32_t job_;
    uint32_t level_;
    uint32_t play_minutes_;
    uint32_t st_;
    uint32_t ht_;
    uint32_t dx_;
    uint32_t iq_;
    uint32_t main_part_;
    uint32_t hair_part_;
    uint32_t acce_part_;
    bool change_name_;
    int32_t x_;
    int32_t y_;
    int32_t addr_;
    uint32_t port_;
    uint32_t skill_group_;
    uint32_t guild_id_;
    uint32_t hair_base_part_;
    uint32_t last_playtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TAccountTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TAccountTable) */ {
 public:
  inline TAccountTable() : TAccountTable(nullptr) {}
  ~TAccountTable() override;
  explicit PROTOBUF_CONSTEXPR TAccountTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAccountTable(const TAccountTable& from);
  TAccountTable(TAccountTable&& from) noexcept
    : TAccountTable() {
    *this = ::std::move(from);
  }

  inline TAccountTable& operator=(const TAccountTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAccountTable& operator=(TAccountTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAccountTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAccountTable* internal_default_instance() {
    return reinterpret_cast<const TAccountTable*>(
               &_TAccountTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(TAccountTable& a, TAccountTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TAccountTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAccountTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAccountTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAccountTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAccountTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAccountTable& from) {
    TAccountTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAccountTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TAccountTable";
  }
  protected:
  explicit TAccountTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 8,
    kLoginFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kHwidFieldNumber = 4,
    kSocialIdFieldNumber = 5,
    kStatusFieldNumber = 6,
    kHwid2FieldNumber = 11,
    kIdFieldNumber = 1,
    kEmpireFieldNumber = 7,
    kTradeblockFieldNumber = 9,
    kHwid2BanFieldNumber = 10,
    kLanguageFieldNumber = 13,
    kCoinsFieldNumber = 12,
    kTempLoginFieldNumber = 14,
  };
  // repeated .network.TSimplePlayer players = 8;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::network::TSimplePlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >*
      mutable_players();
  private:
  const ::network::TSimplePlayer& _internal_players(int index) const;
  ::network::TSimplePlayer* _internal_add_players();
  public:
  const ::network::TSimplePlayer& players(int index) const;
  ::network::TSimplePlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >&
      players() const;

  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes passwd = 3;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // bytes hwid = 4;
  void clear_hwid();
  const std::string& hwid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hwid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hwid();
  PROTOBUF_NODISCARD std::string* release_hwid();
  void set_allocated_hwid(std::string* hwid);
  private:
  const std::string& _internal_hwid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hwid(const std::string& value);
  std::string* _internal_mutable_hwid();
  public:

  // bytes social_id = 5;
  void clear_social_id();
  const std::string& social_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_social_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_social_id();
  PROTOBUF_NODISCARD std::string* release_social_id();
  void set_allocated_social_id(std::string* social_id);
  private:
  const std::string& _internal_social_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_social_id(const std::string& value);
  std::string* _internal_mutable_social_id();
  public:

  // bytes status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes hwid2 = 11;
  void clear_hwid2();
  const std::string& hwid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hwid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hwid2();
  PROTOBUF_NODISCARD std::string* release_hwid2();
  void set_allocated_hwid2(std::string* hwid2);
  private:
  const std::string& _internal_hwid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hwid2(const std::string& value);
  std::string* _internal_mutable_hwid2();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 empire = 7;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 tradeblock = 9;
  void clear_tradeblock();
  uint32_t tradeblock() const;
  void set_tradeblock(uint32_t value);
  private:
  uint32_t _internal_tradeblock() const;
  void _internal_set_tradeblock(uint32_t value);
  public:

  // uint32 hwid2ban = 10;
  void clear_hwid2ban();
  uint32_t hwid2ban() const;
  void set_hwid2ban(uint32_t value);
  private:
  uint32_t _internal_hwid2ban() const;
  void _internal_set_hwid2ban(uint32_t value);
  public:

  // uint32 language = 13;
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // bool coins = 12;
  void clear_coins();
  bool coins() const;
  void set_coins(bool value);
  private:
  bool _internal_coins() const;
  void _internal_set_coins(bool value);
  public:

  // bool temp_login = 14;
  void clear_temp_login();
  bool temp_login() const;
  void set_temp_login(bool value);
  private:
  bool _internal_temp_login() const;
  void _internal_set_temp_login(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.TAccountTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hwid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr social_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hwid2_;
    uint32_t id_;
    uint32_t empire_;
    uint32_t tradeblock_;
    uint32_t hwid2ban_;
    uint32_t language_;
    bool coins_;
    bool temp_login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TItemPriceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemPriceInfo) */ {
 public:
  inline TItemPriceInfo() : TItemPriceInfo(nullptr) {}
  ~TItemPriceInfo() override;
  explicit PROTOBUF_CONSTEXPR TItemPriceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemPriceInfo(const TItemPriceInfo& from);
  TItemPriceInfo(TItemPriceInfo&& from) noexcept
    : TItemPriceInfo() {
    *this = ::std::move(from);
  }

  inline TItemPriceInfo& operator=(const TItemPriceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemPriceInfo& operator=(TItemPriceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemPriceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemPriceInfo* internal_default_instance() {
    return reinterpret_cast<const TItemPriceInfo*>(
               &_TItemPriceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(TItemPriceInfo& a, TItemPriceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemPriceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemPriceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemPriceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemPriceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemPriceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemPriceInfo& from) {
    TItemPriceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemPriceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemPriceInfo";
  }
  protected:
  explicit TItemPriceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kVnumFieldNumber = 1,
  };
  // int64 price = 2;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemPriceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t price_;
    uint32_t vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TChannelStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TChannelStatus) */ {
 public:
  inline TChannelStatus() : TChannelStatus(nullptr) {}
  ~TChannelStatus() override;
  explicit PROTOBUF_CONSTEXPR TChannelStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TChannelStatus(const TChannelStatus& from);
  TChannelStatus(TChannelStatus&& from) noexcept
    : TChannelStatus() {
    *this = ::std::move(from);
  }

  inline TChannelStatus& operator=(const TChannelStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TChannelStatus& operator=(TChannelStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TChannelStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TChannelStatus* internal_default_instance() {
    return reinterpret_cast<const TChannelStatus*>(
               &_TChannelStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TChannelStatus& a, TChannelStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TChannelStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TChannelStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TChannelStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TChannelStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TChannelStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TChannelStatus& from) {
    TChannelStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TChannelStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TChannelStatus";
  }
  protected:
  explicit TChannelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 status = 2;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TChannelStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class TPacketLoginOnSetup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TPacketLoginOnSetup) */ {
 public:
  inline TPacketLoginOnSetup() : TPacketLoginOnSetup(nullptr) {}
  ~TPacketLoginOnSetup() override;
  explicit PROTOBUF_CONSTEXPR TPacketLoginOnSetup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPacketLoginOnSetup(const TPacketLoginOnSetup& from);
  TPacketLoginOnSetup(TPacketLoginOnSetup&& from) noexcept
    : TPacketLoginOnSetup() {
    *this = ::std::move(from);
  }

  inline TPacketLoginOnSetup& operator=(const TPacketLoginOnSetup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPacketLoginOnSetup& operator=(TPacketLoginOnSetup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPacketLoginOnSetup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPacketLoginOnSetup* internal_default_instance() {
    return reinterpret_cast<const TPacketLoginOnSetup*>(
               &_TPacketLoginOnSetup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TPacketLoginOnSetup& a, TPacketLoginOnSetup& b) {
    a.Swap(&b);
  }
  inline void Swap(TPacketLoginOnSetup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPacketLoginOnSetup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPacketLoginOnSetup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPacketLoginOnSetup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPacketLoginOnSetup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPacketLoginOnSetup& from) {
    TPacketLoginOnSetup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPacketLoginOnSetup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TPacketLoginOnSetup";
  }
  protected:
  explicit TPacketLoginOnSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientKeysFieldNumber = 6,
    kLoginFieldNumber = 2,
    kSocialIdFieldNumber = 3,
    kHostFieldNumber = 4,
    kIdFieldNumber = 1,
    kLoginKeyFieldNumber = 5,
  };
  // repeated uint32 client_keys = 6;
  int client_keys_size() const;
  private:
  int _internal_client_keys_size() const;
  public:
  void clear_client_keys();
  private:
  uint32_t _internal_client_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_client_keys() const;
  void _internal_add_client_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_client_keys();
  public:
  uint32_t client_keys(int index) const;
  void set_client_keys(int index, uint32_t value);
  void add_client_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      client_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_client_keys();

  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes social_id = 3;
  void clear_social_id();
  const std::string& social_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_social_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_social_id();
  PROTOBUF_NODISCARD std::string* release_social_id();
  void set_allocated_social_id(std::string* social_id);
  private:
  const std::string& _internal_social_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_social_id(const std::string& value);
  std::string* _internal_mutable_social_id();
  public:

  // bytes host = 4;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 login_key = 5;
  void clear_login_key();
  uint32_t login_key() const;
  void set_login_key(uint32_t value);
  private:
  uint32_t _internal_login_key() const;
  void _internal_set_login_key(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TPacketLoginOnSetup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > client_keys_;
    mutable std::atomic<int> _client_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr social_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    uint32_t id_;
    uint32_t login_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPositionElement

// uint32 vid = 1;
inline void SyncPositionElement::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t SyncPositionElement::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t SyncPositionElement::vid() const {
  // @@protoc_insertion_point(field_get:network.SyncPositionElement.vid)
  return _internal_vid();
}
inline void SyncPositionElement::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void SyncPositionElement::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.SyncPositionElement.vid)
}

// uint32 x = 2;
inline void SyncPositionElement::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t SyncPositionElement::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t SyncPositionElement::x() const {
  // @@protoc_insertion_point(field_get:network.SyncPositionElement.x)
  return _internal_x();
}
inline void SyncPositionElement::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void SyncPositionElement::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.SyncPositionElement.x)
}

// uint32 y = 3;
inline void SyncPositionElement::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t SyncPositionElement::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t SyncPositionElement::y() const {
  // @@protoc_insertion_point(field_get:network.SyncPositionElement.y)
  return _internal_y();
}
inline void SyncPositionElement::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void SyncPositionElement::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.SyncPositionElement.y)
}

// -------------------------------------------------------------------

// TGuildMemberInfo

// uint32 pid = 1;
inline void TGuildMemberInfo::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t TGuildMemberInfo::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t TGuildMemberInfo::pid() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.pid)
  return _internal_pid();
}
inline void TGuildMemberInfo::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void TGuildMemberInfo::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.pid)
}

// uint32 grade = 2;
inline void TGuildMemberInfo::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t TGuildMemberInfo::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t TGuildMemberInfo::grade() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.grade)
  return _internal_grade();
}
inline void TGuildMemberInfo::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void TGuildMemberInfo::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.grade)
}

// bool is_general = 3;
inline void TGuildMemberInfo::clear_is_general() {
  _impl_.is_general_ = false;
}
inline bool TGuildMemberInfo::_internal_is_general() const {
  return _impl_.is_general_;
}
inline bool TGuildMemberInfo::is_general() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.is_general)
  return _internal_is_general();
}
inline void TGuildMemberInfo::_internal_set_is_general(bool value) {
  
  _impl_.is_general_ = value;
}
inline void TGuildMemberInfo::set_is_general(bool value) {
  _internal_set_is_general(value);
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.is_general)
}

// uint32 job = 4;
inline void TGuildMemberInfo::clear_job() {
  _impl_.job_ = 0u;
}
inline uint32_t TGuildMemberInfo::_internal_job() const {
  return _impl_.job_;
}
inline uint32_t TGuildMemberInfo::job() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.job)
  return _internal_job();
}
inline void TGuildMemberInfo::_internal_set_job(uint32_t value) {
  
  _impl_.job_ = value;
}
inline void TGuildMemberInfo::set_job(uint32_t value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.job)
}

// uint32 level = 5;
inline void TGuildMemberInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TGuildMemberInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TGuildMemberInfo::level() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.level)
  return _internal_level();
}
inline void TGuildMemberInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TGuildMemberInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.level)
}

// uint32 offer = 6;
inline void TGuildMemberInfo::clear_offer() {
  _impl_.offer_ = 0u;
}
inline uint32_t TGuildMemberInfo::_internal_offer() const {
  return _impl_.offer_;
}
inline uint32_t TGuildMemberInfo::offer() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.offer)
  return _internal_offer();
}
inline void TGuildMemberInfo::_internal_set_offer(uint32_t value) {
  
  _impl_.offer_ = value;
}
inline void TGuildMemberInfo::set_offer(uint32_t value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.offer)
}

// bytes name = 7;
inline void TGuildMemberInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TGuildMemberInfo::name() const {
  // @@protoc_insertion_point(field_get:network.TGuildMemberInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TGuildMemberInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TGuildMemberInfo.name)
}
inline std::string* TGuildMemberInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TGuildMemberInfo.name)
  return _s;
}
inline const std::string& TGuildMemberInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TGuildMemberInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TGuildMemberInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TGuildMemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:network.TGuildMemberInfo.name)
  return _impl_.name_.Release();
}
inline void TGuildMemberInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TGuildMemberInfo.name)
}

// -------------------------------------------------------------------

// TOnlinePlayerInfo

// uint32 pid = 1;
inline void TOnlinePlayerInfo::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t TOnlinePlayerInfo::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t TOnlinePlayerInfo::pid() const {
  // @@protoc_insertion_point(field_get:network.TOnlinePlayerInfo.pid)
  return _internal_pid();
}
inline void TOnlinePlayerInfo::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void TOnlinePlayerInfo::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.TOnlinePlayerInfo.pid)
}

// uint32 map_index = 2;
inline void TOnlinePlayerInfo::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t TOnlinePlayerInfo::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t TOnlinePlayerInfo::map_index() const {
  // @@protoc_insertion_point(field_get:network.TOnlinePlayerInfo.map_index)
  return _internal_map_index();
}
inline void TOnlinePlayerInfo::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void TOnlinePlayerInfo::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.TOnlinePlayerInfo.map_index)
}

// uint32 channel = 3;
inline void TOnlinePlayerInfo::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t TOnlinePlayerInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t TOnlinePlayerInfo::channel() const {
  // @@protoc_insertion_point(field_get:network.TOnlinePlayerInfo.channel)
  return _internal_channel();
}
inline void TOnlinePlayerInfo::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void TOnlinePlayerInfo::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.TOnlinePlayerInfo.channel)
}

// -------------------------------------------------------------------

// TTargetMonsterDropInfoTable

// uint32 level_limit = 1;
inline void TTargetMonsterDropInfoTable::clear_level_limit() {
  _impl_.level_limit_ = 0u;
}
inline uint32_t TTargetMonsterDropInfoTable::_internal_level_limit() const {
  return _impl_.level_limit_;
}
inline uint32_t TTargetMonsterDropInfoTable::level_limit() const {
  // @@protoc_insertion_point(field_get:network.TTargetMonsterDropInfoTable.level_limit)
  return _internal_level_limit();
}
inline void TTargetMonsterDropInfoTable::_internal_set_level_limit(uint32_t value) {
  
  _impl_.level_limit_ = value;
}
inline void TTargetMonsterDropInfoTable::set_level_limit(uint32_t value) {
  _internal_set_level_limit(value);
  // @@protoc_insertion_point(field_set:network.TTargetMonsterDropInfoTable.level_limit)
}

// uint32 item_vnum = 2;
inline void TTargetMonsterDropInfoTable::clear_item_vnum() {
  _impl_.item_vnum_ = 0u;
}
inline uint32_t TTargetMonsterDropInfoTable::_internal_item_vnum() const {
  return _impl_.item_vnum_;
}
inline uint32_t TTargetMonsterDropInfoTable::item_vnum() const {
  // @@protoc_insertion_point(field_get:network.TTargetMonsterDropInfoTable.item_vnum)
  return _internal_item_vnum();
}
inline void TTargetMonsterDropInfoTable::_internal_set_item_vnum(uint32_t value) {
  
  _impl_.item_vnum_ = value;
}
inline void TTargetMonsterDropInfoTable::set_item_vnum(uint32_t value) {
  _internal_set_item_vnum(value);
  // @@protoc_insertion_point(field_set:network.TTargetMonsterDropInfoTable.item_vnum)
}

// uint32 item_count = 3;
inline void TTargetMonsterDropInfoTable::clear_item_count() {
  _impl_.item_count_ = 0u;
}
inline uint32_t TTargetMonsterDropInfoTable::_internal_item_count() const {
  return _impl_.item_count_;
}
inline uint32_t TTargetMonsterDropInfoTable::item_count() const {
  // @@protoc_insertion_point(field_get:network.TTargetMonsterDropInfoTable.item_count)
  return _internal_item_count();
}
inline void TTargetMonsterDropInfoTable::_internal_set_item_count(uint32_t value) {
  
  _impl_.item_count_ = value;
}
inline void TTargetMonsterDropInfoTable::set_item_count(uint32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:network.TTargetMonsterDropInfoTable.item_count)
}

// -------------------------------------------------------------------

// TEventManagerTagTeam

// uint32 pid1 = 1;
inline void TEventManagerTagTeam::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t TEventManagerTagTeam::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t TEventManagerTagTeam::pid1() const {
  // @@protoc_insertion_point(field_get:network.TEventManagerTagTeam.pid1)
  return _internal_pid1();
}
inline void TEventManagerTagTeam::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void TEventManagerTagTeam::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.TEventManagerTagTeam.pid1)
}

// bytes name1 = 2;
inline void TEventManagerTagTeam::clear_name1() {
  _impl_.name1_.ClearToEmpty();
}
inline const std::string& TEventManagerTagTeam::name1() const {
  // @@protoc_insertion_point(field_get:network.TEventManagerTagTeam.name1)
  return _internal_name1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TEventManagerTagTeam::set_name1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TEventManagerTagTeam.name1)
}
inline std::string* TEventManagerTagTeam::mutable_name1() {
  std::string* _s = _internal_mutable_name1();
  // @@protoc_insertion_point(field_mutable:network.TEventManagerTagTeam.name1)
  return _s;
}
inline const std::string& TEventManagerTagTeam::_internal_name1() const {
  return _impl_.name1_.Get();
}
inline void TEventManagerTagTeam::_internal_set_name1(const std::string& value) {
  
  _impl_.name1_.Set(value, GetArenaForAllocation());
}
inline std::string* TEventManagerTagTeam::_internal_mutable_name1() {
  
  return _impl_.name1_.Mutable(GetArenaForAllocation());
}
inline std::string* TEventManagerTagTeam::release_name1() {
  // @@protoc_insertion_point(field_release:network.TEventManagerTagTeam.name1)
  return _impl_.name1_.Release();
}
inline void TEventManagerTagTeam::set_allocated_name1(std::string* name1) {
  if (name1 != nullptr) {
    
  } else {
    
  }
  _impl_.name1_.SetAllocated(name1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name1_.IsDefault()) {
    _impl_.name1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TEventManagerTagTeam.name1)
}

// uint32 pid2 = 3;
inline void TEventManagerTagTeam::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t TEventManagerTagTeam::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t TEventManagerTagTeam::pid2() const {
  // @@protoc_insertion_point(field_get:network.TEventManagerTagTeam.pid2)
  return _internal_pid2();
}
inline void TEventManagerTagTeam::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void TEventManagerTagTeam::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.TEventManagerTagTeam.pid2)
}

// bytes name2 = 4;
inline void TEventManagerTagTeam::clear_name2() {
  _impl_.name2_.ClearToEmpty();
}
inline const std::string& TEventManagerTagTeam::name2() const {
  // @@protoc_insertion_point(field_get:network.TEventManagerTagTeam.name2)
  return _internal_name2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TEventManagerTagTeam::set_name2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TEventManagerTagTeam.name2)
}
inline std::string* TEventManagerTagTeam::mutable_name2() {
  std::string* _s = _internal_mutable_name2();
  // @@protoc_insertion_point(field_mutable:network.TEventManagerTagTeam.name2)
  return _s;
}
inline const std::string& TEventManagerTagTeam::_internal_name2() const {
  return _impl_.name2_.Get();
}
inline void TEventManagerTagTeam::_internal_set_name2(const std::string& value) {
  
  _impl_.name2_.Set(value, GetArenaForAllocation());
}
inline std::string* TEventManagerTagTeam::_internal_mutable_name2() {
  
  return _impl_.name2_.Mutable(GetArenaForAllocation());
}
inline std::string* TEventManagerTagTeam::release_name2() {
  // @@protoc_insertion_point(field_release:network.TEventManagerTagTeam.name2)
  return _impl_.name2_.Release();
}
inline void TEventManagerTagTeam::set_allocated_name2(std::string* name2) {
  if (name2 != nullptr) {
    
  } else {
    
  }
  _impl_.name2_.SetAllocated(name2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name2_.IsDefault()) {
    _impl_.name2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TEventManagerTagTeam.name2)
}

// -------------------------------------------------------------------

// TCrystalProto

// uint32 process_level = 1;
inline void TCrystalProto::clear_process_level() {
  _impl_.process_level_ = 0u;
}
inline uint32_t TCrystalProto::_internal_process_level() const {
  return _impl_.process_level_;
}
inline uint32_t TCrystalProto::process_level() const {
  // @@protoc_insertion_point(field_get:network.TCrystalProto.process_level)
  return _internal_process_level();
}
inline void TCrystalProto::_internal_set_process_level(uint32_t value) {
  
  _impl_.process_level_ = value;
}
inline void TCrystalProto::set_process_level(uint32_t value) {
  _internal_set_process_level(value);
  // @@protoc_insertion_point(field_set:network.TCrystalProto.process_level)
}

// uint32 clarity_type = 2;
inline void TCrystalProto::clear_clarity_type() {
  _impl_.clarity_type_ = 0u;
}
inline uint32_t TCrystalProto::_internal_clarity_type() const {
  return _impl_.clarity_type_;
}
inline uint32_t TCrystalProto::clarity_type() const {
  // @@protoc_insertion_point(field_get:network.TCrystalProto.clarity_type)
  return _internal_clarity_type();
}
inline void TCrystalProto::_internal_set_clarity_type(uint32_t value) {
  
  _impl_.clarity_type_ = value;
}
inline void TCrystalProto::set_clarity_type(uint32_t value) {
  _internal_set_clarity_type(value);
  // @@protoc_insertion_point(field_set:network.TCrystalProto.clarity_type)
}

// uint32 clarity_level = 3;
inline void TCrystalProto::clear_clarity_level() {
  _impl_.clarity_level_ = 0u;
}
inline uint32_t TCrystalProto::_internal_clarity_level() const {
  return _impl_.clarity_level_;
}
inline uint32_t TCrystalProto::clarity_level() const {
  // @@protoc_insertion_point(field_get:network.TCrystalProto.clarity_level)
  return _internal_clarity_level();
}
inline void TCrystalProto::_internal_set_clarity_level(uint32_t value) {
  
  _impl_.clarity_level_ = value;
}
inline void TCrystalProto::set_clarity_level(uint32_t value) {
  _internal_set_clarity_level(value);
  // @@protoc_insertion_point(field_set:network.TCrystalProto.clarity_level)
}

// repeated .network.TItemAttribute applies = 4;
inline int TCrystalProto::_internal_applies_size() const {
  return _impl_.applies_.size();
}
inline int TCrystalProto::applies_size() const {
  return _internal_applies_size();
}
inline ::network::TItemAttribute* TCrystalProto::mutable_applies(int index) {
  // @@protoc_insertion_point(field_mutable:network.TCrystalProto.applies)
  return _impl_.applies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
TCrystalProto::mutable_applies() {
  // @@protoc_insertion_point(field_mutable_list:network.TCrystalProto.applies)
  return &_impl_.applies_;
}
inline const ::network::TItemAttribute& TCrystalProto::_internal_applies(int index) const {
  return _impl_.applies_.Get(index);
}
inline const ::network::TItemAttribute& TCrystalProto::applies(int index) const {
  // @@protoc_insertion_point(field_get:network.TCrystalProto.applies)
  return _internal_applies(index);
}
inline ::network::TItemAttribute* TCrystalProto::_internal_add_applies() {
  return _impl_.applies_.Add();
}
inline ::network::TItemAttribute* TCrystalProto::add_applies() {
  ::network::TItemAttribute* _add = _internal_add_applies();
  // @@protoc_insertion_point(field_add:network.TCrystalProto.applies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
TCrystalProto::applies() const {
  // @@protoc_insertion_point(field_list:network.TCrystalProto.applies)
  return _impl_.applies_;
}

// uint32 required_fragments = 5;
inline void TCrystalProto::clear_required_fragments() {
  _impl_.required_fragments_ = 0u;
}
inline uint32_t TCrystalProto::_internal_required_fragments() const {
  return _impl_.required_fragments_;
}
inline uint32_t TCrystalProto::required_fragments() const {
  // @@protoc_insertion_point(field_get:network.TCrystalProto.required_fragments)
  return _internal_required_fragments();
}
inline void TCrystalProto::_internal_set_required_fragments(uint32_t value) {
  
  _impl_.required_fragments_ = value;
}
inline void TCrystalProto::set_required_fragments(uint32_t value) {
  _internal_set_required_fragments(value);
  // @@protoc_insertion_point(field_set:network.TCrystalProto.required_fragments)
}

// -------------------------------------------------------------------

// TMobSkillLevel

// uint32 vnum = 1;
inline void TMobSkillLevel::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TMobSkillLevel::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TMobSkillLevel::vnum() const {
  // @@protoc_insertion_point(field_get:network.TMobSkillLevel.vnum)
  return _internal_vnum();
}
inline void TMobSkillLevel::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TMobSkillLevel::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TMobSkillLevel.vnum)
}

// uint32 level = 2;
inline void TMobSkillLevel::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TMobSkillLevel::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TMobSkillLevel::level() const {
  // @@protoc_insertion_point(field_get:network.TMobSkillLevel.level)
  return _internal_level();
}
inline void TMobSkillLevel::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TMobSkillLevel::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.TMobSkillLevel.level)
}

// -------------------------------------------------------------------

// TMobTable

// uint32 vnum = 1;
inline void TMobTable::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TMobTable::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TMobTable::vnum() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.vnum)
  return _internal_vnum();
}
inline void TMobTable::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TMobTable::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.vnum)
}

// bytes name = 2;
inline void TMobTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TMobTable::name() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TMobTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TMobTable.name)
}
inline std::string* TMobTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TMobTable.name)
  return _s;
}
inline const std::string& TMobTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TMobTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TMobTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TMobTable::release_name() {
  // @@protoc_insertion_point(field_release:network.TMobTable.name)
  return _impl_.name_.Release();
}
inline void TMobTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TMobTable.name)
}

// uint32 type = 3;
inline void TMobTable::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TMobTable::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TMobTable::type() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.type)
  return _internal_type();
}
inline void TMobTable::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TMobTable::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.type)
}

// uint32 rank = 4;
inline void TMobTable::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t TMobTable::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t TMobTable::rank() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.rank)
  return _internal_rank();
}
inline void TMobTable::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void TMobTable::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.rank)
}

// uint32 battle_type = 5;
inline void TMobTable::clear_battle_type() {
  _impl_.battle_type_ = 0u;
}
inline uint32_t TMobTable::_internal_battle_type() const {
  return _impl_.battle_type_;
}
inline uint32_t TMobTable::battle_type() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.battle_type)
  return _internal_battle_type();
}
inline void TMobTable::_internal_set_battle_type(uint32_t value) {
  
  _impl_.battle_type_ = value;
}
inline void TMobTable::set_battle_type(uint32_t value) {
  _internal_set_battle_type(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.battle_type)
}

// uint32 level = 6;
inline void TMobTable::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TMobTable::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TMobTable::level() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.level)
  return _internal_level();
}
inline void TMobTable::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TMobTable::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.level)
}

// uint32 size = 7;
inline void TMobTable::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t TMobTable::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t TMobTable::size() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.size)
  return _internal_size();
}
inline void TMobTable::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void TMobTable::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.size)
}

// uint32 gold_min = 8;
inline void TMobTable::clear_gold_min() {
  _impl_.gold_min_ = 0u;
}
inline uint32_t TMobTable::_internal_gold_min() const {
  return _impl_.gold_min_;
}
inline uint32_t TMobTable::gold_min() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.gold_min)
  return _internal_gold_min();
}
inline void TMobTable::_internal_set_gold_min(uint32_t value) {
  
  _impl_.gold_min_ = value;
}
inline void TMobTable::set_gold_min(uint32_t value) {
  _internal_set_gold_min(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.gold_min)
}

// uint32 gold_max = 9;
inline void TMobTable::clear_gold_max() {
  _impl_.gold_max_ = 0u;
}
inline uint32_t TMobTable::_internal_gold_max() const {
  return _impl_.gold_max_;
}
inline uint32_t TMobTable::gold_max() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.gold_max)
  return _internal_gold_max();
}
inline void TMobTable::_internal_set_gold_max(uint32_t value) {
  
  _impl_.gold_max_ = value;
}
inline void TMobTable::set_gold_max(uint32_t value) {
  _internal_set_gold_max(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.gold_max)
}

// uint32 exp = 10;
inline void TMobTable::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t TMobTable::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t TMobTable::exp() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.exp)
  return _internal_exp();
}
inline void TMobTable::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void TMobTable::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.exp)
}

// uint32 max_hp = 11;
inline void TMobTable::clear_max_hp() {
  _impl_.max_hp_ = 0u;
}
inline uint32_t TMobTable::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline uint32_t TMobTable::max_hp() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.max_hp)
  return _internal_max_hp();
}
inline void TMobTable::_internal_set_max_hp(uint32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void TMobTable::set_max_hp(uint32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.max_hp)
}

// uint32 regen_cycle = 12;
inline void TMobTable::clear_regen_cycle() {
  _impl_.regen_cycle_ = 0u;
}
inline uint32_t TMobTable::_internal_regen_cycle() const {
  return _impl_.regen_cycle_;
}
inline uint32_t TMobTable::regen_cycle() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.regen_cycle)
  return _internal_regen_cycle();
}
inline void TMobTable::_internal_set_regen_cycle(uint32_t value) {
  
  _impl_.regen_cycle_ = value;
}
inline void TMobTable::set_regen_cycle(uint32_t value) {
  _internal_set_regen_cycle(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.regen_cycle)
}

// uint32 regen_percent = 13;
inline void TMobTable::clear_regen_percent() {
  _impl_.regen_percent_ = 0u;
}
inline uint32_t TMobTable::_internal_regen_percent() const {
  return _impl_.regen_percent_;
}
inline uint32_t TMobTable::regen_percent() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.regen_percent)
  return _internal_regen_percent();
}
inline void TMobTable::_internal_set_regen_percent(uint32_t value) {
  
  _impl_.regen_percent_ = value;
}
inline void TMobTable::set_regen_percent(uint32_t value) {
  _internal_set_regen_percent(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.regen_percent)
}

// uint32 def = 14;
inline void TMobTable::clear_def() {
  _impl_.def_ = 0u;
}
inline uint32_t TMobTable::_internal_def() const {
  return _impl_.def_;
}
inline uint32_t TMobTable::def() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.def)
  return _internal_def();
}
inline void TMobTable::_internal_set_def(uint32_t value) {
  
  _impl_.def_ = value;
}
inline void TMobTable::set_def(uint32_t value) {
  _internal_set_def(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.def)
}

// uint32 ai_flag = 15;
inline void TMobTable::clear_ai_flag() {
  _impl_.ai_flag_ = 0u;
}
inline uint32_t TMobTable::_internal_ai_flag() const {
  return _impl_.ai_flag_;
}
inline uint32_t TMobTable::ai_flag() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.ai_flag)
  return _internal_ai_flag();
}
inline void TMobTable::_internal_set_ai_flag(uint32_t value) {
  
  _impl_.ai_flag_ = value;
}
inline void TMobTable::set_ai_flag(uint32_t value) {
  _internal_set_ai_flag(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.ai_flag)
}

// uint32 race_flag = 16;
inline void TMobTable::clear_race_flag() {
  _impl_.race_flag_ = 0u;
}
inline uint32_t TMobTable::_internal_race_flag() const {
  return _impl_.race_flag_;
}
inline uint32_t TMobTable::race_flag() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.race_flag)
  return _internal_race_flag();
}
inline void TMobTable::_internal_set_race_flag(uint32_t value) {
  
  _impl_.race_flag_ = value;
}
inline void TMobTable::set_race_flag(uint32_t value) {
  _internal_set_race_flag(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.race_flag)
}

// uint32 immune_flag = 17;
inline void TMobTable::clear_immune_flag() {
  _impl_.immune_flag_ = 0u;
}
inline uint32_t TMobTable::_internal_immune_flag() const {
  return _impl_.immune_flag_;
}
inline uint32_t TMobTable::immune_flag() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.immune_flag)
  return _internal_immune_flag();
}
inline void TMobTable::_internal_set_immune_flag(uint32_t value) {
  
  _impl_.immune_flag_ = value;
}
inline void TMobTable::set_immune_flag(uint32_t value) {
  _internal_set_immune_flag(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.immune_flag)
}

// uint32 str = 18;
inline void TMobTable::clear_str() {
  _impl_.str_ = 0u;
}
inline uint32_t TMobTable::_internal_str() const {
  return _impl_.str_;
}
inline uint32_t TMobTable::str() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.str)
  return _internal_str();
}
inline void TMobTable::_internal_set_str(uint32_t value) {
  
  _impl_.str_ = value;
}
inline void TMobTable::set_str(uint32_t value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.str)
}

// uint32 dex = 19;
inline void TMobTable::clear_dex() {
  _impl_.dex_ = 0u;
}
inline uint32_t TMobTable::_internal_dex() const {
  return _impl_.dex_;
}
inline uint32_t TMobTable::dex() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.dex)
  return _internal_dex();
}
inline void TMobTable::_internal_set_dex(uint32_t value) {
  
  _impl_.dex_ = value;
}
inline void TMobTable::set_dex(uint32_t value) {
  _internal_set_dex(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.dex)
}

// uint32 con = 20;
inline void TMobTable::clear_con() {
  _impl_.con_ = 0u;
}
inline uint32_t TMobTable::_internal_con() const {
  return _impl_.con_;
}
inline uint32_t TMobTable::con() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.con)
  return _internal_con();
}
inline void TMobTable::_internal_set_con(uint32_t value) {
  
  _impl_.con_ = value;
}
inline void TMobTable::set_con(uint32_t value) {
  _internal_set_con(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.con)
}

// uint32 int = 21;
inline void TMobTable::clear_int_() {
  _impl_.int__ = 0u;
}
inline uint32_t TMobTable::_internal_int_() const {
  return _impl_.int__;
}
inline uint32_t TMobTable::int_() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.int)
  return _internal_int_();
}
inline void TMobTable::_internal_set_int_(uint32_t value) {
  
  _impl_.int__ = value;
}
inline void TMobTable::set_int_(uint32_t value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.int)
}

// uint32 damage_min = 22;
inline void TMobTable::clear_damage_min() {
  _impl_.damage_min_ = 0u;
}
inline uint32_t TMobTable::_internal_damage_min() const {
  return _impl_.damage_min_;
}
inline uint32_t TMobTable::damage_min() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.damage_min)
  return _internal_damage_min();
}
inline void TMobTable::_internal_set_damage_min(uint32_t value) {
  
  _impl_.damage_min_ = value;
}
inline void TMobTable::set_damage_min(uint32_t value) {
  _internal_set_damage_min(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.damage_min)
}

// uint32 damage_max = 23;
inline void TMobTable::clear_damage_max() {
  _impl_.damage_max_ = 0u;
}
inline uint32_t TMobTable::_internal_damage_max() const {
  return _impl_.damage_max_;
}
inline uint32_t TMobTable::damage_max() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.damage_max)
  return _internal_damage_max();
}
inline void TMobTable::_internal_set_damage_max(uint32_t value) {
  
  _impl_.damage_max_ = value;
}
inline void TMobTable::set_damage_max(uint32_t value) {
  _internal_set_damage_max(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.damage_max)
}

// uint32 attack_speed = 24;
inline void TMobTable::clear_attack_speed() {
  _impl_.attack_speed_ = 0u;
}
inline uint32_t TMobTable::_internal_attack_speed() const {
  return _impl_.attack_speed_;
}
inline uint32_t TMobTable::attack_speed() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.attack_speed)
  return _internal_attack_speed();
}
inline void TMobTable::_internal_set_attack_speed(uint32_t value) {
  
  _impl_.attack_speed_ = value;
}
inline void TMobTable::set_attack_speed(uint32_t value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.attack_speed)
}

// uint32 moving_speed = 25;
inline void TMobTable::clear_moving_speed() {
  _impl_.moving_speed_ = 0u;
}
inline uint32_t TMobTable::_internal_moving_speed() const {
  return _impl_.moving_speed_;
}
inline uint32_t TMobTable::moving_speed() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.moving_speed)
  return _internal_moving_speed();
}
inline void TMobTable::_internal_set_moving_speed(uint32_t value) {
  
  _impl_.moving_speed_ = value;
}
inline void TMobTable::set_moving_speed(uint32_t value) {
  _internal_set_moving_speed(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.moving_speed)
}

// uint32 aggressive_hp_pct = 26;
inline void TMobTable::clear_aggressive_hp_pct() {
  _impl_.aggressive_hp_pct_ = 0u;
}
inline uint32_t TMobTable::_internal_aggressive_hp_pct() const {
  return _impl_.aggressive_hp_pct_;
}
inline uint32_t TMobTable::aggressive_hp_pct() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.aggressive_hp_pct)
  return _internal_aggressive_hp_pct();
}
inline void TMobTable::_internal_set_aggressive_hp_pct(uint32_t value) {
  
  _impl_.aggressive_hp_pct_ = value;
}
inline void TMobTable::set_aggressive_hp_pct(uint32_t value) {
  _internal_set_aggressive_hp_pct(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.aggressive_hp_pct)
}

// uint32 aggressive_sight = 27;
inline void TMobTable::clear_aggressive_sight() {
  _impl_.aggressive_sight_ = 0u;
}
inline uint32_t TMobTable::_internal_aggressive_sight() const {
  return _impl_.aggressive_sight_;
}
inline uint32_t TMobTable::aggressive_sight() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.aggressive_sight)
  return _internal_aggressive_sight();
}
inline void TMobTable::_internal_set_aggressive_sight(uint32_t value) {
  
  _impl_.aggressive_sight_ = value;
}
inline void TMobTable::set_aggressive_sight(uint32_t value) {
  _internal_set_aggressive_sight(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.aggressive_sight)
}

// uint32 attack_range = 28;
inline void TMobTable::clear_attack_range() {
  _impl_.attack_range_ = 0u;
}
inline uint32_t TMobTable::_internal_attack_range() const {
  return _impl_.attack_range_;
}
inline uint32_t TMobTable::attack_range() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.attack_range)
  return _internal_attack_range();
}
inline void TMobTable::_internal_set_attack_range(uint32_t value) {
  
  _impl_.attack_range_ = value;
}
inline void TMobTable::set_attack_range(uint32_t value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.attack_range)
}

// repeated int32 enchants = 29;
inline int TMobTable::_internal_enchants_size() const {
  return _impl_.enchants_.size();
}
inline int TMobTable::enchants_size() const {
  return _internal_enchants_size();
}
inline void TMobTable::clear_enchants() {
  _impl_.enchants_.Clear();
}
inline int32_t TMobTable::_internal_enchants(int index) const {
  return _impl_.enchants_.Get(index);
}
inline int32_t TMobTable::enchants(int index) const {
  // @@protoc_insertion_point(field_get:network.TMobTable.enchants)
  return _internal_enchants(index);
}
inline void TMobTable::set_enchants(int index, int32_t value) {
  _impl_.enchants_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TMobTable.enchants)
}
inline void TMobTable::_internal_add_enchants(int32_t value) {
  _impl_.enchants_.Add(value);
}
inline void TMobTable::add_enchants(int32_t value) {
  _internal_add_enchants(value);
  // @@protoc_insertion_point(field_add:network.TMobTable.enchants)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TMobTable::_internal_enchants() const {
  return _impl_.enchants_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TMobTable::enchants() const {
  // @@protoc_insertion_point(field_list:network.TMobTable.enchants)
  return _internal_enchants();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TMobTable::_internal_mutable_enchants() {
  return &_impl_.enchants_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TMobTable::mutable_enchants() {
  // @@protoc_insertion_point(field_mutable_list:network.TMobTable.enchants)
  return _internal_mutable_enchants();
}

// repeated int32 resists = 30;
inline int TMobTable::_internal_resists_size() const {
  return _impl_.resists_.size();
}
inline int TMobTable::resists_size() const {
  return _internal_resists_size();
}
inline void TMobTable::clear_resists() {
  _impl_.resists_.Clear();
}
inline int32_t TMobTable::_internal_resists(int index) const {
  return _impl_.resists_.Get(index);
}
inline int32_t TMobTable::resists(int index) const {
  // @@protoc_insertion_point(field_get:network.TMobTable.resists)
  return _internal_resists(index);
}
inline void TMobTable::set_resists(int index, int32_t value) {
  _impl_.resists_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TMobTable.resists)
}
inline void TMobTable::_internal_add_resists(int32_t value) {
  _impl_.resists_.Add(value);
}
inline void TMobTable::add_resists(int32_t value) {
  _internal_add_resists(value);
  // @@protoc_insertion_point(field_add:network.TMobTable.resists)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TMobTable::_internal_resists() const {
  return _impl_.resists_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TMobTable::resists() const {
  // @@protoc_insertion_point(field_list:network.TMobTable.resists)
  return _internal_resists();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TMobTable::_internal_mutable_resists() {
  return &_impl_.resists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TMobTable::mutable_resists() {
  // @@protoc_insertion_point(field_mutable_list:network.TMobTable.resists)
  return _internal_mutable_resists();
}

// uint32 resurrection_vnum = 31;
inline void TMobTable::clear_resurrection_vnum() {
  _impl_.resurrection_vnum_ = 0u;
}
inline uint32_t TMobTable::_internal_resurrection_vnum() const {
  return _impl_.resurrection_vnum_;
}
inline uint32_t TMobTable::resurrection_vnum() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.resurrection_vnum)
  return _internal_resurrection_vnum();
}
inline void TMobTable::_internal_set_resurrection_vnum(uint32_t value) {
  
  _impl_.resurrection_vnum_ = value;
}
inline void TMobTable::set_resurrection_vnum(uint32_t value) {
  _internal_set_resurrection_vnum(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.resurrection_vnum)
}

// uint32 drop_item_vnum = 32;
inline void TMobTable::clear_drop_item_vnum() {
  _impl_.drop_item_vnum_ = 0u;
}
inline uint32_t TMobTable::_internal_drop_item_vnum() const {
  return _impl_.drop_item_vnum_;
}
inline uint32_t TMobTable::drop_item_vnum() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.drop_item_vnum)
  return _internal_drop_item_vnum();
}
inline void TMobTable::_internal_set_drop_item_vnum(uint32_t value) {
  
  _impl_.drop_item_vnum_ = value;
}
inline void TMobTable::set_drop_item_vnum(uint32_t value) {
  _internal_set_drop_item_vnum(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.drop_item_vnum)
}

// uint32 mount_capacity = 33;
inline void TMobTable::clear_mount_capacity() {
  _impl_.mount_capacity_ = 0u;
}
inline uint32_t TMobTable::_internal_mount_capacity() const {
  return _impl_.mount_capacity_;
}
inline uint32_t TMobTable::mount_capacity() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.mount_capacity)
  return _internal_mount_capacity();
}
inline void TMobTable::_internal_set_mount_capacity(uint32_t value) {
  
  _impl_.mount_capacity_ = value;
}
inline void TMobTable::set_mount_capacity(uint32_t value) {
  _internal_set_mount_capacity(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.mount_capacity)
}

// uint32 on_click_type = 34;
inline void TMobTable::clear_on_click_type() {
  _impl_.on_click_type_ = 0u;
}
inline uint32_t TMobTable::_internal_on_click_type() const {
  return _impl_.on_click_type_;
}
inline uint32_t TMobTable::on_click_type() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.on_click_type)
  return _internal_on_click_type();
}
inline void TMobTable::_internal_set_on_click_type(uint32_t value) {
  
  _impl_.on_click_type_ = value;
}
inline void TMobTable::set_on_click_type(uint32_t value) {
  _internal_set_on_click_type(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.on_click_type)
}

// uint32 empire = 35;
inline void TMobTable::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t TMobTable::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t TMobTable::empire() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.empire)
  return _internal_empire();
}
inline void TMobTable::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void TMobTable::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.empire)
}

// bytes folder = 36;
inline void TMobTable::clear_folder() {
  _impl_.folder_.ClearToEmpty();
}
inline const std::string& TMobTable::folder() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.folder)
  return _internal_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TMobTable::set_folder(ArgT0&& arg0, ArgT... args) {
 
 _impl_.folder_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TMobTable.folder)
}
inline std::string* TMobTable::mutable_folder() {
  std::string* _s = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:network.TMobTable.folder)
  return _s;
}
inline const std::string& TMobTable::_internal_folder() const {
  return _impl_.folder_.Get();
}
inline void TMobTable::_internal_set_folder(const std::string& value) {
  
  _impl_.folder_.Set(value, GetArenaForAllocation());
}
inline std::string* TMobTable::_internal_mutable_folder() {
  
  return _impl_.folder_.Mutable(GetArenaForAllocation());
}
inline std::string* TMobTable::release_folder() {
  // @@protoc_insertion_point(field_release:network.TMobTable.folder)
  return _impl_.folder_.Release();
}
inline void TMobTable::set_allocated_folder(std::string* folder) {
  if (folder != nullptr) {
    
  } else {
    
  }
  _impl_.folder_.SetAllocated(folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.folder_.IsDefault()) {
    _impl_.folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TMobTable.folder)
}

// float dam_multiply = 37;
inline void TMobTable::clear_dam_multiply() {
  _impl_.dam_multiply_ = 0;
}
inline float TMobTable::_internal_dam_multiply() const {
  return _impl_.dam_multiply_;
}
inline float TMobTable::dam_multiply() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.dam_multiply)
  return _internal_dam_multiply();
}
inline void TMobTable::_internal_set_dam_multiply(float value) {
  
  _impl_.dam_multiply_ = value;
}
inline void TMobTable::set_dam_multiply(float value) {
  _internal_set_dam_multiply(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.dam_multiply)
}

// uint32 summon_vnum = 38;
inline void TMobTable::clear_summon_vnum() {
  _impl_.summon_vnum_ = 0u;
}
inline uint32_t TMobTable::_internal_summon_vnum() const {
  return _impl_.summon_vnum_;
}
inline uint32_t TMobTable::summon_vnum() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.summon_vnum)
  return _internal_summon_vnum();
}
inline void TMobTable::_internal_set_summon_vnum(uint32_t value) {
  
  _impl_.summon_vnum_ = value;
}
inline void TMobTable::set_summon_vnum(uint32_t value) {
  _internal_set_summon_vnum(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.summon_vnum)
}

// uint32 drain_sp = 39;
inline void TMobTable::clear_drain_sp() {
  _impl_.drain_sp_ = 0u;
}
inline uint32_t TMobTable::_internal_drain_sp() const {
  return _impl_.drain_sp_;
}
inline uint32_t TMobTable::drain_sp() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.drain_sp)
  return _internal_drain_sp();
}
inline void TMobTable::_internal_set_drain_sp(uint32_t value) {
  
  _impl_.drain_sp_ = value;
}
inline void TMobTable::set_drain_sp(uint32_t value) {
  _internal_set_drain_sp(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.drain_sp)
}

// uint32 mob_color = 40;
inline void TMobTable::clear_mob_color() {
  _impl_.mob_color_ = 0u;
}
inline uint32_t TMobTable::_internal_mob_color() const {
  return _impl_.mob_color_;
}
inline uint32_t TMobTable::mob_color() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.mob_color)
  return _internal_mob_color();
}
inline void TMobTable::_internal_set_mob_color(uint32_t value) {
  
  _impl_.mob_color_ = value;
}
inline void TMobTable::set_mob_color(uint32_t value) {
  _internal_set_mob_color(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.mob_color)
}

// uint32 polymorph_item_vnum = 41;
inline void TMobTable::clear_polymorph_item_vnum() {
  _impl_.polymorph_item_vnum_ = 0u;
}
inline uint32_t TMobTable::_internal_polymorph_item_vnum() const {
  return _impl_.polymorph_item_vnum_;
}
inline uint32_t TMobTable::polymorph_item_vnum() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.polymorph_item_vnum)
  return _internal_polymorph_item_vnum();
}
inline void TMobTable::_internal_set_polymorph_item_vnum(uint32_t value) {
  
  _impl_.polymorph_item_vnum_ = value;
}
inline void TMobTable::set_polymorph_item_vnum(uint32_t value) {
  _internal_set_polymorph_item_vnum(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.polymorph_item_vnum)
}

// repeated .network.TMobSkillLevel skills = 42;
inline int TMobTable::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int TMobTable::skills_size() const {
  return _internal_skills_size();
}
inline void TMobTable::clear_skills() {
  _impl_.skills_.Clear();
}
inline ::network::TMobSkillLevel* TMobTable::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:network.TMobTable.skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobSkillLevel >*
TMobTable::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:network.TMobTable.skills)
  return &_impl_.skills_;
}
inline const ::network::TMobSkillLevel& TMobTable::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::network::TMobSkillLevel& TMobTable::skills(int index) const {
  // @@protoc_insertion_point(field_get:network.TMobTable.skills)
  return _internal_skills(index);
}
inline ::network::TMobSkillLevel* TMobTable::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::network::TMobSkillLevel* TMobTable::add_skills() {
  ::network::TMobSkillLevel* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:network.TMobTable.skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobSkillLevel >&
TMobTable::skills() const {
  // @@protoc_insertion_point(field_list:network.TMobTable.skills)
  return _impl_.skills_;
}

// uint32 berserk_point = 43;
inline void TMobTable::clear_berserk_point() {
  _impl_.berserk_point_ = 0u;
}
inline uint32_t TMobTable::_internal_berserk_point() const {
  return _impl_.berserk_point_;
}
inline uint32_t TMobTable::berserk_point() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.berserk_point)
  return _internal_berserk_point();
}
inline void TMobTable::_internal_set_berserk_point(uint32_t value) {
  
  _impl_.berserk_point_ = value;
}
inline void TMobTable::set_berserk_point(uint32_t value) {
  _internal_set_berserk_point(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.berserk_point)
}

// uint32 stone_skin_point = 44;
inline void TMobTable::clear_stone_skin_point() {
  _impl_.stone_skin_point_ = 0u;
}
inline uint32_t TMobTable::_internal_stone_skin_point() const {
  return _impl_.stone_skin_point_;
}
inline uint32_t TMobTable::stone_skin_point() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.stone_skin_point)
  return _internal_stone_skin_point();
}
inline void TMobTable::_internal_set_stone_skin_point(uint32_t value) {
  
  _impl_.stone_skin_point_ = value;
}
inline void TMobTable::set_stone_skin_point(uint32_t value) {
  _internal_set_stone_skin_point(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.stone_skin_point)
}

// uint32 god_speed_point = 45;
inline void TMobTable::clear_god_speed_point() {
  _impl_.god_speed_point_ = 0u;
}
inline uint32_t TMobTable::_internal_god_speed_point() const {
  return _impl_.god_speed_point_;
}
inline uint32_t TMobTable::god_speed_point() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.god_speed_point)
  return _internal_god_speed_point();
}
inline void TMobTable::_internal_set_god_speed_point(uint32_t value) {
  
  _impl_.god_speed_point_ = value;
}
inline void TMobTable::set_god_speed_point(uint32_t value) {
  _internal_set_god_speed_point(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.god_speed_point)
}

// uint32 death_blow_point = 46;
inline void TMobTable::clear_death_blow_point() {
  _impl_.death_blow_point_ = 0u;
}
inline uint32_t TMobTable::_internal_death_blow_point() const {
  return _impl_.death_blow_point_;
}
inline uint32_t TMobTable::death_blow_point() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.death_blow_point)
  return _internal_death_blow_point();
}
inline void TMobTable::_internal_set_death_blow_point(uint32_t value) {
  
  _impl_.death_blow_point_ = value;
}
inline void TMobTable::set_death_blow_point(uint32_t value) {
  _internal_set_death_blow_point(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.death_blow_point)
}

// uint32 revive_point = 47;
inline void TMobTable::clear_revive_point() {
  _impl_.revive_point_ = 0u;
}
inline uint32_t TMobTable::_internal_revive_point() const {
  return _impl_.revive_point_;
}
inline uint32_t TMobTable::revive_point() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.revive_point)
  return _internal_revive_point();
}
inline void TMobTable::_internal_set_revive_point(uint32_t value) {
  
  _impl_.revive_point_ = value;
}
inline void TMobTable::set_revive_point(uint32_t value) {
  _internal_set_revive_point(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.revive_point)
}

// uint32 healer_point = 48;
inline void TMobTable::clear_healer_point() {
  _impl_.healer_point_ = 0u;
}
inline uint32_t TMobTable::_internal_healer_point() const {
  return _impl_.healer_point_;
}
inline uint32_t TMobTable::healer_point() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.healer_point)
  return _internal_healer_point();
}
inline void TMobTable::_internal_set_healer_point(uint32_t value) {
  
  _impl_.healer_point_ = value;
}
inline void TMobTable::set_healer_point(uint32_t value) {
  _internal_set_healer_point(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.healer_point)
}

// float scaling_size = 49;
inline void TMobTable::clear_scaling_size() {
  _impl_.scaling_size_ = 0;
}
inline float TMobTable::_internal_scaling_size() const {
  return _impl_.scaling_size_;
}
inline float TMobTable::scaling_size() const {
  // @@protoc_insertion_point(field_get:network.TMobTable.scaling_size)
  return _internal_scaling_size();
}
inline void TMobTable::_internal_set_scaling_size(float value) {
  
  _impl_.scaling_size_ = value;
}
inline void TMobTable::set_scaling_size(float value) {
  _internal_set_scaling_size(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.scaling_size)
}

// repeated bytes locale_name = 50;
inline int TMobTable::_internal_locale_name_size() const {
  return _impl_.locale_name_.size();
}
inline int TMobTable::locale_name_size() const {
  return _internal_locale_name_size();
}
inline void TMobTable::clear_locale_name() {
  _impl_.locale_name_.Clear();
}
inline std::string* TMobTable::add_locale_name() {
  std::string* _s = _internal_add_locale_name();
  // @@protoc_insertion_point(field_add_mutable:network.TMobTable.locale_name)
  return _s;
}
inline const std::string& TMobTable::_internal_locale_name(int index) const {
  return _impl_.locale_name_.Get(index);
}
inline const std::string& TMobTable::locale_name(int index) const {
  // @@protoc_insertion_point(field_get:network.TMobTable.locale_name)
  return _internal_locale_name(index);
}
inline std::string* TMobTable::mutable_locale_name(int index) {
  // @@protoc_insertion_point(field_mutable:network.TMobTable.locale_name)
  return _impl_.locale_name_.Mutable(index);
}
inline void TMobTable::set_locale_name(int index, const std::string& value) {
  _impl_.locale_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.TMobTable.locale_name)
}
inline void TMobTable::set_locale_name(int index, std::string&& value) {
  _impl_.locale_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.TMobTable.locale_name)
}
inline void TMobTable::set_locale_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.locale_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.TMobTable.locale_name)
}
inline void TMobTable::set_locale_name(int index, const void* value, size_t size) {
  _impl_.locale_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.TMobTable.locale_name)
}
inline std::string* TMobTable::_internal_add_locale_name() {
  return _impl_.locale_name_.Add();
}
inline void TMobTable::add_locale_name(const std::string& value) {
  _impl_.locale_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.TMobTable.locale_name)
}
inline void TMobTable::add_locale_name(std::string&& value) {
  _impl_.locale_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.TMobTable.locale_name)
}
inline void TMobTable::add_locale_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.locale_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.TMobTable.locale_name)
}
inline void TMobTable::add_locale_name(const void* value, size_t size) {
  _impl_.locale_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.TMobTable.locale_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMobTable::locale_name() const {
  // @@protoc_insertion_point(field_list:network.TMobTable.locale_name)
  return _impl_.locale_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMobTable::mutable_locale_name() {
  // @@protoc_insertion_point(field_mutable_list:network.TMobTable.locale_name)
  return &_impl_.locale_name_;
}

// -------------------------------------------------------------------

// TRepeatedMobTable

// repeated .network.TMobTable data = 1;
inline int TRepeatedMobTable::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int TRepeatedMobTable::data_size() const {
  return _internal_data_size();
}
inline void TRepeatedMobTable::clear_data() {
  _impl_.data_.Clear();
}
inline ::network::TMobTable* TRepeatedMobTable::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:network.TRepeatedMobTable.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >*
TRepeatedMobTable::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:network.TRepeatedMobTable.data)
  return &_impl_.data_;
}
inline const ::network::TMobTable& TRepeatedMobTable::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::network::TMobTable& TRepeatedMobTable::data(int index) const {
  // @@protoc_insertion_point(field_get:network.TRepeatedMobTable.data)
  return _internal_data(index);
}
inline ::network::TMobTable* TRepeatedMobTable::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::network::TMobTable* TRepeatedMobTable::add_data() {
  ::network::TMobTable* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:network.TRepeatedMobTable.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TMobTable >&
TRepeatedMobTable::data() const {
  // @@protoc_insertion_point(field_list:network.TRepeatedMobTable.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// TItemLimit

// uint32 type = 1;
inline void TItemLimit::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TItemLimit::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TItemLimit::type() const {
  // @@protoc_insertion_point(field_get:network.TItemLimit.type)
  return _internal_type();
}
inline void TItemLimit::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TItemLimit::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TItemLimit.type)
}

// int32 value = 2;
inline void TItemLimit::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t TItemLimit::_internal_value() const {
  return _impl_.value_;
}
inline int32_t TItemLimit::value() const {
  // @@protoc_insertion_point(field_get:network.TItemLimit.value)
  return _internal_value();
}
inline void TItemLimit::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void TItemLimit::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.TItemLimit.value)
}

// -------------------------------------------------------------------

// TItemApply

// uint32 type = 1;
inline void TItemApply::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TItemApply::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TItemApply::type() const {
  // @@protoc_insertion_point(field_get:network.TItemApply.type)
  return _internal_type();
}
inline void TItemApply::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TItemApply::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TItemApply.type)
}

// int32 value = 2;
inline void TItemApply::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t TItemApply::_internal_value() const {
  return _impl_.value_;
}
inline int32_t TItemApply::value() const {
  // @@protoc_insertion_point(field_get:network.TItemApply.value)
  return _internal_value();
}
inline void TItemApply::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void TItemApply::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.TItemApply.value)
}

// -------------------------------------------------------------------

// TItemTable

// uint32 vnum = 1;
inline void TItemTable::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TItemTable::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TItemTable::vnum() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.vnum)
  return _internal_vnum();
}
inline void TItemTable::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TItemTable::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.vnum)
}

// uint32 vnum_range = 2;
inline void TItemTable::clear_vnum_range() {
  _impl_.vnum_range_ = 0u;
}
inline uint32_t TItemTable::_internal_vnum_range() const {
  return _impl_.vnum_range_;
}
inline uint32_t TItemTable::vnum_range() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.vnum_range)
  return _internal_vnum_range();
}
inline void TItemTable::_internal_set_vnum_range(uint32_t value) {
  
  _impl_.vnum_range_ = value;
}
inline void TItemTable::set_vnum_range(uint32_t value) {
  _internal_set_vnum_range(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.vnum_range)
}

// bytes name = 3;
inline void TItemTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TItemTable::name() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TItemTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TItemTable.name)
}
inline std::string* TItemTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TItemTable.name)
  return _s;
}
inline const std::string& TItemTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TItemTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TItemTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TItemTable::release_name() {
  // @@protoc_insertion_point(field_release:network.TItemTable.name)
  return _impl_.name_.Release();
}
inline void TItemTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TItemTable.name)
}

// uint32 type = 4;
inline void TItemTable::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TItemTable::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TItemTable::type() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.type)
  return _internal_type();
}
inline void TItemTable::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TItemTable::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.type)
}

// uint32 sub_type = 5;
inline void TItemTable::clear_sub_type() {
  _impl_.sub_type_ = 0u;
}
inline uint32_t TItemTable::_internal_sub_type() const {
  return _impl_.sub_type_;
}
inline uint32_t TItemTable::sub_type() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.sub_type)
  return _internal_sub_type();
}
inline void TItemTable::_internal_set_sub_type(uint32_t value) {
  
  _impl_.sub_type_ = value;
}
inline void TItemTable::set_sub_type(uint32_t value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.sub_type)
}

// uint32 weight = 6;
inline void TItemTable::clear_weight() {
  _impl_.weight_ = 0u;
}
inline uint32_t TItemTable::_internal_weight() const {
  return _impl_.weight_;
}
inline uint32_t TItemTable::weight() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.weight)
  return _internal_weight();
}
inline void TItemTable::_internal_set_weight(uint32_t value) {
  
  _impl_.weight_ = value;
}
inline void TItemTable::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.weight)
}

// uint32 size = 7;
inline void TItemTable::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t TItemTable::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t TItemTable::size() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.size)
  return _internal_size();
}
inline void TItemTable::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void TItemTable::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.size)
}

// uint32 anti_flags = 8;
inline void TItemTable::clear_anti_flags() {
  _impl_.anti_flags_ = 0u;
}
inline uint32_t TItemTable::_internal_anti_flags() const {
  return _impl_.anti_flags_;
}
inline uint32_t TItemTable::anti_flags() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.anti_flags)
  return _internal_anti_flags();
}
inline void TItemTable::_internal_set_anti_flags(uint32_t value) {
  
  _impl_.anti_flags_ = value;
}
inline void TItemTable::set_anti_flags(uint32_t value) {
  _internal_set_anti_flags(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.anti_flags)
}

// uint32 flags = 9;
inline void TItemTable::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t TItemTable::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t TItemTable::flags() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.flags)
  return _internal_flags();
}
inline void TItemTable::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void TItemTable::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.flags)
}

// uint32 wear_flags = 10;
inline void TItemTable::clear_wear_flags() {
  _impl_.wear_flags_ = 0u;
}
inline uint32_t TItemTable::_internal_wear_flags() const {
  return _impl_.wear_flags_;
}
inline uint32_t TItemTable::wear_flags() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.wear_flags)
  return _internal_wear_flags();
}
inline void TItemTable::_internal_set_wear_flags(uint32_t value) {
  
  _impl_.wear_flags_ = value;
}
inline void TItemTable::set_wear_flags(uint32_t value) {
  _internal_set_wear_flags(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.wear_flags)
}

// uint32 immune_flags = 11;
inline void TItemTable::clear_immune_flags() {
  _impl_.immune_flags_ = 0u;
}
inline uint32_t TItemTable::_internal_immune_flags() const {
  return _impl_.immune_flags_;
}
inline uint32_t TItemTable::immune_flags() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.immune_flags)
  return _internal_immune_flags();
}
inline void TItemTable::_internal_set_immune_flags(uint32_t value) {
  
  _impl_.immune_flags_ = value;
}
inline void TItemTable::set_immune_flags(uint32_t value) {
  _internal_set_immune_flags(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.immune_flags)
}

// int64 gold = 12;
inline void TItemTable::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t TItemTable::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t TItemTable::gold() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.gold)
  return _internal_gold();
}
inline void TItemTable::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void TItemTable::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.gold)
}

// int64 shop_buy_price = 13;
inline void TItemTable::clear_shop_buy_price() {
  _impl_.shop_buy_price_ = int64_t{0};
}
inline int64_t TItemTable::_internal_shop_buy_price() const {
  return _impl_.shop_buy_price_;
}
inline int64_t TItemTable::shop_buy_price() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.shop_buy_price)
  return _internal_shop_buy_price();
}
inline void TItemTable::_internal_set_shop_buy_price(int64_t value) {
  
  _impl_.shop_buy_price_ = value;
}
inline void TItemTable::set_shop_buy_price(int64_t value) {
  _internal_set_shop_buy_price(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.shop_buy_price)
}

// repeated .network.TItemLimit limits = 14;
inline int TItemTable::_internal_limits_size() const {
  return _impl_.limits_.size();
}
inline int TItemTable::limits_size() const {
  return _internal_limits_size();
}
inline void TItemTable::clear_limits() {
  _impl_.limits_.Clear();
}
inline ::network::TItemLimit* TItemTable::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:network.TItemTable.limits)
  return _impl_.limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemLimit >*
TItemTable::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemTable.limits)
  return &_impl_.limits_;
}
inline const ::network::TItemLimit& TItemTable::_internal_limits(int index) const {
  return _impl_.limits_.Get(index);
}
inline const ::network::TItemLimit& TItemTable::limits(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemTable.limits)
  return _internal_limits(index);
}
inline ::network::TItemLimit* TItemTable::_internal_add_limits() {
  return _impl_.limits_.Add();
}
inline ::network::TItemLimit* TItemTable::add_limits() {
  ::network::TItemLimit* _add = _internal_add_limits();
  // @@protoc_insertion_point(field_add:network.TItemTable.limits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemLimit >&
TItemTable::limits() const {
  // @@protoc_insertion_point(field_list:network.TItemTable.limits)
  return _impl_.limits_;
}

// repeated .network.TItemApply applies = 15;
inline int TItemTable::_internal_applies_size() const {
  return _impl_.applies_.size();
}
inline int TItemTable::applies_size() const {
  return _internal_applies_size();
}
inline void TItemTable::clear_applies() {
  _impl_.applies_.Clear();
}
inline ::network::TItemApply* TItemTable::mutable_applies(int index) {
  // @@protoc_insertion_point(field_mutable:network.TItemTable.applies)
  return _impl_.applies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemApply >*
TItemTable::mutable_applies() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemTable.applies)
  return &_impl_.applies_;
}
inline const ::network::TItemApply& TItemTable::_internal_applies(int index) const {
  return _impl_.applies_.Get(index);
}
inline const ::network::TItemApply& TItemTable::applies(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemTable.applies)
  return _internal_applies(index);
}
inline ::network::TItemApply* TItemTable::_internal_add_applies() {
  return _impl_.applies_.Add();
}
inline ::network::TItemApply* TItemTable::add_applies() {
  ::network::TItemApply* _add = _internal_add_applies();
  // @@protoc_insertion_point(field_add:network.TItemTable.applies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemApply >&
TItemTable::applies() const {
  // @@protoc_insertion_point(field_list:network.TItemTable.applies)
  return _impl_.applies_;
}

// repeated int32 values = 16;
inline int TItemTable::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int TItemTable::values_size() const {
  return _internal_values_size();
}
inline void TItemTable::clear_values() {
  _impl_.values_.Clear();
}
inline int32_t TItemTable::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline int32_t TItemTable::values(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemTable.values)
  return _internal_values(index);
}
inline void TItemTable::set_values(int index, int32_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TItemTable.values)
}
inline void TItemTable::_internal_add_values(int32_t value) {
  _impl_.values_.Add(value);
}
inline void TItemTable::add_values(int32_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:network.TItemTable.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemTable::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemTable::values() const {
  // @@protoc_insertion_point(field_list:network.TItemTable.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemTable::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemTable.values)
  return _internal_mutable_values();
}

// repeated int32 sockets = 17;
inline int TItemTable::_internal_sockets_size() const {
  return _impl_.sockets_.size();
}
inline int TItemTable::sockets_size() const {
  return _internal_sockets_size();
}
inline void TItemTable::clear_sockets() {
  _impl_.sockets_.Clear();
}
inline int32_t TItemTable::_internal_sockets(int index) const {
  return _impl_.sockets_.Get(index);
}
inline int32_t TItemTable::sockets(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemTable.sockets)
  return _internal_sockets(index);
}
inline void TItemTable::set_sockets(int index, int32_t value) {
  _impl_.sockets_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TItemTable.sockets)
}
inline void TItemTable::_internal_add_sockets(int32_t value) {
  _impl_.sockets_.Add(value);
}
inline void TItemTable::add_sockets(int32_t value) {
  _internal_add_sockets(value);
  // @@protoc_insertion_point(field_add:network.TItemTable.sockets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemTable::_internal_sockets() const {
  return _impl_.sockets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemTable::sockets() const {
  // @@protoc_insertion_point(field_list:network.TItemTable.sockets)
  return _internal_sockets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemTable::_internal_mutable_sockets() {
  return &_impl_.sockets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemTable::mutable_sockets() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemTable.sockets)
  return _internal_mutable_sockets();
}

// uint32 refined_vnum = 18;
inline void TItemTable::clear_refined_vnum() {
  _impl_.refined_vnum_ = 0u;
}
inline uint32_t TItemTable::_internal_refined_vnum() const {
  return _impl_.refined_vnum_;
}
inline uint32_t TItemTable::refined_vnum() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.refined_vnum)
  return _internal_refined_vnum();
}
inline void TItemTable::_internal_set_refined_vnum(uint32_t value) {
  
  _impl_.refined_vnum_ = value;
}
inline void TItemTable::set_refined_vnum(uint32_t value) {
  _internal_set_refined_vnum(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.refined_vnum)
}

// uint32 refine_set = 19;
inline void TItemTable::clear_refine_set() {
  _impl_.refine_set_ = 0u;
}
inline uint32_t TItemTable::_internal_refine_set() const {
  return _impl_.refine_set_;
}
inline uint32_t TItemTable::refine_set() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.refine_set)
  return _internal_refine_set();
}
inline void TItemTable::_internal_set_refine_set(uint32_t value) {
  
  _impl_.refine_set_ = value;
}
inline void TItemTable::set_refine_set(uint32_t value) {
  _internal_set_refine_set(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.refine_set)
}

// uint32 alter_to_magic_item_pct = 20;
inline void TItemTable::clear_alter_to_magic_item_pct() {
  _impl_.alter_to_magic_item_pct_ = 0u;
}
inline uint32_t TItemTable::_internal_alter_to_magic_item_pct() const {
  return _impl_.alter_to_magic_item_pct_;
}
inline uint32_t TItemTable::alter_to_magic_item_pct() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.alter_to_magic_item_pct)
  return _internal_alter_to_magic_item_pct();
}
inline void TItemTable::_internal_set_alter_to_magic_item_pct(uint32_t value) {
  
  _impl_.alter_to_magic_item_pct_ = value;
}
inline void TItemTable::set_alter_to_magic_item_pct(uint32_t value) {
  _internal_set_alter_to_magic_item_pct(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.alter_to_magic_item_pct)
}

// uint32 specular = 21;
inline void TItemTable::clear_specular() {
  _impl_.specular_ = 0u;
}
inline uint32_t TItemTable::_internal_specular() const {
  return _impl_.specular_;
}
inline uint32_t TItemTable::specular() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.specular)
  return _internal_specular();
}
inline void TItemTable::_internal_set_specular(uint32_t value) {
  
  _impl_.specular_ = value;
}
inline void TItemTable::set_specular(uint32_t value) {
  _internal_set_specular(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.specular)
}

// uint32 gain_socket_pct = 22;
inline void TItemTable::clear_gain_socket_pct() {
  _impl_.gain_socket_pct_ = 0u;
}
inline uint32_t TItemTable::_internal_gain_socket_pct() const {
  return _impl_.gain_socket_pct_;
}
inline uint32_t TItemTable::gain_socket_pct() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.gain_socket_pct)
  return _internal_gain_socket_pct();
}
inline void TItemTable::_internal_set_gain_socket_pct(uint32_t value) {
  
  _impl_.gain_socket_pct_ = value;
}
inline void TItemTable::set_gain_socket_pct(uint32_t value) {
  _internal_set_gain_socket_pct(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.gain_socket_pct)
}

// sint32 addon_type = 23;
inline void TItemTable::clear_addon_type() {
  _impl_.addon_type_ = 0;
}
inline int32_t TItemTable::_internal_addon_type() const {
  return _impl_.addon_type_;
}
inline int32_t TItemTable::addon_type() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.addon_type)
  return _internal_addon_type();
}
inline void TItemTable::_internal_set_addon_type(int32_t value) {
  
  _impl_.addon_type_ = value;
}
inline void TItemTable::set_addon_type(int32_t value) {
  _internal_set_addon_type(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.addon_type)
}

// sint32 limit_real_time_first_use_index = 24;
inline void TItemTable::clear_limit_real_time_first_use_index() {
  _impl_.limit_real_time_first_use_index_ = 0;
}
inline int32_t TItemTable::_internal_limit_real_time_first_use_index() const {
  return _impl_.limit_real_time_first_use_index_;
}
inline int32_t TItemTable::limit_real_time_first_use_index() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.limit_real_time_first_use_index)
  return _internal_limit_real_time_first_use_index();
}
inline void TItemTable::_internal_set_limit_real_time_first_use_index(int32_t value) {
  
  _impl_.limit_real_time_first_use_index_ = value;
}
inline void TItemTable::set_limit_real_time_first_use_index(int32_t value) {
  _internal_set_limit_real_time_first_use_index(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.limit_real_time_first_use_index)
}

// sint32 limit_timer_based_on_wear_index = 25;
inline void TItemTable::clear_limit_timer_based_on_wear_index() {
  _impl_.limit_timer_based_on_wear_index_ = 0;
}
inline int32_t TItemTable::_internal_limit_timer_based_on_wear_index() const {
  return _impl_.limit_timer_based_on_wear_index_;
}
inline int32_t TItemTable::limit_timer_based_on_wear_index() const {
  // @@protoc_insertion_point(field_get:network.TItemTable.limit_timer_based_on_wear_index)
  return _internal_limit_timer_based_on_wear_index();
}
inline void TItemTable::_internal_set_limit_timer_based_on_wear_index(int32_t value) {
  
  _impl_.limit_timer_based_on_wear_index_ = value;
}
inline void TItemTable::set_limit_timer_based_on_wear_index(int32_t value) {
  _internal_set_limit_timer_based_on_wear_index(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.limit_timer_based_on_wear_index)
}

// repeated bytes locale_name = 26;
inline int TItemTable::_internal_locale_name_size() const {
  return _impl_.locale_name_.size();
}
inline int TItemTable::locale_name_size() const {
  return _internal_locale_name_size();
}
inline void TItemTable::clear_locale_name() {
  _impl_.locale_name_.Clear();
}
inline std::string* TItemTable::add_locale_name() {
  std::string* _s = _internal_add_locale_name();
  // @@protoc_insertion_point(field_add_mutable:network.TItemTable.locale_name)
  return _s;
}
inline const std::string& TItemTable::_internal_locale_name(int index) const {
  return _impl_.locale_name_.Get(index);
}
inline const std::string& TItemTable::locale_name(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemTable.locale_name)
  return _internal_locale_name(index);
}
inline std::string* TItemTable::mutable_locale_name(int index) {
  // @@protoc_insertion_point(field_mutable:network.TItemTable.locale_name)
  return _impl_.locale_name_.Mutable(index);
}
inline void TItemTable::set_locale_name(int index, const std::string& value) {
  _impl_.locale_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.TItemTable.locale_name)
}
inline void TItemTable::set_locale_name(int index, std::string&& value) {
  _impl_.locale_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.TItemTable.locale_name)
}
inline void TItemTable::set_locale_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.locale_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.TItemTable.locale_name)
}
inline void TItemTable::set_locale_name(int index, const void* value, size_t size) {
  _impl_.locale_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.TItemTable.locale_name)
}
inline std::string* TItemTable::_internal_add_locale_name() {
  return _impl_.locale_name_.Add();
}
inline void TItemTable::add_locale_name(const std::string& value) {
  _impl_.locale_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.TItemTable.locale_name)
}
inline void TItemTable::add_locale_name(std::string&& value) {
  _impl_.locale_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.TItemTable.locale_name)
}
inline void TItemTable::add_locale_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.locale_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.TItemTable.locale_name)
}
inline void TItemTable::add_locale_name(const void* value, size_t size) {
  _impl_.locale_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.TItemTable.locale_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TItemTable::locale_name() const {
  // @@protoc_insertion_point(field_list:network.TItemTable.locale_name)
  return _impl_.locale_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TItemTable::mutable_locale_name() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemTable.locale_name)
  return &_impl_.locale_name_;
}

// -------------------------------------------------------------------

// TRepeatedItemTable

// repeated .network.TItemTable data = 1;
inline int TRepeatedItemTable::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int TRepeatedItemTable::data_size() const {
  return _internal_data_size();
}
inline void TRepeatedItemTable::clear_data() {
  _impl_.data_.Clear();
}
inline ::network::TItemTable* TRepeatedItemTable::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:network.TRepeatedItemTable.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >*
TRepeatedItemTable::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:network.TRepeatedItemTable.data)
  return &_impl_.data_;
}
inline const ::network::TItemTable& TRepeatedItemTable::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::network::TItemTable& TRepeatedItemTable::data(int index) const {
  // @@protoc_insertion_point(field_get:network.TRepeatedItemTable.data)
  return _internal_data(index);
}
inline ::network::TItemTable* TRepeatedItemTable::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::network::TItemTable* TRepeatedItemTable::add_data() {
  ::network::TItemTable* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:network.TRepeatedItemTable.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemTable >&
TRepeatedItemTable::data() const {
  // @@protoc_insertion_point(field_list:network.TRepeatedItemTable.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// TShopTable

// uint32 vnum = 1;
inline void TShopTable::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TShopTable::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TShopTable::vnum() const {
  // @@protoc_insertion_point(field_get:network.TShopTable.vnum)
  return _internal_vnum();
}
inline void TShopTable::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TShopTable::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TShopTable.vnum)
}

// uint32 npc_vnum = 2;
inline void TShopTable::clear_npc_vnum() {
  _impl_.npc_vnum_ = 0u;
}
inline uint32_t TShopTable::_internal_npc_vnum() const {
  return _impl_.npc_vnum_;
}
inline uint32_t TShopTable::npc_vnum() const {
  // @@protoc_insertion_point(field_get:network.TShopTable.npc_vnum)
  return _internal_npc_vnum();
}
inline void TShopTable::_internal_set_npc_vnum(uint32_t value) {
  
  _impl_.npc_vnum_ = value;
}
inline void TShopTable::set_npc_vnum(uint32_t value) {
  _internal_set_npc_vnum(value);
  // @@protoc_insertion_point(field_set:network.TShopTable.npc_vnum)
}

// uint32 item_count = 3;
inline void TShopTable::clear_item_count() {
  _impl_.item_count_ = 0u;
}
inline uint32_t TShopTable::_internal_item_count() const {
  return _impl_.item_count_;
}
inline uint32_t TShopTable::item_count() const {
  // @@protoc_insertion_point(field_get:network.TShopTable.item_count)
  return _internal_item_count();
}
inline void TShopTable::_internal_set_item_count(uint32_t value) {
  
  _impl_.item_count_ = value;
}
inline void TShopTable::set_item_count(uint32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:network.TShopTable.item_count)
}

// repeated .network.TShopItemTable items = 4;
inline int TShopTable::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int TShopTable::items_size() const {
  return _internal_items_size();
}
inline ::network::TShopItemTable* TShopTable::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.TShopTable.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
TShopTable::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.TShopTable.items)
  return &_impl_.items_;
}
inline const ::network::TShopItemTable& TShopTable::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TShopItemTable& TShopTable::items(int index) const {
  // @@protoc_insertion_point(field_get:network.TShopTable.items)
  return _internal_items(index);
}
inline ::network::TShopItemTable* TShopTable::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TShopItemTable* TShopTable::add_items() {
  ::network::TShopItemTable* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.TShopTable.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
TShopTable::items() const {
  // @@protoc_insertion_point(field_list:network.TShopTable.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// TDataAuctionSearch_ItemType

// uint32 type = 1;
inline void TDataAuctionSearch_ItemType::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TDataAuctionSearch_ItemType::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TDataAuctionSearch_ItemType::type() const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.ItemType.type)
  return _internal_type();
}
inline void TDataAuctionSearch_ItemType::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TDataAuctionSearch_ItemType::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TDataAuctionSearch.ItemType.type)
}

// repeated uint32 sub_types = 2;
inline int TDataAuctionSearch_ItemType::_internal_sub_types_size() const {
  return _impl_.sub_types_.size();
}
inline int TDataAuctionSearch_ItemType::sub_types_size() const {
  return _internal_sub_types_size();
}
inline void TDataAuctionSearch_ItemType::clear_sub_types() {
  _impl_.sub_types_.Clear();
}
inline uint32_t TDataAuctionSearch_ItemType::_internal_sub_types(int index) const {
  return _impl_.sub_types_.Get(index);
}
inline uint32_t TDataAuctionSearch_ItemType::sub_types(int index) const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.ItemType.sub_types)
  return _internal_sub_types(index);
}
inline void TDataAuctionSearch_ItemType::set_sub_types(int index, uint32_t value) {
  _impl_.sub_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TDataAuctionSearch.ItemType.sub_types)
}
inline void TDataAuctionSearch_ItemType::_internal_add_sub_types(uint32_t value) {
  _impl_.sub_types_.Add(value);
}
inline void TDataAuctionSearch_ItemType::add_sub_types(uint32_t value) {
  _internal_add_sub_types(value);
  // @@protoc_insertion_point(field_add:network.TDataAuctionSearch.ItemType.sub_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TDataAuctionSearch_ItemType::_internal_sub_types() const {
  return _impl_.sub_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TDataAuctionSearch_ItemType::sub_types() const {
  // @@protoc_insertion_point(field_list:network.TDataAuctionSearch.ItemType.sub_types)
  return _internal_sub_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TDataAuctionSearch_ItemType::_internal_mutable_sub_types() {
  return &_impl_.sub_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TDataAuctionSearch_ItemType::mutable_sub_types() {
  // @@protoc_insertion_point(field_mutable_list:network.TDataAuctionSearch.ItemType.sub_types)
  return _internal_mutable_sub_types();
}

// -------------------------------------------------------------------

// TDataAuctionSearch

// bytes search_text = 1;
inline void TDataAuctionSearch::clear_search_text() {
  _impl_.search_text_.ClearToEmpty();
}
inline const std::string& TDataAuctionSearch::search_text() const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.search_text)
  return _internal_search_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDataAuctionSearch::set_search_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.search_text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TDataAuctionSearch.search_text)
}
inline std::string* TDataAuctionSearch::mutable_search_text() {
  std::string* _s = _internal_mutable_search_text();
  // @@protoc_insertion_point(field_mutable:network.TDataAuctionSearch.search_text)
  return _s;
}
inline const std::string& TDataAuctionSearch::_internal_search_text() const {
  return _impl_.search_text_.Get();
}
inline void TDataAuctionSearch::_internal_set_search_text(const std::string& value) {
  
  _impl_.search_text_.Set(value, GetArenaForAllocation());
}
inline std::string* TDataAuctionSearch::_internal_mutable_search_text() {
  
  return _impl_.search_text_.Mutable(GetArenaForAllocation());
}
inline std::string* TDataAuctionSearch::release_search_text() {
  // @@protoc_insertion_point(field_release:network.TDataAuctionSearch.search_text)
  return _impl_.search_text_.Release();
}
inline void TDataAuctionSearch::set_allocated_search_text(std::string* search_text) {
  if (search_text != nullptr) {
    
  } else {
    
  }
  _impl_.search_text_.SetAllocated(search_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_text_.IsDefault()) {
    _impl_.search_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TDataAuctionSearch.search_text)
}

// repeated .network.TDataAuctionSearch.ItemType types = 2;
inline int TDataAuctionSearch::_internal_types_size() const {
  return _impl_.types_.size();
}
inline int TDataAuctionSearch::types_size() const {
  return _internal_types_size();
}
inline void TDataAuctionSearch::clear_types() {
  _impl_.types_.Clear();
}
inline ::network::TDataAuctionSearch_ItemType* TDataAuctionSearch::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:network.TDataAuctionSearch.types)
  return _impl_.types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TDataAuctionSearch_ItemType >*
TDataAuctionSearch::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:network.TDataAuctionSearch.types)
  return &_impl_.types_;
}
inline const ::network::TDataAuctionSearch_ItemType& TDataAuctionSearch::_internal_types(int index) const {
  return _impl_.types_.Get(index);
}
inline const ::network::TDataAuctionSearch_ItemType& TDataAuctionSearch::types(int index) const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.types)
  return _internal_types(index);
}
inline ::network::TDataAuctionSearch_ItemType* TDataAuctionSearch::_internal_add_types() {
  return _impl_.types_.Add();
}
inline ::network::TDataAuctionSearch_ItemType* TDataAuctionSearch::add_types() {
  ::network::TDataAuctionSearch_ItemType* _add = _internal_add_types();
  // @@protoc_insertion_point(field_add:network.TDataAuctionSearch.types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TDataAuctionSearch_ItemType >&
TDataAuctionSearch::types() const {
  // @@protoc_insertion_point(field_list:network.TDataAuctionSearch.types)
  return _impl_.types_;
}

// sint32 socket0 = 3;
inline void TDataAuctionSearch::clear_socket0() {
  _impl_.socket0_ = 0;
}
inline int32_t TDataAuctionSearch::_internal_socket0() const {
  return _impl_.socket0_;
}
inline int32_t TDataAuctionSearch::socket0() const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.socket0)
  return _internal_socket0();
}
inline void TDataAuctionSearch::_internal_set_socket0(int32_t value) {
  
  _impl_.socket0_ = value;
}
inline void TDataAuctionSearch::set_socket0(int32_t value) {
  _internal_set_socket0(value);
  // @@protoc_insertion_point(field_set:network.TDataAuctionSearch.socket0)
}

// sint32 value0 = 4;
inline void TDataAuctionSearch::clear_value0() {
  _impl_.value0_ = 0;
}
inline int32_t TDataAuctionSearch::_internal_value0() const {
  return _impl_.value0_;
}
inline int32_t TDataAuctionSearch::value0() const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.value0)
  return _internal_value0();
}
inline void TDataAuctionSearch::_internal_set_value0(int32_t value) {
  
  _impl_.value0_ = value;
}
inline void TDataAuctionSearch::set_value0(int32_t value) {
  _internal_set_value0(value);
  // @@protoc_insertion_point(field_set:network.TDataAuctionSearch.value0)
}

// uint32 include_anti_flag = 5;
inline void TDataAuctionSearch::clear_include_anti_flag() {
  _impl_.include_anti_flag_ = 0u;
}
inline uint32_t TDataAuctionSearch::_internal_include_anti_flag() const {
  return _impl_.include_anti_flag_;
}
inline uint32_t TDataAuctionSearch::include_anti_flag() const {
  // @@protoc_insertion_point(field_get:network.TDataAuctionSearch.include_anti_flag)
  return _internal_include_anti_flag();
}
inline void TDataAuctionSearch::_internal_set_include_anti_flag(uint32_t value) {
  
  _impl_.include_anti_flag_ = value;
}
inline void TDataAuctionSearch::set_include_anti_flag(uint32_t value) {
  _internal_set_include_anti_flag(value);
  // @@protoc_insertion_point(field_set:network.TDataAuctionSearch.include_anti_flag)
}

// -------------------------------------------------------------------

// TExtendedDataAuctionSearch

// .network.TDataAuctionSearch basic_data = 1;
inline bool TExtendedDataAuctionSearch::_internal_has_basic_data() const {
  return this != internal_default_instance() && _impl_.basic_data_ != nullptr;
}
inline bool TExtendedDataAuctionSearch::has_basic_data() const {
  return _internal_has_basic_data();
}
inline void TExtendedDataAuctionSearch::clear_basic_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_data_ != nullptr) {
    delete _impl_.basic_data_;
  }
  _impl_.basic_data_ = nullptr;
}
inline const ::network::TDataAuctionSearch& TExtendedDataAuctionSearch::_internal_basic_data() const {
  const ::network::TDataAuctionSearch* p = _impl_.basic_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TDataAuctionSearch&>(
      ::network::_TDataAuctionSearch_default_instance_);
}
inline const ::network::TDataAuctionSearch& TExtendedDataAuctionSearch::basic_data() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.basic_data)
  return _internal_basic_data();
}
inline void TExtendedDataAuctionSearch::unsafe_arena_set_allocated_basic_data(
    ::network::TDataAuctionSearch* basic_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_data_);
  }
  _impl_.basic_data_ = basic_data;
  if (basic_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.TExtendedDataAuctionSearch.basic_data)
}
inline ::network::TDataAuctionSearch* TExtendedDataAuctionSearch::release_basic_data() {
  
  ::network::TDataAuctionSearch* temp = _impl_.basic_data_;
  _impl_.basic_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TDataAuctionSearch* TExtendedDataAuctionSearch::unsafe_arena_release_basic_data() {
  // @@protoc_insertion_point(field_release:network.TExtendedDataAuctionSearch.basic_data)
  
  ::network::TDataAuctionSearch* temp = _impl_.basic_data_;
  _impl_.basic_data_ = nullptr;
  return temp;
}
inline ::network::TDataAuctionSearch* TExtendedDataAuctionSearch::_internal_mutable_basic_data() {
  
  if (_impl_.basic_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TDataAuctionSearch>(GetArenaForAllocation());
    _impl_.basic_data_ = p;
  }
  return _impl_.basic_data_;
}
inline ::network::TDataAuctionSearch* TExtendedDataAuctionSearch::mutable_basic_data() {
  ::network::TDataAuctionSearch* _msg = _internal_mutable_basic_data();
  // @@protoc_insertion_point(field_mutable:network.TExtendedDataAuctionSearch.basic_data)
  return _msg;
}
inline void TExtendedDataAuctionSearch::set_allocated_basic_data(::network::TDataAuctionSearch* basic_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basic_data_;
  }
  if (basic_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basic_data);
    if (message_arena != submessage_arena) {
      basic_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basic_data_ = basic_data;
  // @@protoc_insertion_point(field_set_allocated:network.TExtendedDataAuctionSearch.basic_data)
}

// uint32 search_type = 2;
inline void TExtendedDataAuctionSearch::clear_search_type() {
  _impl_.search_type_ = 0u;
}
inline uint32_t TExtendedDataAuctionSearch::_internal_search_type() const {
  return _impl_.search_type_;
}
inline uint32_t TExtendedDataAuctionSearch::search_type() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.search_type)
  return _internal_search_type();
}
inline void TExtendedDataAuctionSearch::_internal_set_search_type(uint32_t value) {
  
  _impl_.search_type_ = value;
}
inline void TExtendedDataAuctionSearch::set_search_type(uint32_t value) {
  _internal_set_search_type(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.search_type)
}

// uint32 level_min = 3;
inline void TExtendedDataAuctionSearch::clear_level_min() {
  _impl_.level_min_ = 0u;
}
inline uint32_t TExtendedDataAuctionSearch::_internal_level_min() const {
  return _impl_.level_min_;
}
inline uint32_t TExtendedDataAuctionSearch::level_min() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.level_min)
  return _internal_level_min();
}
inline void TExtendedDataAuctionSearch::_internal_set_level_min(uint32_t value) {
  
  _impl_.level_min_ = value;
}
inline void TExtendedDataAuctionSearch::set_level_min(uint32_t value) {
  _internal_set_level_min(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.level_min)
}

// uint32 level_max = 4;
inline void TExtendedDataAuctionSearch::clear_level_max() {
  _impl_.level_max_ = 0u;
}
inline uint32_t TExtendedDataAuctionSearch::_internal_level_max() const {
  return _impl_.level_max_;
}
inline uint32_t TExtendedDataAuctionSearch::level_max() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.level_max)
  return _internal_level_max();
}
inline void TExtendedDataAuctionSearch::_internal_set_level_max(uint32_t value) {
  
  _impl_.level_max_ = value;
}
inline void TExtendedDataAuctionSearch::set_level_max(uint32_t value) {
  _internal_set_level_max(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.level_max)
}

// uint64 price_min = 5;
inline void TExtendedDataAuctionSearch::clear_price_min() {
  _impl_.price_min_ = uint64_t{0u};
}
inline uint64_t TExtendedDataAuctionSearch::_internal_price_min() const {
  return _impl_.price_min_;
}
inline uint64_t TExtendedDataAuctionSearch::price_min() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.price_min)
  return _internal_price_min();
}
inline void TExtendedDataAuctionSearch::_internal_set_price_min(uint64_t value) {
  
  _impl_.price_min_ = value;
}
inline void TExtendedDataAuctionSearch::set_price_min(uint64_t value) {
  _internal_set_price_min(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.price_min)
}

// uint64 price_max = 6;
inline void TExtendedDataAuctionSearch::clear_price_max() {
  _impl_.price_max_ = uint64_t{0u};
}
inline uint64_t TExtendedDataAuctionSearch::_internal_price_max() const {
  return _impl_.price_max_;
}
inline uint64_t TExtendedDataAuctionSearch::price_max() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.price_max)
  return _internal_price_max();
}
inline void TExtendedDataAuctionSearch::_internal_set_price_max(uint64_t value) {
  
  _impl_.price_max_ = value;
}
inline void TExtendedDataAuctionSearch::set_price_max(uint64_t value) {
  _internal_set_price_max(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.price_max)
}

// bool is_only_auction_item = 7;
inline void TExtendedDataAuctionSearch::clear_is_only_auction_item() {
  _impl_.is_only_auction_item_ = false;
}
inline bool TExtendedDataAuctionSearch::_internal_is_only_auction_item() const {
  return _impl_.is_only_auction_item_;
}
inline bool TExtendedDataAuctionSearch::is_only_auction_item() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.is_only_auction_item)
  return _internal_is_only_auction_item();
}
inline void TExtendedDataAuctionSearch::_internal_set_is_only_auction_item(bool value) {
  
  _impl_.is_only_auction_item_ = value;
}
inline void TExtendedDataAuctionSearch::set_is_only_auction_item(bool value) {
  _internal_set_is_only_auction_item(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.is_only_auction_item)
}

// bool is_only_self_item = 8;
inline void TExtendedDataAuctionSearch::clear_is_only_self_item() {
  _impl_.is_only_self_item_ = false;
}
inline bool TExtendedDataAuctionSearch::_internal_is_only_self_item() const {
  return _impl_.is_only_self_item_;
}
inline bool TExtendedDataAuctionSearch::is_only_self_item() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.is_only_self_item)
  return _internal_is_only_self_item();
}
inline void TExtendedDataAuctionSearch::_internal_set_is_only_self_item(bool value) {
  
  _impl_.is_only_self_item_ = value;
}
inline void TExtendedDataAuctionSearch::set_is_only_self_item(bool value) {
  _internal_set_is_only_self_item(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.is_only_self_item)
}

// bool is_single_price_order = 9;
inline void TExtendedDataAuctionSearch::clear_is_single_price_order() {
  _impl_.is_single_price_order_ = false;
}
inline bool TExtendedDataAuctionSearch::_internal_is_single_price_order() const {
  return _impl_.is_single_price_order_;
}
inline bool TExtendedDataAuctionSearch::is_single_price_order() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.is_single_price_order)
  return _internal_is_single_price_order();
}
inline void TExtendedDataAuctionSearch::_internal_set_is_single_price_order(bool value) {
  
  _impl_.is_single_price_order_ = value;
}
inline void TExtendedDataAuctionSearch::set_is_single_price_order(bool value) {
  _internal_set_is_single_price_order(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.is_single_price_order)
}

// uint32 sort_order1 = 10;
inline void TExtendedDataAuctionSearch::clear_sort_order1() {
  _impl_.sort_order1_ = 0u;
}
inline uint32_t TExtendedDataAuctionSearch::_internal_sort_order1() const {
  return _impl_.sort_order1_;
}
inline uint32_t TExtendedDataAuctionSearch::sort_order1() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.sort_order1)
  return _internal_sort_order1();
}
inline void TExtendedDataAuctionSearch::_internal_set_sort_order1(uint32_t value) {
  
  _impl_.sort_order1_ = value;
}
inline void TExtendedDataAuctionSearch::set_sort_order1(uint32_t value) {
  _internal_set_sort_order1(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.sort_order1)
}

// bool sort_order1_reversed = 11;
inline void TExtendedDataAuctionSearch::clear_sort_order1_reversed() {
  _impl_.sort_order1_reversed_ = false;
}
inline bool TExtendedDataAuctionSearch::_internal_sort_order1_reversed() const {
  return _impl_.sort_order1_reversed_;
}
inline bool TExtendedDataAuctionSearch::sort_order1_reversed() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.sort_order1_reversed)
  return _internal_sort_order1_reversed();
}
inline void TExtendedDataAuctionSearch::_internal_set_sort_order1_reversed(bool value) {
  
  _impl_.sort_order1_reversed_ = value;
}
inline void TExtendedDataAuctionSearch::set_sort_order1_reversed(bool value) {
  _internal_set_sort_order1_reversed(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.sort_order1_reversed)
}

// uint32 sort_order2 = 12;
inline void TExtendedDataAuctionSearch::clear_sort_order2() {
  _impl_.sort_order2_ = 0u;
}
inline uint32_t TExtendedDataAuctionSearch::_internal_sort_order2() const {
  return _impl_.sort_order2_;
}
inline uint32_t TExtendedDataAuctionSearch::sort_order2() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.sort_order2)
  return _internal_sort_order2();
}
inline void TExtendedDataAuctionSearch::_internal_set_sort_order2(uint32_t value) {
  
  _impl_.sort_order2_ = value;
}
inline void TExtendedDataAuctionSearch::set_sort_order2(uint32_t value) {
  _internal_set_sort_order2(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.sort_order2)
}

// bool sort_order2_reversed = 13;
inline void TExtendedDataAuctionSearch::clear_sort_order2_reversed() {
  _impl_.sort_order2_reversed_ = false;
}
inline bool TExtendedDataAuctionSearch::_internal_sort_order2_reversed() const {
  return _impl_.sort_order2_reversed_;
}
inline bool TExtendedDataAuctionSearch::sort_order2_reversed() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.sort_order2_reversed)
  return _internal_sort_order2_reversed();
}
inline void TExtendedDataAuctionSearch::_internal_set_sort_order2_reversed(bool value) {
  
  _impl_.sort_order2_reversed_ = value;
}
inline void TExtendedDataAuctionSearch::set_sort_order2_reversed(bool value) {
  _internal_set_sort_order2_reversed(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.sort_order2_reversed)
}

// uint32 sort_order3 = 14;
inline void TExtendedDataAuctionSearch::clear_sort_order3() {
  _impl_.sort_order3_ = 0u;
}
inline uint32_t TExtendedDataAuctionSearch::_internal_sort_order3() const {
  return _impl_.sort_order3_;
}
inline uint32_t TExtendedDataAuctionSearch::sort_order3() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.sort_order3)
  return _internal_sort_order3();
}
inline void TExtendedDataAuctionSearch::_internal_set_sort_order3(uint32_t value) {
  
  _impl_.sort_order3_ = value;
}
inline void TExtendedDataAuctionSearch::set_sort_order3(uint32_t value) {
  _internal_set_sort_order3(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.sort_order3)
}

// bool sort_order3_reversed = 15;
inline void TExtendedDataAuctionSearch::clear_sort_order3_reversed() {
  _impl_.sort_order3_reversed_ = false;
}
inline bool TExtendedDataAuctionSearch::_internal_sort_order3_reversed() const {
  return _impl_.sort_order3_reversed_;
}
inline bool TExtendedDataAuctionSearch::sort_order3_reversed() const {
  // @@protoc_insertion_point(field_get:network.TExtendedDataAuctionSearch.sort_order3_reversed)
  return _internal_sort_order3_reversed();
}
inline void TExtendedDataAuctionSearch::_internal_set_sort_order3_reversed(bool value) {
  
  _impl_.sort_order3_reversed_ = value;
}
inline void TExtendedDataAuctionSearch::set_sort_order3_reversed(bool value) {
  _internal_set_sort_order3_reversed(value);
  // @@protoc_insertion_point(field_set:network.TExtendedDataAuctionSearch.sort_order3_reversed)
}

// -------------------------------------------------------------------

// TAuctionShopHistoryElement

// uint32 vnum = 1;
inline void TAuctionShopHistoryElement::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TAuctionShopHistoryElement::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TAuctionShopHistoryElement::vnum() const {
  // @@protoc_insertion_point(field_get:network.TAuctionShopHistoryElement.vnum)
  return _internal_vnum();
}
inline void TAuctionShopHistoryElement::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TAuctionShopHistoryElement::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TAuctionShopHistoryElement.vnum)
}

// uint64 price = 2;
inline void TAuctionShopHistoryElement::clear_price() {
  _impl_.price_ = uint64_t{0u};
}
inline uint64_t TAuctionShopHistoryElement::_internal_price() const {
  return _impl_.price_;
}
inline uint64_t TAuctionShopHistoryElement::price() const {
  // @@protoc_insertion_point(field_get:network.TAuctionShopHistoryElement.price)
  return _internal_price();
}
inline void TAuctionShopHistoryElement::_internal_set_price(uint64_t value) {
  
  _impl_.price_ = value;
}
inline void TAuctionShopHistoryElement::set_price(uint64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TAuctionShopHistoryElement.price)
}

// bytes buyer = 3;
inline void TAuctionShopHistoryElement::clear_buyer() {
  _impl_.buyer_.ClearToEmpty();
}
inline const std::string& TAuctionShopHistoryElement::buyer() const {
  // @@protoc_insertion_point(field_get:network.TAuctionShopHistoryElement.buyer)
  return _internal_buyer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAuctionShopHistoryElement::set_buyer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buyer_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAuctionShopHistoryElement.buyer)
}
inline std::string* TAuctionShopHistoryElement::mutable_buyer() {
  std::string* _s = _internal_mutable_buyer();
  // @@protoc_insertion_point(field_mutable:network.TAuctionShopHistoryElement.buyer)
  return _s;
}
inline const std::string& TAuctionShopHistoryElement::_internal_buyer() const {
  return _impl_.buyer_.Get();
}
inline void TAuctionShopHistoryElement::_internal_set_buyer(const std::string& value) {
  
  _impl_.buyer_.Set(value, GetArenaForAllocation());
}
inline std::string* TAuctionShopHistoryElement::_internal_mutable_buyer() {
  
  return _impl_.buyer_.Mutable(GetArenaForAllocation());
}
inline std::string* TAuctionShopHistoryElement::release_buyer() {
  // @@protoc_insertion_point(field_release:network.TAuctionShopHistoryElement.buyer)
  return _impl_.buyer_.Release();
}
inline void TAuctionShopHistoryElement::set_allocated_buyer(std::string* buyer) {
  if (buyer != nullptr) {
    
  } else {
    
  }
  _impl_.buyer_.SetAllocated(buyer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buyer_.IsDefault()) {
    _impl_.buyer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAuctionShopHistoryElement.buyer)
}

// uint32 date = 4;
inline void TAuctionShopHistoryElement::clear_date() {
  _impl_.date_ = 0u;
}
inline uint32_t TAuctionShopHistoryElement::_internal_date() const {
  return _impl_.date_;
}
inline uint32_t TAuctionShopHistoryElement::date() const {
  // @@protoc_insertion_point(field_get:network.TAuctionShopHistoryElement.date)
  return _internal_date();
}
inline void TAuctionShopHistoryElement::_internal_set_date(uint32_t value) {
  
  _impl_.date_ = value;
}
inline void TAuctionShopHistoryElement::set_date(uint32_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:network.TAuctionShopHistoryElement.date)
}

// -------------------------------------------------------------------

// TSkillTable

// uint32 vnum = 1;
inline void TSkillTable::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TSkillTable::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TSkillTable::vnum() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.vnum)
  return _internal_vnum();
}
inline void TSkillTable::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TSkillTable::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.vnum)
}

// bytes name = 2;
inline void TSkillTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TSkillTable::name() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.name)
}
inline std::string* TSkillTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.name)
  return _s;
}
inline const std::string& TSkillTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TSkillTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_name() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.name)
  return _impl_.name_.Release();
}
inline void TSkillTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.name)
}

// uint32 type = 3;
inline void TSkillTable::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TSkillTable::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TSkillTable::type() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.type)
  return _internal_type();
}
inline void TSkillTable::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TSkillTable::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.type)
}

// uint32 max_level = 4;
inline void TSkillTable::clear_max_level() {
  _impl_.max_level_ = 0u;
}
inline uint32_t TSkillTable::_internal_max_level() const {
  return _impl_.max_level_;
}
inline uint32_t TSkillTable::max_level() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.max_level)
  return _internal_max_level();
}
inline void TSkillTable::_internal_set_max_level(uint32_t value) {
  
  _impl_.max_level_ = value;
}
inline void TSkillTable::set_max_level(uint32_t value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.max_level)
}

// uint32 splash_range = 5;
inline void TSkillTable::clear_splash_range() {
  _impl_.splash_range_ = 0u;
}
inline uint32_t TSkillTable::_internal_splash_range() const {
  return _impl_.splash_range_;
}
inline uint32_t TSkillTable::splash_range() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.splash_range)
  return _internal_splash_range();
}
inline void TSkillTable::_internal_set_splash_range(uint32_t value) {
  
  _impl_.splash_range_ = value;
}
inline void TSkillTable::set_splash_range(uint32_t value) {
  _internal_set_splash_range(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.splash_range)
}

// bytes point_on = 6;
inline void TSkillTable::clear_point_on() {
  _impl_.point_on_.ClearToEmpty();
}
inline const std::string& TSkillTable::point_on() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.point_on)
  return _internal_point_on();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_point_on(ArgT0&& arg0, ArgT... args) {
 
 _impl_.point_on_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.point_on)
}
inline std::string* TSkillTable::mutable_point_on() {
  std::string* _s = _internal_mutable_point_on();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.point_on)
  return _s;
}
inline const std::string& TSkillTable::_internal_point_on() const {
  return _impl_.point_on_.Get();
}
inline void TSkillTable::_internal_set_point_on(const std::string& value) {
  
  _impl_.point_on_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_point_on() {
  
  return _impl_.point_on_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_point_on() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.point_on)
  return _impl_.point_on_.Release();
}
inline void TSkillTable::set_allocated_point_on(std::string* point_on) {
  if (point_on != nullptr) {
    
  } else {
    
  }
  _impl_.point_on_.SetAllocated(point_on, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.point_on_.IsDefault()) {
    _impl_.point_on_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.point_on)
}

// bytes point_poly = 7;
inline void TSkillTable::clear_point_poly() {
  _impl_.point_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::point_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.point_poly)
  return _internal_point_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_point_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.point_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.point_poly)
}
inline std::string* TSkillTable::mutable_point_poly() {
  std::string* _s = _internal_mutable_point_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.point_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_point_poly() const {
  return _impl_.point_poly_.Get();
}
inline void TSkillTable::_internal_set_point_poly(const std::string& value) {
  
  _impl_.point_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_point_poly() {
  
  return _impl_.point_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_point_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.point_poly)
  return _impl_.point_poly_.Release();
}
inline void TSkillTable::set_allocated_point_poly(std::string* point_poly) {
  if (point_poly != nullptr) {
    
  } else {
    
  }
  _impl_.point_poly_.SetAllocated(point_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.point_poly_.IsDefault()) {
    _impl_.point_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.point_poly)
}

// bytes sp_cost_poly = 8;
inline void TSkillTable::clear_sp_cost_poly() {
  _impl_.sp_cost_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::sp_cost_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.sp_cost_poly)
  return _internal_sp_cost_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_sp_cost_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sp_cost_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.sp_cost_poly)
}
inline std::string* TSkillTable::mutable_sp_cost_poly() {
  std::string* _s = _internal_mutable_sp_cost_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.sp_cost_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_sp_cost_poly() const {
  return _impl_.sp_cost_poly_.Get();
}
inline void TSkillTable::_internal_set_sp_cost_poly(const std::string& value) {
  
  _impl_.sp_cost_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_sp_cost_poly() {
  
  return _impl_.sp_cost_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_sp_cost_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.sp_cost_poly)
  return _impl_.sp_cost_poly_.Release();
}
inline void TSkillTable::set_allocated_sp_cost_poly(std::string* sp_cost_poly) {
  if (sp_cost_poly != nullptr) {
    
  } else {
    
  }
  _impl_.sp_cost_poly_.SetAllocated(sp_cost_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sp_cost_poly_.IsDefault()) {
    _impl_.sp_cost_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.sp_cost_poly)
}

// bytes duration_poly = 9;
inline void TSkillTable::clear_duration_poly() {
  _impl_.duration_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::duration_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.duration_poly)
  return _internal_duration_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_duration_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.duration_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.duration_poly)
}
inline std::string* TSkillTable::mutable_duration_poly() {
  std::string* _s = _internal_mutable_duration_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.duration_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_duration_poly() const {
  return _impl_.duration_poly_.Get();
}
inline void TSkillTable::_internal_set_duration_poly(const std::string& value) {
  
  _impl_.duration_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_duration_poly() {
  
  return _impl_.duration_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_duration_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.duration_poly)
  return _impl_.duration_poly_.Release();
}
inline void TSkillTable::set_allocated_duration_poly(std::string* duration_poly) {
  if (duration_poly != nullptr) {
    
  } else {
    
  }
  _impl_.duration_poly_.SetAllocated(duration_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.duration_poly_.IsDefault()) {
    _impl_.duration_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.duration_poly)
}

// bytes duration_sp_cost_poly = 10;
inline void TSkillTable::clear_duration_sp_cost_poly() {
  _impl_.duration_sp_cost_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::duration_sp_cost_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.duration_sp_cost_poly)
  return _internal_duration_sp_cost_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_duration_sp_cost_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.duration_sp_cost_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.duration_sp_cost_poly)
}
inline std::string* TSkillTable::mutable_duration_sp_cost_poly() {
  std::string* _s = _internal_mutable_duration_sp_cost_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.duration_sp_cost_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_duration_sp_cost_poly() const {
  return _impl_.duration_sp_cost_poly_.Get();
}
inline void TSkillTable::_internal_set_duration_sp_cost_poly(const std::string& value) {
  
  _impl_.duration_sp_cost_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_duration_sp_cost_poly() {
  
  return _impl_.duration_sp_cost_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_duration_sp_cost_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.duration_sp_cost_poly)
  return _impl_.duration_sp_cost_poly_.Release();
}
inline void TSkillTable::set_allocated_duration_sp_cost_poly(std::string* duration_sp_cost_poly) {
  if (duration_sp_cost_poly != nullptr) {
    
  } else {
    
  }
  _impl_.duration_sp_cost_poly_.SetAllocated(duration_sp_cost_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.duration_sp_cost_poly_.IsDefault()) {
    _impl_.duration_sp_cost_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.duration_sp_cost_poly)
}

// bytes cooldown_poly = 11;
inline void TSkillTable::clear_cooldown_poly() {
  _impl_.cooldown_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::cooldown_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.cooldown_poly)
  return _internal_cooldown_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_cooldown_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cooldown_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.cooldown_poly)
}
inline std::string* TSkillTable::mutable_cooldown_poly() {
  std::string* _s = _internal_mutable_cooldown_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.cooldown_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_cooldown_poly() const {
  return _impl_.cooldown_poly_.Get();
}
inline void TSkillTable::_internal_set_cooldown_poly(const std::string& value) {
  
  _impl_.cooldown_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_cooldown_poly() {
  
  return _impl_.cooldown_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_cooldown_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.cooldown_poly)
  return _impl_.cooldown_poly_.Release();
}
inline void TSkillTable::set_allocated_cooldown_poly(std::string* cooldown_poly) {
  if (cooldown_poly != nullptr) {
    
  } else {
    
  }
  _impl_.cooldown_poly_.SetAllocated(cooldown_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cooldown_poly_.IsDefault()) {
    _impl_.cooldown_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.cooldown_poly)
}

// bytes master_bonus_poly = 12;
inline void TSkillTable::clear_master_bonus_poly() {
  _impl_.master_bonus_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::master_bonus_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.master_bonus_poly)
  return _internal_master_bonus_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_master_bonus_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.master_bonus_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.master_bonus_poly)
}
inline std::string* TSkillTable::mutable_master_bonus_poly() {
  std::string* _s = _internal_mutable_master_bonus_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.master_bonus_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_master_bonus_poly() const {
  return _impl_.master_bonus_poly_.Get();
}
inline void TSkillTable::_internal_set_master_bonus_poly(const std::string& value) {
  
  _impl_.master_bonus_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_master_bonus_poly() {
  
  return _impl_.master_bonus_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_master_bonus_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.master_bonus_poly)
  return _impl_.master_bonus_poly_.Release();
}
inline void TSkillTable::set_allocated_master_bonus_poly(std::string* master_bonus_poly) {
  if (master_bonus_poly != nullptr) {
    
  } else {
    
  }
  _impl_.master_bonus_poly_.SetAllocated(master_bonus_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.master_bonus_poly_.IsDefault()) {
    _impl_.master_bonus_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.master_bonus_poly)
}

// bytes grand_master_add_sp_cost_poly = 13;
inline void TSkillTable::clear_grand_master_add_sp_cost_poly() {
  _impl_.grand_master_add_sp_cost_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::grand_master_add_sp_cost_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.grand_master_add_sp_cost_poly)
  return _internal_grand_master_add_sp_cost_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_grand_master_add_sp_cost_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.grand_master_add_sp_cost_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.grand_master_add_sp_cost_poly)
}
inline std::string* TSkillTable::mutable_grand_master_add_sp_cost_poly() {
  std::string* _s = _internal_mutable_grand_master_add_sp_cost_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.grand_master_add_sp_cost_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_grand_master_add_sp_cost_poly() const {
  return _impl_.grand_master_add_sp_cost_poly_.Get();
}
inline void TSkillTable::_internal_set_grand_master_add_sp_cost_poly(const std::string& value) {
  
  _impl_.grand_master_add_sp_cost_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_grand_master_add_sp_cost_poly() {
  
  return _impl_.grand_master_add_sp_cost_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_grand_master_add_sp_cost_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.grand_master_add_sp_cost_poly)
  return _impl_.grand_master_add_sp_cost_poly_.Release();
}
inline void TSkillTable::set_allocated_grand_master_add_sp_cost_poly(std::string* grand_master_add_sp_cost_poly) {
  if (grand_master_add_sp_cost_poly != nullptr) {
    
  } else {
    
  }
  _impl_.grand_master_add_sp_cost_poly_.SetAllocated(grand_master_add_sp_cost_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.grand_master_add_sp_cost_poly_.IsDefault()) {
    _impl_.grand_master_add_sp_cost_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.grand_master_add_sp_cost_poly)
}

// uint32 flag = 14;
inline void TSkillTable::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t TSkillTable::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t TSkillTable::flag() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.flag)
  return _internal_flag();
}
inline void TSkillTable::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void TSkillTable::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.flag)
}

// uint32 affect_flag = 15;
inline void TSkillTable::clear_affect_flag() {
  _impl_.affect_flag_ = 0u;
}
inline uint32_t TSkillTable::_internal_affect_flag() const {
  return _impl_.affect_flag_;
}
inline uint32_t TSkillTable::affect_flag() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.affect_flag)
  return _internal_affect_flag();
}
inline void TSkillTable::_internal_set_affect_flag(uint32_t value) {
  
  _impl_.affect_flag_ = value;
}
inline void TSkillTable::set_affect_flag(uint32_t value) {
  _internal_set_affect_flag(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.affect_flag)
}

// uint32 affect_flag_legendary = 16;
inline void TSkillTable::clear_affect_flag_legendary() {
  _impl_.affect_flag_legendary_ = 0u;
}
inline uint32_t TSkillTable::_internal_affect_flag_legendary() const {
  return _impl_.affect_flag_legendary_;
}
inline uint32_t TSkillTable::affect_flag_legendary() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.affect_flag_legendary)
  return _internal_affect_flag_legendary();
}
inline void TSkillTable::_internal_set_affect_flag_legendary(uint32_t value) {
  
  _impl_.affect_flag_legendary_ = value;
}
inline void TSkillTable::set_affect_flag_legendary(uint32_t value) {
  _internal_set_affect_flag_legendary(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.affect_flag_legendary)
}

// bytes point_on2 = 17;
inline void TSkillTable::clear_point_on2() {
  _impl_.point_on2_.ClearToEmpty();
}
inline const std::string& TSkillTable::point_on2() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.point_on2)
  return _internal_point_on2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_point_on2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.point_on2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.point_on2)
}
inline std::string* TSkillTable::mutable_point_on2() {
  std::string* _s = _internal_mutable_point_on2();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.point_on2)
  return _s;
}
inline const std::string& TSkillTable::_internal_point_on2() const {
  return _impl_.point_on2_.Get();
}
inline void TSkillTable::_internal_set_point_on2(const std::string& value) {
  
  _impl_.point_on2_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_point_on2() {
  
  return _impl_.point_on2_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_point_on2() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.point_on2)
  return _impl_.point_on2_.Release();
}
inline void TSkillTable::set_allocated_point_on2(std::string* point_on2) {
  if (point_on2 != nullptr) {
    
  } else {
    
  }
  _impl_.point_on2_.SetAllocated(point_on2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.point_on2_.IsDefault()) {
    _impl_.point_on2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.point_on2)
}

// bytes point_poly2 = 18;
inline void TSkillTable::clear_point_poly2() {
  _impl_.point_poly2_.ClearToEmpty();
}
inline const std::string& TSkillTable::point_poly2() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.point_poly2)
  return _internal_point_poly2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_point_poly2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.point_poly2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.point_poly2)
}
inline std::string* TSkillTable::mutable_point_poly2() {
  std::string* _s = _internal_mutable_point_poly2();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.point_poly2)
  return _s;
}
inline const std::string& TSkillTable::_internal_point_poly2() const {
  return _impl_.point_poly2_.Get();
}
inline void TSkillTable::_internal_set_point_poly2(const std::string& value) {
  
  _impl_.point_poly2_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_point_poly2() {
  
  return _impl_.point_poly2_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_point_poly2() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.point_poly2)
  return _impl_.point_poly2_.Release();
}
inline void TSkillTable::set_allocated_point_poly2(std::string* point_poly2) {
  if (point_poly2 != nullptr) {
    
  } else {
    
  }
  _impl_.point_poly2_.SetAllocated(point_poly2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.point_poly2_.IsDefault()) {
    _impl_.point_poly2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.point_poly2)
}

// bytes duration_poly2 = 19;
inline void TSkillTable::clear_duration_poly2() {
  _impl_.duration_poly2_.ClearToEmpty();
}
inline const std::string& TSkillTable::duration_poly2() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.duration_poly2)
  return _internal_duration_poly2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_duration_poly2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.duration_poly2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.duration_poly2)
}
inline std::string* TSkillTable::mutable_duration_poly2() {
  std::string* _s = _internal_mutable_duration_poly2();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.duration_poly2)
  return _s;
}
inline const std::string& TSkillTable::_internal_duration_poly2() const {
  return _impl_.duration_poly2_.Get();
}
inline void TSkillTable::_internal_set_duration_poly2(const std::string& value) {
  
  _impl_.duration_poly2_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_duration_poly2() {
  
  return _impl_.duration_poly2_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_duration_poly2() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.duration_poly2)
  return _impl_.duration_poly2_.Release();
}
inline void TSkillTable::set_allocated_duration_poly2(std::string* duration_poly2) {
  if (duration_poly2 != nullptr) {
    
  } else {
    
  }
  _impl_.duration_poly2_.SetAllocated(duration_poly2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.duration_poly2_.IsDefault()) {
    _impl_.duration_poly2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.duration_poly2)
}

// uint32 affect_flag2 = 20;
inline void TSkillTable::clear_affect_flag2() {
  _impl_.affect_flag2_ = 0u;
}
inline uint32_t TSkillTable::_internal_affect_flag2() const {
  return _impl_.affect_flag2_;
}
inline uint32_t TSkillTable::affect_flag2() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.affect_flag2)
  return _internal_affect_flag2();
}
inline void TSkillTable::_internal_set_affect_flag2(uint32_t value) {
  
  _impl_.affect_flag2_ = value;
}
inline void TSkillTable::set_affect_flag2(uint32_t value) {
  _internal_set_affect_flag2(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.affect_flag2)
}

// uint32 affect_flag2_legendary = 21;
inline void TSkillTable::clear_affect_flag2_legendary() {
  _impl_.affect_flag2_legendary_ = 0u;
}
inline uint32_t TSkillTable::_internal_affect_flag2_legendary() const {
  return _impl_.affect_flag2_legendary_;
}
inline uint32_t TSkillTable::affect_flag2_legendary() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.affect_flag2_legendary)
  return _internal_affect_flag2_legendary();
}
inline void TSkillTable::_internal_set_affect_flag2_legendary(uint32_t value) {
  
  _impl_.affect_flag2_legendary_ = value;
}
inline void TSkillTable::set_affect_flag2_legendary(uint32_t value) {
  _internal_set_affect_flag2_legendary(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.affect_flag2_legendary)
}

// bytes point_on3 = 22;
inline void TSkillTable::clear_point_on3() {
  _impl_.point_on3_.ClearToEmpty();
}
inline const std::string& TSkillTable::point_on3() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.point_on3)
  return _internal_point_on3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_point_on3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.point_on3_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.point_on3)
}
inline std::string* TSkillTable::mutable_point_on3() {
  std::string* _s = _internal_mutable_point_on3();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.point_on3)
  return _s;
}
inline const std::string& TSkillTable::_internal_point_on3() const {
  return _impl_.point_on3_.Get();
}
inline void TSkillTable::_internal_set_point_on3(const std::string& value) {
  
  _impl_.point_on3_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_point_on3() {
  
  return _impl_.point_on3_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_point_on3() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.point_on3)
  return _impl_.point_on3_.Release();
}
inline void TSkillTable::set_allocated_point_on3(std::string* point_on3) {
  if (point_on3 != nullptr) {
    
  } else {
    
  }
  _impl_.point_on3_.SetAllocated(point_on3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.point_on3_.IsDefault()) {
    _impl_.point_on3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.point_on3)
}

// bytes point_poly3 = 23;
inline void TSkillTable::clear_point_poly3() {
  _impl_.point_poly3_.ClearToEmpty();
}
inline const std::string& TSkillTable::point_poly3() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.point_poly3)
  return _internal_point_poly3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_point_poly3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.point_poly3_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.point_poly3)
}
inline std::string* TSkillTable::mutable_point_poly3() {
  std::string* _s = _internal_mutable_point_poly3();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.point_poly3)
  return _s;
}
inline const std::string& TSkillTable::_internal_point_poly3() const {
  return _impl_.point_poly3_.Get();
}
inline void TSkillTable::_internal_set_point_poly3(const std::string& value) {
  
  _impl_.point_poly3_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_point_poly3() {
  
  return _impl_.point_poly3_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_point_poly3() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.point_poly3)
  return _impl_.point_poly3_.Release();
}
inline void TSkillTable::set_allocated_point_poly3(std::string* point_poly3) {
  if (point_poly3 != nullptr) {
    
  } else {
    
  }
  _impl_.point_poly3_.SetAllocated(point_poly3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.point_poly3_.IsDefault()) {
    _impl_.point_poly3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.point_poly3)
}

// bytes duration_poly3 = 24;
inline void TSkillTable::clear_duration_poly3() {
  _impl_.duration_poly3_.ClearToEmpty();
}
inline const std::string& TSkillTable::duration_poly3() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.duration_poly3)
  return _internal_duration_poly3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_duration_poly3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.duration_poly3_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.duration_poly3)
}
inline std::string* TSkillTable::mutable_duration_poly3() {
  std::string* _s = _internal_mutable_duration_poly3();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.duration_poly3)
  return _s;
}
inline const std::string& TSkillTable::_internal_duration_poly3() const {
  return _impl_.duration_poly3_.Get();
}
inline void TSkillTable::_internal_set_duration_poly3(const std::string& value) {
  
  _impl_.duration_poly3_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_duration_poly3() {
  
  return _impl_.duration_poly3_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_duration_poly3() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.duration_poly3)
  return _impl_.duration_poly3_.Release();
}
inline void TSkillTable::set_allocated_duration_poly3(std::string* duration_poly3) {
  if (duration_poly3 != nullptr) {
    
  } else {
    
  }
  _impl_.duration_poly3_.SetAllocated(duration_poly3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.duration_poly3_.IsDefault()) {
    _impl_.duration_poly3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.duration_poly3)
}

// uint32 level_step = 25;
inline void TSkillTable::clear_level_step() {
  _impl_.level_step_ = 0u;
}
inline uint32_t TSkillTable::_internal_level_step() const {
  return _impl_.level_step_;
}
inline uint32_t TSkillTable::level_step() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.level_step)
  return _internal_level_step();
}
inline void TSkillTable::_internal_set_level_step(uint32_t value) {
  
  _impl_.level_step_ = value;
}
inline void TSkillTable::set_level_step(uint32_t value) {
  _internal_set_level_step(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.level_step)
}

// uint32 level_limit = 26;
inline void TSkillTable::clear_level_limit() {
  _impl_.level_limit_ = 0u;
}
inline uint32_t TSkillTable::_internal_level_limit() const {
  return _impl_.level_limit_;
}
inline uint32_t TSkillTable::level_limit() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.level_limit)
  return _internal_level_limit();
}
inline void TSkillTable::_internal_set_level_limit(uint32_t value) {
  
  _impl_.level_limit_ = value;
}
inline void TSkillTable::set_level_limit(uint32_t value) {
  _internal_set_level_limit(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.level_limit)
}

// uint32 pre_skill_vnum = 27;
inline void TSkillTable::clear_pre_skill_vnum() {
  _impl_.pre_skill_vnum_ = 0u;
}
inline uint32_t TSkillTable::_internal_pre_skill_vnum() const {
  return _impl_.pre_skill_vnum_;
}
inline uint32_t TSkillTable::pre_skill_vnum() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.pre_skill_vnum)
  return _internal_pre_skill_vnum();
}
inline void TSkillTable::_internal_set_pre_skill_vnum(uint32_t value) {
  
  _impl_.pre_skill_vnum_ = value;
}
inline void TSkillTable::set_pre_skill_vnum(uint32_t value) {
  _internal_set_pre_skill_vnum(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.pre_skill_vnum)
}

// uint32 pre_skill_level = 28;
inline void TSkillTable::clear_pre_skill_level() {
  _impl_.pre_skill_level_ = 0u;
}
inline uint32_t TSkillTable::_internal_pre_skill_level() const {
  return _impl_.pre_skill_level_;
}
inline uint32_t TSkillTable::pre_skill_level() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.pre_skill_level)
  return _internal_pre_skill_level();
}
inline void TSkillTable::_internal_set_pre_skill_level(uint32_t value) {
  
  _impl_.pre_skill_level_ = value;
}
inline void TSkillTable::set_pre_skill_level(uint32_t value) {
  _internal_set_pre_skill_level(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.pre_skill_level)
}

// int32 max_hit = 29;
inline void TSkillTable::clear_max_hit() {
  _impl_.max_hit_ = 0;
}
inline int32_t TSkillTable::_internal_max_hit() const {
  return _impl_.max_hit_;
}
inline int32_t TSkillTable::max_hit() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.max_hit)
  return _internal_max_hit();
}
inline void TSkillTable::_internal_set_max_hit(int32_t value) {
  
  _impl_.max_hit_ = value;
}
inline void TSkillTable::set_max_hit(int32_t value) {
  _internal_set_max_hit(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.max_hit)
}

// bytes splash_around_damage_adjust_poly = 30;
inline void TSkillTable::clear_splash_around_damage_adjust_poly() {
  _impl_.splash_around_damage_adjust_poly_.ClearToEmpty();
}
inline const std::string& TSkillTable::splash_around_damage_adjust_poly() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.splash_around_damage_adjust_poly)
  return _internal_splash_around_damage_adjust_poly();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSkillTable::set_splash_around_damage_adjust_poly(ArgT0&& arg0, ArgT... args) {
 
 _impl_.splash_around_damage_adjust_poly_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSkillTable.splash_around_damage_adjust_poly)
}
inline std::string* TSkillTable::mutable_splash_around_damage_adjust_poly() {
  std::string* _s = _internal_mutable_splash_around_damage_adjust_poly();
  // @@protoc_insertion_point(field_mutable:network.TSkillTable.splash_around_damage_adjust_poly)
  return _s;
}
inline const std::string& TSkillTable::_internal_splash_around_damage_adjust_poly() const {
  return _impl_.splash_around_damage_adjust_poly_.Get();
}
inline void TSkillTable::_internal_set_splash_around_damage_adjust_poly(const std::string& value) {
  
  _impl_.splash_around_damage_adjust_poly_.Set(value, GetArenaForAllocation());
}
inline std::string* TSkillTable::_internal_mutable_splash_around_damage_adjust_poly() {
  
  return _impl_.splash_around_damage_adjust_poly_.Mutable(GetArenaForAllocation());
}
inline std::string* TSkillTable::release_splash_around_damage_adjust_poly() {
  // @@protoc_insertion_point(field_release:network.TSkillTable.splash_around_damage_adjust_poly)
  return _impl_.splash_around_damage_adjust_poly_.Release();
}
inline void TSkillTable::set_allocated_splash_around_damage_adjust_poly(std::string* splash_around_damage_adjust_poly) {
  if (splash_around_damage_adjust_poly != nullptr) {
    
  } else {
    
  }
  _impl_.splash_around_damage_adjust_poly_.SetAllocated(splash_around_damage_adjust_poly, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.splash_around_damage_adjust_poly_.IsDefault()) {
    _impl_.splash_around_damage_adjust_poly_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSkillTable.splash_around_damage_adjust_poly)
}

// uint32 skill_attr_type = 31;
inline void TSkillTable::clear_skill_attr_type() {
  _impl_.skill_attr_type_ = 0u;
}
inline uint32_t TSkillTable::_internal_skill_attr_type() const {
  return _impl_.skill_attr_type_;
}
inline uint32_t TSkillTable::skill_attr_type() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.skill_attr_type)
  return _internal_skill_attr_type();
}
inline void TSkillTable::_internal_set_skill_attr_type(uint32_t value) {
  
  _impl_.skill_attr_type_ = value;
}
inline void TSkillTable::set_skill_attr_type(uint32_t value) {
  _internal_set_skill_attr_type(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.skill_attr_type)
}

// uint32 target_range = 32;
inline void TSkillTable::clear_target_range() {
  _impl_.target_range_ = 0u;
}
inline uint32_t TSkillTable::_internal_target_range() const {
  return _impl_.target_range_;
}
inline uint32_t TSkillTable::target_range() const {
  // @@protoc_insertion_point(field_get:network.TSkillTable.target_range)
  return _internal_target_range();
}
inline void TSkillTable::_internal_set_target_range(uint32_t value) {
  
  _impl_.target_range_ = value;
}
inline void TSkillTable::set_target_range(uint32_t value) {
  _internal_set_target_range(value);
  // @@protoc_insertion_point(field_set:network.TSkillTable.target_range)
}

// -------------------------------------------------------------------

// TRefineMaterial

// uint32 vnum = 1;
inline void TRefineMaterial::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TRefineMaterial::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TRefineMaterial::vnum() const {
  // @@protoc_insertion_point(field_get:network.TRefineMaterial.vnum)
  return _internal_vnum();
}
inline void TRefineMaterial::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TRefineMaterial::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TRefineMaterial.vnum)
}

// uint32 count = 2;
inline void TRefineMaterial::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t TRefineMaterial::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t TRefineMaterial::count() const {
  // @@protoc_insertion_point(field_get:network.TRefineMaterial.count)
  return _internal_count();
}
inline void TRefineMaterial::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void TRefineMaterial::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.TRefineMaterial.count)
}

// -------------------------------------------------------------------

// TSwitchbotTable

// uint32 item_id = 1;
inline void TSwitchbotTable::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t TSwitchbotTable::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t TSwitchbotTable::item_id() const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.item_id)
  return _internal_item_id();
}
inline void TSwitchbotTable::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void TSwitchbotTable::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.TSwitchbotTable.item_id)
}

// uint32 inv_cell = 2;
inline void TSwitchbotTable::clear_inv_cell() {
  _impl_.inv_cell_ = 0u;
}
inline uint32_t TSwitchbotTable::_internal_inv_cell() const {
  return _impl_.inv_cell_;
}
inline uint32_t TSwitchbotTable::inv_cell() const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.inv_cell)
  return _internal_inv_cell();
}
inline void TSwitchbotTable::_internal_set_inv_cell(uint32_t value) {
  
  _impl_.inv_cell_ = value;
}
inline void TSwitchbotTable::set_inv_cell(uint32_t value) {
  _internal_set_inv_cell(value);
  // @@protoc_insertion_point(field_set:network.TSwitchbotTable.inv_cell)
}

// uint32 switcher_used = 3;
inline void TSwitchbotTable::clear_switcher_used() {
  _impl_.switcher_used_ = 0u;
}
inline uint32_t TSwitchbotTable::_internal_switcher_used() const {
  return _impl_.switcher_used_;
}
inline uint32_t TSwitchbotTable::switcher_used() const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.switcher_used)
  return _internal_switcher_used();
}
inline void TSwitchbotTable::_internal_set_switcher_used(uint32_t value) {
  
  _impl_.switcher_used_ = value;
}
inline void TSwitchbotTable::set_switcher_used(uint32_t value) {
  _internal_set_switcher_used(value);
  // @@protoc_insertion_point(field_set:network.TSwitchbotTable.switcher_used)
}

// repeated .network.TItemAttribute attrs = 4;
inline int TSwitchbotTable::_internal_attrs_size() const {
  return _impl_.attrs_.size();
}
inline int TSwitchbotTable::attrs_size() const {
  return _internal_attrs_size();
}
inline ::network::TItemAttribute* TSwitchbotTable::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.TSwitchbotTable.attrs)
  return _impl_.attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
TSwitchbotTable::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.TSwitchbotTable.attrs)
  return &_impl_.attrs_;
}
inline const ::network::TItemAttribute& TSwitchbotTable::_internal_attrs(int index) const {
  return _impl_.attrs_.Get(index);
}
inline const ::network::TItemAttribute& TSwitchbotTable::attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.attrs)
  return _internal_attrs(index);
}
inline ::network::TItemAttribute* TSwitchbotTable::_internal_add_attrs() {
  return _impl_.attrs_.Add();
}
inline ::network::TItemAttribute* TSwitchbotTable::add_attrs() {
  ::network::TItemAttribute* _add = _internal_add_attrs();
  // @@protoc_insertion_point(field_add:network.TSwitchbotTable.attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
TSwitchbotTable::attrs() const {
  // @@protoc_insertion_point(field_list:network.TSwitchbotTable.attrs)
  return _impl_.attrs_;
}

// repeated .network.TItemAttribute premium_attrs = 5;
inline int TSwitchbotTable::_internal_premium_attrs_size() const {
  return _impl_.premium_attrs_.size();
}
inline int TSwitchbotTable::premium_attrs_size() const {
  return _internal_premium_attrs_size();
}
inline ::network::TItemAttribute* TSwitchbotTable::mutable_premium_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.TSwitchbotTable.premium_attrs)
  return _impl_.premium_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
TSwitchbotTable::mutable_premium_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.TSwitchbotTable.premium_attrs)
  return &_impl_.premium_attrs_;
}
inline const ::network::TItemAttribute& TSwitchbotTable::_internal_premium_attrs(int index) const {
  return _impl_.premium_attrs_.Get(index);
}
inline const ::network::TItemAttribute& TSwitchbotTable::premium_attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.premium_attrs)
  return _internal_premium_attrs(index);
}
inline ::network::TItemAttribute* TSwitchbotTable::_internal_add_premium_attrs() {
  return _impl_.premium_attrs_.Add();
}
inline ::network::TItemAttribute* TSwitchbotTable::add_premium_attrs() {
  ::network::TItemAttribute* _add = _internal_add_premium_attrs();
  // @@protoc_insertion_point(field_add:network.TSwitchbotTable.premium_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
TSwitchbotTable::premium_attrs() const {
  // @@protoc_insertion_point(field_list:network.TSwitchbotTable.premium_attrs)
  return _impl_.premium_attrs_;
}

// bool use_premium = 6;
inline void TSwitchbotTable::clear_use_premium() {
  _impl_.use_premium_ = false;
}
inline bool TSwitchbotTable::_internal_use_premium() const {
  return _impl_.use_premium_;
}
inline bool TSwitchbotTable::use_premium() const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.use_premium)
  return _internal_use_premium();
}
inline void TSwitchbotTable::_internal_set_use_premium(bool value) {
  
  _impl_.use_premium_ = value;
}
inline void TSwitchbotTable::set_use_premium(bool value) {
  _internal_set_use_premium(value);
  // @@protoc_insertion_point(field_set:network.TSwitchbotTable.use_premium)
}

// bool finished = 7;
inline void TSwitchbotTable::clear_finished() {
  _impl_.finished_ = false;
}
inline bool TSwitchbotTable::_internal_finished() const {
  return _impl_.finished_;
}
inline bool TSwitchbotTable::finished() const {
  // @@protoc_insertion_point(field_get:network.TSwitchbotTable.finished)
  return _internal_finished();
}
inline void TSwitchbotTable::_internal_set_finished(bool value) {
  
  _impl_.finished_ = value;
}
inline void TSwitchbotTable::set_finished(bool value) {
  _internal_set_finished(value);
  // @@protoc_insertion_point(field_set:network.TSwitchbotTable.finished)
}

// -------------------------------------------------------------------

// TRefineTable

// uint32 id = 1;
inline void TRefineTable::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TRefineTable::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TRefineTable::id() const {
  // @@protoc_insertion_point(field_get:network.TRefineTable.id)
  return _internal_id();
}
inline void TRefineTable::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TRefineTable::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TRefineTable.id)
}

// uint32 material_count = 2;
inline void TRefineTable::clear_material_count() {
  _impl_.material_count_ = 0u;
}
inline uint32_t TRefineTable::_internal_material_count() const {
  return _impl_.material_count_;
}
inline uint32_t TRefineTable::material_count() const {
  // @@protoc_insertion_point(field_get:network.TRefineTable.material_count)
  return _internal_material_count();
}
inline void TRefineTable::_internal_set_material_count(uint32_t value) {
  
  _impl_.material_count_ = value;
}
inline void TRefineTable::set_material_count(uint32_t value) {
  _internal_set_material_count(value);
  // @@protoc_insertion_point(field_set:network.TRefineTable.material_count)
}

// int64 cost = 3;
inline void TRefineTable::clear_cost() {
  _impl_.cost_ = int64_t{0};
}
inline int64_t TRefineTable::_internal_cost() const {
  return _impl_.cost_;
}
inline int64_t TRefineTable::cost() const {
  // @@protoc_insertion_point(field_get:network.TRefineTable.cost)
  return _internal_cost();
}
inline void TRefineTable::_internal_set_cost(int64_t value) {
  
  _impl_.cost_ = value;
}
inline void TRefineTable::set_cost(int64_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:network.TRefineTable.cost)
}

// uint32 prob = 4;
inline void TRefineTable::clear_prob() {
  _impl_.prob_ = 0u;
}
inline uint32_t TRefineTable::_internal_prob() const {
  return _impl_.prob_;
}
inline uint32_t TRefineTable::prob() const {
  // @@protoc_insertion_point(field_get:network.TRefineTable.prob)
  return _internal_prob();
}
inline void TRefineTable::_internal_set_prob(uint32_t value) {
  
  _impl_.prob_ = value;
}
inline void TRefineTable::set_prob(uint32_t value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:network.TRefineTable.prob)
}

// repeated .network.TRefineMaterial materials = 5;
inline int TRefineTable::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int TRefineTable::materials_size() const {
  return _internal_materials_size();
}
inline void TRefineTable::clear_materials() {
  _impl_.materials_.Clear();
}
inline ::network::TRefineMaterial* TRefineTable::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:network.TRefineTable.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
TRefineTable::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:network.TRefineTable.materials)
  return &_impl_.materials_;
}
inline const ::network::TRefineMaterial& TRefineTable::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::network::TRefineMaterial& TRefineTable::materials(int index) const {
  // @@protoc_insertion_point(field_get:network.TRefineTable.materials)
  return _internal_materials(index);
}
inline ::network::TRefineMaterial* TRefineTable::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::network::TRefineMaterial* TRefineTable::add_materials() {
  ::network::TRefineMaterial* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:network.TRefineTable.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
TRefineTable::materials() const {
  // @@protoc_insertion_point(field_list:network.TRefineTable.materials)
  return _impl_.materials_;
}

// -------------------------------------------------------------------

// TWikiRefineInfo

// repeated .network.TRefineMaterial materials = 1;
inline int TWikiRefineInfo::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int TWikiRefineInfo::materials_size() const {
  return _internal_materials_size();
}
inline void TWikiRefineInfo::clear_materials() {
  _impl_.materials_.Clear();
}
inline ::network::TRefineMaterial* TWikiRefineInfo::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:network.TWikiRefineInfo.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
TWikiRefineInfo::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:network.TWikiRefineInfo.materials)
  return &_impl_.materials_;
}
inline const ::network::TRefineMaterial& TWikiRefineInfo::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::network::TRefineMaterial& TWikiRefineInfo::materials(int index) const {
  // @@protoc_insertion_point(field_get:network.TWikiRefineInfo.materials)
  return _internal_materials(index);
}
inline ::network::TRefineMaterial* TWikiRefineInfo::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::network::TRefineMaterial* TWikiRefineInfo::add_materials() {
  ::network::TRefineMaterial* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:network.TWikiRefineInfo.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
TWikiRefineInfo::materials() const {
  // @@protoc_insertion_point(field_list:network.TWikiRefineInfo.materials)
  return _impl_.materials_;
}

// uint32 mat_count = 2;
inline void TWikiRefineInfo::clear_mat_count() {
  _impl_.mat_count_ = 0u;
}
inline uint32_t TWikiRefineInfo::_internal_mat_count() const {
  return _impl_.mat_count_;
}
inline uint32_t TWikiRefineInfo::mat_count() const {
  // @@protoc_insertion_point(field_get:network.TWikiRefineInfo.mat_count)
  return _internal_mat_count();
}
inline void TWikiRefineInfo::_internal_set_mat_count(uint32_t value) {
  
  _impl_.mat_count_ = value;
}
inline void TWikiRefineInfo::set_mat_count(uint32_t value) {
  _internal_set_mat_count(value);
  // @@protoc_insertion_point(field_set:network.TWikiRefineInfo.mat_count)
}

// int32 price = 3;
inline void TWikiRefineInfo::clear_price() {
  _impl_.price_ = 0;
}
inline int32_t TWikiRefineInfo::_internal_price() const {
  return _impl_.price_;
}
inline int32_t TWikiRefineInfo::price() const {
  // @@protoc_insertion_point(field_get:network.TWikiRefineInfo.price)
  return _internal_price();
}
inline void TWikiRefineInfo::_internal_set_price(int32_t value) {
  
  _impl_.price_ = value;
}
inline void TWikiRefineInfo::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TWikiRefineInfo.price)
}

// -------------------------------------------------------------------

// TWikiChestDropInfo

// uint32 vnum_start = 1;
inline void TWikiChestDropInfo::clear_vnum_start() {
  _impl_.vnum_start_ = 0u;
}
inline uint32_t TWikiChestDropInfo::_internal_vnum_start() const {
  return _impl_.vnum_start_;
}
inline uint32_t TWikiChestDropInfo::vnum_start() const {
  // @@protoc_insertion_point(field_get:network.TWikiChestDropInfo.vnum_start)
  return _internal_vnum_start();
}
inline void TWikiChestDropInfo::_internal_set_vnum_start(uint32_t value) {
  
  _impl_.vnum_start_ = value;
}
inline void TWikiChestDropInfo::set_vnum_start(uint32_t value) {
  _internal_set_vnum_start(value);
  // @@protoc_insertion_point(field_set:network.TWikiChestDropInfo.vnum_start)
}

// uint32 vnum_end = 2;
inline void TWikiChestDropInfo::clear_vnum_end() {
  _impl_.vnum_end_ = 0u;
}
inline uint32_t TWikiChestDropInfo::_internal_vnum_end() const {
  return _impl_.vnum_end_;
}
inline uint32_t TWikiChestDropInfo::vnum_end() const {
  // @@protoc_insertion_point(field_get:network.TWikiChestDropInfo.vnum_end)
  return _internal_vnum_end();
}
inline void TWikiChestDropInfo::_internal_set_vnum_end(uint32_t value) {
  
  _impl_.vnum_end_ = value;
}
inline void TWikiChestDropInfo::set_vnum_end(uint32_t value) {
  _internal_set_vnum_end(value);
  // @@protoc_insertion_point(field_set:network.TWikiChestDropInfo.vnum_end)
}

// -------------------------------------------------------------------

// TWikiItemOriginInfo

// uint32 vnum = 1;
inline void TWikiItemOriginInfo::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TWikiItemOriginInfo::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TWikiItemOriginInfo::vnum() const {
  // @@protoc_insertion_point(field_get:network.TWikiItemOriginInfo.vnum)
  return _internal_vnum();
}
inline void TWikiItemOriginInfo::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TWikiItemOriginInfo::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TWikiItemOriginInfo.vnum)
}

// bool is_mob = 2;
inline void TWikiItemOriginInfo::clear_is_mob() {
  _impl_.is_mob_ = false;
}
inline bool TWikiItemOriginInfo::_internal_is_mob() const {
  return _impl_.is_mob_;
}
inline bool TWikiItemOriginInfo::is_mob() const {
  // @@protoc_insertion_point(field_get:network.TWikiItemOriginInfo.is_mob)
  return _internal_is_mob();
}
inline void TWikiItemOriginInfo::_internal_set_is_mob(bool value) {
  
  _impl_.is_mob_ = value;
}
inline void TWikiItemOriginInfo::set_is_mob(bool value) {
  _internal_set_is_mob(value);
  // @@protoc_insertion_point(field_set:network.TWikiItemOriginInfo.is_mob)
}

// -------------------------------------------------------------------

// TWikiInfoTable

// repeated .network.TWikiRefineInfo refine_infos = 1;
inline int TWikiInfoTable::_internal_refine_infos_size() const {
  return _impl_.refine_infos_.size();
}
inline int TWikiInfoTable::refine_infos_size() const {
  return _internal_refine_infos_size();
}
inline void TWikiInfoTable::clear_refine_infos() {
  _impl_.refine_infos_.Clear();
}
inline ::network::TWikiRefineInfo* TWikiInfoTable::mutable_refine_infos(int index) {
  // @@protoc_insertion_point(field_mutable:network.TWikiInfoTable.refine_infos)
  return _impl_.refine_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiRefineInfo >*
TWikiInfoTable::mutable_refine_infos() {
  // @@protoc_insertion_point(field_mutable_list:network.TWikiInfoTable.refine_infos)
  return &_impl_.refine_infos_;
}
inline const ::network::TWikiRefineInfo& TWikiInfoTable::_internal_refine_infos(int index) const {
  return _impl_.refine_infos_.Get(index);
}
inline const ::network::TWikiRefineInfo& TWikiInfoTable::refine_infos(int index) const {
  // @@protoc_insertion_point(field_get:network.TWikiInfoTable.refine_infos)
  return _internal_refine_infos(index);
}
inline ::network::TWikiRefineInfo* TWikiInfoTable::_internal_add_refine_infos() {
  return _impl_.refine_infos_.Add();
}
inline ::network::TWikiRefineInfo* TWikiInfoTable::add_refine_infos() {
  ::network::TWikiRefineInfo* _add = _internal_add_refine_infos();
  // @@protoc_insertion_point(field_add:network.TWikiInfoTable.refine_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiRefineInfo >&
TWikiInfoTable::refine_infos() const {
  // @@protoc_insertion_point(field_list:network.TWikiInfoTable.refine_infos)
  return _impl_.refine_infos_;
}

// repeated .network.TWikiChestDropInfo chest_infos = 2;
inline int TWikiInfoTable::_internal_chest_infos_size() const {
  return _impl_.chest_infos_.size();
}
inline int TWikiInfoTable::chest_infos_size() const {
  return _internal_chest_infos_size();
}
inline void TWikiInfoTable::clear_chest_infos() {
  _impl_.chest_infos_.Clear();
}
inline ::network::TWikiChestDropInfo* TWikiInfoTable::mutable_chest_infos(int index) {
  // @@protoc_insertion_point(field_mutable:network.TWikiInfoTable.chest_infos)
  return _impl_.chest_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiChestDropInfo >*
TWikiInfoTable::mutable_chest_infos() {
  // @@protoc_insertion_point(field_mutable_list:network.TWikiInfoTable.chest_infos)
  return &_impl_.chest_infos_;
}
inline const ::network::TWikiChestDropInfo& TWikiInfoTable::_internal_chest_infos(int index) const {
  return _impl_.chest_infos_.Get(index);
}
inline const ::network::TWikiChestDropInfo& TWikiInfoTable::chest_infos(int index) const {
  // @@protoc_insertion_point(field_get:network.TWikiInfoTable.chest_infos)
  return _internal_chest_infos(index);
}
inline ::network::TWikiChestDropInfo* TWikiInfoTable::_internal_add_chest_infos() {
  return _impl_.chest_infos_.Add();
}
inline ::network::TWikiChestDropInfo* TWikiInfoTable::add_chest_infos() {
  ::network::TWikiChestDropInfo* _add = _internal_add_chest_infos();
  // @@protoc_insertion_point(field_add:network.TWikiInfoTable.chest_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiChestDropInfo >&
TWikiInfoTable::chest_infos() const {
  // @@protoc_insertion_point(field_list:network.TWikiInfoTable.chest_infos)
  return _impl_.chest_infos_;
}

// bool is_common = 3;
inline void TWikiInfoTable::clear_is_common() {
  _impl_.is_common_ = false;
}
inline bool TWikiInfoTable::_internal_is_common() const {
  return _impl_.is_common_;
}
inline bool TWikiInfoTable::is_common() const {
  // @@protoc_insertion_point(field_get:network.TWikiInfoTable.is_common)
  return _internal_is_common();
}
inline void TWikiInfoTable::_internal_set_is_common(bool value) {
  
  _impl_.is_common_ = value;
}
inline void TWikiInfoTable::set_is_common(bool value) {
  _internal_set_is_common(value);
  // @@protoc_insertion_point(field_set:network.TWikiInfoTable.is_common)
}

// uint32 origin_vnum = 4;
inline void TWikiInfoTable::clear_origin_vnum() {
  _impl_.origin_vnum_ = 0u;
}
inline uint32_t TWikiInfoTable::_internal_origin_vnum() const {
  return _impl_.origin_vnum_;
}
inline uint32_t TWikiInfoTable::origin_vnum() const {
  // @@protoc_insertion_point(field_get:network.TWikiInfoTable.origin_vnum)
  return _internal_origin_vnum();
}
inline void TWikiInfoTable::_internal_set_origin_vnum(uint32_t value) {
  
  _impl_.origin_vnum_ = value;
}
inline void TWikiInfoTable::set_origin_vnum(uint32_t value) {
  _internal_set_origin_vnum(value);
  // @@protoc_insertion_point(field_set:network.TWikiInfoTable.origin_vnum)
}

// -------------------------------------------------------------------

// TItemAttrTable

// bytes apply = 1;
inline void TItemAttrTable::clear_apply() {
  _impl_.apply_.ClearToEmpty();
}
inline const std::string& TItemAttrTable::apply() const {
  // @@protoc_insertion_point(field_get:network.TItemAttrTable.apply)
  return _internal_apply();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TItemAttrTable::set_apply(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apply_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TItemAttrTable.apply)
}
inline std::string* TItemAttrTable::mutable_apply() {
  std::string* _s = _internal_mutable_apply();
  // @@protoc_insertion_point(field_mutable:network.TItemAttrTable.apply)
  return _s;
}
inline const std::string& TItemAttrTable::_internal_apply() const {
  return _impl_.apply_.Get();
}
inline void TItemAttrTable::_internal_set_apply(const std::string& value) {
  
  _impl_.apply_.Set(value, GetArenaForAllocation());
}
inline std::string* TItemAttrTable::_internal_mutable_apply() {
  
  return _impl_.apply_.Mutable(GetArenaForAllocation());
}
inline std::string* TItemAttrTable::release_apply() {
  // @@protoc_insertion_point(field_release:network.TItemAttrTable.apply)
  return _impl_.apply_.Release();
}
inline void TItemAttrTable::set_allocated_apply(std::string* apply) {
  if (apply != nullptr) {
    
  } else {
    
  }
  _impl_.apply_.SetAllocated(apply, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apply_.IsDefault()) {
    _impl_.apply_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TItemAttrTable.apply)
}

// uint32 apply_index = 2;
inline void TItemAttrTable::clear_apply_index() {
  _impl_.apply_index_ = 0u;
}
inline uint32_t TItemAttrTable::_internal_apply_index() const {
  return _impl_.apply_index_;
}
inline uint32_t TItemAttrTable::apply_index() const {
  // @@protoc_insertion_point(field_get:network.TItemAttrTable.apply_index)
  return _internal_apply_index();
}
inline void TItemAttrTable::_internal_set_apply_index(uint32_t value) {
  
  _impl_.apply_index_ = value;
}
inline void TItemAttrTable::set_apply_index(uint32_t value) {
  _internal_set_apply_index(value);
  // @@protoc_insertion_point(field_set:network.TItemAttrTable.apply_index)
}

// uint32 prob = 3;
inline void TItemAttrTable::clear_prob() {
  _impl_.prob_ = 0u;
}
inline uint32_t TItemAttrTable::_internal_prob() const {
  return _impl_.prob_;
}
inline uint32_t TItemAttrTable::prob() const {
  // @@protoc_insertion_point(field_get:network.TItemAttrTable.prob)
  return _internal_prob();
}
inline void TItemAttrTable::_internal_set_prob(uint32_t value) {
  
  _impl_.prob_ = value;
}
inline void TItemAttrTable::set_prob(uint32_t value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:network.TItemAttrTable.prob)
}

// repeated int32 values = 4;
inline int TItemAttrTable::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int TItemAttrTable::values_size() const {
  return _internal_values_size();
}
inline void TItemAttrTable::clear_values() {
  _impl_.values_.Clear();
}
inline int32_t TItemAttrTable::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline int32_t TItemAttrTable::values(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemAttrTable.values)
  return _internal_values(index);
}
inline void TItemAttrTable::set_values(int index, int32_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TItemAttrTable.values)
}
inline void TItemAttrTable::_internal_add_values(int32_t value) {
  _impl_.values_.Add(value);
}
inline void TItemAttrTable::add_values(int32_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:network.TItemAttrTable.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemAttrTable::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemAttrTable::values() const {
  // @@protoc_insertion_point(field_list:network.TItemAttrTable.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemAttrTable::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemAttrTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemAttrTable.values)
  return _internal_mutable_values();
}

// repeated uint32 max_level_by_set = 5;
inline int TItemAttrTable::_internal_max_level_by_set_size() const {
  return _impl_.max_level_by_set_.size();
}
inline int TItemAttrTable::max_level_by_set_size() const {
  return _internal_max_level_by_set_size();
}
inline void TItemAttrTable::clear_max_level_by_set() {
  _impl_.max_level_by_set_.Clear();
}
inline uint32_t TItemAttrTable::_internal_max_level_by_set(int index) const {
  return _impl_.max_level_by_set_.Get(index);
}
inline uint32_t TItemAttrTable::max_level_by_set(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemAttrTable.max_level_by_set)
  return _internal_max_level_by_set(index);
}
inline void TItemAttrTable::set_max_level_by_set(int index, uint32_t value) {
  _impl_.max_level_by_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TItemAttrTable.max_level_by_set)
}
inline void TItemAttrTable::_internal_add_max_level_by_set(uint32_t value) {
  _impl_.max_level_by_set_.Add(value);
}
inline void TItemAttrTable::add_max_level_by_set(uint32_t value) {
  _internal_add_max_level_by_set(value);
  // @@protoc_insertion_point(field_add:network.TItemAttrTable.max_level_by_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TItemAttrTable::_internal_max_level_by_set() const {
  return _impl_.max_level_by_set_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TItemAttrTable::max_level_by_set() const {
  // @@protoc_insertion_point(field_list:network.TItemAttrTable.max_level_by_set)
  return _internal_max_level_by_set();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TItemAttrTable::_internal_mutable_max_level_by_set() {
  return &_impl_.max_level_by_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TItemAttrTable::mutable_max_level_by_set() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemAttrTable.max_level_by_set)
  return _internal_mutable_max_level_by_set();
}

// -------------------------------------------------------------------

// TGuildLadderInfo

// bytes name = 1;
inline void TGuildLadderInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TGuildLadderInfo::name() const {
  // @@protoc_insertion_point(field_get:network.TGuildLadderInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TGuildLadderInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TGuildLadderInfo.name)
}
inline std::string* TGuildLadderInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TGuildLadderInfo.name)
  return _s;
}
inline const std::string& TGuildLadderInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TGuildLadderInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TGuildLadderInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TGuildLadderInfo::release_name() {
  // @@protoc_insertion_point(field_release:network.TGuildLadderInfo.name)
  return _impl_.name_.Release();
}
inline void TGuildLadderInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TGuildLadderInfo.name)
}

// uint32 level = 2;
inline void TGuildLadderInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TGuildLadderInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TGuildLadderInfo::level() const {
  // @@protoc_insertion_point(field_get:network.TGuildLadderInfo.level)
  return _internal_level();
}
inline void TGuildLadderInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TGuildLadderInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.TGuildLadderInfo.level)
}

// uint32 ladder_points = 3;
inline void TGuildLadderInfo::clear_ladder_points() {
  _impl_.ladder_points_ = 0u;
}
inline uint32_t TGuildLadderInfo::_internal_ladder_points() const {
  return _impl_.ladder_points_;
}
inline uint32_t TGuildLadderInfo::ladder_points() const {
  // @@protoc_insertion_point(field_get:network.TGuildLadderInfo.ladder_points)
  return _internal_ladder_points();
}
inline void TGuildLadderInfo::_internal_set_ladder_points(uint32_t value) {
  
  _impl_.ladder_points_ = value;
}
inline void TGuildLadderInfo::set_ladder_points(uint32_t value) {
  _internal_set_ladder_points(value);
  // @@protoc_insertion_point(field_set:network.TGuildLadderInfo.ladder_points)
}

// uint32 min_member = 4;
inline void TGuildLadderInfo::clear_min_member() {
  _impl_.min_member_ = 0u;
}
inline uint32_t TGuildLadderInfo::_internal_min_member() const {
  return _impl_.min_member_;
}
inline uint32_t TGuildLadderInfo::min_member() const {
  // @@protoc_insertion_point(field_get:network.TGuildLadderInfo.min_member)
  return _internal_min_member();
}
inline void TGuildLadderInfo::_internal_set_min_member(uint32_t value) {
  
  _impl_.min_member_ = value;
}
inline void TGuildLadderInfo::set_min_member(uint32_t value) {
  _internal_set_min_member(value);
  // @@protoc_insertion_point(field_set:network.TGuildLadderInfo.min_member)
}

// uint32 max_member = 5;
inline void TGuildLadderInfo::clear_max_member() {
  _impl_.max_member_ = 0u;
}
inline uint32_t TGuildLadderInfo::_internal_max_member() const {
  return _impl_.max_member_;
}
inline uint32_t TGuildLadderInfo::max_member() const {
  // @@protoc_insertion_point(field_get:network.TGuildLadderInfo.max_member)
  return _internal_max_member();
}
inline void TGuildLadderInfo::_internal_set_max_member(uint32_t value) {
  
  _impl_.max_member_ = value;
}
inline void TGuildLadderInfo::set_max_member(uint32_t value) {
  _internal_set_max_member(value);
  // @@protoc_insertion_point(field_set:network.TGuildLadderInfo.max_member)
}

// -------------------------------------------------------------------

// TBuildingLand

// uint32 id = 1;
inline void TBuildingLand::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TBuildingLand::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TBuildingLand::id() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.id)
  return _internal_id();
}
inline void TBuildingLand::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TBuildingLand::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.id)
}

// uint32 map_index = 2;
inline void TBuildingLand::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t TBuildingLand::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t TBuildingLand::map_index() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.map_index)
  return _internal_map_index();
}
inline void TBuildingLand::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void TBuildingLand::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.map_index)
}

// int32 x = 3;
inline void TBuildingLand::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t TBuildingLand::_internal_x() const {
  return _impl_.x_;
}
inline int32_t TBuildingLand::x() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.x)
  return _internal_x();
}
inline void TBuildingLand::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void TBuildingLand::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.x)
}

// int32 y = 4;
inline void TBuildingLand::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t TBuildingLand::_internal_y() const {
  return _impl_.y_;
}
inline int32_t TBuildingLand::y() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.y)
  return _internal_y();
}
inline void TBuildingLand::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void TBuildingLand::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.y)
}

// uint32 width = 5;
inline void TBuildingLand::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t TBuildingLand::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t TBuildingLand::width() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.width)
  return _internal_width();
}
inline void TBuildingLand::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void TBuildingLand::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.width)
}

// uint32 height = 6;
inline void TBuildingLand::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t TBuildingLand::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t TBuildingLand::height() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.height)
  return _internal_height();
}
inline void TBuildingLand::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void TBuildingLand::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.height)
}

// uint32 guild_id = 7;
inline void TBuildingLand::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t TBuildingLand::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t TBuildingLand::guild_id() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.guild_id)
  return _internal_guild_id();
}
inline void TBuildingLand::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void TBuildingLand::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.guild_id)
}

// uint32 guild_level_limit = 8;
inline void TBuildingLand::clear_guild_level_limit() {
  _impl_.guild_level_limit_ = 0u;
}
inline uint32_t TBuildingLand::_internal_guild_level_limit() const {
  return _impl_.guild_level_limit_;
}
inline uint32_t TBuildingLand::guild_level_limit() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.guild_level_limit)
  return _internal_guild_level_limit();
}
inline void TBuildingLand::_internal_set_guild_level_limit(uint32_t value) {
  
  _impl_.guild_level_limit_ = value;
}
inline void TBuildingLand::set_guild_level_limit(uint32_t value) {
  _internal_set_guild_level_limit(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.guild_level_limit)
}

// int64 price = 9;
inline void TBuildingLand::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t TBuildingLand::_internal_price() const {
  return _impl_.price_;
}
inline int64_t TBuildingLand::price() const {
  // @@protoc_insertion_point(field_get:network.TBuildingLand.price)
  return _internal_price();
}
inline void TBuildingLand::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void TBuildingLand::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TBuildingLand.price)
}

// -------------------------------------------------------------------

// TBuildingObjectMaterial

// uint32 item_vnum = 1;
inline void TBuildingObjectMaterial::clear_item_vnum() {
  _impl_.item_vnum_ = 0u;
}
inline uint32_t TBuildingObjectMaterial::_internal_item_vnum() const {
  return _impl_.item_vnum_;
}
inline uint32_t TBuildingObjectMaterial::item_vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectMaterial.item_vnum)
  return _internal_item_vnum();
}
inline void TBuildingObjectMaterial::_internal_set_item_vnum(uint32_t value) {
  
  _impl_.item_vnum_ = value;
}
inline void TBuildingObjectMaterial::set_item_vnum(uint32_t value) {
  _internal_set_item_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectMaterial.item_vnum)
}

// uint32 count = 2;
inline void TBuildingObjectMaterial::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t TBuildingObjectMaterial::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t TBuildingObjectMaterial::count() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectMaterial.count)
  return _internal_count();
}
inline void TBuildingObjectMaterial::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void TBuildingObjectMaterial::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectMaterial.count)
}

// -------------------------------------------------------------------

// TBuildingObjectProto

// uint32 vnum = 1;
inline void TBuildingObjectProto::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TBuildingObjectProto::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TBuildingObjectProto::vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.vnum)
  return _internal_vnum();
}
inline void TBuildingObjectProto::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TBuildingObjectProto::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.vnum)
}

// int64 price = 2;
inline void TBuildingObjectProto::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t TBuildingObjectProto::_internal_price() const {
  return _impl_.price_;
}
inline int64_t TBuildingObjectProto::price() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.price)
  return _internal_price();
}
inline void TBuildingObjectProto::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void TBuildingObjectProto::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.price)
}

// repeated .network.TBuildingObjectMaterial materials = 3;
inline int TBuildingObjectProto::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int TBuildingObjectProto::materials_size() const {
  return _internal_materials_size();
}
inline void TBuildingObjectProto::clear_materials() {
  _impl_.materials_.Clear();
}
inline ::network::TBuildingObjectMaterial* TBuildingObjectProto::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:network.TBuildingObjectProto.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectMaterial >*
TBuildingObjectProto::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:network.TBuildingObjectProto.materials)
  return &_impl_.materials_;
}
inline const ::network::TBuildingObjectMaterial& TBuildingObjectProto::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::network::TBuildingObjectMaterial& TBuildingObjectProto::materials(int index) const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.materials)
  return _internal_materials(index);
}
inline ::network::TBuildingObjectMaterial* TBuildingObjectProto::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::network::TBuildingObjectMaterial* TBuildingObjectProto::add_materials() {
  ::network::TBuildingObjectMaterial* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:network.TBuildingObjectProto.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingObjectMaterial >&
TBuildingObjectProto::materials() const {
  // @@protoc_insertion_point(field_list:network.TBuildingObjectProto.materials)
  return _impl_.materials_;
}

// uint32 upgrade_vnum = 4;
inline void TBuildingObjectProto::clear_upgrade_vnum() {
  _impl_.upgrade_vnum_ = 0u;
}
inline uint32_t TBuildingObjectProto::_internal_upgrade_vnum() const {
  return _impl_.upgrade_vnum_;
}
inline uint32_t TBuildingObjectProto::upgrade_vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.upgrade_vnum)
  return _internal_upgrade_vnum();
}
inline void TBuildingObjectProto::_internal_set_upgrade_vnum(uint32_t value) {
  
  _impl_.upgrade_vnum_ = value;
}
inline void TBuildingObjectProto::set_upgrade_vnum(uint32_t value) {
  _internal_set_upgrade_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.upgrade_vnum)
}

// uint32 upgrade_limit_time = 5;
inline void TBuildingObjectProto::clear_upgrade_limit_time() {
  _impl_.upgrade_limit_time_ = 0u;
}
inline uint32_t TBuildingObjectProto::_internal_upgrade_limit_time() const {
  return _impl_.upgrade_limit_time_;
}
inline uint32_t TBuildingObjectProto::upgrade_limit_time() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.upgrade_limit_time)
  return _internal_upgrade_limit_time();
}
inline void TBuildingObjectProto::_internal_set_upgrade_limit_time(uint32_t value) {
  
  _impl_.upgrade_limit_time_ = value;
}
inline void TBuildingObjectProto::set_upgrade_limit_time(uint32_t value) {
  _internal_set_upgrade_limit_time(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.upgrade_limit_time)
}

// int32 life = 6;
inline void TBuildingObjectProto::clear_life() {
  _impl_.life_ = 0;
}
inline int32_t TBuildingObjectProto::_internal_life() const {
  return _impl_.life_;
}
inline int32_t TBuildingObjectProto::life() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.life)
  return _internal_life();
}
inline void TBuildingObjectProto::_internal_set_life(int32_t value) {
  
  _impl_.life_ = value;
}
inline void TBuildingObjectProto::set_life(int32_t value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.life)
}

// repeated int32 region = 7;
inline int TBuildingObjectProto::_internal_region_size() const {
  return _impl_.region_.size();
}
inline int TBuildingObjectProto::region_size() const {
  return _internal_region_size();
}
inline void TBuildingObjectProto::clear_region() {
  _impl_.region_.Clear();
}
inline int32_t TBuildingObjectProto::_internal_region(int index) const {
  return _impl_.region_.Get(index);
}
inline int32_t TBuildingObjectProto::region(int index) const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.region)
  return _internal_region(index);
}
inline void TBuildingObjectProto::set_region(int index, int32_t value) {
  _impl_.region_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.region)
}
inline void TBuildingObjectProto::_internal_add_region(int32_t value) {
  _impl_.region_.Add(value);
}
inline void TBuildingObjectProto::add_region(int32_t value) {
  _internal_add_region(value);
  // @@protoc_insertion_point(field_add:network.TBuildingObjectProto.region)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TBuildingObjectProto::_internal_region() const {
  return _impl_.region_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TBuildingObjectProto::region() const {
  // @@protoc_insertion_point(field_list:network.TBuildingObjectProto.region)
  return _internal_region();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TBuildingObjectProto::_internal_mutable_region() {
  return &_impl_.region_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TBuildingObjectProto::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:network.TBuildingObjectProto.region)
  return _internal_mutable_region();
}

// uint32 npc_vnum = 8;
inline void TBuildingObjectProto::clear_npc_vnum() {
  _impl_.npc_vnum_ = 0u;
}
inline uint32_t TBuildingObjectProto::_internal_npc_vnum() const {
  return _impl_.npc_vnum_;
}
inline uint32_t TBuildingObjectProto::npc_vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.npc_vnum)
  return _internal_npc_vnum();
}
inline void TBuildingObjectProto::_internal_set_npc_vnum(uint32_t value) {
  
  _impl_.npc_vnum_ = value;
}
inline void TBuildingObjectProto::set_npc_vnum(uint32_t value) {
  _internal_set_npc_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.npc_vnum)
}

// int32 npc_x = 9;
inline void TBuildingObjectProto::clear_npc_x() {
  _impl_.npc_x_ = 0;
}
inline int32_t TBuildingObjectProto::_internal_npc_x() const {
  return _impl_.npc_x_;
}
inline int32_t TBuildingObjectProto::npc_x() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.npc_x)
  return _internal_npc_x();
}
inline void TBuildingObjectProto::_internal_set_npc_x(int32_t value) {
  
  _impl_.npc_x_ = value;
}
inline void TBuildingObjectProto::set_npc_x(int32_t value) {
  _internal_set_npc_x(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.npc_x)
}

// int32 npc_y = 10;
inline void TBuildingObjectProto::clear_npc_y() {
  _impl_.npc_y_ = 0;
}
inline int32_t TBuildingObjectProto::_internal_npc_y() const {
  return _impl_.npc_y_;
}
inline int32_t TBuildingObjectProto::npc_y() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.npc_y)
  return _internal_npc_y();
}
inline void TBuildingObjectProto::_internal_set_npc_y(int32_t value) {
  
  _impl_.npc_y_ = value;
}
inline void TBuildingObjectProto::set_npc_y(int32_t value) {
  _internal_set_npc_y(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.npc_y)
}

// uint32 group_vnum = 11;
inline void TBuildingObjectProto::clear_group_vnum() {
  _impl_.group_vnum_ = 0u;
}
inline uint32_t TBuildingObjectProto::_internal_group_vnum() const {
  return _impl_.group_vnum_;
}
inline uint32_t TBuildingObjectProto::group_vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.group_vnum)
  return _internal_group_vnum();
}
inline void TBuildingObjectProto::_internal_set_group_vnum(uint32_t value) {
  
  _impl_.group_vnum_ = value;
}
inline void TBuildingObjectProto::set_group_vnum(uint32_t value) {
  _internal_set_group_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.group_vnum)
}

// uint32 depend_on_group_vnum = 12;
inline void TBuildingObjectProto::clear_depend_on_group_vnum() {
  _impl_.depend_on_group_vnum_ = 0u;
}
inline uint32_t TBuildingObjectProto::_internal_depend_on_group_vnum() const {
  return _impl_.depend_on_group_vnum_;
}
inline uint32_t TBuildingObjectProto::depend_on_group_vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObjectProto.depend_on_group_vnum)
  return _internal_depend_on_group_vnum();
}
inline void TBuildingObjectProto::_internal_set_depend_on_group_vnum(uint32_t value) {
  
  _impl_.depend_on_group_vnum_ = value;
}
inline void TBuildingObjectProto::set_depend_on_group_vnum(uint32_t value) {
  _internal_set_depend_on_group_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObjectProto.depend_on_group_vnum)
}

// -------------------------------------------------------------------

// TBuildingObject

// uint32 id = 1;
inline void TBuildingObject::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TBuildingObject::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TBuildingObject::id() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.id)
  return _internal_id();
}
inline void TBuildingObject::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TBuildingObject::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.id)
}

// uint32 land_id = 2;
inline void TBuildingObject::clear_land_id() {
  _impl_.land_id_ = 0u;
}
inline uint32_t TBuildingObject::_internal_land_id() const {
  return _impl_.land_id_;
}
inline uint32_t TBuildingObject::land_id() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.land_id)
  return _internal_land_id();
}
inline void TBuildingObject::_internal_set_land_id(uint32_t value) {
  
  _impl_.land_id_ = value;
}
inline void TBuildingObject::set_land_id(uint32_t value) {
  _internal_set_land_id(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.land_id)
}

// uint32 vnum = 3;
inline void TBuildingObject::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TBuildingObject::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TBuildingObject::vnum() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.vnum)
  return _internal_vnum();
}
inline void TBuildingObject::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TBuildingObject::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.vnum)
}

// uint32 map_index = 4;
inline void TBuildingObject::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t TBuildingObject::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t TBuildingObject::map_index() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.map_index)
  return _internal_map_index();
}
inline void TBuildingObject::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void TBuildingObject::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.map_index)
}

// int32 x = 5;
inline void TBuildingObject::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t TBuildingObject::_internal_x() const {
  return _impl_.x_;
}
inline int32_t TBuildingObject::x() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.x)
  return _internal_x();
}
inline void TBuildingObject::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void TBuildingObject::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.x)
}

// int32 y = 6;
inline void TBuildingObject::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t TBuildingObject::_internal_y() const {
  return _impl_.y_;
}
inline int32_t TBuildingObject::y() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.y)
  return _internal_y();
}
inline void TBuildingObject::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void TBuildingObject::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.y)
}

// float x_rot = 7;
inline void TBuildingObject::clear_x_rot() {
  _impl_.x_rot_ = 0;
}
inline float TBuildingObject::_internal_x_rot() const {
  return _impl_.x_rot_;
}
inline float TBuildingObject::x_rot() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.x_rot)
  return _internal_x_rot();
}
inline void TBuildingObject::_internal_set_x_rot(float value) {
  
  _impl_.x_rot_ = value;
}
inline void TBuildingObject::set_x_rot(float value) {
  _internal_set_x_rot(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.x_rot)
}

// float y_rot = 8;
inline void TBuildingObject::clear_y_rot() {
  _impl_.y_rot_ = 0;
}
inline float TBuildingObject::_internal_y_rot() const {
  return _impl_.y_rot_;
}
inline float TBuildingObject::y_rot() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.y_rot)
  return _internal_y_rot();
}
inline void TBuildingObject::_internal_set_y_rot(float value) {
  
  _impl_.y_rot_ = value;
}
inline void TBuildingObject::set_y_rot(float value) {
  _internal_set_y_rot(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.y_rot)
}

// float z_rot = 9;
inline void TBuildingObject::clear_z_rot() {
  _impl_.z_rot_ = 0;
}
inline float TBuildingObject::_internal_z_rot() const {
  return _impl_.z_rot_;
}
inline float TBuildingObject::z_rot() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.z_rot)
  return _internal_z_rot();
}
inline void TBuildingObject::_internal_set_z_rot(float value) {
  
  _impl_.z_rot_ = value;
}
inline void TBuildingObject::set_z_rot(float value) {
  _internal_set_z_rot(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.z_rot)
}

// int32 life = 10;
inline void TBuildingObject::clear_life() {
  _impl_.life_ = 0;
}
inline int32_t TBuildingObject::_internal_life() const {
  return _impl_.life_;
}
inline int32_t TBuildingObject::life() const {
  // @@protoc_insertion_point(field_get:network.TBuildingObject.life)
  return _internal_life();
}
inline void TBuildingObject::_internal_set_life(int32_t value) {
  
  _impl_.life_ = value;
}
inline void TBuildingObject::set_life(int32_t value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:network.TBuildingObject.life)
}

// -------------------------------------------------------------------

// TGuildSafeboxInitial

// uint32 guild_id = 1;
inline void TGuildSafeboxInitial::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t TGuildSafeboxInitial::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t TGuildSafeboxInitial::guild_id() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxInitial.guild_id)
  return _internal_guild_id();
}
inline void TGuildSafeboxInitial::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void TGuildSafeboxInitial::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxInitial.guild_id)
}

// uint32 size = 2;
inline void TGuildSafeboxInitial::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t TGuildSafeboxInitial::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t TGuildSafeboxInitial::size() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxInitial.size)
  return _internal_size();
}
inline void TGuildSafeboxInitial::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void TGuildSafeboxInitial::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxInitial.size)
}

// bytes password = 3;
inline void TGuildSafeboxInitial::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& TGuildSafeboxInitial::password() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxInitial.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TGuildSafeboxInitial::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxInitial.password)
}
inline std::string* TGuildSafeboxInitial::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:network.TGuildSafeboxInitial.password)
  return _s;
}
inline const std::string& TGuildSafeboxInitial::_internal_password() const {
  return _impl_.password_.Get();
}
inline void TGuildSafeboxInitial::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* TGuildSafeboxInitial::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* TGuildSafeboxInitial::release_password() {
  // @@protoc_insertion_point(field_release:network.TGuildSafeboxInitial.password)
  return _impl_.password_.Release();
}
inline void TGuildSafeboxInitial::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TGuildSafeboxInitial.password)
}

// uint64 gold = 4;
inline void TGuildSafeboxInitial::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t TGuildSafeboxInitial::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t TGuildSafeboxInitial::gold() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxInitial.gold)
  return _internal_gold();
}
inline void TGuildSafeboxInitial::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void TGuildSafeboxInitial::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxInitial.gold)
}

// -------------------------------------------------------------------

// THorseUpgradeProto

// uint32 upgrade_type = 1;
inline void THorseUpgradeProto::clear_upgrade_type() {
  _impl_.upgrade_type_ = 0u;
}
inline uint32_t THorseUpgradeProto::_internal_upgrade_type() const {
  return _impl_.upgrade_type_;
}
inline uint32_t THorseUpgradeProto::upgrade_type() const {
  // @@protoc_insertion_point(field_get:network.THorseUpgradeProto.upgrade_type)
  return _internal_upgrade_type();
}
inline void THorseUpgradeProto::_internal_set_upgrade_type(uint32_t value) {
  
  _impl_.upgrade_type_ = value;
}
inline void THorseUpgradeProto::set_upgrade_type(uint32_t value) {
  _internal_set_upgrade_type(value);
  // @@protoc_insertion_point(field_set:network.THorseUpgradeProto.upgrade_type)
}

// uint32 level = 2;
inline void THorseUpgradeProto::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t THorseUpgradeProto::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t THorseUpgradeProto::level() const {
  // @@protoc_insertion_point(field_get:network.THorseUpgradeProto.level)
  return _internal_level();
}
inline void THorseUpgradeProto::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void THorseUpgradeProto::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.THorseUpgradeProto.level)
}

// uint32 level_limit = 3;
inline void THorseUpgradeProto::clear_level_limit() {
  _impl_.level_limit_ = 0u;
}
inline uint32_t THorseUpgradeProto::_internal_level_limit() const {
  return _impl_.level_limit_;
}
inline uint32_t THorseUpgradeProto::level_limit() const {
  // @@protoc_insertion_point(field_get:network.THorseUpgradeProto.level_limit)
  return _internal_level_limit();
}
inline void THorseUpgradeProto::_internal_set_level_limit(uint32_t value) {
  
  _impl_.level_limit_ = value;
}
inline void THorseUpgradeProto::set_level_limit(uint32_t value) {
  _internal_set_level_limit(value);
  // @@protoc_insertion_point(field_set:network.THorseUpgradeProto.level_limit)
}

// uint32 refine_id = 4;
inline void THorseUpgradeProto::clear_refine_id() {
  _impl_.refine_id_ = 0u;
}
inline uint32_t THorseUpgradeProto::_internal_refine_id() const {
  return _impl_.refine_id_;
}
inline uint32_t THorseUpgradeProto::refine_id() const {
  // @@protoc_insertion_point(field_get:network.THorseUpgradeProto.refine_id)
  return _internal_refine_id();
}
inline void THorseUpgradeProto::_internal_set_refine_id(uint32_t value) {
  
  _impl_.refine_id_ = value;
}
inline void THorseUpgradeProto::set_refine_id(uint32_t value) {
  _internal_set_refine_id(value);
  // @@protoc_insertion_point(field_set:network.THorseUpgradeProto.refine_id)
}

// -------------------------------------------------------------------

// THorseBonusProto

// uint32 level = 1;
inline void THorseBonusProto::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t THorseBonusProto::level() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.level)
  return _internal_level();
}
inline void THorseBonusProto::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void THorseBonusProto::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.level)
}

// uint32 max_hp = 2;
inline void THorseBonusProto::clear_max_hp() {
  _impl_.max_hp_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline uint32_t THorseBonusProto::max_hp() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.max_hp)
  return _internal_max_hp();
}
inline void THorseBonusProto::_internal_set_max_hp(uint32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void THorseBonusProto::set_max_hp(uint32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.max_hp)
}

// uint32 max_hp_item = 3;
inline void THorseBonusProto::clear_max_hp_item() {
  _impl_.max_hp_item_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_max_hp_item() const {
  return _impl_.max_hp_item_;
}
inline uint32_t THorseBonusProto::max_hp_item() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.max_hp_item)
  return _internal_max_hp_item();
}
inline void THorseBonusProto::_internal_set_max_hp_item(uint32_t value) {
  
  _impl_.max_hp_item_ = value;
}
inline void THorseBonusProto::set_max_hp_item(uint32_t value) {
  _internal_set_max_hp_item(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.max_hp_item)
}

// uint32 armor_pct = 4;
inline void THorseBonusProto::clear_armor_pct() {
  _impl_.armor_pct_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_armor_pct() const {
  return _impl_.armor_pct_;
}
inline uint32_t THorseBonusProto::armor_pct() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.armor_pct)
  return _internal_armor_pct();
}
inline void THorseBonusProto::_internal_set_armor_pct(uint32_t value) {
  
  _impl_.armor_pct_ = value;
}
inline void THorseBonusProto::set_armor_pct(uint32_t value) {
  _internal_set_armor_pct(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.armor_pct)
}

// uint32 armor_item = 5;
inline void THorseBonusProto::clear_armor_item() {
  _impl_.armor_item_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_armor_item() const {
  return _impl_.armor_item_;
}
inline uint32_t THorseBonusProto::armor_item() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.armor_item)
  return _internal_armor_item();
}
inline void THorseBonusProto::_internal_set_armor_item(uint32_t value) {
  
  _impl_.armor_item_ = value;
}
inline void THorseBonusProto::set_armor_item(uint32_t value) {
  _internal_set_armor_item(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.armor_item)
}

// uint32 monster_pct = 6;
inline void THorseBonusProto::clear_monster_pct() {
  _impl_.monster_pct_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_monster_pct() const {
  return _impl_.monster_pct_;
}
inline uint32_t THorseBonusProto::monster_pct() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.monster_pct)
  return _internal_monster_pct();
}
inline void THorseBonusProto::_internal_set_monster_pct(uint32_t value) {
  
  _impl_.monster_pct_ = value;
}
inline void THorseBonusProto::set_monster_pct(uint32_t value) {
  _internal_set_monster_pct(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.monster_pct)
}

// uint32 monster_item = 7;
inline void THorseBonusProto::clear_monster_item() {
  _impl_.monster_item_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_monster_item() const {
  return _impl_.monster_item_;
}
inline uint32_t THorseBonusProto::monster_item() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.monster_item)
  return _internal_monster_item();
}
inline void THorseBonusProto::_internal_set_monster_item(uint32_t value) {
  
  _impl_.monster_item_ = value;
}
inline void THorseBonusProto::set_monster_item(uint32_t value) {
  _internal_set_monster_item(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.monster_item)
}

// uint32 item_count = 8;
inline void THorseBonusProto::clear_item_count() {
  _impl_.item_count_ = 0u;
}
inline uint32_t THorseBonusProto::_internal_item_count() const {
  return _impl_.item_count_;
}
inline uint32_t THorseBonusProto::item_count() const {
  // @@protoc_insertion_point(field_get:network.THorseBonusProto.item_count)
  return _internal_item_count();
}
inline void THorseBonusProto::_internal_set_item_count(uint32_t value) {
  
  _impl_.item_count_ = value;
}
inline void THorseBonusProto::set_item_count(uint32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:network.THorseBonusProto.item_count)
}

// -------------------------------------------------------------------

// TGayaShopData

// uint32 pos = 1;
inline void TGayaShopData::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t TGayaShopData::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t TGayaShopData::pos() const {
  // @@protoc_insertion_point(field_get:network.TGayaShopData.pos)
  return _internal_pos();
}
inline void TGayaShopData::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void TGayaShopData::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:network.TGayaShopData.pos)
}

// uint32 vnum = 2;
inline void TGayaShopData::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TGayaShopData::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TGayaShopData::vnum() const {
  // @@protoc_insertion_point(field_get:network.TGayaShopData.vnum)
  return _internal_vnum();
}
inline void TGayaShopData::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TGayaShopData::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TGayaShopData.vnum)
}

// uint32 count = 3;
inline void TGayaShopData::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t TGayaShopData::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t TGayaShopData::count() const {
  // @@protoc_insertion_point(field_get:network.TGayaShopData.count)
  return _internal_count();
}
inline void TGayaShopData::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void TGayaShopData::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.TGayaShopData.count)
}

// uint32 price = 4;
inline void TGayaShopData::clear_price() {
  _impl_.price_ = 0u;
}
inline uint32_t TGayaShopData::_internal_price() const {
  return _impl_.price_;
}
inline uint32_t TGayaShopData::price() const {
  // @@protoc_insertion_point(field_get:network.TGayaShopData.price)
  return _internal_price();
}
inline void TGayaShopData::_internal_set_price(uint32_t value) {
  
  _impl_.price_ = value;
}
inline void TGayaShopData::set_price(uint32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TGayaShopData.price)
}

// -------------------------------------------------------------------

// TAttrtreeProto

// uint32 row = 1;
inline void TAttrtreeProto::clear_row() {
  _impl_.row_ = 0u;
}
inline uint32_t TAttrtreeProto::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t TAttrtreeProto::row() const {
  // @@protoc_insertion_point(field_get:network.TAttrtreeProto.row)
  return _internal_row();
}
inline void TAttrtreeProto::_internal_set_row(uint32_t value) {
  
  _impl_.row_ = value;
}
inline void TAttrtreeProto::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:network.TAttrtreeProto.row)
}

// uint32 col = 2;
inline void TAttrtreeProto::clear_col() {
  _impl_.col_ = 0u;
}
inline uint32_t TAttrtreeProto::_internal_col() const {
  return _impl_.col_;
}
inline uint32_t TAttrtreeProto::col() const {
  // @@protoc_insertion_point(field_get:network.TAttrtreeProto.col)
  return _internal_col();
}
inline void TAttrtreeProto::_internal_set_col(uint32_t value) {
  
  _impl_.col_ = value;
}
inline void TAttrtreeProto::set_col(uint32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:network.TAttrtreeProto.col)
}

// uint32 apply_type = 3;
inline void TAttrtreeProto::clear_apply_type() {
  _impl_.apply_type_ = 0u;
}
inline uint32_t TAttrtreeProto::_internal_apply_type() const {
  return _impl_.apply_type_;
}
inline uint32_t TAttrtreeProto::apply_type() const {
  // @@protoc_insertion_point(field_get:network.TAttrtreeProto.apply_type)
  return _internal_apply_type();
}
inline void TAttrtreeProto::_internal_set_apply_type(uint32_t value) {
  
  _impl_.apply_type_ = value;
}
inline void TAttrtreeProto::set_apply_type(uint32_t value) {
  _internal_set_apply_type(value);
  // @@protoc_insertion_point(field_set:network.TAttrtreeProto.apply_type)
}

// int32 max_apply_value = 4;
inline void TAttrtreeProto::clear_max_apply_value() {
  _impl_.max_apply_value_ = 0;
}
inline int32_t TAttrtreeProto::_internal_max_apply_value() const {
  return _impl_.max_apply_value_;
}
inline int32_t TAttrtreeProto::max_apply_value() const {
  // @@protoc_insertion_point(field_get:network.TAttrtreeProto.max_apply_value)
  return _internal_max_apply_value();
}
inline void TAttrtreeProto::_internal_set_max_apply_value(int32_t value) {
  
  _impl_.max_apply_value_ = value;
}
inline void TAttrtreeProto::set_max_apply_value(int32_t value) {
  _internal_set_max_apply_value(value);
  // @@protoc_insertion_point(field_set:network.TAttrtreeProto.max_apply_value)
}

// repeated uint32 refine_level = 5;
inline int TAttrtreeProto::_internal_refine_level_size() const {
  return _impl_.refine_level_.size();
}
inline int TAttrtreeProto::refine_level_size() const {
  return _internal_refine_level_size();
}
inline void TAttrtreeProto::clear_refine_level() {
  _impl_.refine_level_.Clear();
}
inline uint32_t TAttrtreeProto::_internal_refine_level(int index) const {
  return _impl_.refine_level_.Get(index);
}
inline uint32_t TAttrtreeProto::refine_level(int index) const {
  // @@protoc_insertion_point(field_get:network.TAttrtreeProto.refine_level)
  return _internal_refine_level(index);
}
inline void TAttrtreeProto::set_refine_level(int index, uint32_t value) {
  _impl_.refine_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TAttrtreeProto.refine_level)
}
inline void TAttrtreeProto::_internal_add_refine_level(uint32_t value) {
  _impl_.refine_level_.Add(value);
}
inline void TAttrtreeProto::add_refine_level(uint32_t value) {
  _internal_add_refine_level(value);
  // @@protoc_insertion_point(field_add:network.TAttrtreeProto.refine_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TAttrtreeProto::_internal_refine_level() const {
  return _impl_.refine_level_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TAttrtreeProto::refine_level() const {
  // @@protoc_insertion_point(field_list:network.TAttrtreeProto.refine_level)
  return _internal_refine_level();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TAttrtreeProto::_internal_mutable_refine_level() {
  return &_impl_.refine_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TAttrtreeProto::mutable_refine_level() {
  // @@protoc_insertion_point(field_mutable_list:network.TAttrtreeProto.refine_level)
  return _internal_mutable_refine_level();
}

// -------------------------------------------------------------------

// TRuneProtoTable

// uint32 vnum = 1;
inline void TRuneProtoTable::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TRuneProtoTable::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TRuneProtoTable::vnum() const {
  // @@protoc_insertion_point(field_get:network.TRuneProtoTable.vnum)
  return _internal_vnum();
}
inline void TRuneProtoTable::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TRuneProtoTable::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TRuneProtoTable.vnum)
}

// bytes name = 2;
inline void TRuneProtoTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TRuneProtoTable::name() const {
  // @@protoc_insertion_point(field_get:network.TRuneProtoTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TRuneProtoTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TRuneProtoTable.name)
}
inline std::string* TRuneProtoTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TRuneProtoTable.name)
  return _s;
}
inline const std::string& TRuneProtoTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TRuneProtoTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TRuneProtoTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TRuneProtoTable::release_name() {
  // @@protoc_insertion_point(field_release:network.TRuneProtoTable.name)
  return _impl_.name_.Release();
}
inline void TRuneProtoTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TRuneProtoTable.name)
}

// uint32 group = 3;
inline void TRuneProtoTable::clear_group() {
  _impl_.group_ = 0u;
}
inline uint32_t TRuneProtoTable::_internal_group() const {
  return _impl_.group_;
}
inline uint32_t TRuneProtoTable::group() const {
  // @@protoc_insertion_point(field_get:network.TRuneProtoTable.group)
  return _internal_group();
}
inline void TRuneProtoTable::_internal_set_group(uint32_t value) {
  
  _impl_.group_ = value;
}
inline void TRuneProtoTable::set_group(uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:network.TRuneProtoTable.group)
}

// uint32 sub_group = 4;
inline void TRuneProtoTable::clear_sub_group() {
  _impl_.sub_group_ = 0u;
}
inline uint32_t TRuneProtoTable::_internal_sub_group() const {
  return _impl_.sub_group_;
}
inline uint32_t TRuneProtoTable::sub_group() const {
  // @@protoc_insertion_point(field_get:network.TRuneProtoTable.sub_group)
  return _internal_sub_group();
}
inline void TRuneProtoTable::_internal_set_sub_group(uint32_t value) {
  
  _impl_.sub_group_ = value;
}
inline void TRuneProtoTable::set_sub_group(uint32_t value) {
  _internal_set_sub_group(value);
  // @@protoc_insertion_point(field_set:network.TRuneProtoTable.sub_group)
}

// uint32 apply_type = 5;
inline void TRuneProtoTable::clear_apply_type() {
  _impl_.apply_type_ = 0u;
}
inline uint32_t TRuneProtoTable::_internal_apply_type() const {
  return _impl_.apply_type_;
}
inline uint32_t TRuneProtoTable::apply_type() const {
  // @@protoc_insertion_point(field_get:network.TRuneProtoTable.apply_type)
  return _internal_apply_type();
}
inline void TRuneProtoTable::_internal_set_apply_type(uint32_t value) {
  
  _impl_.apply_type_ = value;
}
inline void TRuneProtoTable::set_apply_type(uint32_t value) {
  _internal_set_apply_type(value);
  // @@protoc_insertion_point(field_set:network.TRuneProtoTable.apply_type)
}

// bytes apply_eval = 6;
inline void TRuneProtoTable::clear_apply_eval() {
  _impl_.apply_eval_.ClearToEmpty();
}
inline const std::string& TRuneProtoTable::apply_eval() const {
  // @@protoc_insertion_point(field_get:network.TRuneProtoTable.apply_eval)
  return _internal_apply_eval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TRuneProtoTable::set_apply_eval(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apply_eval_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TRuneProtoTable.apply_eval)
}
inline std::string* TRuneProtoTable::mutable_apply_eval() {
  std::string* _s = _internal_mutable_apply_eval();
  // @@protoc_insertion_point(field_mutable:network.TRuneProtoTable.apply_eval)
  return _s;
}
inline const std::string& TRuneProtoTable::_internal_apply_eval() const {
  return _impl_.apply_eval_.Get();
}
inline void TRuneProtoTable::_internal_set_apply_eval(const std::string& value) {
  
  _impl_.apply_eval_.Set(value, GetArenaForAllocation());
}
inline std::string* TRuneProtoTable::_internal_mutable_apply_eval() {
  
  return _impl_.apply_eval_.Mutable(GetArenaForAllocation());
}
inline std::string* TRuneProtoTable::release_apply_eval() {
  // @@protoc_insertion_point(field_release:network.TRuneProtoTable.apply_eval)
  return _impl_.apply_eval_.Release();
}
inline void TRuneProtoTable::set_allocated_apply_eval(std::string* apply_eval) {
  if (apply_eval != nullptr) {
    
  } else {
    
  }
  _impl_.apply_eval_.SetAllocated(apply_eval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apply_eval_.IsDefault()) {
    _impl_.apply_eval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TRuneProtoTable.apply_eval)
}

// -------------------------------------------------------------------

// TRunePointProtoTable

// uint32 point = 1;
inline void TRunePointProtoTable::clear_point() {
  _impl_.point_ = 0u;
}
inline uint32_t TRunePointProtoTable::_internal_point() const {
  return _impl_.point_;
}
inline uint32_t TRunePointProtoTable::point() const {
  // @@protoc_insertion_point(field_get:network.TRunePointProtoTable.point)
  return _internal_point();
}
inline void TRunePointProtoTable::_internal_set_point(uint32_t value) {
  
  _impl_.point_ = value;
}
inline void TRunePointProtoTable::set_point(uint32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:network.TRunePointProtoTable.point)
}

// uint32 refine_proto = 2;
inline void TRunePointProtoTable::clear_refine_proto() {
  _impl_.refine_proto_ = 0u;
}
inline uint32_t TRunePointProtoTable::_internal_refine_proto() const {
  return _impl_.refine_proto_;
}
inline uint32_t TRunePointProtoTable::refine_proto() const {
  // @@protoc_insertion_point(field_get:network.TRunePointProtoTable.refine_proto)
  return _internal_refine_proto();
}
inline void TRunePointProtoTable::_internal_set_refine_proto(uint32_t value) {
  
  _impl_.refine_proto_ = value;
}
inline void TRunePointProtoTable::set_refine_proto(uint32_t value) {
  _internal_set_refine_proto(value);
  // @@protoc_insertion_point(field_set:network.TRunePointProtoTable.refine_proto)
}

// -------------------------------------------------------------------

// TXmasRewards

// uint32 day = 1;
inline void TXmasRewards::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t TXmasRewards::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t TXmasRewards::day() const {
  // @@protoc_insertion_point(field_get:network.TXmasRewards.day)
  return _internal_day();
}
inline void TXmasRewards::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void TXmasRewards::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:network.TXmasRewards.day)
}

// uint32 vnum = 2;
inline void TXmasRewards::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TXmasRewards::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TXmasRewards::vnum() const {
  // @@protoc_insertion_point(field_get:network.TXmasRewards.vnum)
  return _internal_vnum();
}
inline void TXmasRewards::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TXmasRewards::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TXmasRewards.vnum)
}

// uint32 count = 3;
inline void TXmasRewards::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t TXmasRewards::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t TXmasRewards::count() const {
  // @@protoc_insertion_point(field_get:network.TXmasRewards.count)
  return _internal_count();
}
inline void TXmasRewards::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void TXmasRewards::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.TXmasRewards.count)
}

// -------------------------------------------------------------------

// TSoulProtoTable

// uint32 vnum = 1;
inline void TSoulProtoTable::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TSoulProtoTable::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TSoulProtoTable::vnum() const {
  // @@protoc_insertion_point(field_get:network.TSoulProtoTable.vnum)
  return _internal_vnum();
}
inline void TSoulProtoTable::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TSoulProtoTable::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TSoulProtoTable.vnum)
}

// uint32 soul_type = 2;
inline void TSoulProtoTable::clear_soul_type() {
  _impl_.soul_type_ = 0u;
}
inline uint32_t TSoulProtoTable::_internal_soul_type() const {
  return _impl_.soul_type_;
}
inline uint32_t TSoulProtoTable::soul_type() const {
  // @@protoc_insertion_point(field_get:network.TSoulProtoTable.soul_type)
  return _internal_soul_type();
}
inline void TSoulProtoTable::_internal_set_soul_type(uint32_t value) {
  
  _impl_.soul_type_ = value;
}
inline void TSoulProtoTable::set_soul_type(uint32_t value) {
  _internal_set_soul_type(value);
  // @@protoc_insertion_point(field_set:network.TSoulProtoTable.soul_type)
}

// uint32 apply_type = 3;
inline void TSoulProtoTable::clear_apply_type() {
  _impl_.apply_type_ = 0u;
}
inline uint32_t TSoulProtoTable::_internal_apply_type() const {
  return _impl_.apply_type_;
}
inline uint32_t TSoulProtoTable::apply_type() const {
  // @@protoc_insertion_point(field_get:network.TSoulProtoTable.apply_type)
  return _internal_apply_type();
}
inline void TSoulProtoTable::_internal_set_apply_type(uint32_t value) {
  
  _impl_.apply_type_ = value;
}
inline void TSoulProtoTable::set_apply_type(uint32_t value) {
  _internal_set_apply_type(value);
  // @@protoc_insertion_point(field_set:network.TSoulProtoTable.apply_type)
}

// repeated int32 apply_values = 4;
inline int TSoulProtoTable::_internal_apply_values_size() const {
  return _impl_.apply_values_.size();
}
inline int TSoulProtoTable::apply_values_size() const {
  return _internal_apply_values_size();
}
inline void TSoulProtoTable::clear_apply_values() {
  _impl_.apply_values_.Clear();
}
inline int32_t TSoulProtoTable::_internal_apply_values(int index) const {
  return _impl_.apply_values_.Get(index);
}
inline int32_t TSoulProtoTable::apply_values(int index) const {
  // @@protoc_insertion_point(field_get:network.TSoulProtoTable.apply_values)
  return _internal_apply_values(index);
}
inline void TSoulProtoTable::set_apply_values(int index, int32_t value) {
  _impl_.apply_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TSoulProtoTable.apply_values)
}
inline void TSoulProtoTable::_internal_add_apply_values(int32_t value) {
  _impl_.apply_values_.Add(value);
}
inline void TSoulProtoTable::add_apply_values(int32_t value) {
  _internal_add_apply_values(value);
  // @@protoc_insertion_point(field_add:network.TSoulProtoTable.apply_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TSoulProtoTable::_internal_apply_values() const {
  return _impl_.apply_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TSoulProtoTable::apply_values() const {
  // @@protoc_insertion_point(field_list:network.TSoulProtoTable.apply_values)
  return _internal_apply_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TSoulProtoTable::_internal_mutable_apply_values() {
  return &_impl_.apply_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TSoulProtoTable::mutable_apply_values() {
  // @@protoc_insertion_point(field_mutable_list:network.TSoulProtoTable.apply_values)
  return _internal_mutable_apply_values();
}

// -------------------------------------------------------------------

// TItemIDRangeTable

// uint32 min_id = 1;
inline void TItemIDRangeTable::clear_min_id() {
  _impl_.min_id_ = 0u;
}
inline uint32_t TItemIDRangeTable::_internal_min_id() const {
  return _impl_.min_id_;
}
inline uint32_t TItemIDRangeTable::min_id() const {
  // @@protoc_insertion_point(field_get:network.TItemIDRangeTable.min_id)
  return _internal_min_id();
}
inline void TItemIDRangeTable::_internal_set_min_id(uint32_t value) {
  
  _impl_.min_id_ = value;
}
inline void TItemIDRangeTable::set_min_id(uint32_t value) {
  _internal_set_min_id(value);
  // @@protoc_insertion_point(field_set:network.TItemIDRangeTable.min_id)
}

// uint32 max_id = 2;
inline void TItemIDRangeTable::clear_max_id() {
  _impl_.max_id_ = 0u;
}
inline uint32_t TItemIDRangeTable::_internal_max_id() const {
  return _impl_.max_id_;
}
inline uint32_t TItemIDRangeTable::max_id() const {
  // @@protoc_insertion_point(field_get:network.TItemIDRangeTable.max_id)
  return _internal_max_id();
}
inline void TItemIDRangeTable::_internal_set_max_id(uint32_t value) {
  
  _impl_.max_id_ = value;
}
inline void TItemIDRangeTable::set_max_id(uint32_t value) {
  _internal_set_max_id(value);
  // @@protoc_insertion_point(field_set:network.TItemIDRangeTable.max_id)
}

// uint32 usable_item_id_min = 3;
inline void TItemIDRangeTable::clear_usable_item_id_min() {
  _impl_.usable_item_id_min_ = 0u;
}
inline uint32_t TItemIDRangeTable::_internal_usable_item_id_min() const {
  return _impl_.usable_item_id_min_;
}
inline uint32_t TItemIDRangeTable::usable_item_id_min() const {
  // @@protoc_insertion_point(field_get:network.TItemIDRangeTable.usable_item_id_min)
  return _internal_usable_item_id_min();
}
inline void TItemIDRangeTable::_internal_set_usable_item_id_min(uint32_t value) {
  
  _impl_.usable_item_id_min_ = value;
}
inline void TItemIDRangeTable::set_usable_item_id_min(uint32_t value) {
  _internal_set_usable_item_id_min(value);
  // @@protoc_insertion_point(field_set:network.TItemIDRangeTable.usable_item_id_min)
}

// -------------------------------------------------------------------

// TBattlepassData

// int32 progress = 1;
inline void TBattlepassData::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t TBattlepassData::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t TBattlepassData::progress() const {
  // @@protoc_insertion_point(field_get:network.TBattlepassData.progress)
  return _internal_progress();
}
inline void TBattlepassData::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void TBattlepassData::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:network.TBattlepassData.progress)
}

// bytes name = 2;
inline void TBattlepassData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TBattlepassData::name() const {
  // @@protoc_insertion_point(field_get:network.TBattlepassData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TBattlepassData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TBattlepassData.name)
}
inline std::string* TBattlepassData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TBattlepassData.name)
  return _s;
}
inline const std::string& TBattlepassData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TBattlepassData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TBattlepassData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TBattlepassData::release_name() {
  // @@protoc_insertion_point(field_release:network.TBattlepassData.name)
  return _impl_.name_.Release();
}
inline void TBattlepassData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TBattlepassData.name)
}

// bytes task = 3;
inline void TBattlepassData::clear_task() {
  _impl_.task_.ClearToEmpty();
}
inline const std::string& TBattlepassData::task() const {
  // @@protoc_insertion_point(field_get:network.TBattlepassData.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TBattlepassData::set_task(ArgT0&& arg0, ArgT... args) {
 
 _impl_.task_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TBattlepassData.task)
}
inline std::string* TBattlepassData::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:network.TBattlepassData.task)
  return _s;
}
inline const std::string& TBattlepassData::_internal_task() const {
  return _impl_.task_.Get();
}
inline void TBattlepassData::_internal_set_task(const std::string& value) {
  
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* TBattlepassData::_internal_mutable_task() {
  
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* TBattlepassData::release_task() {
  // @@protoc_insertion_point(field_release:network.TBattlepassData.task)
  return _impl_.task_.Release();
}
inline void TBattlepassData::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    
  } else {
    
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TBattlepassData.task)
}

// uint32 reward_vnum = 4;
inline void TBattlepassData::clear_reward_vnum() {
  _impl_.reward_vnum_ = 0u;
}
inline uint32_t TBattlepassData::_internal_reward_vnum() const {
  return _impl_.reward_vnum_;
}
inline uint32_t TBattlepassData::reward_vnum() const {
  // @@protoc_insertion_point(field_get:network.TBattlepassData.reward_vnum)
  return _internal_reward_vnum();
}
inline void TBattlepassData::_internal_set_reward_vnum(uint32_t value) {
  
  _impl_.reward_vnum_ = value;
}
inline void TBattlepassData::set_reward_vnum(uint32_t value) {
  _internal_set_reward_vnum(value);
  // @@protoc_insertion_point(field_set:network.TBattlepassData.reward_vnum)
}

// uint32 reward_count = 5;
inline void TBattlepassData::clear_reward_count() {
  _impl_.reward_count_ = 0u;
}
inline uint32_t TBattlepassData::_internal_reward_count() const {
  return _impl_.reward_count_;
}
inline uint32_t TBattlepassData::reward_count() const {
  // @@protoc_insertion_point(field_get:network.TBattlepassData.reward_count)
  return _internal_reward_count();
}
inline void TBattlepassData::_internal_set_reward_count(uint32_t value) {
  
  _impl_.reward_count_ = value;
}
inline void TBattlepassData::set_reward_count(uint32_t value) {
  _internal_set_reward_count(value);
  // @@protoc_insertion_point(field_set:network.TBattlepassData.reward_count)
}

// -------------------------------------------------------------------

// TAdminInfo

// int32 id = 1;
inline void TAdminInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TAdminInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TAdminInfo::id() const {
  // @@protoc_insertion_point(field_get:network.TAdminInfo.id)
  return _internal_id();
}
inline void TAdminInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TAdminInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TAdminInfo.id)
}

// bytes account = 2;
inline void TAdminInfo::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& TAdminInfo::account() const {
  // @@protoc_insertion_point(field_get:network.TAdminInfo.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAdminInfo::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAdminInfo.account)
}
inline std::string* TAdminInfo::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:network.TAdminInfo.account)
  return _s;
}
inline const std::string& TAdminInfo::_internal_account() const {
  return _impl_.account_.Get();
}
inline void TAdminInfo::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* TAdminInfo::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* TAdminInfo::release_account() {
  // @@protoc_insertion_point(field_release:network.TAdminInfo.account)
  return _impl_.account_.Release();
}
inline void TAdminInfo::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAdminInfo.account)
}

// bytes name = 3;
inline void TAdminInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TAdminInfo::name() const {
  // @@protoc_insertion_point(field_get:network.TAdminInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAdminInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAdminInfo.name)
}
inline std::string* TAdminInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TAdminInfo.name)
  return _s;
}
inline const std::string& TAdminInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TAdminInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TAdminInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TAdminInfo::release_name() {
  // @@protoc_insertion_point(field_release:network.TAdminInfo.name)
  return _impl_.name_.Release();
}
inline void TAdminInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAdminInfo.name)
}

// int32 authority = 4;
inline void TAdminInfo::clear_authority() {
  _impl_.authority_ = 0;
}
inline int32_t TAdminInfo::_internal_authority() const {
  return _impl_.authority_;
}
inline int32_t TAdminInfo::authority() const {
  // @@protoc_insertion_point(field_get:network.TAdminInfo.authority)
  return _internal_authority();
}
inline void TAdminInfo::_internal_set_authority(int32_t value) {
  
  _impl_.authority_ = value;
}
inline void TAdminInfo::set_authority(int32_t value) {
  _internal_set_authority(value);
  // @@protoc_insertion_point(field_set:network.TAdminInfo.authority)
}

// -------------------------------------------------------------------

// TOfflineMessage

// bytes sender = 1;
inline void TOfflineMessage::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& TOfflineMessage::sender() const {
  // @@protoc_insertion_point(field_get:network.TOfflineMessage.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TOfflineMessage::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TOfflineMessage.sender)
}
inline std::string* TOfflineMessage::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:network.TOfflineMessage.sender)
  return _s;
}
inline const std::string& TOfflineMessage::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void TOfflineMessage::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* TOfflineMessage::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* TOfflineMessage::release_sender() {
  // @@protoc_insertion_point(field_release:network.TOfflineMessage.sender)
  return _impl_.sender_.Release();
}
inline void TOfflineMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TOfflineMessage.sender)
}

// bytes message = 2;
inline void TOfflineMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TOfflineMessage::message() const {
  // @@protoc_insertion_point(field_get:network.TOfflineMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TOfflineMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TOfflineMessage.message)
}
inline std::string* TOfflineMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.TOfflineMessage.message)
  return _s;
}
inline const std::string& TOfflineMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void TOfflineMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* TOfflineMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* TOfflineMessage::release_message() {
  // @@protoc_insertion_point(field_release:network.TOfflineMessage.message)
  return _impl_.message_.Release();
}
inline void TOfflineMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TOfflineMessage.message)
}

// bool is_gm = 3;
inline void TOfflineMessage::clear_is_gm() {
  _impl_.is_gm_ = false;
}
inline bool TOfflineMessage::_internal_is_gm() const {
  return _impl_.is_gm_;
}
inline bool TOfflineMessage::is_gm() const {
  // @@protoc_insertion_point(field_get:network.TOfflineMessage.is_gm)
  return _internal_is_gm();
}
inline void TOfflineMessage::_internal_set_is_gm(bool value) {
  
  _impl_.is_gm_ = value;
}
inline void TOfflineMessage::set_is_gm(bool value) {
  _internal_set_is_gm(value);
  // @@protoc_insertion_point(field_set:network.TOfflineMessage.is_gm)
}

// -------------------------------------------------------------------

// TGuildSafeboxLogTable

// uint32 type = 1;
inline void TGuildSafeboxLogTable::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TGuildSafeboxLogTable::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TGuildSafeboxLogTable::type() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxLogTable.type)
  return _internal_type();
}
inline void TGuildSafeboxLogTable::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TGuildSafeboxLogTable::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxLogTable.type)
}

// uint32 pid = 2;
inline void TGuildSafeboxLogTable::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t TGuildSafeboxLogTable::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t TGuildSafeboxLogTable::pid() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxLogTable.pid)
  return _internal_pid();
}
inline void TGuildSafeboxLogTable::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void TGuildSafeboxLogTable::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxLogTable.pid)
}

// bytes player_name = 3;
inline void TGuildSafeboxLogTable::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& TGuildSafeboxLogTable::player_name() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxLogTable.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TGuildSafeboxLogTable::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxLogTable.player_name)
}
inline std::string* TGuildSafeboxLogTable::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:network.TGuildSafeboxLogTable.player_name)
  return _s;
}
inline const std::string& TGuildSafeboxLogTable::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void TGuildSafeboxLogTable::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TGuildSafeboxLogTable::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TGuildSafeboxLogTable::release_player_name() {
  // @@protoc_insertion_point(field_release:network.TGuildSafeboxLogTable.player_name)
  return _impl_.player_name_.Release();
}
inline void TGuildSafeboxLogTable::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TGuildSafeboxLogTable.player_name)
}

// .network.TItemData item = 4;
inline bool TGuildSafeboxLogTable::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool TGuildSafeboxLogTable::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& TGuildSafeboxLogTable::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& TGuildSafeboxLogTable::item() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxLogTable.item)
  return _internal_item();
}
inline void TGuildSafeboxLogTable::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.TGuildSafeboxLogTable.item)
}
inline ::network::TItemData* TGuildSafeboxLogTable::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* TGuildSafeboxLogTable::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.TGuildSafeboxLogTable.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* TGuildSafeboxLogTable::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* TGuildSafeboxLogTable::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.TGuildSafeboxLogTable.item)
  return _msg;
}
inline void TGuildSafeboxLogTable::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.TGuildSafeboxLogTable.item)
}

// uint64 gold = 5;
inline void TGuildSafeboxLogTable::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t TGuildSafeboxLogTable::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t TGuildSafeboxLogTable::gold() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxLogTable.gold)
  return _internal_gold();
}
inline void TGuildSafeboxLogTable::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void TGuildSafeboxLogTable::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxLogTable.gold)
}

// uint32 time = 6;
inline void TGuildSafeboxLogTable::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t TGuildSafeboxLogTable::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t TGuildSafeboxLogTable::time() const {
  // @@protoc_insertion_point(field_get:network.TGuildSafeboxLogTable.time)
  return _internal_time();
}
inline void TGuildSafeboxLogTable::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void TGuildSafeboxLogTable::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.TGuildSafeboxLogTable.time)
}

// -------------------------------------------------------------------

// TMapLocation

// repeated uint32 maps = 1;
inline int TMapLocation::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int TMapLocation::maps_size() const {
  return _internal_maps_size();
}
inline void TMapLocation::clear_maps() {
  _impl_.maps_.Clear();
}
inline uint32_t TMapLocation::_internal_maps(int index) const {
  return _impl_.maps_.Get(index);
}
inline uint32_t TMapLocation::maps(int index) const {
  // @@protoc_insertion_point(field_get:network.TMapLocation.maps)
  return _internal_maps(index);
}
inline void TMapLocation::set_maps(int index, uint32_t value) {
  _impl_.maps_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TMapLocation.maps)
}
inline void TMapLocation::_internal_add_maps(uint32_t value) {
  _impl_.maps_.Add(value);
}
inline void TMapLocation::add_maps(uint32_t value) {
  _internal_add_maps(value);
  // @@protoc_insertion_point(field_add:network.TMapLocation.maps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TMapLocation::_internal_maps() const {
  return _impl_.maps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TMapLocation::maps() const {
  // @@protoc_insertion_point(field_list:network.TMapLocation.maps)
  return _internal_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TMapLocation::_internal_mutable_maps() {
  return &_impl_.maps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TMapLocation::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:network.TMapLocation.maps)
  return _internal_mutable_maps();
}

// bytes host_name = 2;
inline void TMapLocation::clear_host_name() {
  _impl_.host_name_.ClearToEmpty();
}
inline const std::string& TMapLocation::host_name() const {
  // @@protoc_insertion_point(field_get:network.TMapLocation.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TMapLocation::set_host_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TMapLocation.host_name)
}
inline std::string* TMapLocation::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:network.TMapLocation.host_name)
  return _s;
}
inline const std::string& TMapLocation::_internal_host_name() const {
  return _impl_.host_name_.Get();
}
inline void TMapLocation::_internal_set_host_name(const std::string& value) {
  
  _impl_.host_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TMapLocation::_internal_mutable_host_name() {
  
  return _impl_.host_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TMapLocation::release_host_name() {
  // @@protoc_insertion_point(field_release:network.TMapLocation.host_name)
  return _impl_.host_name_.Release();
}
inline void TMapLocation::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  _impl_.host_name_.SetAllocated(host_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_name_.IsDefault()) {
    _impl_.host_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TMapLocation.host_name)
}

// uint32 port = 3;
inline void TMapLocation::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t TMapLocation::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t TMapLocation::port() const {
  // @@protoc_insertion_point(field_get:network.TMapLocation.port)
  return _internal_port();
}
inline void TMapLocation::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void TMapLocation::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.TMapLocation.port)
}

// uint32 channel = 4;
inline void TMapLocation::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t TMapLocation::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t TMapLocation::channel() const {
  // @@protoc_insertion_point(field_get:network.TMapLocation.channel)
  return _internal_channel();
}
inline void TMapLocation::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void TMapLocation::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.TMapLocation.channel)
}

// -------------------------------------------------------------------

// TEquipmentChangerTable

// uint32 pid = 1;
inline void TEquipmentChangerTable::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t TEquipmentChangerTable::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t TEquipmentChangerTable::pid() const {
  // @@protoc_insertion_point(field_get:network.TEquipmentChangerTable.pid)
  return _internal_pid();
}
inline void TEquipmentChangerTable::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void TEquipmentChangerTable::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.TEquipmentChangerTable.pid)
}

// uint32 index = 2;
inline void TEquipmentChangerTable::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t TEquipmentChangerTable::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t TEquipmentChangerTable::index() const {
  // @@protoc_insertion_point(field_get:network.TEquipmentChangerTable.index)
  return _internal_index();
}
inline void TEquipmentChangerTable::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void TEquipmentChangerTable::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.TEquipmentChangerTable.index)
}

// bytes page_name = 3;
inline void TEquipmentChangerTable::clear_page_name() {
  _impl_.page_name_.ClearToEmpty();
}
inline const std::string& TEquipmentChangerTable::page_name() const {
  // @@protoc_insertion_point(field_get:network.TEquipmentChangerTable.page_name)
  return _internal_page_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TEquipmentChangerTable::set_page_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TEquipmentChangerTable.page_name)
}
inline std::string* TEquipmentChangerTable::mutable_page_name() {
  std::string* _s = _internal_mutable_page_name();
  // @@protoc_insertion_point(field_mutable:network.TEquipmentChangerTable.page_name)
  return _s;
}
inline const std::string& TEquipmentChangerTable::_internal_page_name() const {
  return _impl_.page_name_.Get();
}
inline void TEquipmentChangerTable::_internal_set_page_name(const std::string& value) {
  
  _impl_.page_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TEquipmentChangerTable::_internal_mutable_page_name() {
  
  return _impl_.page_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TEquipmentChangerTable::release_page_name() {
  // @@protoc_insertion_point(field_release:network.TEquipmentChangerTable.page_name)
  return _impl_.page_name_.Release();
}
inline void TEquipmentChangerTable::set_allocated_page_name(std::string* page_name) {
  if (page_name != nullptr) {
    
  } else {
    
  }
  _impl_.page_name_.SetAllocated(page_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_name_.IsDefault()) {
    _impl_.page_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TEquipmentChangerTable.page_name)
}

// repeated uint32 item_ids = 4;
inline int TEquipmentChangerTable::_internal_item_ids_size() const {
  return _impl_.item_ids_.size();
}
inline int TEquipmentChangerTable::item_ids_size() const {
  return _internal_item_ids_size();
}
inline void TEquipmentChangerTable::clear_item_ids() {
  _impl_.item_ids_.Clear();
}
inline uint32_t TEquipmentChangerTable::_internal_item_ids(int index) const {
  return _impl_.item_ids_.Get(index);
}
inline uint32_t TEquipmentChangerTable::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:network.TEquipmentChangerTable.item_ids)
  return _internal_item_ids(index);
}
inline void TEquipmentChangerTable::set_item_ids(int index, uint32_t value) {
  _impl_.item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TEquipmentChangerTable.item_ids)
}
inline void TEquipmentChangerTable::_internal_add_item_ids(uint32_t value) {
  _impl_.item_ids_.Add(value);
}
inline void TEquipmentChangerTable::add_item_ids(uint32_t value) {
  _internal_add_item_ids(value);
  // @@protoc_insertion_point(field_add:network.TEquipmentChangerTable.item_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TEquipmentChangerTable::_internal_item_ids() const {
  return _impl_.item_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TEquipmentChangerTable::item_ids() const {
  // @@protoc_insertion_point(field_list:network.TEquipmentChangerTable.item_ids)
  return _internal_item_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TEquipmentChangerTable::_internal_mutable_item_ids() {
  return &_impl_.item_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TEquipmentChangerTable::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:network.TEquipmentChangerTable.item_ids)
  return _internal_mutable_item_ids();
}

// uint32 rune_page = 5;
inline void TEquipmentChangerTable::clear_rune_page() {
  _impl_.rune_page_ = 0u;
}
inline uint32_t TEquipmentChangerTable::_internal_rune_page() const {
  return _impl_.rune_page_;
}
inline uint32_t TEquipmentChangerTable::rune_page() const {
  // @@protoc_insertion_point(field_get:network.TEquipmentChangerTable.rune_page)
  return _internal_rune_page();
}
inline void TEquipmentChangerTable::_internal_set_rune_page(uint32_t value) {
  
  _impl_.rune_page_ = value;
}
inline void TEquipmentChangerTable::set_rune_page(uint32_t value) {
  _internal_set_rune_page(value);
  // @@protoc_insertion_point(field_set:network.TEquipmentChangerTable.rune_page)
}

// -------------------------------------------------------------------

// TEquipmentPageInfo

// bytes page_name = 1;
inline void TEquipmentPageInfo::clear_page_name() {
  _impl_.page_name_.ClearToEmpty();
}
inline const std::string& TEquipmentPageInfo::page_name() const {
  // @@protoc_insertion_point(field_get:network.TEquipmentPageInfo.page_name)
  return _internal_page_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TEquipmentPageInfo::set_page_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TEquipmentPageInfo.page_name)
}
inline std::string* TEquipmentPageInfo::mutable_page_name() {
  std::string* _s = _internal_mutable_page_name();
  // @@protoc_insertion_point(field_mutable:network.TEquipmentPageInfo.page_name)
  return _s;
}
inline const std::string& TEquipmentPageInfo::_internal_page_name() const {
  return _impl_.page_name_.Get();
}
inline void TEquipmentPageInfo::_internal_set_page_name(const std::string& value) {
  
  _impl_.page_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TEquipmentPageInfo::_internal_mutable_page_name() {
  
  return _impl_.page_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TEquipmentPageInfo::release_page_name() {
  // @@protoc_insertion_point(field_release:network.TEquipmentPageInfo.page_name)
  return _impl_.page_name_.Release();
}
inline void TEquipmentPageInfo::set_allocated_page_name(std::string* page_name) {
  if (page_name != nullptr) {
    
  } else {
    
  }
  _impl_.page_name_.SetAllocated(page_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_name_.IsDefault()) {
    _impl_.page_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TEquipmentPageInfo.page_name)
}

// repeated sint32 item_cells = 2;
inline int TEquipmentPageInfo::_internal_item_cells_size() const {
  return _impl_.item_cells_.size();
}
inline int TEquipmentPageInfo::item_cells_size() const {
  return _internal_item_cells_size();
}
inline void TEquipmentPageInfo::clear_item_cells() {
  _impl_.item_cells_.Clear();
}
inline int32_t TEquipmentPageInfo::_internal_item_cells(int index) const {
  return _impl_.item_cells_.Get(index);
}
inline int32_t TEquipmentPageInfo::item_cells(int index) const {
  // @@protoc_insertion_point(field_get:network.TEquipmentPageInfo.item_cells)
  return _internal_item_cells(index);
}
inline void TEquipmentPageInfo::set_item_cells(int index, int32_t value) {
  _impl_.item_cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TEquipmentPageInfo.item_cells)
}
inline void TEquipmentPageInfo::_internal_add_item_cells(int32_t value) {
  _impl_.item_cells_.Add(value);
}
inline void TEquipmentPageInfo::add_item_cells(int32_t value) {
  _internal_add_item_cells(value);
  // @@protoc_insertion_point(field_add:network.TEquipmentPageInfo.item_cells)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TEquipmentPageInfo::_internal_item_cells() const {
  return _impl_.item_cells_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TEquipmentPageInfo::item_cells() const {
  // @@protoc_insertion_point(field_list:network.TEquipmentPageInfo.item_cells)
  return _internal_item_cells();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TEquipmentPageInfo::_internal_mutable_item_cells() {
  return &_impl_.item_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TEquipmentPageInfo::mutable_item_cells() {
  // @@protoc_insertion_point(field_mutable_list:network.TEquipmentPageInfo.item_cells)
  return _internal_mutable_item_cells();
}

// uint32 rune_page = 3;
inline void TEquipmentPageInfo::clear_rune_page() {
  _impl_.rune_page_ = 0u;
}
inline uint32_t TEquipmentPageInfo::_internal_rune_page() const {
  return _impl_.rune_page_;
}
inline uint32_t TEquipmentPageInfo::rune_page() const {
  // @@protoc_insertion_point(field_get:network.TEquipmentPageInfo.rune_page)
  return _internal_rune_page();
}
inline void TEquipmentPageInfo::_internal_set_rune_page(uint32_t value) {
  
  _impl_.rune_page_ = value;
}
inline void TEquipmentPageInfo::set_rune_page(uint32_t value) {
  _internal_set_rune_page(value);
  // @@protoc_insertion_point(field_set:network.TEquipmentPageInfo.rune_page)
}

// -------------------------------------------------------------------

// TCombatZoneRankingPlayer

// bytes name = 1;
inline void TCombatZoneRankingPlayer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TCombatZoneRankingPlayer::name() const {
  // @@protoc_insertion_point(field_get:network.TCombatZoneRankingPlayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TCombatZoneRankingPlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TCombatZoneRankingPlayer.name)
}
inline std::string* TCombatZoneRankingPlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TCombatZoneRankingPlayer.name)
  return _s;
}
inline const std::string& TCombatZoneRankingPlayer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TCombatZoneRankingPlayer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TCombatZoneRankingPlayer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TCombatZoneRankingPlayer::release_name() {
  // @@protoc_insertion_point(field_release:network.TCombatZoneRankingPlayer.name)
  return _impl_.name_.Release();
}
inline void TCombatZoneRankingPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TCombatZoneRankingPlayer.name)
}

// uint32 empire = 2;
inline void TCombatZoneRankingPlayer::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t TCombatZoneRankingPlayer::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t TCombatZoneRankingPlayer::empire() const {
  // @@protoc_insertion_point(field_get:network.TCombatZoneRankingPlayer.empire)
  return _internal_empire();
}
inline void TCombatZoneRankingPlayer::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void TCombatZoneRankingPlayer::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.TCombatZoneRankingPlayer.empire)
}

// uint32 points = 3;
inline void TCombatZoneRankingPlayer::clear_points() {
  _impl_.points_ = 0u;
}
inline uint32_t TCombatZoneRankingPlayer::_internal_points() const {
  return _impl_.points_;
}
inline uint32_t TCombatZoneRankingPlayer::points() const {
  // @@protoc_insertion_point(field_get:network.TCombatZoneRankingPlayer.points)
  return _internal_points();
}
inline void TCombatZoneRankingPlayer::_internal_set_points(uint32_t value) {
  
  _impl_.points_ = value;
}
inline void TCombatZoneRankingPlayer::set_points(uint32_t value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:network.TCombatZoneRankingPlayer.points)
}

// uint32 rank = 4;
inline void TCombatZoneRankingPlayer::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t TCombatZoneRankingPlayer::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t TCombatZoneRankingPlayer::rank() const {
  // @@protoc_insertion_point(field_get:network.TCombatZoneRankingPlayer.rank)
  return _internal_rank();
}
inline void TCombatZoneRankingPlayer::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void TCombatZoneRankingPlayer::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:network.TCombatZoneRankingPlayer.rank)
}

// -------------------------------------------------------------------

// TSimplePlayer

// uint32 id = 1;
inline void TSimplePlayer::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TSimplePlayer::id() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.id)
  return _internal_id();
}
inline void TSimplePlayer::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TSimplePlayer::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.id)
}

// bytes name = 2;
inline void TSimplePlayer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TSimplePlayer::name() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSimplePlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.name)
}
inline std::string* TSimplePlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TSimplePlayer.name)
  return _s;
}
inline const std::string& TSimplePlayer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TSimplePlayer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TSimplePlayer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TSimplePlayer::release_name() {
  // @@protoc_insertion_point(field_release:network.TSimplePlayer.name)
  return _impl_.name_.Release();
}
inline void TSimplePlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSimplePlayer.name)
}

// uint32 job = 3;
inline void TSimplePlayer::clear_job() {
  _impl_.job_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_job() const {
  return _impl_.job_;
}
inline uint32_t TSimplePlayer::job() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.job)
  return _internal_job();
}
inline void TSimplePlayer::_internal_set_job(uint32_t value) {
  
  _impl_.job_ = value;
}
inline void TSimplePlayer::set_job(uint32_t value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.job)
}

// uint32 level = 4;
inline void TSimplePlayer::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TSimplePlayer::level() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.level)
  return _internal_level();
}
inline void TSimplePlayer::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TSimplePlayer::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.level)
}

// uint32 play_minutes = 5;
inline void TSimplePlayer::clear_play_minutes() {
  _impl_.play_minutes_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_play_minutes() const {
  return _impl_.play_minutes_;
}
inline uint32_t TSimplePlayer::play_minutes() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.play_minutes)
  return _internal_play_minutes();
}
inline void TSimplePlayer::_internal_set_play_minutes(uint32_t value) {
  
  _impl_.play_minutes_ = value;
}
inline void TSimplePlayer::set_play_minutes(uint32_t value) {
  _internal_set_play_minutes(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.play_minutes)
}

// uint32 st = 6;
inline void TSimplePlayer::clear_st() {
  _impl_.st_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_st() const {
  return _impl_.st_;
}
inline uint32_t TSimplePlayer::st() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.st)
  return _internal_st();
}
inline void TSimplePlayer::_internal_set_st(uint32_t value) {
  
  _impl_.st_ = value;
}
inline void TSimplePlayer::set_st(uint32_t value) {
  _internal_set_st(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.st)
}

// uint32 ht = 7;
inline void TSimplePlayer::clear_ht() {
  _impl_.ht_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_ht() const {
  return _impl_.ht_;
}
inline uint32_t TSimplePlayer::ht() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.ht)
  return _internal_ht();
}
inline void TSimplePlayer::_internal_set_ht(uint32_t value) {
  
  _impl_.ht_ = value;
}
inline void TSimplePlayer::set_ht(uint32_t value) {
  _internal_set_ht(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.ht)
}

// uint32 dx = 8;
inline void TSimplePlayer::clear_dx() {
  _impl_.dx_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_dx() const {
  return _impl_.dx_;
}
inline uint32_t TSimplePlayer::dx() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.dx)
  return _internal_dx();
}
inline void TSimplePlayer::_internal_set_dx(uint32_t value) {
  
  _impl_.dx_ = value;
}
inline void TSimplePlayer::set_dx(uint32_t value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.dx)
}

// uint32 iq = 9;
inline void TSimplePlayer::clear_iq() {
  _impl_.iq_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_iq() const {
  return _impl_.iq_;
}
inline uint32_t TSimplePlayer::iq() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.iq)
  return _internal_iq();
}
inline void TSimplePlayer::_internal_set_iq(uint32_t value) {
  
  _impl_.iq_ = value;
}
inline void TSimplePlayer::set_iq(uint32_t value) {
  _internal_set_iq(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.iq)
}

// uint32 main_part = 10;
inline void TSimplePlayer::clear_main_part() {
  _impl_.main_part_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_main_part() const {
  return _impl_.main_part_;
}
inline uint32_t TSimplePlayer::main_part() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.main_part)
  return _internal_main_part();
}
inline void TSimplePlayer::_internal_set_main_part(uint32_t value) {
  
  _impl_.main_part_ = value;
}
inline void TSimplePlayer::set_main_part(uint32_t value) {
  _internal_set_main_part(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.main_part)
}

// uint32 hair_part = 11;
inline void TSimplePlayer::clear_hair_part() {
  _impl_.hair_part_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_hair_part() const {
  return _impl_.hair_part_;
}
inline uint32_t TSimplePlayer::hair_part() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.hair_part)
  return _internal_hair_part();
}
inline void TSimplePlayer::_internal_set_hair_part(uint32_t value) {
  
  _impl_.hair_part_ = value;
}
inline void TSimplePlayer::set_hair_part(uint32_t value) {
  _internal_set_hair_part(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.hair_part)
}

// uint32 acce_part = 12;
inline void TSimplePlayer::clear_acce_part() {
  _impl_.acce_part_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_acce_part() const {
  return _impl_.acce_part_;
}
inline uint32_t TSimplePlayer::acce_part() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.acce_part)
  return _internal_acce_part();
}
inline void TSimplePlayer::_internal_set_acce_part(uint32_t value) {
  
  _impl_.acce_part_ = value;
}
inline void TSimplePlayer::set_acce_part(uint32_t value) {
  _internal_set_acce_part(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.acce_part)
}

// bool change_name = 13;
inline void TSimplePlayer::clear_change_name() {
  _impl_.change_name_ = false;
}
inline bool TSimplePlayer::_internal_change_name() const {
  return _impl_.change_name_;
}
inline bool TSimplePlayer::change_name() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.change_name)
  return _internal_change_name();
}
inline void TSimplePlayer::_internal_set_change_name(bool value) {
  
  _impl_.change_name_ = value;
}
inline void TSimplePlayer::set_change_name(bool value) {
  _internal_set_change_name(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.change_name)
}

// int32 x = 14;
inline void TSimplePlayer::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t TSimplePlayer::_internal_x() const {
  return _impl_.x_;
}
inline int32_t TSimplePlayer::x() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.x)
  return _internal_x();
}
inline void TSimplePlayer::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void TSimplePlayer::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.x)
}

// int32 y = 15;
inline void TSimplePlayer::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t TSimplePlayer::_internal_y() const {
  return _impl_.y_;
}
inline int32_t TSimplePlayer::y() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.y)
  return _internal_y();
}
inline void TSimplePlayer::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void TSimplePlayer::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.y)
}

// int32 addr = 16;
inline void TSimplePlayer::clear_addr() {
  _impl_.addr_ = 0;
}
inline int32_t TSimplePlayer::_internal_addr() const {
  return _impl_.addr_;
}
inline int32_t TSimplePlayer::addr() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.addr)
  return _internal_addr();
}
inline void TSimplePlayer::_internal_set_addr(int32_t value) {
  
  _impl_.addr_ = value;
}
inline void TSimplePlayer::set_addr(int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.addr)
}

// uint32 port = 17;
inline void TSimplePlayer::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t TSimplePlayer::port() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.port)
  return _internal_port();
}
inline void TSimplePlayer::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void TSimplePlayer::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.port)
}

// uint32 skill_group = 18;
inline void TSimplePlayer::clear_skill_group() {
  _impl_.skill_group_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_skill_group() const {
  return _impl_.skill_group_;
}
inline uint32_t TSimplePlayer::skill_group() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.skill_group)
  return _internal_skill_group();
}
inline void TSimplePlayer::_internal_set_skill_group(uint32_t value) {
  
  _impl_.skill_group_ = value;
}
inline void TSimplePlayer::set_skill_group(uint32_t value) {
  _internal_set_skill_group(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.skill_group)
}

// uint32 guild_id = 19;
inline void TSimplePlayer::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t TSimplePlayer::guild_id() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.guild_id)
  return _internal_guild_id();
}
inline void TSimplePlayer::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void TSimplePlayer::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.guild_id)
}

// bytes guild_name = 20;
inline void TSimplePlayer::clear_guild_name() {
  _impl_.guild_name_.ClearToEmpty();
}
inline const std::string& TSimplePlayer::guild_name() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.guild_name)
  return _internal_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSimplePlayer::set_guild_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guild_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.guild_name)
}
inline std::string* TSimplePlayer::mutable_guild_name() {
  std::string* _s = _internal_mutable_guild_name();
  // @@protoc_insertion_point(field_mutable:network.TSimplePlayer.guild_name)
  return _s;
}
inline const std::string& TSimplePlayer::_internal_guild_name() const {
  return _impl_.guild_name_.Get();
}
inline void TSimplePlayer::_internal_set_guild_name(const std::string& value) {
  
  _impl_.guild_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TSimplePlayer::_internal_mutable_guild_name() {
  
  return _impl_.guild_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TSimplePlayer::release_guild_name() {
  // @@protoc_insertion_point(field_release:network.TSimplePlayer.guild_name)
  return _impl_.guild_name_.Release();
}
inline void TSimplePlayer::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  _impl_.guild_name_.SetAllocated(guild_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_name_.IsDefault()) {
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TSimplePlayer.guild_name)
}

// uint32 hair_base_part = 21;
inline void TSimplePlayer::clear_hair_base_part() {
  _impl_.hair_base_part_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_hair_base_part() const {
  return _impl_.hair_base_part_;
}
inline uint32_t TSimplePlayer::hair_base_part() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.hair_base_part)
  return _internal_hair_base_part();
}
inline void TSimplePlayer::_internal_set_hair_base_part(uint32_t value) {
  
  _impl_.hair_base_part_ = value;
}
inline void TSimplePlayer::set_hair_base_part(uint32_t value) {
  _internal_set_hair_base_part(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.hair_base_part)
}

// uint32 last_playtime = 22;
inline void TSimplePlayer::clear_last_playtime() {
  _impl_.last_playtime_ = 0u;
}
inline uint32_t TSimplePlayer::_internal_last_playtime() const {
  return _impl_.last_playtime_;
}
inline uint32_t TSimplePlayer::last_playtime() const {
  // @@protoc_insertion_point(field_get:network.TSimplePlayer.last_playtime)
  return _internal_last_playtime();
}
inline void TSimplePlayer::_internal_set_last_playtime(uint32_t value) {
  
  _impl_.last_playtime_ = value;
}
inline void TSimplePlayer::set_last_playtime(uint32_t value) {
  _internal_set_last_playtime(value);
  // @@protoc_insertion_point(field_set:network.TSimplePlayer.last_playtime)
}

// -------------------------------------------------------------------

// TAccountTable

// uint32 id = 1;
inline void TAccountTable::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TAccountTable::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TAccountTable::id() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.id)
  return _internal_id();
}
inline void TAccountTable::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TAccountTable::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.id)
}

// bytes login = 2;
inline void TAccountTable::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& TAccountTable::login() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAccountTable::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAccountTable.login)
}
inline std::string* TAccountTable::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.login)
  return _s;
}
inline const std::string& TAccountTable::_internal_login() const {
  return _impl_.login_.Get();
}
inline void TAccountTable::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* TAccountTable::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* TAccountTable::release_login() {
  // @@protoc_insertion_point(field_release:network.TAccountTable.login)
  return _impl_.login_.Release();
}
inline void TAccountTable::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAccountTable.login)
}

// bytes passwd = 3;
inline void TAccountTable::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& TAccountTable::passwd() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAccountTable::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.passwd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAccountTable.passwd)
}
inline std::string* TAccountTable::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.passwd)
  return _s;
}
inline const std::string& TAccountTable::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void TAccountTable::_internal_set_passwd(const std::string& value) {
  
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* TAccountTable::_internal_mutable_passwd() {
  
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* TAccountTable::release_passwd() {
  // @@protoc_insertion_point(field_release:network.TAccountTable.passwd)
  return _impl_.passwd_.Release();
}
inline void TAccountTable::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAccountTable.passwd)
}

// bytes hwid = 4;
inline void TAccountTable::clear_hwid() {
  _impl_.hwid_.ClearToEmpty();
}
inline const std::string& TAccountTable::hwid() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.hwid)
  return _internal_hwid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAccountTable::set_hwid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hwid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAccountTable.hwid)
}
inline std::string* TAccountTable::mutable_hwid() {
  std::string* _s = _internal_mutable_hwid();
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.hwid)
  return _s;
}
inline const std::string& TAccountTable::_internal_hwid() const {
  return _impl_.hwid_.Get();
}
inline void TAccountTable::_internal_set_hwid(const std::string& value) {
  
  _impl_.hwid_.Set(value, GetArenaForAllocation());
}
inline std::string* TAccountTable::_internal_mutable_hwid() {
  
  return _impl_.hwid_.Mutable(GetArenaForAllocation());
}
inline std::string* TAccountTable::release_hwid() {
  // @@protoc_insertion_point(field_release:network.TAccountTable.hwid)
  return _impl_.hwid_.Release();
}
inline void TAccountTable::set_allocated_hwid(std::string* hwid) {
  if (hwid != nullptr) {
    
  } else {
    
  }
  _impl_.hwid_.SetAllocated(hwid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hwid_.IsDefault()) {
    _impl_.hwid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAccountTable.hwid)
}

// bytes social_id = 5;
inline void TAccountTable::clear_social_id() {
  _impl_.social_id_.ClearToEmpty();
}
inline const std::string& TAccountTable::social_id() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.social_id)
  return _internal_social_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAccountTable::set_social_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.social_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAccountTable.social_id)
}
inline std::string* TAccountTable::mutable_social_id() {
  std::string* _s = _internal_mutable_social_id();
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.social_id)
  return _s;
}
inline const std::string& TAccountTable::_internal_social_id() const {
  return _impl_.social_id_.Get();
}
inline void TAccountTable::_internal_set_social_id(const std::string& value) {
  
  _impl_.social_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TAccountTable::_internal_mutable_social_id() {
  
  return _impl_.social_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TAccountTable::release_social_id() {
  // @@protoc_insertion_point(field_release:network.TAccountTable.social_id)
  return _impl_.social_id_.Release();
}
inline void TAccountTable::set_allocated_social_id(std::string* social_id) {
  if (social_id != nullptr) {
    
  } else {
    
  }
  _impl_.social_id_.SetAllocated(social_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.social_id_.IsDefault()) {
    _impl_.social_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAccountTable.social_id)
}

// bytes status = 6;
inline void TAccountTable::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& TAccountTable::status() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAccountTable::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAccountTable.status)
}
inline std::string* TAccountTable::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.status)
  return _s;
}
inline const std::string& TAccountTable::_internal_status() const {
  return _impl_.status_.Get();
}
inline void TAccountTable::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* TAccountTable::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* TAccountTable::release_status() {
  // @@protoc_insertion_point(field_release:network.TAccountTable.status)
  return _impl_.status_.Release();
}
inline void TAccountTable::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAccountTable.status)
}

// uint32 empire = 7;
inline void TAccountTable::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t TAccountTable::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t TAccountTable::empire() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.empire)
  return _internal_empire();
}
inline void TAccountTable::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void TAccountTable::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.empire)
}

// repeated .network.TSimplePlayer players = 8;
inline int TAccountTable::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int TAccountTable::players_size() const {
  return _internal_players_size();
}
inline void TAccountTable::clear_players() {
  _impl_.players_.Clear();
}
inline ::network::TSimplePlayer* TAccountTable::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >*
TAccountTable::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:network.TAccountTable.players)
  return &_impl_.players_;
}
inline const ::network::TSimplePlayer& TAccountTable::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::network::TSimplePlayer& TAccountTable::players(int index) const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.players)
  return _internal_players(index);
}
inline ::network::TSimplePlayer* TAccountTable::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::network::TSimplePlayer* TAccountTable::add_players() {
  ::network::TSimplePlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:network.TAccountTable.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >&
TAccountTable::players() const {
  // @@protoc_insertion_point(field_list:network.TAccountTable.players)
  return _impl_.players_;
}

// uint32 tradeblock = 9;
inline void TAccountTable::clear_tradeblock() {
  _impl_.tradeblock_ = 0u;
}
inline uint32_t TAccountTable::_internal_tradeblock() const {
  return _impl_.tradeblock_;
}
inline uint32_t TAccountTable::tradeblock() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.tradeblock)
  return _internal_tradeblock();
}
inline void TAccountTable::_internal_set_tradeblock(uint32_t value) {
  
  _impl_.tradeblock_ = value;
}
inline void TAccountTable::set_tradeblock(uint32_t value) {
  _internal_set_tradeblock(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.tradeblock)
}

// uint32 hwid2ban = 10;
inline void TAccountTable::clear_hwid2ban() {
  _impl_.hwid2ban_ = 0u;
}
inline uint32_t TAccountTable::_internal_hwid2ban() const {
  return _impl_.hwid2ban_;
}
inline uint32_t TAccountTable::hwid2ban() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.hwid2ban)
  return _internal_hwid2ban();
}
inline void TAccountTable::_internal_set_hwid2ban(uint32_t value) {
  
  _impl_.hwid2ban_ = value;
}
inline void TAccountTable::set_hwid2ban(uint32_t value) {
  _internal_set_hwid2ban(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.hwid2ban)
}

// bytes hwid2 = 11;
inline void TAccountTable::clear_hwid2() {
  _impl_.hwid2_.ClearToEmpty();
}
inline const std::string& TAccountTable::hwid2() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.hwid2)
  return _internal_hwid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TAccountTable::set_hwid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hwid2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TAccountTable.hwid2)
}
inline std::string* TAccountTable::mutable_hwid2() {
  std::string* _s = _internal_mutable_hwid2();
  // @@protoc_insertion_point(field_mutable:network.TAccountTable.hwid2)
  return _s;
}
inline const std::string& TAccountTable::_internal_hwid2() const {
  return _impl_.hwid2_.Get();
}
inline void TAccountTable::_internal_set_hwid2(const std::string& value) {
  
  _impl_.hwid2_.Set(value, GetArenaForAllocation());
}
inline std::string* TAccountTable::_internal_mutable_hwid2() {
  
  return _impl_.hwid2_.Mutable(GetArenaForAllocation());
}
inline std::string* TAccountTable::release_hwid2() {
  // @@protoc_insertion_point(field_release:network.TAccountTable.hwid2)
  return _impl_.hwid2_.Release();
}
inline void TAccountTable::set_allocated_hwid2(std::string* hwid2) {
  if (hwid2 != nullptr) {
    
  } else {
    
  }
  _impl_.hwid2_.SetAllocated(hwid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hwid2_.IsDefault()) {
    _impl_.hwid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TAccountTable.hwid2)
}

// bool coins = 12;
inline void TAccountTable::clear_coins() {
  _impl_.coins_ = false;
}
inline bool TAccountTable::_internal_coins() const {
  return _impl_.coins_;
}
inline bool TAccountTable::coins() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.coins)
  return _internal_coins();
}
inline void TAccountTable::_internal_set_coins(bool value) {
  
  _impl_.coins_ = value;
}
inline void TAccountTable::set_coins(bool value) {
  _internal_set_coins(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.coins)
}

// uint32 language = 13;
inline void TAccountTable::clear_language() {
  _impl_.language_ = 0u;
}
inline uint32_t TAccountTable::_internal_language() const {
  return _impl_.language_;
}
inline uint32_t TAccountTable::language() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.language)
  return _internal_language();
}
inline void TAccountTable::_internal_set_language(uint32_t value) {
  
  _impl_.language_ = value;
}
inline void TAccountTable::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.language)
}

// bool temp_login = 14;
inline void TAccountTable::clear_temp_login() {
  _impl_.temp_login_ = false;
}
inline bool TAccountTable::_internal_temp_login() const {
  return _impl_.temp_login_;
}
inline bool TAccountTable::temp_login() const {
  // @@protoc_insertion_point(field_get:network.TAccountTable.temp_login)
  return _internal_temp_login();
}
inline void TAccountTable::_internal_set_temp_login(bool value) {
  
  _impl_.temp_login_ = value;
}
inline void TAccountTable::set_temp_login(bool value) {
  _internal_set_temp_login(value);
  // @@protoc_insertion_point(field_set:network.TAccountTable.temp_login)
}

// -------------------------------------------------------------------

// TItemPriceInfo

// uint32 vnum = 1;
inline void TItemPriceInfo::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TItemPriceInfo::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TItemPriceInfo::vnum() const {
  // @@protoc_insertion_point(field_get:network.TItemPriceInfo.vnum)
  return _internal_vnum();
}
inline void TItemPriceInfo::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TItemPriceInfo::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TItemPriceInfo.vnum)
}

// int64 price = 2;
inline void TItemPriceInfo::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t TItemPriceInfo::_internal_price() const {
  return _impl_.price_;
}
inline int64_t TItemPriceInfo::price() const {
  // @@protoc_insertion_point(field_get:network.TItemPriceInfo.price)
  return _internal_price();
}
inline void TItemPriceInfo::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void TItemPriceInfo::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TItemPriceInfo.price)
}

// -------------------------------------------------------------------

// TChannelStatus

// uint32 port = 1;
inline void TChannelStatus::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t TChannelStatus::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t TChannelStatus::port() const {
  // @@protoc_insertion_point(field_get:network.TChannelStatus.port)
  return _internal_port();
}
inline void TChannelStatus::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void TChannelStatus::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.TChannelStatus.port)
}

// uint32 status = 2;
inline void TChannelStatus::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t TChannelStatus::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t TChannelStatus::status() const {
  // @@protoc_insertion_point(field_get:network.TChannelStatus.status)
  return _internal_status();
}
inline void TChannelStatus::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void TChannelStatus::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:network.TChannelStatus.status)
}

// -------------------------------------------------------------------

// TPacketLoginOnSetup

// uint32 id = 1;
inline void TPacketLoginOnSetup::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TPacketLoginOnSetup::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TPacketLoginOnSetup::id() const {
  // @@protoc_insertion_point(field_get:network.TPacketLoginOnSetup.id)
  return _internal_id();
}
inline void TPacketLoginOnSetup::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TPacketLoginOnSetup::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TPacketLoginOnSetup.id)
}

// bytes login = 2;
inline void TPacketLoginOnSetup::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& TPacketLoginOnSetup::login() const {
  // @@protoc_insertion_point(field_get:network.TPacketLoginOnSetup.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPacketLoginOnSetup::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TPacketLoginOnSetup.login)
}
inline std::string* TPacketLoginOnSetup::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.TPacketLoginOnSetup.login)
  return _s;
}
inline const std::string& TPacketLoginOnSetup::_internal_login() const {
  return _impl_.login_.Get();
}
inline void TPacketLoginOnSetup::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* TPacketLoginOnSetup::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* TPacketLoginOnSetup::release_login() {
  // @@protoc_insertion_point(field_release:network.TPacketLoginOnSetup.login)
  return _impl_.login_.Release();
}
inline void TPacketLoginOnSetup::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TPacketLoginOnSetup.login)
}

// bytes social_id = 3;
inline void TPacketLoginOnSetup::clear_social_id() {
  _impl_.social_id_.ClearToEmpty();
}
inline const std::string& TPacketLoginOnSetup::social_id() const {
  // @@protoc_insertion_point(field_get:network.TPacketLoginOnSetup.social_id)
  return _internal_social_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPacketLoginOnSetup::set_social_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.social_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TPacketLoginOnSetup.social_id)
}
inline std::string* TPacketLoginOnSetup::mutable_social_id() {
  std::string* _s = _internal_mutable_social_id();
  // @@protoc_insertion_point(field_mutable:network.TPacketLoginOnSetup.social_id)
  return _s;
}
inline const std::string& TPacketLoginOnSetup::_internal_social_id() const {
  return _impl_.social_id_.Get();
}
inline void TPacketLoginOnSetup::_internal_set_social_id(const std::string& value) {
  
  _impl_.social_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TPacketLoginOnSetup::_internal_mutable_social_id() {
  
  return _impl_.social_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TPacketLoginOnSetup::release_social_id() {
  // @@protoc_insertion_point(field_release:network.TPacketLoginOnSetup.social_id)
  return _impl_.social_id_.Release();
}
inline void TPacketLoginOnSetup::set_allocated_social_id(std::string* social_id) {
  if (social_id != nullptr) {
    
  } else {
    
  }
  _impl_.social_id_.SetAllocated(social_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.social_id_.IsDefault()) {
    _impl_.social_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TPacketLoginOnSetup.social_id)
}

// bytes host = 4;
inline void TPacketLoginOnSetup::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& TPacketLoginOnSetup::host() const {
  // @@protoc_insertion_point(field_get:network.TPacketLoginOnSetup.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPacketLoginOnSetup::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TPacketLoginOnSetup.host)
}
inline std::string* TPacketLoginOnSetup::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:network.TPacketLoginOnSetup.host)
  return _s;
}
inline const std::string& TPacketLoginOnSetup::_internal_host() const {
  return _impl_.host_.Get();
}
inline void TPacketLoginOnSetup::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* TPacketLoginOnSetup::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* TPacketLoginOnSetup::release_host() {
  // @@protoc_insertion_point(field_release:network.TPacketLoginOnSetup.host)
  return _impl_.host_.Release();
}
inline void TPacketLoginOnSetup::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TPacketLoginOnSetup.host)
}

// uint32 login_key = 5;
inline void TPacketLoginOnSetup::clear_login_key() {
  _impl_.login_key_ = 0u;
}
inline uint32_t TPacketLoginOnSetup::_internal_login_key() const {
  return _impl_.login_key_;
}
inline uint32_t TPacketLoginOnSetup::login_key() const {
  // @@protoc_insertion_point(field_get:network.TPacketLoginOnSetup.login_key)
  return _internal_login_key();
}
inline void TPacketLoginOnSetup::_internal_set_login_key(uint32_t value) {
  
  _impl_.login_key_ = value;
}
inline void TPacketLoginOnSetup::set_login_key(uint32_t value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:network.TPacketLoginOnSetup.login_key)
}

// repeated uint32 client_keys = 6;
inline int TPacketLoginOnSetup::_internal_client_keys_size() const {
  return _impl_.client_keys_.size();
}
inline int TPacketLoginOnSetup::client_keys_size() const {
  return _internal_client_keys_size();
}
inline void TPacketLoginOnSetup::clear_client_keys() {
  _impl_.client_keys_.Clear();
}
inline uint32_t TPacketLoginOnSetup::_internal_client_keys(int index) const {
  return _impl_.client_keys_.Get(index);
}
inline uint32_t TPacketLoginOnSetup::client_keys(int index) const {
  // @@protoc_insertion_point(field_get:network.TPacketLoginOnSetup.client_keys)
  return _internal_client_keys(index);
}
inline void TPacketLoginOnSetup::set_client_keys(int index, uint32_t value) {
  _impl_.client_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TPacketLoginOnSetup.client_keys)
}
inline void TPacketLoginOnSetup::_internal_add_client_keys(uint32_t value) {
  _impl_.client_keys_.Add(value);
}
inline void TPacketLoginOnSetup::add_client_keys(uint32_t value) {
  _internal_add_client_keys(value);
  // @@protoc_insertion_point(field_add:network.TPacketLoginOnSetup.client_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPacketLoginOnSetup::_internal_client_keys() const {
  return _impl_.client_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TPacketLoginOnSetup::client_keys() const {
  // @@protoc_insertion_point(field_list:network.TPacketLoginOnSetup.client_keys)
  return _internal_client_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPacketLoginOnSetup::_internal_mutable_client_keys() {
  return &_impl_.client_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TPacketLoginOnSetup::mutable_client_keys() {
  // @@protoc_insertion_point(field_mutable_list:network.TPacketLoginOnSetup.client_keys)
  return _internal_mutable_client_keys();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
